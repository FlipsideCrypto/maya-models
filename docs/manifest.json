{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.8.0", "generated_at": "2025-03-06T16:33:19.713640Z", "invocation_id": "cd0f825b-07fa-48d6-9db2-be65d8042e7a", "env": {}, "project_name": "maya_models", "project_id": "4aa1a3ea6e0bc03f46f9406e197559d7", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake"}, "nodes": {"model.maya_models.bronze__gas_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__gas_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__gas_events.sql", "original_file_path": "models/bronze/bronze__gas_events.sql", "unique_id": "model.maya_models.bronze__gas_events", "fqn": ["maya_models", "bronze", "bronze__gas_events"], "alias": "gas_events", "checksum": {"name": "sha256", "checksum": "ec86117dfe032815d2158dbc86058665997ae5692e20655b04e65f711999b2d7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.090283, "relation_name": "MAYA.bronze.gas_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  asset,\n  asset_e8,\n  cacao_e8,\n  tx_count,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_gas_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_gas_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__set_node_mimir_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__set_node_mimir_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__set_node_mimir_events.sql", "original_file_path": "models/bronze/bronze__set_node_mimir_events.sql", "unique_id": "model.maya_models.bronze__set_node_mimir_events", "fqn": ["maya_models", "bronze", "bronze__set_node_mimir_events"], "alias": "set_node_mimir_events", "checksum": {"name": "sha256", "checksum": "a1df413e3d5b08f57c88609526b7059b992e79ab1746d79c2ad3df9e27192c8d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.099618, "relation_name": "MAYA.bronze.set_node_mimir_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  address,\n  key,\n  VALUE,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_set_node_mimir_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_set_node_mimir_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_set_node_mimir_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__inactive_vault_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__inactive_vault_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__inactive_vault_events.sql", "original_file_path": "models/bronze/bronze__inactive_vault_events.sql", "unique_id": "model.maya_models.bronze__inactive_vault_events", "fqn": ["maya_models", "bronze", "bronze__inactive_vault_events"], "alias": "inactive_vault_events", "checksum": {"name": "sha256", "checksum": "a865d38427a85c8c672d763f2cca7dd6935dcb0cf99b65bd84262db4c2225fd9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.101158, "relation_name": "MAYA.bronze.inactive_vault_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  add_asgard_addr,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_inactive_vault_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_inactive_vault_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_inactive_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__failed_deposit_messages": {"database": "MAYA", "schema": "bronze", "name": "bronze__failed_deposit_messages", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__failed_deposit_messages.sql", "original_file_path": "models/bronze/bronze__failed_deposit_messages.sql", "unique_id": "model.maya_models.bronze__failed_deposit_messages", "fqn": ["maya_models", "bronze", "bronze__failed_deposit_messages"], "alias": "failed_deposit_messages", "checksum": {"name": "sha256", "checksum": "dd735b32e4832d501e252e89b4ff0fba09ee40a1b90a3441e12bb497c7560b8c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.10248, "relation_name": "MAYA.bronze.failed_deposit_messages", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx_id,\n  code,\n  memo,\n  asset,\n  amount_e8,\n  from_addr,\n  reason,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_failed_deposit_messages'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_failed_deposit_messages"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__new_node_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__new_node_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__new_node_events.sql", "original_file_path": "models/bronze/bronze__new_node_events.sql", "unique_id": "model.maya_models.bronze__new_node_events", "fqn": ["maya_models", "bronze", "bronze__new_node_events"], "alias": "new_node_events", "checksum": {"name": "sha256", "checksum": "4ad0985f815410066a24f20f8a823ab68cc4c681f3354351f69d3a78f11b124f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.103683, "relation_name": "MAYA.bronze.new_node_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_new_node_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_new_node_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_new_node_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__send_messages": {"database": "MAYA", "schema": "bronze", "name": "bronze__send_messages", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__send_messages.sql", "original_file_path": "models/bronze/bronze__send_messages.sql", "unique_id": "model.maya_models.bronze__send_messages", "fqn": ["maya_models", "bronze", "bronze__send_messages"], "alias": "send_messages", "checksum": {"name": "sha256", "checksum": "bebdd27df716612b644994adaba7252b8dbc32cfc2d310fc0e0c4ba28fb0463a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.104846, "relation_name": "MAYA.bronze.send_messages", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  amount_e8,\n  asset,\n  from_addr,\n  to_addr,\n  memo,\n  tx_id,\n  raw_log,\n  code,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_send_messages'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_send_messages"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_send_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__rewards_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__rewards_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__rewards_events.sql", "original_file_path": "models/bronze/bronze__rewards_events.sql", "unique_id": "model.maya_models.bronze__rewards_events", "fqn": ["maya_models", "bronze", "bronze__rewards_events"], "alias": "rewards_events", "checksum": {"name": "sha256", "checksum": "658945e425ada4fa778b87d6143fc8e738e3dc854a8bc44f76a6eceedb9b4359"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.106663, "relation_name": "MAYA.bronze.rewards_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  bond_e8,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_rewards_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_rewards_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_rewards_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__bond_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__bond_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__bond_events.sql", "original_file_path": "models/bronze/bronze__bond_events.sql", "unique_id": "model.maya_models.bronze__bond_events", "fqn": ["maya_models", "bronze", "bronze__bond_events"], "alias": "bond_events", "checksum": {"name": "sha256", "checksum": "b9afc46256f2fe000d8e5c8e70efc67bc3195a3c57282818a7163825b2a7e272"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.107929, "relation_name": "MAYA.bronze.bond_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  asset,\n  asset_e8,\n  memo,\n  bond_type,\n  e8,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_bond_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_bond_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__pending_liquidity_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__pending_liquidity_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__pending_liquidity_events.sql", "original_file_path": "models/bronze/bronze__pending_liquidity_events.sql", "unique_id": "model.maya_models.bronze__pending_liquidity_events", "fqn": ["maya_models", "bronze", "bronze__pending_liquidity_events"], "alias": "pending_liquidity_events", "checksum": {"name": "sha256", "checksum": "2d61f6a6b0423f2507ea54f45f18db73e826cb8475519b785aef640fbe5fb5cd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.10917, "relation_name": "MAYA.bronze.pending_liquidity_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool,\n  asset_tx,\n  asset_chain,\n  asset_addr,\n  asset_e8,\n  cacao_tx,\n  cacao_addr,\n  cacao_e8,\n  pending_type,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_pending_liquidity_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_pending_liquidity_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_pending_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__slash_liquidity_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__slash_liquidity_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__slash_liquidity_events.sql", "original_file_path": "models/bronze/bronze__slash_liquidity_events.sql", "unique_id": "model.maya_models.bronze__slash_liquidity_events", "fqn": ["maya_models", "bronze", "bronze__slash_liquidity_events"], "alias": "slash_liquidity_events", "checksum": {"name": "sha256", "checksum": "43a7ef9c2f8e25321588d9a9ae247467823651f02d48f50c265fb376bee90790"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.110225, "relation_name": "MAYA.bronze.slash_liquidity_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  bond_address,\n  lp_address,\n  asset,\n  lp_units,\n  asset_e8_loss,\n  cacao_e10_loss,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_slash_liquidity_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_slash_liquidity_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_slash_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__swap_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__swap_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__swap_events.sql", "original_file_path": "models/bronze/bronze__swap_events.sql", "unique_id": "model.maya_models.bronze__swap_events", "fqn": ["maya_models", "bronze", "bronze__swap_events"], "alias": "swap_events", "checksum": {"name": "sha256", "checksum": "86b426e6bec574ce42636f234f66a570e1a702e369210e5d4d91eeb30d6104d7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.1114209, "relation_name": "MAYA.bronze.swap_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  from_asset,\n  from_e8,\n  to_asset,\n  to_e8,\n  memo,\n  pool,\n  to_e8_min,\n  swap_slip_bp,\n  liq_fee_e8,\n  liq_fee_in_cacao_e8,\n  _DIRECTION,\n  _STREAMING,\n  streaming_count,\n  streaming_quantity,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_swap_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_swap_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__streamling_swap_details_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__streamling_swap_details_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__streamling_swap_details_events.sql", "original_file_path": "models/bronze/bronze__streamling_swap_details_events.sql", "unique_id": "model.maya_models.bronze__streamling_swap_details_events", "fqn": ["maya_models", "bronze", "bronze__streamling_swap_details_events"], "alias": "streamling_swap_details_events", "checksum": {"name": "sha256", "checksum": "9c119bb96e5de51963608734515c4d8d07c99c67ae1c1810b4afba5113ded13b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.1127381, "relation_name": "MAYA.bronze.streamling_swap_details_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx_id,\n  INTERVAL,\n  quantity,\n  COUNT,\n  last_height,\n  deposit_asset,\n  deposit_e8,\n  in_asset,\n  in_e8,\n  out_asset,\n  out_e8,\n  failed_swaps,\n  failed_swap_reasons,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_streaming_swap_details_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_streaming_swap_details_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_streaming_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__stake_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__stake_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__stake_events.sql", "original_file_path": "models/bronze/bronze__stake_events.sql", "unique_id": "model.maya_models.bronze__stake_events", "fqn": ["maya_models", "bronze", "bronze__stake_events"], "alias": "stake_events", "checksum": {"name": "sha256", "checksum": "59ba006c0c614cb20dd93fdab916f329cef2e2e2c63de0d5fb970498a6e316de"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.113853, "relation_name": "MAYA.bronze.stake_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool,\n  asset_tx,\n  asset_chain,\n  asset_addr,\n  asset_e8,\n  stake_units,\n  cacao_tx,\n  cacao_addr,\n  cacao_e8,\n  _ASSET_IN_CACAO_E8,\n  memo,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_stake_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_stake_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__block_pool_depths": {"database": "MAYA", "schema": "bronze", "name": "bronze__block_pool_depths", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__block_pool_depths.sql", "original_file_path": "models/bronze/bronze__block_pool_depths.sql", "unique_id": "model.maya_models.bronze__block_pool_depths", "fqn": ["maya_models", "bronze", "bronze__block_pool_depths"], "alias": "block_pool_depths", "checksum": {"name": "sha256", "checksum": "4a485cae15e67da5d21bad58b6418181d52d82bec61f89ac31f75c5ad577937e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.1149282, "relation_name": "MAYA.bronze.block_pool_depths", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool,\n  asset_e8,\n  cacao_e8,\n  synth_e8,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_block_pool_depths'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_block_pool_depths"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__set_version_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__set_version_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__set_version_events.sql", "original_file_path": "models/bronze/bronze__set_version_events.sql", "unique_id": "model.maya_models.bronze__set_version_events", "fqn": ["maya_models", "bronze", "bronze__set_version_events"], "alias": "set_version_events", "checksum": {"name": "sha256", "checksum": "dd2b4b5666582c8da75ca60e2771fe3b07ea5e13a68e341917b4ef267e5119eb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.11617, "relation_name": "MAYA.bronze.set_version_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr,\n  version,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_set_version_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_set_version_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_set_version_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__cacao_price": {"database": "MAYA", "schema": "bronze", "name": "bronze__cacao_price", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__cacao_price.sql", "original_file_path": "models/bronze/bronze__cacao_price.sql", "unique_id": "model.maya_models.bronze__cacao_price", "fqn": ["maya_models", "bronze", "bronze__cacao_price"], "alias": "cacao_price", "checksum": {"name": "sha256", "checksum": "a59c01abce606f0dd06979806a2282fc7274fe4114c5ac7b5ff53da260f8a83a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.1173902, "relation_name": "MAYA.bronze.cacao_price", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  cacao_price_e8,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_cacao_price'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_cacao_price"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_cacao_price"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__add_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__add_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__add_events.sql", "original_file_path": "models/bronze/bronze__add_events.sql", "unique_id": "model.maya_models.bronze__add_events", "fqn": ["maya_models", "bronze", "bronze__add_events"], "alias": "add_events", "checksum": {"name": "sha256", "checksum": "7beae34540f126f4e98c77f0fc0fc182626b3d39f64059b50d1219454e5a3fac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.118463, "relation_name": "MAYA.bronze.add_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  asset,\n  asset_e8,\n  memo,\n  cacao_e8,\n  pool,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_add_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_add_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__pool_balance_change_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__pool_balance_change_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__pool_balance_change_events.sql", "original_file_path": "models/bronze/bronze__pool_balance_change_events.sql", "unique_id": "model.maya_models.bronze__pool_balance_change_events", "fqn": ["maya_models", "bronze", "bronze__pool_balance_change_events"], "alias": "pool_balance_change_events", "checksum": {"name": "sha256", "checksum": "4e92b4644f7df659e1f3afb10d3e2ecf630b4bb8d12c24cc767de89499b7615a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.119621, "relation_name": "MAYA.bronze.pool_balance_change_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  asset,\n  cacao_amt,\n  cacao_add,\n  asset_amt,\n  asset_add,\n  reason,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_pool_balance_change_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_pool_balance_change_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_pool_balance_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__block_log": {"database": "MAYA", "schema": "bronze", "name": "bronze__block_log", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__block_log.sql", "original_file_path": "models/bronze/bronze__block_log.sql", "unique_id": "model.maya_models.bronze__block_log", "fqn": ["maya_models", "bronze", "bronze__block_log"], "alias": "block_log", "checksum": {"name": "sha256", "checksum": "d5e614eca6d48082d2126bc3254339bd39d2925ed83a3c13310b1b2b56faff53"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.120687, "relation_name": "MAYA.bronze.block_log", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  HASH,\n  height,\n  TIMESTAMP,\n  agg_state,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_block_log'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_block_log"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_block_log"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__transfer_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__transfer_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__transfer_events.sql", "original_file_path": "models/bronze/bronze__transfer_events.sql", "unique_id": "model.maya_models.bronze__transfer_events", "fqn": ["maya_models", "bronze", "bronze__transfer_events"], "alias": "transfer_events", "checksum": {"name": "sha256", "checksum": "b1d1424ce8dccb63510aa4f8266a209e891121f8fe340026f78e97146ad56292"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.1219149, "relation_name": "MAYA.bronze.transfer_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  from_addr,\n  to_addr,\n  asset,\n  amount_e8,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_transfer_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_transfer_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__set_mimir_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__set_mimir_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__set_mimir_events.sql", "original_file_path": "models/bronze/bronze__set_mimir_events.sql", "unique_id": "model.maya_models.bronze__set_mimir_events", "fqn": ["maya_models", "bronze", "bronze__set_mimir_events"], "alias": "set_mimir_events", "checksum": {"name": "sha256", "checksum": "dfa9719a031b001bfcc3d92bd70244beeb39626355617527ea7517e54f4cde1a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.123144, "relation_name": "MAYA.bronze.set_mimir_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  key,\n  VALUE,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_set_mimir_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_set_mimir_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_set_mimir_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__fee_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__fee_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__fee_events.sql", "original_file_path": "models/bronze/bronze__fee_events.sql", "unique_id": "model.maya_models.bronze__fee_events", "fqn": ["maya_models", "bronze", "bronze__fee_events"], "alias": "fee_events", "checksum": {"name": "sha256", "checksum": "1522feafd9d54a2726f50e718af820ef34165e1d80adb46317a9e9fc3414011b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.124368, "relation_name": "MAYA.bronze.fee_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  asset,\n  asset_e8,\n  pool_deduct,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_fee_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_fee_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__reserve_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__reserve_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__reserve_events.sql", "original_file_path": "models/bronze/bronze__reserve_events.sql", "unique_id": "model.maya_models.bronze__reserve_events", "fqn": ["maya_models", "bronze", "bronze__reserve_events"], "alias": "reserve_events", "checksum": {"name": "sha256", "checksum": "92ef8e4e9036a34e4d5c4ce45f1d3ffe8159a65e0818fe549aaeb2b6dffbb3b1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.1255949, "relation_name": "MAYA.bronze.reserve_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  asset,\n  asset_e8,\n  memo,\n  addr,\n  e8,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_reserve_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_reserve_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_reserve_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__refund_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__refund_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__refund_events.sql", "original_file_path": "models/bronze/bronze__refund_events.sql", "unique_id": "model.maya_models.bronze__refund_events", "fqn": ["maya_models", "bronze", "bronze__refund_events"], "alias": "refund_events", "checksum": {"name": "sha256", "checksum": "e23b0814726bf70515c5a362b5328ee3371939f7b0f37c041394e41df647c0d6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.1267, "relation_name": "MAYA.bronze.refund_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  asset,\n  asset_e8,\n  asset_2nd,\n  asset_2nd_e8,\n  memo,\n  code,\n  reason,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_refund_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_refund_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__active_vault_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__active_vault_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__active_vault_events.sql", "original_file_path": "models/bronze/bronze__active_vault_events.sql", "unique_id": "model.maya_models.bronze__active_vault_events", "fqn": ["maya_models", "bronze", "bronze__active_vault_events"], "alias": "active_vault_events", "checksum": {"name": "sha256", "checksum": "4af770fd1e83a5d041f3b94e45e3aae834723c8602e10c64153e24b6ad0e3f43"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.127775, "relation_name": "MAYA.bronze.active_vault_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  add_asgard_addr,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_active_vault_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_active_vault_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_active_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__validator_request_leave_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__validator_request_leave_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__validator_request_leave_events.sql", "original_file_path": "models/bronze/bronze__validator_request_leave_events.sql", "unique_id": "model.maya_models.bronze__validator_request_leave_events", "fqn": ["maya_models", "bronze", "bronze__validator_request_leave_events"], "alias": "validator_request_leave_events", "checksum": {"name": "sha256", "checksum": "7686e73c5cb8f80e3932b81075ec152a5da98d3f2c1fc7625587a10ac803a4ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.128809, "relation_name": "MAYA.bronze.validator_request_leave_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  from_addr,\n  node_addr,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_validator_request_leave_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_validator_request_leave_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__rewards_event_entries": {"database": "MAYA", "schema": "bronze", "name": "bronze__rewards_event_entries", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__rewards_event_entries.sql", "original_file_path": "models/bronze/bronze__rewards_event_entries.sql", "unique_id": "model.maya_models.bronze__rewards_event_entries", "fqn": ["maya_models", "bronze", "bronze__rewards_event_entries"], "alias": "rewards_event_entries", "checksum": {"name": "sha256", "checksum": "1f0aa9e6cd44757d8b8fe2f5650ae4c5c0854d40ac0a7e2cefd666354ca4c2c3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.1298728, "relation_name": "MAYA.bronze.rewards_event_entries", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool,\n  cacao_e8,\n  saver_e8,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_rewards_event_entries'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_rewards_event_entries"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_rewards_event_entries"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__update_node_account_status_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__update_node_account_status_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__update_node_account_status_events.sql", "original_file_path": "models/bronze/bronze__update_node_account_status_events.sql", "unique_id": "model.maya_models.bronze__update_node_account_status_events", "fqn": ["maya_models", "bronze", "bronze__update_node_account_status_events"], "alias": "update_node_account_status_events", "checksum": {"name": "sha256", "checksum": "3e8103bef4f3e77ce1c9b8b25bd26d65e61043b9d57b39149c035d9130a1db85"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.13115, "relation_name": "MAYA.bronze.update_node_account_status_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr,\n  former,\n  \"CURRENT\",\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_update_node_account_status_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_update_node_account_status_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_update_node_account_status_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__mayaname_change_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__mayaname_change_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__mayaname_change_events.sql", "original_file_path": "models/bronze/bronze__mayaname_change_events.sql", "unique_id": "model.maya_models.bronze__mayaname_change_events", "fqn": ["maya_models", "bronze", "bronze__mayaname_change_events"], "alias": "mayaname_change_events", "checksum": {"name": "sha256", "checksum": "fa70cc399b6f739e86e0495f0c5677fc56246b1da6bbb1583fee16ae6e766690"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.13238, "relation_name": "MAYA.bronze.mayaname_change_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  NAME,\n  chain,\n  address,\n  registration_fee_e8,\n  fund_amount_e8,\n  height,\n  expire,\n  owner,\n  tx_id,\n  memo,\n  sender,\n  preferred_asset,\n  affiliate_bps,\n  sub_affiliates,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_mayaname_change_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_mayaname_change_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_mayaname_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__slash_points_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__slash_points_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__slash_points_events.sql", "original_file_path": "models/bronze/bronze__slash_points_events.sql", "unique_id": "model.maya_models.bronze__slash_points_events", "fqn": ["maya_models", "bronze", "bronze__slash_points_events"], "alias": "slash_points_events", "checksum": {"name": "sha256", "checksum": "2e49a3b88d5848e958e1bc5a3fc7aa29f6cdf7dea4a7455924f7f3cc9f498639"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.133607, "relation_name": "MAYA.bronze.slash_points_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_address,\n  slash_points,\n  reason,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_slash_points_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_slash_points_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_slash_points_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__set_ip_address_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__set_ip_address_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__set_ip_address_events.sql", "original_file_path": "models/bronze/bronze__set_ip_address_events.sql", "unique_id": "model.maya_models.bronze__set_ip_address_events", "fqn": ["maya_models", "bronze", "bronze__set_ip_address_events"], "alias": "set_ip_address_events", "checksum": {"name": "sha256", "checksum": "7d1fbdc2bdf9980d3521233c3d3a77995ce5e555a989f2eab97d54653c41d672"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.1348941, "relation_name": "MAYA.bronze.set_ip_address_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr,\n  ip_addr,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_set_ip_address_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_set_ip_address_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_set_ip_address_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__outbound_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__outbound_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__outbound_events.sql", "original_file_path": "models/bronze/bronze__outbound_events.sql", "unique_id": "model.maya_models.bronze__outbound_events", "fqn": ["maya_models", "bronze", "bronze__outbound_events"], "alias": "outbound_events", "checksum": {"name": "sha256", "checksum": "0cdaafa0f470d838d87bc2767dc06fc2b613fb9acc05200abcbbed904d569917"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.1360111, "relation_name": "MAYA.bronze.outbound_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  asset,\n  asset_e8,\n  memo,\n  in_tx,\n  internal,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_outbound_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_outbound_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__slash_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__slash_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__slash_events.sql", "original_file_path": "models/bronze/bronze__slash_events.sql", "unique_id": "model.maya_models.bronze__slash_events", "fqn": ["maya_models", "bronze", "bronze__slash_events"], "alias": "slash_events", "checksum": {"name": "sha256", "checksum": "53db54ffb197fe8df0ab53270d440602bcfef375d83de623225856b081ad9e32"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.137312, "relation_name": "MAYA.bronze.slash_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool,\n  asset,\n  asset_e8,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_slash_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_slash_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_slash_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__constants": {"database": "MAYA", "schema": "bronze", "name": "bronze__constants", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__constants.sql", "original_file_path": "models/bronze/bronze__constants.sql", "unique_id": "model.maya_models.bronze__constants", "fqn": ["maya_models", "bronze", "bronze__constants"], "alias": "constants", "checksum": {"name": "sha256", "checksum": "562047a564c90bcc71f60b08e4d950b6edac509c5da7f1b545d41340aede4f65"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.138551, "relation_name": "MAYA.bronze.constants", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  key,\n  VALUE,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_constants'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_constants"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_constants"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__withdraw_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__withdraw_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__withdraw_events.sql", "original_file_path": "models/bronze/bronze__withdraw_events.sql", "unique_id": "model.maya_models.bronze__withdraw_events", "fqn": ["maya_models", "bronze", "bronze__withdraw_events"], "alias": "withdraw_events", "checksum": {"name": "sha256", "checksum": "aa96ee5480ff8588d3506965e1b04240e933a90f7f9162007fc4cfce870db2b3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.1395872, "relation_name": "MAYA.bronze.withdraw_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  asset,\n  asset_e8,\n  emit_asset_e8,\n  emit_cacao_e8,\n  memo,\n  pool,\n  stake_units,\n  basis_points,\n  asymmetry,\n  imp_loss_protection_e8,\n  _EMIT_ASSET_IN_CACAO_E8,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_withdraw_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_withdraw_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__pool_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__pool_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__pool_events.sql", "original_file_path": "models/bronze/bronze__pool_events.sql", "unique_id": "model.maya_models.bronze__pool_events", "fqn": ["maya_models", "bronze", "bronze__pool_events"], "alias": "pool_events", "checksum": {"name": "sha256", "checksum": "fd1fefd8d27faa023fa48bcd7cbf6dc205b4e8a770bbfbef053cab1970e513d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.140788, "relation_name": "MAYA.bronze.pool_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  asset,\n  status,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_pool_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_pool_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_pool_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.bronze__set_node_keys_events": {"database": "MAYA", "schema": "bronze", "name": "bronze__set_node_keys_events", "resource_type": "model", "package_name": "maya_models", "path": "bronze/bronze__set_node_keys_events.sql", "original_file_path": "models/bronze/bronze__set_node_keys_events.sql", "unique_id": "model.maya_models.bronze__set_node_keys_events", "fqn": ["maya_models", "bronze", "bronze__set_node_keys_events"], "alias": "set_node_keys_events", "checksum": {"name": "sha256", "checksum": "0ab5ee4f224398a7643c7be2142b3feb62c1b354b99d6369c7b1557f88b3a8c4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.141879, "relation_name": "MAYA.bronze.set_node_keys_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr,\n  secp256k1,\n  ed25519,\n  validator_consensus,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\nFROM\n  {{ source(\n    'maya_midgard',\n    'midgard_set_node_keys_events'\n  ) }}", "language": "sql", "refs": [], "sources": [["maya_midgard", "midgard_set_node_keys_events"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.maya_models.maya_midgard.midgard_set_node_keys_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__daily_tvl": {"database": "MAYA", "schema": "silver", "name": "silver__daily_tvl", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__daily_tvl.sql", "original_file_path": "models/silver/silver__daily_tvl.sql", "unique_id": "model.maya_models.silver__daily_tvl", "fqn": ["maya_models", "silver", "silver__daily_tvl"], "alias": "daily_tvl", "checksum": {"name": "sha256", "checksum": "af6a9da35525ec0b1e715a68fb217de2a0fdf405d08e463644b635f7b2c62aa0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "day", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["day"], "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.silver.daily_tvl__dbt_tmp)"]}, "tags": [], "description": "", "columns": {"DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_POOLED": {"name": "TOTAL_VALUE_POOLED", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_POOLED_USD": {"name": "TOTAL_VALUE_POOLED_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_BONDED": {"name": "TOTAL_VALUE_BONDED", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_BONDED_USD": {"name": "TOTAL_VALUE_BONDED_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_LOCKED": {"name": "TOTAL_VALUE_LOCKED", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_LOCKED_USD": {"name": "TOTAL_VALUE_LOCKED_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__daily_tvl.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "day", "incremental_strategy": "merge", "cluster_by": ["day"], "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.silver.daily_tvl__dbt_tmp)"]}, "created_at": 1741278782.395936, "relation_name": "MAYA.silver.daily_tvl", "raw_code": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"day\",\n  incremental_strategy = 'merge',\n  cluster_by = ['day'],\n  incremental_predicates = ['DBT_INTERNAL_DEST.day >= (select min(day) from ' ~ generate_tmp_view_name(this) ~ ')']\n) }}\n\nWITH max_daily_block AS (\n\n  SELECT\n    MAX(block_id) AS block_id,\n    DATE_TRUNC(\n      'day',\n      block_timestamp\n    ) AS DAY\n  FROM\n    {{ ref('silver__prices') }}\n\n{% if is_incremental() %}\nWHERE\n  block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\nGROUP BY\n  DAY\n),\ndaily_cacao_price AS (\n  SELECT\n    p.block_id,\n    DAY,\n    AVG(cacao_usd) AS cacao_usd\n  FROM\n    {{ ref('silver__prices') }}\n    p\n    JOIN max_daily_block mdb\n    ON p.block_id = mdb.block_id\n\n{% if is_incremental() %}\nWHERE\n  block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\nGROUP BY\n  DAY,\n  p.block_id\n)\nSELECT\n  br.day,\n  total_value_pooled AS total_value_pooled,\n  total_value_pooled * cacao_usd AS total_value_pooled_usd,\n  total_value_bonded AS total_value_bonded,\n  total_value_bonded * cacao_usd AS total_value_bonded_usd,\n  total_value_locked AS total_value_locked,\n  total_value_locked * cacao_usd AS total_value_locked_usd\nFROM\n  {{ ref('silver__total_value_locked') }}\n  br\n  JOIN daily_cacao_price drp\n  ON br.day = drp.day", "language": "sql", "refs": [{"name": "silver__prices", "package": null, "version": null}, {"name": "silver__prices", "package": null, "version": null}, {"name": "silver__total_value_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__prices", "model.maya_models.silver__total_value_locked"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__outbound_events": {"database": "MAYA", "schema": "silver", "name": "silver__outbound_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__outbound_events.sql", "original_file_path": "models/silver/silver__outbound_events.sql", "unique_id": "model.maya_models.silver__outbound_events", "fqn": ["maya_models", "silver", "silver__outbound_events"], "alias": "outbound_events", "checksum": {"name": "sha256", "checksum": "ab4e1e283c77676cfc68e1f13f47728dfa3fee4996791000017771f87e3a6955"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IN_TX": {"name": "IN_TX", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__outbound_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.385351, "relation_name": "MAYA.silver.outbound_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  asset_e8,\n  memo,\n  in_tx,\n  internal,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__outbound_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, in_tx\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__outbound_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__failed_deposit_messages": {"database": "MAYA", "schema": "silver", "name": "silver__failed_deposit_messages", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__failed_deposit_messages.sql", "original_file_path": "models/silver/silver__failed_deposit_messages.sql", "unique_id": "model.maya_models.silver__failed_deposit_messages", "fqn": ["maya_models", "silver", "silver__failed_deposit_messages"], "alias": "failed_deposit_messages", "checksum": {"name": "sha256", "checksum": "c580f032e8889ad6a7bf5d881a97fcdd025dac320b6d465e163d95ac015e733d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"AMOUNT_E8": {"name": "AMOUNT_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CODE": {"name": "CODE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REASON": {"name": "REASON", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EVENT_ID": {"name": "EVENT_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__failed_deposit_messages.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.538414, "relation_name": "MAYA.silver.failed_deposit_messages", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx_id,\n  code,\n  memo,\n  asset,\n  amount_e8,\n  from_addr AS from_address,\n  reason,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref(\n    'bronze__failed_deposit_messages'\n  ) }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__failed_deposit_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__daily_pool_stats": {"database": "MAYA", "schema": "silver", "name": "silver__daily_pool_stats", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__daily_pool_stats.sql", "original_file_path": "models/silver/silver__daily_pool_stats.sql", "unique_id": "model.maya_models.silver__daily_pool_stats", "fqn": ["maya_models", "silver", "silver__daily_pool_stats"], "alias": "daily_pool_stats", "checksum": {"name": "sha256", "checksum": "d5fa6f389fcd61f3316a3b173d658ff67dfd78fa1bc97c038b9f5e4b03ec94bc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["day"], "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.silver.daily_pool_stats__dbt_tmp)"]}, "tags": [], "description": "", "columns": {"DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYSTEM_REWARDS": {"name": "SYSTEM_REWARDS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYSTEM_REWARDS_USD": {"name": "SYSTEM_REWARDS_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_LIQUIDITY": {"name": "ASSET_LIQUIDITY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_PRICE": {"name": "ASSET_PRICE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_PRICE_USD": {"name": "ASSET_PRICE_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_LIQUIDITY": {"name": "cacao_LIQUIDITY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_PRICE": {"name": "cacao_PRICE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_PRICE_USD": {"name": "cacao_PRICE_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_LIQUIDITY_COUNT": {"name": "ADD_LIQUIDITY_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_ASSET_LIQUIDITY": {"name": "ADD_ASSET_LIQUIDITY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_ASSET_LIQUIDITY_USD": {"name": "ADD_ASSET_LIQUIDITY_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_cacao_LIQUIDITY_USD": {"name": "ADD_cacao_LIQUIDITY_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_COUNT": {"name": "WITHDRAW_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_ASSET_LIQUIDITY": {"name": "WITHDRAW_ASSET_LIQUIDITY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_ASSET_LIQUIDITY_USD": {"name": "WITHDRAW_ASSET_LIQUIDITY_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_cacao_LIQUIDITY": {"name": "WITHDRAW_cacao_LIQUIDITY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_cacao_LIQUIDITY_USD": {"name": "WITHDRAW_cacao_LIQUIDITY_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IL_PROTECTION_PAID": {"name": "IL_PROTECTION_PAID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IL_PROTECTION_PAID_USD": {"name": "IL_PROTECTION_PAID_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVERAGE_SLIP": {"name": "AVERAGE_SLIP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET_AVERAGE_SLIP": {"name": "TO_ASSET_AVERAGE_SLIP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_cacao_AVERAGE_SLIP": {"name": "TO_cacao_AVERAGE_SLIP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SWAP_COUNT": {"name": "SWAP_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET_SWAP_COUNT": {"name": "TO_ASSET_SWAP_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_cacao_SWAP_COUNT": {"name": "TO_cacao_SWAP_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SWAP_VOLUME_cacao": {"name": "SWAP_VOLUME_cacao", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SWAP_VOLUME_cacao_USD": {"name": "SWAP_VOLUME_cacao_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET_SWAP_VOLUME": {"name": "TO_ASSET_SWAP_VOLUME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_cacao_SWAP_VOLUME": {"name": "TO_cacao_SWAP_VOLUME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_SWAP_FEES_cacao": {"name": "TOTAL_SWAP_FEES_cacao", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_SWAP_FEES_USD": {"name": "TOTAL_SWAP_FEES_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_ASSET_SWAP_FEES": {"name": "TOTAL_ASSET_SWAP_FEES", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_ASSET_cacao_FEES": {"name": "TOTAL_ASSET_cacao_FEES", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "UNIQUE_MEMBER_COUNT": {"name": "UNIQUE_MEMBER_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "UNIQUE_SWAPPER_COUNT": {"name": "UNIQUE_SWAPPER_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQUIDITY_UNITS": {"name": "LIQUIDITY_UNITS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__daily_pool_stats.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["day"], "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.silver.daily_pool_stats__dbt_tmp)"]}, "created_at": 1741278782.493047, "relation_name": "MAYA.silver.daily_pool_stats", "raw_code": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"_unique_key\",\n  incremental_strategy = 'merge',\n  cluster_by = ['day'],\n  incremental_predicates = ['DBT_INTERNAL_DEST.day >= (select min(day) from ' ~ generate_tmp_view_name(this) ~ ')']\n) }}\n\nWITH daily_cacao_price AS (\n\n  SELECT\n    pool_name,\n    block_timestamp :: DATE AS DAY,\n    AVG(cacao_usd) AS cacao_usd,\n    AVG(asset_usd) AS asset_usd\n  FROM\n    {{ ref('silver__prices') }}\n    p\n\n{% if is_incremental() %}\nWHERE\n  block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\nGROUP BY\n  pool_name,\n  DAY\n),\npool_fees AS (\n  SELECT\n    pbf.day,\n    pbf.pool_name,\n    rewards AS system_rewards,\n    rewards * cacao_usd AS system_rewards_usd,\n    asset_liquidity_fees,\n    asset_liquidity_fees * asset_usd AS asset_liquidity_fees_usd,\n    cacao_liquidity_fees,\n    cacao_liquidity_fees * cacao_usd AS cacao_liquidity_fees_usd\n  FROM\n    {{ ref('silver__pool_block_fees') }}\n    pbf\n    JOIN daily_cacao_price drp\n    ON pbf.day = drp.day\n    AND pbf.pool_name = drp.pool_name\n\n{% if is_incremental() %}\nWHERE\n  pbf.day >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\n)\nSELECT\n  pbs.day,\n  pbs.asset AS pool_name,\n  COALESCE(\n    system_rewards,\n    0\n  ) AS system_rewards,\n  COALESCE(\n    system_rewards_usd,\n    0\n  ) AS system_rewards_usd,\n  COALESCE(asset_depth / pow(10, 8), 0) AS asset_liquidity,\n  COALESCE(\n    asset_price,\n    0\n  ) AS asset_price,\n  COALESCE(\n    asset_price_usd,\n    0\n  ) AS asset_price_usd,\n  COALESCE(cacao_depth / pow(10, 8), 0) AS cacao_liquidity,\n  COALESCE(asset_price_usd / NULLIF(cacao_usd, 0), 0) AS cacao_price,\n  COALESCE(\n    cacao_usd,\n    0\n  ) AS cacao_price_usd,\n  COALESCE(\n    add_liquidity_count,\n    0\n  ) AS add_liquidity_count,\n  COALESCE(add_asset_liquidity_volume / pow(10, 8), 0) AS add_asset_liquidity,\n  COALESCE(add_asset_liquidity_volume / pow(10, 8) * asset_usd, 0) AS add_asset_liquidity_usd,\n  COALESCE(add_cacao_liquidity_volume / pow(10, 8), 0) AS add_cacao_liquidity,\n  COALESCE(add_cacao_liquidity_volume / pow(10, 8) * cacao_usd, 0) AS add_cacao_liquidity_usd,\n  COALESCE(\n    withdraw_count,\n    0\n  ) AS withdraw_count,\n  COALESCE(withdraw_asset_volume / pow(10, 8), 0) AS withdraw_asset_liquidity,\n  COALESCE(withdraw_asset_volume / pow(10, 8) * asset_usd, 0) AS withdraw_asset_liquidity_usd,\n  COALESCE(withdraw_cacao_volume / pow(10, 8), 0) AS withdraw_cacao_liquidity,\n  COALESCE(withdraw_cacao_volume / pow(10, 8) * cacao_usd, 0) AS withdraw_cacao_liquidity_usd,\n  COALESCE(impermanent_loss_protection_paid / pow(10, 8), 0) AS il_protection_paid,\n  COALESCE(impermanent_loss_protection_paid / pow(10, 8) * cacao_usd, 0) AS il_protection_paid_usd,\n  COALESCE(\n    average_slip,\n    0\n  ) AS average_slip,\n  COALESCE(\n    to_asset_average_slip,\n    0\n  ) AS to_asset_average_slip,\n  COALESCE(\n    to_cacao_average_slip,\n    0\n  ) AS to_cacao_average_slip,\n  COALESCE(\n    swap_count,\n    0\n  ) AS swap_count,\n  COALESCE(\n    to_asset_count,\n    0\n  ) AS to_asset_swap_count,\n  COALESCE(\n    to_cacao_count,\n    0\n  ) AS to_cacao_swap_count,\n  COALESCE(swap_volume / pow(10, 8), 0) AS swap_volume_cacao,\n  COALESCE(swap_volume / pow(10, 8) * cacao_usd, 0) AS swap_volume_cacao_usd,\n  COALESCE(to_asset_volume / pow(10, 8), 0) AS to_asset_swap_volume,\n  COALESCE(to_cacao_volume / pow(10, 8), 0) AS to_cacao_swap_volume,\n  COALESCE(totalfees / pow(10, 8), 0) AS total_swap_fees_cacao,\n  COALESCE(totalfees / pow(10, 8) * cacao_usd, 0) AS total_swap_fees_usd,\n  COALESCE(to_asset_fees / pow(10, 8), 0) AS total_asset_swap_fees,\n  COALESCE(to_cacao_fees / pow(10, 8), 0) AS total_asset_cacao_fees,\n  COALESCE(\n    unique_member_count,\n    0\n  ) AS unique_member_count,\n  COALESCE(\n    unique_swapper_count,\n    0\n  ) AS unique_swapper_count,\n  COALESCE(\n    units,\n    0\n  ) AS liquidity_units,\n  concat_ws(\n    '-',\n    pbs.day,\n    pbs.asset\n  ) AS _unique_key\nFROM\n  {{ ref('silver__pool_block_statistics') }}\n  pbs\n  LEFT JOIN daily_cacao_price drp\n  ON pbs.day = drp.day\n  AND pbs.asset = drp.pool_name\n  LEFT JOIN pool_fees pf\n  ON pbs.day = pf.day\n  AND pbs.asset = pf.pool_name\n\n{% if is_incremental() %}\nWHERE\n  pbs.day >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__prices", "package": null, "version": null}, {"name": "silver__pool_block_fees", "package": null, "version": null}, {"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__prices", "model.maya_models.silver__pool_block_fees", "model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__daily_earnings": {"database": "MAYA", "schema": "silver", "name": "silver__daily_earnings", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__daily_earnings.sql", "original_file_path": "models/silver/silver__daily_earnings.sql", "unique_id": "model.maya_models.silver__daily_earnings", "fqn": ["maya_models", "silver", "silver__daily_earnings"], "alias": "daily_earnings", "checksum": {"name": "sha256", "checksum": "8b4e7edd2bbff3771da18685df5cb6a955e585951016c49da5af7d80822444e7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "day", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["day"]}, "tags": [], "description": "", "columns": {"DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQUIDITY_FEES": {"name": "LIQUIDITY_FEES", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQUIDITY_FEES_USD": {"name": "LIQUIDITY_FEES_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_REWARDS": {"name": "BLOCK_REWARDS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_REWARDS_USD": {"name": "BLOCK_REWARDS_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_EARNINGS": {"name": "TOTAL_EARNINGS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_EARNINGS_USD": {"name": "TOTAL_EARNINGS_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EARNINGS_TO_NODES": {"name": "EARNINGS_TO_NODES", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EARNINGS_TO_NODES_USD": {"name": "EARNINGS_TO_NODES_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EARNINGS_TO_POOLS": {"name": "EARNINGS_TO_POOLS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EARNINGS_TO_POOLS_USD": {"name": "EARNINGS_TO_POOLS_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVG_NODE_COUNT": {"name": "AVG_NODE_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__daily_earnings.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "day", "incremental_strategy": "merge", "cluster_by": ["day"]}, "created_at": 1741278782.4364421, "relation_name": "MAYA.silver.daily_earnings", "raw_code": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'day',\n  incremental_strategy = 'merge',\n  cluster_by = ['day']\n) }}\n\nWITH max_daily_block AS (\n\n  SELECT\n    MAX(\n      block_id\n    ) AS block_id,\n    DATE_TRUNC(\n      'day',\n      block_timestamp\n    ) AS DAY\n  FROM\n    {{ ref('silver__prices') }} A\n\n{% if is_incremental() %}\nWHERE\n  block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\nGROUP BY\n  DAY\n),\ndaily_cacao_price AS (\n  SELECT\n    p.block_id,\n    DAY,\n    AVG(cacao_usd) AS cacao_usd\n  FROM\n    {{ ref('silver__prices') }}\n    p\n    JOIN max_daily_block mdb\n    ON p.block_id = mdb.block_id\n\n{% if is_incremental() %}\nWHERE\n  block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\nGROUP BY\n  DAY,\n  p.block_id\n)\nSELECT\n  br.day,\n  COALESCE(\n    liquidity_fee,\n    0\n  ) AS liquidity_fees,\n  COALESCE(\n    liquidity_fee * cacao_usd,\n    0\n  ) AS liquidity_fees_usd,\n  block_rewards AS block_rewards,\n  block_rewards * cacao_usd AS block_rewards_usd,\n  COALESCE(\n    earnings,\n    0\n  ) AS total_earnings,\n  COALESCE(\n    earnings * cacao_usd,\n    0\n  ) AS total_earnings_usd,\n  bonding_earnings AS earnings_to_nodes,\n  bonding_earnings * cacao_usd AS earnings_to_nodes_usd,\n  COALESCE(\n    liquidity_earnings,\n    0\n  ) AS earnings_to_pools,\n  COALESCE(\n    liquidity_earnings * cacao_usd,\n    0\n  ) AS earnings_to_pools_usd,\n  avg_node_count,\n  br._inserted_timestamp\nFROM\n  {{ ref('silver__block_rewards') }}\n  br\n  JOIN daily_cacao_price drp\n  ON br.day = drp.day\n\n{% if is_incremental() %}\nWHERE\n  br.day >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__prices", "package": null, "version": null}, {"name": "silver__prices", "package": null, "version": null}, {"name": "silver__block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__prices", "model.maya_models.silver__block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__set_node_mimir_events": {"database": "MAYA", "schema": "silver", "name": "silver__set_node_mimir_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__set_node_mimir_events.sql", "original_file_path": "models/silver/silver__set_node_mimir_events.sql", "unique_id": "model.maya_models.silver__set_node_mimir_events", "fqn": ["maya_models", "silver", "silver__set_node_mimir_events"], "alias": "set_node_mimir_events", "checksum": {"name": "sha256", "checksum": "f37fd33493321442c273fdd6b76e92a9a4690af4f9ccc288e3512cfe43240123"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.166402, "relation_name": "MAYA.silver.set_node_mimir_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  address,\n  key,\n  VALUE,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__set_node_mimir_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__set_node_mimir_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__set_node_mimir_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__inactive_vault_events": {"database": "MAYA", "schema": "silver", "name": "silver__inactive_vault_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__inactive_vault_events.sql", "original_file_path": "models/silver/silver__inactive_vault_events.sql", "unique_id": "model.maya_models.silver__inactive_vault_events", "fqn": ["maya_models", "silver", "silver__inactive_vault_events"], "alias": "inactive_vault_events", "checksum": {"name": "sha256", "checksum": "6e848a269456f7683c1f2df9f458d4eca1bf6c7a85fe99261ccf386edf1c679c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.167537, "relation_name": "MAYA.silver.inactive_vault_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  add_asgard_addr AS add_asgard_address,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__inactive_vault_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__inactive_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__inactive_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__withdraw_events": {"database": "MAYA", "schema": "silver", "name": "silver__withdraw_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__withdraw_events.sql", "original_file_path": "models/silver/silver__withdraw_events.sql", "unique_id": "model.maya_models.silver__withdraw_events", "fqn": ["maya_models", "silver", "silver__withdraw_events"], "alias": "withdraw_events", "checksum": {"name": "sha256", "checksum": "18620bc28187ef35f3a576861a2141895d0fbaf73241b41423f116678d33bd09"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EMIT_ASSET_E8": {"name": "EMIT_ASSET_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EMIT_cacao_E8": {"name": "EMIT_cacao_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STAKE_UNITS": {"name": "STAKE_UNITS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BASIS_POINTS": {"name": "BASIS_POINTS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASYMMETRY": {"name": "ASYMMETRY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IMP_LOSS_PROTECTION_E8": {"name": "IMP_LOSS_PROTECTION_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_EMIT_ASSET_IN_cacao_E8": {"name": "_EMIT_ASSET_IN_cacao_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__withdraw_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.5520341, "relation_name": "MAYA.silver.withdraw_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  asset_e8,\n  emit_asset_e8,\n  emit_cacao_e8,\n  memo,\n  pool AS pool_name,\n  stake_units,\n  basis_points,\n  asymmetry,\n  imp_loss_protection_e8,\n  _EMIT_ASSET_IN_CACAO_E8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref(\n    'bronze__withdraw_events'\n  ) }}\n  e qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__slash_events": {"database": "MAYA", "schema": "silver", "name": "silver__slash_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__slash_events.sql", "original_file_path": "models/silver/silver__slash_events.sql", "unique_id": "model.maya_models.silver__slash_events", "fqn": ["maya_models", "silver", "silver__slash_events"], "alias": "slash_events", "checksum": {"name": "sha256", "checksum": "ed76da048ba30e82487de68b9bc27c429b3348d4a0492f33f1af77107d878228"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.169726, "relation_name": "MAYA.silver.slash_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool AS pool_name,\n  asset,\n  asset_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__slash_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, pool, asset\nORDER BY\n  __HEVO__INGESTED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__slash_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__slash_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__transfers": {"database": "MAYA", "schema": "silver", "name": "silver__transfers", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__transfers.sql", "original_file_path": "models/silver/silver__transfers.sql", "unique_id": "model.maya_models.silver__transfers", "fqn": ["maya_models", "silver", "silver__transfers"], "alias": "transfers", "checksum": {"name": "sha256", "checksum": "876176ad1096599f036d35d8672647aafd7f59fe5a748c721006cb927c097ec2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"]}, "tags": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT": {"name": "cacao_AMOUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT_USD": {"name": "cacao_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__transfers.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278782.57072, "relation_name": "MAYA.silver.transfers", "raw_code": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"_unique_key\",\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH block_prices AS (\n\n  SELECT\n    AVG(cacao_usd) AS cacao_usd,\n    block_id\n  FROM\n    {{ ref('silver__prices') }}\n  GROUP BY\n    block_id\n)\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  from_address,\n  to_address,\n  asset,\n  COALESCE(amount_e8 / pow(10, 8), 0) AS cacao_amount,\n  COALESCE(amount_e8 / pow(10, 8) * cacao_usd, 0) AS cacao_amount_usd,\n  event_id,\n  {{ dbt_utils.generate_surrogate_key(\n    ['se.event_id', 'se.from_address', 'se.to_address', 'se.asset', 'se.amount_e8']\n  ) }}\n  _unique_key,\n  se._inserted_timestamp\nFROM\n  {{ ref('silver__transfer_events') }}\n  se\n  JOIN {{ ref('silver__block_log') }}\n  b\n  ON se.block_timestamp = b.timestamp\n  LEFT JOIN block_prices p\n  ON b.height = p.block_id\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__prices", "package": null, "version": null}, {"name": "silver__transfer_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__prices", "model.maya_models.silver__transfer_events", "model.maya_models.silver__block_log"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__block_pool_depths": {"database": "MAYA", "schema": "silver", "name": "silver__block_pool_depths", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__block_pool_depths.sql", "original_file_path": "models/silver/silver__block_pool_depths.sql", "unique_id": "model.maya_models.silver__block_pool_depths", "fqn": ["maya_models", "silver", "silver__block_pool_depths"], "alias": "block_pool_depths", "checksum": {"name": "sha256", "checksum": "955b43af2a392f0e90ce906852f4230fbc39a159c2d9790034da0b5be7b978ca"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CACAO_E8": {"name": "CACAO_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYNTH_E8": {"name": "SYNTH_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__block_pool_depths.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.5805151, "relation_name": "MAYA.silver.block_pool_depths", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool AS pool_name,\n  asset_e8,\n  cacao_e8,\n  synth_e8,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__block_pool_depths') }}\n  qualify(ROW_NUMBER() over(PARTITION BY pool, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__set_mimir_events": {"database": "MAYA", "schema": "silver", "name": "silver__set_mimir_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__set_mimir_events.sql", "original_file_path": "models/silver/silver__set_mimir_events.sql", "unique_id": "model.maya_models.silver__set_mimir_events", "fqn": ["maya_models", "silver", "silver__set_mimir_events"], "alias": "set_mimir_events", "checksum": {"name": "sha256", "checksum": "4b4f15746cd711f453a23706f34f276b2e756879f34bd807f7c3656169ae0384"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.181438, "relation_name": "MAYA.silver.set_mimir_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  key,\n  VALUE,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__set_mimir_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__INGESTED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__set_mimir_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__set_mimir_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__pool_block_statistics": {"database": "MAYA", "schema": "silver", "name": "silver__pool_block_statistics", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__pool_block_statistics.sql", "original_file_path": "models/silver/silver__pool_block_statistics.sql", "unique_id": "model.maya_models.silver__pool_block_statistics", "fqn": ["maya_models", "silver", "silver__pool_block_statistics"], "alias": "pool_block_statistics", "checksum": {"name": "sha256", "checksum": "e9ab6e1c32d59e51465cda7c7dc5d268e4ca732ced1389beddaf451a4aac42e0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["day"]}, "tags": [], "description": "", "columns": {"DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_ASSET_LIQUIDITY_VOLUME": {"name": "ADD_ASSET_LIQUIDITY_VOLUME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_LIQUIDITY_COUNT": {"name": "ADD_LIQUIDITY_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_LIQUIDITY_VOLUME": {"name": "ADD_LIQUIDITY_VOLUME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_cacao_LIQUIDITY_VOLUME": {"name": "ADD_cacao_LIQUIDITY_VOLUME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_DEPTH": {"name": "ASSET_DEPTH", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_PRICE": {"name": "ASSET_PRICE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_PRICE_USD": {"name": "ASSET_PRICE_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVERAGE_SLIP": {"name": "AVERAGE_SLIP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IMPERMANENT_LOSS_PROTECTION_PAID": {"name": "IMPERMANENT_LOSS_PROTECTION_PAID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_DEPTH": {"name": "cacao_DEPTH", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SWAP_COUNT": {"name": "SWAP_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SWAP_VOLUME": {"name": "SWAP_VOLUME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET_AVERAGE_SLIP": {"name": "TO_ASSET_AVERAGE_SLIP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET_COUNT": {"name": "TO_ASSET_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET_FEES": {"name": "TO_ASSET_FEES", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET_VOLUME": {"name": "TO_ASSET_VOLUME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_cacao_AVERAGE_SLIP": {"name": "TO_cacao_AVERAGE_SLIP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_cacao_COUNT": {"name": "TO_cacao_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_cacao_FEES": {"name": "TO_cacao_FEES", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_cacao_VOLUME": {"name": "TO_cacao_VOLUME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTALFEES": {"name": "TOTALFEES", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "UNIQUE_MEMBER_COUNT": {"name": "UNIQUE_MEMBER_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "UNIQUE_SWAPPER_COUNT": {"name": "UNIQUE_SWAPPER_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "UNITS": {"name": "UNITS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_ASSET_VOLUME": {"name": "WITHDRAW_ASSET_VOLUME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_COUNT": {"name": "WITHDRAW_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_cacao_VOLUME": {"name": "WITHDRAW_cacao_VOLUME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_VOLUME": {"name": "WITHDRAW_VOLUME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_STAKE": {"name": "TOTAL_STAKE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DEPTH_PRODUCT": {"name": "DEPTH_PRODUCT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYNTH_UNITS": {"name": "SYNTH_UNITS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_UNITS": {"name": "POOL_UNITS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQUIDITY_UNIT_VALUE_INDEX": {"name": "LIQUIDITY_UNIT_VALUE_INDEX", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PREV_LIQUIDITY_UNIT_VALUE_INDEX": {"name": "PREV_LIQUIDITY_UNIT_VALUE_INDEX", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__pool_block_statistics.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "table", "cluster_by": ["day"]}, "created_at": 1741278782.594547, "relation_name": "MAYA.silver.pool_block_statistics", "raw_code": "{{ config(\n  materialized = 'table',\n  cluster_by = ['day']\n) }}\n\nWITH pool_depth AS (\n\n  SELECT\n    DAY,\n    pool_name,\n    cacao_e8 AS cacao_depth,\n    asset_e8 AS asset_depth,\n    synth_e8 AS synth_depth,\n    cacao_e8 / NULLIF(\n      asset_e8,\n      0\n    ) AS asset_price\n  FROM\n    (\n      SELECT\n        DATE(\n          b.block_timestamp\n        ) AS DAY,\n        b.height AS block_id,\n        pool_name,\n        cacao_e8,\n        synth_e8,\n        asset_e8,\n        MAX(\n          b.height\n        ) over (PARTITION BY pool_name, DATE(b.block_timestamp)) AS max_block_id\n      FROM\n        {{ ref(\"silver__block_pool_depths\") }} A\n        JOIN {{ ref('silver__block_log') }}\n        b\n        ON A.block_timestamp = b.timestamp\n      WHERE\n        asset_e8 > 0\n    )\n  WHERE\n    block_id = max_block_id\n),\npool_status AS (\n  SELECT\n    DAY,\n    pool_name,\n    status\n  FROM\n    (\n      SELECT\n        DATE(\n          b.block_timestamp\n        ) AS DAY,\n        asset AS pool_name,\n        status,\n        ROW_NUMBER() over (PARTITION BY pool_name, DATE(b.block_timestamp)\n      ORDER BY\n        b.block_timestamp DESC, status) AS rn\n      FROM\n        {{ ref(\"silver__pool_events\") }} A\n        JOIN {{ ref('silver__block_log') }}\n        b\n        ON A.block_timestamp = b.timestamp\n    )\n  WHERE\n    rn = 1\n),\nadd_liquidity_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    COUNT(*) AS add_liquidity_count,\n    SUM(cacao_e8) AS add_cacao_liquidity_volume,\n    SUM(asset_e8) AS add_asset_liquidity_volume,\n    SUM(stake_units) AS added_stake\n  FROM\n    {{ ref(\"silver__stake_events\") }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n  GROUP BY\n    DAY,\n    pool_name\n),\nwithdraw_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    COUNT(*) AS withdraw_count,\n    SUM(emit_cacao_e8) AS withdraw_cacao_volume,\n    SUM(emit_asset_e8) AS withdraw_asset_volume,\n    SUM(stake_units) AS withdrawn_stake,\n    SUM(imp_loss_protection_e8) AS impermanent_loss_protection_paid\n  FROM\n    {{ ref(\"silver__withdraw_events\") }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n  GROUP BY\n    DAY,\n    pool_name\n),\nswap_total_tbl AS (\n  SELECT\n    DAY,\n    pool_name,\n    SUM(volume) AS swap_volume\n  FROM\n    (\n      SELECT\n        DATE(\n          b.block_timestamp\n        ) AS DAY,\n        pool_name,\n        CASE\n          WHEN to_asset = 'MAYA.CACAO' THEN to_e8\n          ELSE from_e8\n        END AS volume\n      FROM\n        {{ ref(\"silver__swap_events\") }} A\n        JOIN {{ ref('silver__block_log') }}\n        b\n        ON A.block_timestamp = b.timestamp\n    )\n  GROUP BY\n    DAY,\n    pool_name\n),\nswap_to_asset_tbl AS (\n  SELECT\n    DAY,\n    pool_name,\n    SUM(liq_fee_in_cacao_e8) AS to_asset_fees,\n    SUM(from_e8) AS to_asset_volume,\n    COUNT(*) AS to_asset_count,\n    AVG(swap_slip_bp) AS to_asset_average_slip\n  FROM(\n      SELECT\n        DATE(\n          b.block_timestamp\n        ) AS DAY,\n        pool_name,\n        CASE\n          WHEN to_asset = 'MAYA.CACAO' THEN 'to_cacao'\n          ELSE 'to_asset'\n        END AS to_tune_asset,\n        liq_fee_in_cacao_e8,\n        to_e8,\n        from_e8,\n        swap_slip_bp,\n        CASE\n          WHEN to_asset = 'MAYA.CACAO' THEN 0\n          ELSE liq_fee_e8\n        END AS asset_fee\n      FROM\n        {{ ref(\"silver__swap_events\") }} A\n        JOIN {{ ref('silver__block_log') }}\n        b\n        ON A.block_timestamp = b.timestamp\n    )\n  GROUP BY\n    to_tune_asset,\n    pool_name,\n    DAY\n  HAVING\n    to_tune_asset = 'to_asset'\n),\nswap_to_cacao_tbl AS (\n  SELECT\n    DAY,\n    pool_name,\n    SUM(liq_fee_in_cacao_e8) AS to_cacao_fees,\n    SUM(to_e8) AS to_cacao_volume,\n    COUNT(*) AS to_cacao_count,\n    AVG(swap_slip_bp) AS to_cacao_average_slip\n  FROM(\n      SELECT\n        DATE(\n          b.block_timestamp\n        ) AS DAY,\n        pool_name,\n        CASE\n          WHEN to_asset = 'MAYA.CACAO' THEN 'to_cacao'\n          ELSE 'to_asset'\n        END AS to_tune_asset,\n        liq_fee_in_cacao_e8,\n        to_e8,\n        from_e8,\n        swap_slip_bp,\n        CASE\n          WHEN to_asset = 'MAYA.CACAO' THEN 0\n          ELSE liq_fee_e8\n        END AS asset_fee\n      FROM\n        {{ ref(\"silver__swap_events\") }} A\n        JOIN {{ ref('silver__block_log') }}\n        b\n        ON A.block_timestamp = b.timestamp\n    )\n  GROUP BY\n    to_tune_asset,\n    pool_name,\n    DAY\n  HAVING\n    to_tune_asset = 'to_cacao'\n),\naverage_slip_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    AVG(swap_slip_bp) AS average_slip\n  FROM\n    {{ ref(\"silver__swap_events\") }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n  GROUP BY\n    pool_name,\n    DAY\n),\nunique_swapper_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    COUNT(\n      DISTINCT from_address\n    ) AS unique_swapper_count\n  FROM\n    {{ ref(\"silver__swap_events\") }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n  GROUP BY\n    pool_name,\n    DAY\n),\nstake_amount AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    SUM(stake_units) AS units\n  FROM\n    {{ ref(\"silver__stake_events\") }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n  GROUP BY\n    pool_name,\n    DAY\n),\nunstake_umc AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    from_address AS address,\n    pool_name,\n    SUM(stake_units) AS unstake_liquidity_units\n  FROM\n    {{ ref(\"silver__withdraw_events\") }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n  GROUP BY\n    from_address,\n    pool_name,\n    DAY\n),\nstake_umc AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    cacao_address AS address,\n    pool_name,\n    SUM(stake_units) AS liquidity_units\n  FROM\n    {{ ref(\"silver__stake_events\") }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n  WHERE\n    cacao_address IS NOT NULL\n  GROUP BY\n    cacao_address,\n    pool_name,\n    DAY\n  UNION ALL\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    asset_address AS address,\n    pool_name,\n    SUM(stake_units) AS liquidity_units\n  FROM\n    {{ ref(\"silver__stake_events\") }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n  WHERE\n    asset_address IS NOT NULL\n    AND cacao_address IS NULL\n  GROUP BY\n    asset_address,\n    pool_name,\n    DAY\n),\nunique_member_count AS (\n  SELECT\n    DAY,\n    pool_name,\n    COUNT(\n      DISTINCT address\n    ) AS unique_member_count\n  FROM\n    (\n      SELECT\n        stake_umc.day,\n        stake_umc.pool_name,\n        stake_umc.address,\n        stake_umc.liquidity_units,\n        CASE\n          WHEN unstake_umc.unstake_liquidity_units IS NOT NULL THEN unstake_umc.unstake_liquidity_units\n          ELSE 0\n        END AS unstake_liquidity_units\n      FROM\n        stake_umc\n        LEFT JOIN unstake_umc\n        ON stake_umc.address = unstake_umc.address\n        AND stake_umc.pool_name = unstake_umc.pool_name\n    )\n  WHERE\n    liquidity_units - unstake_liquidity_units > 0\n  GROUP BY\n    pool_name,\n    DAY\n),\nasset_price_usd_tbl AS (\n  SELECT\n    DAY,\n    pool_name,\n    asset_usd AS asset_price_usd\n  FROM\n    (\n      SELECT\n        DATE(block_timestamp) AS DAY,\n        block_id,\n        MAX(block_id) over (PARTITION BY pool_name, DATE(block_timestamp)) AS max_block_id,\n        pool_name,\n        asset_usd\n      FROM\n        {{ ref(\"silver__prices\") }}\n    )\n  WHERE\n    block_id = max_block_id\n),\njoined AS (\n  SELECT\n    pool_depth.day AS DAY,\n    COALESCE(\n      add_asset_liquidity_volume,\n      0\n    ) AS add_asset_liquidity_volume,\n    COALESCE(\n      add_liquidity_count,\n      0\n    ) AS add_liquidity_count,\n    COALESCE(\n      (\n        add_asset_liquidity_volume + add_cacao_liquidity_volume\n      ),\n      0\n    ) AS add_liquidity_volume,\n    COALESCE(\n      add_cacao_liquidity_volume,\n      0\n    ) AS add_cacao_liquidity_volume,\n    pool_depth.pool_name AS asset,\n    asset_depth,\n    COALESCE(\n      asset_price,\n      0\n    ) AS asset_price,\n    COALESCE(\n      asset_price_usd,\n      0\n    ) AS asset_price_usd,\n    COALESCE(\n      average_slip,\n      0\n    ) AS average_slip,\n    COALESCE(\n      impermanent_loss_protection_paid,\n      0\n    ) AS impermanent_loss_protection_paid,\n    COALESCE(\n      cacao_depth,\n      0\n    ) AS cacao_depth,\n    COALESCE(\n      synth_depth,\n      0\n    ) AS synth_depth,\n    COALESCE(\n      status,\n      'no status'\n    ) AS status,\n    COALESCE((to_cacao_count + to_asset_count), 0) AS swap_count,\n    COALESCE(\n      swap_volume,\n      0\n    ) AS swap_volume,\n    COALESCE(\n      to_asset_average_slip,\n      0\n    ) AS to_asset_average_slip,\n    COALESCE(\n      to_asset_count,\n      0\n    ) AS to_asset_count,\n    COALESCE(\n      to_asset_fees,\n      0\n    ) AS to_asset_fees,\n    COALESCE(\n      to_asset_volume,\n      0\n    ) AS to_asset_volume,\n    COALESCE(\n      to_cacao_average_slip,\n      0\n    ) AS to_cacao_average_slip,\n    COALESCE(\n      to_cacao_count,\n      0\n    ) AS to_cacao_count,\n    COALESCE(\n      to_cacao_fees,\n      0\n    ) AS to_cacao_fees,\n    COALESCE(\n      to_cacao_volume,\n      0\n    ) AS to_cacao_volume,\n    COALESCE((to_cacao_fees + to_asset_fees), 0) AS totalFees,\n    COALESCE(\n      unique_member_count,\n      0\n    ) AS unique_member_count,\n    COALESCE(\n      unique_swapper_count,\n      0\n    ) AS unique_swapper_count,\n    COALESCE(\n      units,\n      0\n    ) AS units,\n    COALESCE(\n      withdraw_asset_volume,\n      0\n    ) AS withdraw_asset_volume,\n    COALESCE(\n      withdraw_count,\n      0\n    ) AS withdraw_count,\n    COALESCE(\n      withdraw_cacao_volume,\n      0\n    ) AS withdraw_cacao_volume,\n    COALESCE((withdraw_cacao_volume + withdraw_asset_volume), 0) AS withdraw_volume,\n    SUM(COALESCE(added_stake, 0) - COALESCE(withdrawn_stake, 0)) over (\n      PARTITION BY pool_depth.pool_name\n      ORDER BY\n        pool_depth.day ASC\n    ) AS total_stake,\n    asset_depth * COALESCE(\n      cacao_depth,\n      0\n    ) AS depth_product,\n    total_stake * synth_depth / ((asset_depth * 2) - synth_depth) AS synth_units,\n    CASE\n      WHEN total_stake = 0 THEN 0\n      WHEN depth_product < 0 THEN 0\n      ELSE SQRT(depth_product) / (\n        total_stake + synth_units\n      )\n    END AS liquidity_unit_value_index\n  FROM\n    pool_depth\n    LEFT JOIN pool_status\n    ON pool_depth.pool_name = pool_status.pool_name\n    AND pool_depth.day = pool_status.day\n    LEFT JOIN add_liquidity_tbl\n    ON pool_depth.pool_name = add_liquidity_tbl.pool_name\n    AND pool_depth.day = add_liquidity_tbl.day\n    LEFT JOIN withdraw_tbl\n    ON pool_depth.pool_name = withdraw_tbl.pool_name\n    AND pool_depth.day = withdraw_tbl.day\n    LEFT JOIN swap_total_tbl\n    ON pool_depth.pool_name = swap_total_tbl.pool_name\n    AND pool_depth.day = swap_total_tbl.day\n    LEFT JOIN swap_to_asset_tbl\n    ON pool_depth.pool_name = swap_to_asset_tbl.pool_name\n    AND pool_depth.day = swap_to_asset_tbl.day\n    LEFT JOIN swap_to_cacao_tbl\n    ON pool_depth.pool_name = swap_to_cacao_tbl.pool_name\n    AND pool_depth.day = swap_to_cacao_tbl.day\n    LEFT JOIN unique_swapper_tbl\n    ON pool_depth.pool_name = unique_swapper_tbl.pool_name\n    AND pool_depth.day = unique_swapper_tbl.day\n    LEFT JOIN stake_amount\n    ON pool_depth.pool_name = stake_amount.pool_name\n    AND pool_depth.day = stake_amount.day\n    LEFT JOIN average_slip_tbl\n    ON pool_depth.pool_name = average_slip_tbl.pool_name\n    AND pool_depth.day = average_slip_tbl.day\n    LEFT JOIN unique_member_count\n    ON pool_depth.pool_name = unique_member_count.pool_name\n    AND pool_depth.day = unique_member_count.day\n    LEFT JOIN asset_price_usd_tbl\n    ON pool_depth.pool_name = asset_price_usd_tbl.pool_name\n    AND pool_depth.day = asset_price_usd_tbl.day\n)\nSELECT\n  DISTINCT DAY,\n  add_asset_liquidity_volume,\n  add_liquidity_count,\n  add_liquidity_volume,\n  add_cacao_liquidity_volume,\n  asset,\n  asset_depth,\n  asset_price,\n  asset_price_usd,\n  average_slip,\n  impermanent_loss_protection_paid,\n  cacao_depth,\n  status,\n  swap_count,\n  swap_volume,\n  to_asset_average_slip,\n  to_asset_count,\n  to_asset_fees,\n  to_asset_volume,\n  to_cacao_average_slip,\n  to_cacao_count,\n  to_cacao_fees,\n  to_cacao_volume,\n  totalFees,\n  unique_member_count,\n  unique_swapper_count,\n  units,\n  withdraw_asset_volume,\n  withdraw_count,\n  withdraw_cacao_volume,\n  withdraw_volume,\n  total_stake,\n  depth_product,\n  synth_units,\n  total_stake + synth_units AS pool_units,\n  liquidity_unit_value_index,\n  LAG(\n    liquidity_unit_value_index,\n    1\n  ) over (\n    PARTITION BY asset\n    ORDER BY\n      DAY ASC\n  ) AS prev_liquidity_unit_value_index,\n  concat_ws(\n    '-',\n    DAY,\n    asset\n  ) AS _unique_key\nFROM\n  joined", "language": "sql", "refs": [{"name": "silver__block_pool_depths", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__pool_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__stake_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__withdraw_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__swap_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__swap_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__swap_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__swap_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__swap_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__stake_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__withdraw_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__stake_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__stake_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.silver__block_pool_depths", "model.maya_models.silver__block_log", "model.maya_models.silver__pool_events", "model.maya_models.silver__stake_events", "model.maya_models.silver__withdraw_events", "model.maya_models.silver__swap_events", "model.maya_models.silver__prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__liquidity_actions": {"database": "MAYA", "schema": "silver", "name": "silver__liquidity_actions", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__liquidity_actions.sql", "original_file_path": "models/silver/silver__liquidity_actions.sql", "unique_id": "model.maya_models.silver__liquidity_actions", "fqn": ["maya_models", "silver", "silver__liquidity_actions"], "alias": "liquidity_actions", "checksum": {"name": "sha256", "checksum": "83de5cc5449f93fa640c50b670f020b32c5597dc6bd29325121b2900557291e0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"]}, "tags": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LP_ACTION": {"name": "LP_ACTION", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT": {"name": "cacao_AMOUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT_USD": {"name": "cacao_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STAKE_UNITS": {"name": "STAKE_UNITS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__liquidity_actions.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278782.240175, "relation_name": "MAYA.silver.liquidity_actions", "raw_code": "{{ config(\n  materialized = 'incremental',\n  unique_key = '_unique_key',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH stakes AS (\n\n  SELECT\n    block_timestamp,\n    cacao_tx_id,\n    pool_name,\n    cacao_address,\n    cacao_e8,\n    asset_e8,\n    stake_units,\n    asset_tx_id,\n    asset_address,\n    asset_blockchain,\n    event_id,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__stake_events') }}\n),\nunstakes AS (\n  SELECT\n    block_timestamp,\n    tx_id,\n    pool_name,\n    from_address,\n    to_address,\n    emit_cacao_e8,\n    emit_asset_e8,\n    stake_units,\n    imp_loss_protection_e8,\n    asymmetry,\n    basis_points,\n    event_id,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__withdraw_events') }}\n)\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  cacao_tx_id AS tx_id,\n  'add_liquidity' AS lp_action,\n  se.pool_name,\n  cacao_address AS from_address,\n  NULL AS to_address,\n  COALESCE((cacao_e8 / pow(10, 8)), 0) AS cacao_amount,\n  COALESCE((cacao_e8 / pow(10, 8) * cacao_usd), 0) AS cacao_amount_usd,\n  COALESCE((asset_e8 / pow(10, 8)), 0) AS asset_amount,\n  COALESCE((asset_e8 / pow(10, 8) * asset_usd), 0) AS asset_amount_usd,\n  stake_units,\n  asset_tx_id,\n  asset_address,\n  asset_blockchain,\n  NULL AS il_protection,\n  NULL AS il_protection_usd,\n  NULL AS unstake_asymmetry,\n  NULL AS unstake_basis_points,\n  concat_ws(\n    '-',\n    event_id,\n    se.block_timestamp,\n    COALESCE(\n      tx_id,\n      ''\n    ),\n    lp_action,\n    se.pool_name,\n    COALESCE(\n      from_address,\n      ''\n    ),\n    COALESCE(\n      to_address,\n      ''\n    ),\n    COALESCE(\n      asset_tx_id,\n      ''\n    )\n  ) AS _unique_key,\n  se._inserted_timestamp\nFROM\n  stakes se\n  JOIN {{ ref('silver__block_log') }}\n  b\n  ON se.block_timestamp = b.timestamp\n  LEFT JOIN {{ ref('silver__prices') }}\n  p\n  ON b.height = p.block_id\n  AND se.pool_name = p.pool_name\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\nUNION\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  tx_id,\n  'remove_liquidity' AS lp_action,\n  ue.pool_name,\n  from_address,\n  to_address,\n  COALESCE(emit_cacao_e8 / pow(10, 8), 0) AS cacao_amount,\n  COALESCE(emit_cacao_e8 / pow(10, 8) * cacao_usd, 0) AS cacao_amount_usd,\n  COALESCE(emit_asset_e8 / pow(10, 8), 0) AS asset_amount,\n  COALESCE(emit_asset_e8 / pow(10, 8) * asset_usd, 0) AS asset_amount_usd,\n  stake_units,\n  NULL AS asset_tx_id,\n  NULL AS asset_address,\n  NULL AS asset_blockchain,\n  imp_loss_protection_e8 / pow(\n    10,\n    8\n  ) AS il_protection,\n  imp_loss_protection_e8 / pow(\n    10,\n    8\n  ) * cacao_usd AS il_protection_usd,\n  asymmetry AS unstake_asymmetry,\n  basis_points AS unstake_basis_points,\n  concat_ws(\n    '-',\n    event_id,\n    ue.block_timestamp,\n    COALESCE(\n      tx_id,\n      ''\n    ),\n    lp_action,\n    ue.pool_name,\n    COALESCE(\n      from_address,\n      ''\n    ),\n    COALESCE(\n      to_address,\n      ''\n    ),\n    COALESCE(\n      asset_tx_id,\n      ''\n    )\n  ) AS _unique_key,\n  ue._inserted_timestamp\nFROM\n  unstakes ue\n  JOIN {{ ref('silver__block_log') }}\n  b\n  ON ue.block_timestamp = b.timestamp\n  LEFT JOIN {{ ref('silver__prices') }}\n  p\n  ON b.height = p.block_id\n  AND ue.pool_name = p.pool_name\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__stake_events", "package": null, "version": null}, {"name": "silver__withdraw_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__prices", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__stake_events", "model.maya_models.silver__withdraw_events", "model.maya_models.silver__block_log", "model.maya_models.silver__prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__refund_events": {"database": "MAYA", "schema": "silver", "name": "silver__refund_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__refund_events.sql", "original_file_path": "models/silver/silver__refund_events.sql", "unique_id": "model.maya_models.silver__refund_events", "fqn": ["maya_models", "silver", "silver__refund_events"], "alias": "refund_events", "checksum": {"name": "sha256", "checksum": "8280d984b979f60633884c4af43ec7e9d89f9684d5451ed8e25a6a922e14fb64"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_2ND_E8": {"name": "ASSET_2ND_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CODE": {"name": "CODE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REASON": {"name": "REASON", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__refund_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.228182, "relation_name": "MAYA.silver.refund_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  asset_e8,\n  asset_2nd,\n  asset_2nd_e8,\n  memo,\n  code,\n  reason,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__refund_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__validator_request_leave_events": {"database": "MAYA", "schema": "silver", "name": "silver__validator_request_leave_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__validator_request_leave_events.sql", "original_file_path": "models/silver/silver__validator_request_leave_events.sql", "unique_id": "model.maya_models.silver__validator_request_leave_events", "fqn": ["maya_models", "silver", "silver__validator_request_leave_events"], "alias": "validator_request_leave_events", "checksum": {"name": "sha256", "checksum": "19cdf0092de078293490fe97107988f6035c92cbc6350e59e2531bf4e3d422d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"EVENT_ID": {"name": "EVENT_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NODE_ADDRESS": {"name": "NODE_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__validator_request_leave_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.210963, "relation_name": "MAYA.silver.validator_request_leave_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  from_addr AS from_address,\n  node_addr AS node_address,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__validator_request_leave_events') }}\n  e qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__INGESTED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__validator_request_leave_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__transfer_events": {"database": "MAYA", "schema": "silver", "name": "silver__transfer_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__transfer_events.sql", "original_file_path": "models/silver/silver__transfer_events.sql", "unique_id": "model.maya_models.silver__transfer_events", "fqn": ["maya_models", "silver", "silver__transfer_events"], "alias": "transfer_events", "checksum": {"name": "sha256", "checksum": "415a3721e0fee1c3dc6d6dc748549c183c8c13f4b71a417e450625d54e322fd0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AMOUNT_E8": {"name": "AMOUNT_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__transfer_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.119518, "relation_name": "MAYA.silver.transfer_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  amount_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__transfer_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, from_addr, to_addr, asset, amount_e8\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__transfer_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__total_value_locked": {"database": "MAYA", "schema": "silver", "name": "silver__total_value_locked", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__total_value_locked.sql", "original_file_path": "models/silver/silver__total_value_locked.sql", "unique_id": "model.maya_models.silver__total_value_locked", "fqn": ["maya_models", "silver", "silver__total_value_locked"], "alias": "total_value_locked", "checksum": {"name": "sha256", "checksum": "9a802838fa331df3af693eeb4f9e88f8e6f7fce1da7f504e68d7f537ec531014"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["day"]}, "tags": [], "description": "", "columns": {"DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_POOLED": {"name": "TOTAL_VALUE_POOLED", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_BONDED": {"name": "TOTAL_VALUE_BONDED", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_LOCKED": {"name": "TOTAL_VALUE_LOCKED", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__total_value_locked.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "table", "cluster_by": ["day"]}, "created_at": 1741278782.259017, "relation_name": "MAYA.silver.total_value_locked", "raw_code": "{{ config(\n  materialized = 'table',\n  cluster_by = ['day']\n) }}\n\nWITH bond_type_day AS (\n\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    bond_type,\n    (SUM(e8) / pow(10, 8)) AS cacao_amount,\n    MAX(\n      A._inserted_timestamp\n    ) AS _inserted_timestamp\n  FROM\n    {{ ref('silver__bond_events') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n  GROUP BY\n    DAY,\n    bond_type\n),\nbond_type_day_direction AS (\n  SELECT\n    DAY,\n    bond_type,\n    CASE\n      WHEN bond_type IN (\n        'bond_returned',\n        'bond_cost'\n      ) THEN -1\n      ELSE 1\n    END AS direction,\n    cacao_amount,\n    cacao_amount * direction AS abs_CACAO_amount,\n    _inserted_timestamp\n  FROM\n    bond_type_day\n),\ntotal_value_bonded_tbl AS (\n  SELECT\n    DAY,\n    SUM(abs_CACAO_amount) AS total_value_bonded,\n    MAX(_inserted_timestamp) AS _inserted_timestamp\n  FROM\n    bond_type_day_direction\n  GROUP BY\n    DAY\n),\ntotal_pool_depth AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    b.height AS block_id,\n    pool_name,\n    cacao_e8,\n    asset_e8,\n    MAX(height) over (PARTITION BY pool_name, DATE(b.block_timestamp)) AS max_block_id,\n    A._inserted_timestamp\n  FROM\n    {{ ref('silver__block_pool_depths') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n  WHERE\n    LOWER(pool_name) NOT LIKE 'thor.%'\n),\ntotal_pool_depth_max AS (\n  SELECT\n    DAY,\n    cacao_e8 AS cacao_depth,\n    asset_e8 AS asset_depth,\n    _inserted_timestamp\n  FROM\n    total_pool_depth\n  WHERE\n    block_id = max_block_id\n),\ntotal_value_pooled_tbl AS (\n  SELECT\n    DAY,\n    SUM(cacao_depth) * 2 / power(\n      10,\n      8\n    ) AS total_value_pooled,\n    MAX(_inserted_timestamp) AS _inserted_timestamp\n  FROM\n    total_pool_depth_max\n  GROUP BY\n    DAY\n)\nSELECT\n  COALESCE(\n    total_value_bonded_tbl.day,\n    total_value_pooled_tbl.day\n  ) AS DAY,\n  COALESCE(\n    total_value_pooled,\n    0\n  ) AS total_value_pooled,\n  COALESCE(SUM(total_value_bonded) over (\nORDER BY\n  COALESCE(total_value_bonded_tbl.day, total_value_pooled_tbl.day) ASC), 0) AS total_value_bonded,\n  COALESCE(\n    total_value_pooled,\n    0\n  ) + SUM(COALESCE(total_value_bonded, 0)) over (\n    ORDER BY\n      COALESCE(\n        total_value_bonded_tbl.day,\n        total_value_pooled_tbl.day\n      ) ASC\n  ) AS total_value_locked,\n  total_value_bonded_tbl._inserted_timestamp\nFROM\n  total_value_bonded_tbl full\n  JOIN total_value_pooled_tbl\n  ON total_value_bonded_tbl.day = total_value_pooled_tbl.day", "language": "sql", "refs": [{"name": "silver__bond_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__block_pool_depths", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.silver__bond_events", "model.maya_models.silver__block_log", "model.maya_models.silver__block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__bond_events": {"database": "MAYA", "schema": "silver", "name": "silver__bond_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__bond_events.sql", "original_file_path": "models/silver/silver__bond_events.sql", "unique_id": "model.maya_models.silver__bond_events", "fqn": ["maya_models", "silver", "silver__bond_events"], "alias": "bond_events", "checksum": {"name": "sha256", "checksum": "5c3591a0130edc89865968804920eab2ca343e01ec07655f819dadfa311b10b8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BOND_TYPE": {"name": "BOND_TYPE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "E8": {"name": "E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__bond_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.2739468, "relation_name": "MAYA.silver.bond_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  asset_e8,\n  memo,\n  bond_type,\n  e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__bond_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__update_node_account_status_events": {"database": "MAYA", "schema": "silver", "name": "silver__update_node_account_status_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__update_node_account_status_events.sql", "original_file_path": "models/silver/silver__update_node_account_status_events.sql", "unique_id": "model.maya_models.silver__update_node_account_status_events", "fqn": ["maya_models", "silver", "silver__update_node_account_status_events"], "alias": "update_node_account_status_events", "checksum": {"name": "sha256", "checksum": "37685a85449414b88559a7e12593c87dd6908b802f83cf798aec448b47c479f8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"NODE_ADDRESS": {"name": "NODE_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CURRENT_STATUS": {"name": "CURRENT_STATUS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FORMER_STATUS": {"name": "FORMER_STATUS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__update_node_account_status_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.2681348, "relation_name": "MAYA.silver.update_node_account_status_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr AS node_address,\n  \"CURRENT\" AS current_status,\n  former AS former_status,\n  block_timestamp,\n  event_id,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__update_node_account_status_events') }}\n  e qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__update_node_account_status_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__update_node_account_status_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__swaps": {"database": "MAYA", "schema": "silver", "name": "silver__swaps", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__swaps.sql", "original_file_path": "models/silver/silver__swaps.sql", "unique_id": "model.maya_models.silver__swaps", "fqn": ["maya_models", "silver", "silver__swaps"], "alias": "swaps", "checksum": {"name": "sha256", "checksum": "1e755fd340c9a8ef5b5068053b6bff8e0fb83d91ca179c106a3079196652c6cf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"]}, "tags": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP::DATE": {"name": "BLOCK_TIMESTAMP::DATE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_POOL_ADDRESS": {"name": "TO_POOL_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ASSET": {"name": "FROM_ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET": {"name": "TO_ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_AMOUNT": {"name": "FROM_AMOUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_AMOUNT": {"name": "TO_AMOUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MIN_TO_AMOUNT": {"name": "MIN_TO_AMOUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_AMOUNT_USD": {"name": "FROM_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_AMOUNT_USD": {"name": "TO_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_AMOUNT_MIN_USD": {"name": "TO_AMOUNT_MIN_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SWAP_SLIP_BP": {"name": "SWAP_SLIP_BP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQ_FEE_cacao": {"name": "LIQ_FEE_cacao", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQ_FEE_cacao_USD": {"name": "LIQ_FEE_cacao_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQ_FEE_ASSET": {"name": "LIQ_FEE_ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQ_FEE_ASSET_USD": {"name": "LIQ_FEE_ASSET_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__swaps.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278782.3184829, "relation_name": "MAYA.silver.swaps", "raw_code": "{{ config(\n  materialized = 'incremental',\n  unique_key = '_unique_key',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH swaps AS (\n\n  SELECT\n    tx_id,\n    blockchain,\n    from_address,\n    to_address,\n    from_asset,\n    from_e8,\n    to_asset,\n    to_e8,\n    memo,\n    pool_name,\n    to_e8_min,\n    swap_slip_bp,\n    liq_fee_e8,\n    liq_fee_in_cacao_e8,\n    _DIRECTION,\n    event_id,\n    streaming_count,\n    streaming_quantity,\n    b.block_timestamp,\n    b.height AS block_id,\n    A._INSERTED_TIMESTAMP,\n    COUNT(1) over (\n      PARTITION BY tx_id\n    ) AS n_tx,\n    RANK() over (\n      PARTITION BY tx_id\n      ORDER BY\n        liq_fee_e8 ASC\n    ) AS rank_liq_fee\n  FROM\n    {{ ref('silver__swap_events') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\n)\nSELECT\n  se.block_timestamp,\n  se.block_id,\n  tx_id,\n  blockchain,\n  se.pool_name,\n  from_address,\n  CASE\n    WHEN n_tx > 1\n    AND rank_liq_fee = 1\n    AND len(SPLIT(memo, ':') [4] :: STRING) = 43 THEN SPLIT(\n      memo,\n      ':'\n    ) [4] :: STRING\n    WHEN n_tx > 1\n    AND LOWER(LEFT(memo, 1)) IN (\n      's',\n      '='\n    )\n    AND len(COALESCE(SPLIT(memo, ':') [2] :: STRING, '')) = 0 THEN from_address\n    ELSE SPLIT(\n      memo,\n      ':'\n    ) [2] :: STRING\n  END AS native_to_address,\n  to_address AS to_pool_address,\n  CASE\n    WHEN COALESCE(SPLIT(memo, ':') [4], '') = '' THEN NULL\n    WHEN CONTAINS(SPLIT(memo, ':') [4], '/') THEN SPLIT(SPLIT(memo, ':') [4], '/') [0]\n    ELSE SPLIT(\n      memo,\n      ':'\n    ) [4] :: STRING\n  END AS affiliate_address,\n  TRY_CAST(\n    CASE\n      WHEN COALESCE(SPLIT(memo, ':') [5], '') = '' THEN NULL\n      WHEN CONTAINS(SPLIT(memo, ':') [5], '/') THEN SPLIT(SPLIT(memo, ':') [5], '/') [0]\n      ELSE SPLIT(\n        memo,\n        ':'\n      ) [5]\n    END :: STRING AS INT\n  ) AS affiliate_fee_basis_points,\n  SPLIT(COALESCE(SPLIT(SPLIT(memo, '|') [0], ':') [4], ''), '/') AS affiliate_addresses_array,\n  ARRAY_AGG(TRY_CAST(TRIM(f.value) AS INTEGER)) within GROUP (\n    ORDER BY\n      f.index\n  ) AS affiliate_fee_basis_points_array,\n  from_asset,\n  to_asset,\n  COALESCE(from_e8 / pow(10, 8), 0) AS from_amount,\n  COALESCE(to_e8 / pow(10, 8), 0) AS to_amount,\n  COALESCE(to_e8_min / pow(10, 8), 0) AS min_to_amount,\n  CASE\n    WHEN from_asset = 'MAYA.CACAO' THEN COALESCE(from_e8 * cacao_usd / pow(10, 8), 0)\n    ELSE COALESCE(from_e8 * asset_usd / pow(10, 8), 0)\n  END AS from_amount_usd,\n  CASE\n    WHEN to_asset = 'MAYA.CACAO' THEN COALESCE(to_e8 * cacao_usd / pow(10, 8), 0)\n    ELSE COALESCE(to_e8 * asset_usd / pow(10, 8), 0)\n  END AS to_amount_usd,\n  cacao_usd,\n  asset_usd,\n  CASE\n    WHEN to_asset = 'MAYA.CACAO' THEN COALESCE(to_e8_min * cacao_usd / pow(10, 8), 0)\n    ELSE COALESCE(to_e8_min * asset_usd / pow(10, 8), 0)\n  END AS to_amount_min_usd,\n  swap_slip_bp,\n  COALESCE(liq_fee_in_cacao_e8 / pow(10, 8), 0) AS liq_fee_cacao,\n  COALESCE(liq_fee_in_cacao_e8 / pow(10, 8) * cacao_usd, 0) AS liq_fee_cacao_usd,\n  CASE\n    WHEN to_asset = 'MAYA.CACAO' THEN COALESCE(liq_fee_e8 / pow(10, 8), 0)\n    ELSE COALESCE(liq_fee_e8 / pow(10, 8), 0)\n  END AS liq_fee_asset,\n  CASE\n    WHEN to_asset = 'MAYA.CACAO' THEN COALESCE(liq_fee_e8 * cacao_usd / pow(10, 8), 0)\n    ELSE COALESCE(liq_fee_e8 * asset_usd / pow(10, 8), 0)\n  END AS liq_fee_asset_usd,\n  streaming_count,\n  streaming_quantity,\n  concat_ws(\n    '-',\n    tx_id,\n    se.block_id,\n    to_asset,\n    from_asset,\n    COALESCE(\n      native_to_address,\n      ''\n    ),\n    from_address,\n    se.pool_name,\n    to_pool_address,\n    event_id\n  ) AS _unique_key,\n  _INSERTED_TIMESTAMP\nFROM\n  swaps se\n  LEFT JOIN {{ ref('silver__prices') }}\n  p\n  ON se.block_id = p.block_id\n  AND se.pool_name = p.pool_name,\n  LATERAL FLATTEN(\n    input => SPLIT(COALESCE(SPLIT(memo, ':') [5], ''), '/')\n  ) f\nGROUP BY\n  ALL", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__swap_events", "model.maya_models.silver__block_log", "model.maya_models.silver__prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__swap_events": {"database": "MAYA", "schema": "silver", "name": "silver__swap_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__swap_events.sql", "original_file_path": "models/silver/silver__swap_events.sql", "unique_id": "model.maya_models.silver__swap_events", "fqn": ["maya_models", "silver", "silver__swap_events"], "alias": "swap_events", "checksum": {"name": "sha256", "checksum": "07d7b5cbc2db70032641394be758c1d434b9b48e617c0927eb86b6bf92d96a7d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ASSET": {"name": "FROM_ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_E8": {"name": "FROM_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET": {"name": "TO_ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_E8": {"name": "TO_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_E8_MIN": {"name": "TO_E8_MIN", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SWAP_SLIP_BP": {"name": "SWAP_SLIP_BP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQ_FEE_E8": {"name": "LIQ_FEE_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQ_FEE_IN_CACAO_E8": {"name": "LIQ_FEE_IN_CACAO_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_DIRECTION": {"name": "_DIRECTION", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__swap_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.297707, "relation_name": "MAYA.silver.swap_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  from_asset,\n  from_e8,\n  to_asset,\n  to_e8,\n  memo,\n  pool AS pool_name,\n  to_e8_min,\n  swap_slip_bp,\n  liq_fee_e8,\n  liq_fee_in_cacao_e8,\n  _DIRECTION,\n  _STREAMING,\n  streaming_count,\n  streaming_quantity,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__swap_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__INGESTED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__mayaname_change_events": {"database": "MAYA", "schema": "silver", "name": "silver__mayaname_change_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__mayaname_change_events.sql", "original_file_path": "models/silver/silver__mayaname_change_events.sql", "unique_id": "model.maya_models.silver__mayaname_change_events", "fqn": ["maya_models", "silver", "silver__mayaname_change_events"], "alias": "mayaname_change_events", "checksum": {"name": "sha256", "checksum": "b5b8e5c24f16d1c60f0b62cd405cb68419daf54488e94571c6110b5daab5c0c3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.1998851, "relation_name": "MAYA.silver.mayaname_change_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  owner,\n  chain,\n  address,\n  expire,\n  NAME,\n  fund_amount_e8,\n  registration_fee_e8,\n  event_id,\n  height,\n  tx_id,\n  memo,\n  sender,\n  preferred_asset,\n  affiliate_bps,\n  sub_affiliates,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__mayaname_change_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__mayaname_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__mayaname_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__rewards_events": {"database": "MAYA", "schema": "silver", "name": "silver__rewards_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__rewards_events.sql", "original_file_path": "models/silver/silver__rewards_events.sql", "unique_id": "model.maya_models.silver__rewards_events", "fqn": ["maya_models", "silver", "silver__rewards_events"], "alias": "rewards_events", "checksum": {"name": "sha256", "checksum": "0784662905351541ca09053c58400610367d5ce650cc7fc3a7f725075ac9441d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BOND_E8": {"name": "BOND_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__rewards_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.291435, "relation_name": "MAYA.silver.rewards_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  bond_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__rewards_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__rewards_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__rewards_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__pool_block_fees": {"database": "MAYA", "schema": "silver", "name": "silver__pool_block_fees", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__pool_block_fees.sql", "original_file_path": "models/silver/silver__pool_block_fees.sql", "unique_id": "model.maya_models.silver__pool_block_fees", "fqn": ["maya_models", "silver", "silver__pool_block_fees"], "alias": "pool_block_fees", "checksum": {"name": "sha256", "checksum": "9c8c3680fc8c726df631437862fac6f04deaa92e01d65318d7fc014486cf3cde"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["day"], "incremental_predicates": ["DBT_INTERNAL_DEST.DAY >= (select min(DAY) from \n    \n    MAYA.silver.pool_block_fees__dbt_tmp)"]}, "tags": [], "description": "", "columns": {"DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REWARDS": {"name": "REWARDS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_LIQUIDITY_FEES_cacao": {"name": "TOTAL_LIQUIDITY_FEES_cacao", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_LIQUIDITY_FEES": {"name": "ASSET_LIQUIDITY_FEES", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_LIQUIDITY_FEES": {"name": "cacao_LIQUIDITY_FEES", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EARNINGS": {"name": "EARNINGS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__pool_block_fees.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.DAY >= (select min(DAY) from \n    \n    MAYA.silver.pool_block_fees__dbt_tmp)"], "cluster_by": ["day"]}, "created_at": 1741278782.2798588, "relation_name": "MAYA.silver.pool_block_fees", "raw_code": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"_unique_key\",\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.DAY >= (select min(DAY) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['day']\n) }}\n\nWITH all_block_id AS (\n\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    MAX(\n      A._inserted_timestamp\n    ) AS _inserted_timestamp\n  FROM\n    {{ ref('silver__block_pool_depths') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\nGROUP BY\n  DAY,\n  pool_name\n),\ntotal_pool_rewards_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    SUM(cacao_e8) AS rewards\n  FROM\n    {{ ref('silver__rewards_event_entries') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\nGROUP BY\n  DAY,\n  pool_name\n),\ntotal_liquidity_fees_CACAO_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    SUM(liq_fee_in_CACAO_e8) AS total_liquidity_fees_CACAO\n  FROM\n    {{ ref('silver__swap_events') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\nGROUP BY\n  DAY,\n  pool_name\n),\nliquidity_fees_asset_tbl AS (\n  SELECT\n    DATE(block_timestamp) AS DAY,\n    pool_name,\n    SUM(asset_fee) AS assetLiquidityFees\n  FROM\n    (\n      SELECT\n        b.block_timestamp,\n        pool_name,\n        CASE\n          WHEN to_asset = 'MAYA.CACAO' THEN 0\n          ELSE liq_fee_e8\n        END AS asset_fee\n      FROM\n        {{ ref('silver__swap_events') }} A\n        JOIN {{ ref('silver__block_log') }}\n        b\n        ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\n)\nGROUP BY\n  DAY,\n  pool_name\n),\nliquidity_fees_cacao_tbl AS (\n  SELECT\n    DATE(block_timestamp) AS DAY,\n    pool_name,\n    SUM(asset_fee) AS cacaoLiquidityFees\n  FROM\n    (\n      SELECT\n        b.block_timestamp,\n        pool_name,\n        CASE\n          WHEN to_asset <> 'MAYA.CACAO' THEN 0\n          ELSE liq_fee_e8\n        END AS asset_fee\n      FROM\n        {{ ref('silver__swap_events') }} A\n        JOIN {{ ref('silver__block_log') }}\n        b\n        ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\n)\nGROUP BY\n  DAY,\n  pool_name\n)\nSELECT\n  A.day,\n  A.pool_name,\n  COALESCE((rewards / power(10, 8)), 0) AS rewards,\n  COALESCE((total_liquidity_fees_cacao / power(10, 8)), 0) AS total_liquidity_fees_cacao,\n  COALESCE((assetLiquidityFees / power(10, 8)), 0) AS asset_liquidity_fees,\n  COALESCE((cacaoLiquidityFees / power(10, 8)), 0) AS cacao_liquidity_fees,\n  (\n    (COALESCE(total_liquidity_fees_cacao, 0) + COALESCE(rewards, 0)) / power(\n      10,\n      8\n    )\n  ) AS earnings,\n  concat_ws(\n    '-',\n    A.day,\n    A.pool_name\n  ) AS _unique_key,\n  _inserted_timestamp\nFROM\n  all_block_id A\n  LEFT JOIN total_pool_rewards_tbl b\n  ON A.day = b.day\n  AND A.pool_name = b.pool_name\n  LEFT JOIN total_liquidity_fees_cacao_tbl C\n  ON A.day = C.day\n  AND A.pool_name = C.pool_name\n  LEFT JOIN liquidity_fees_asset_tbl d\n  ON A.day = d.day\n  AND A.pool_name = d.pool_name\n  LEFT JOIN liquidity_fees_cacao_tbl e\n  ON A.day = e.day\n  AND A.pool_name = e.pool_name", "language": "sql", "refs": [{"name": "silver__block_pool_depths", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__rewards_event_entries", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__swap_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__swap_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__swap_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__block_pool_depths", "model.maya_models.silver__block_log", "model.maya_models.silver__rewards_event_entries", "model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__fee_events": {"database": "MAYA", "schema": "silver", "name": "silver__fee_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__fee_events.sql", "original_file_path": "models/silver/silver__fee_events.sql", "unique_id": "model.maya_models.silver__fee_events", "fqn": ["maya_models", "silver", "silver__fee_events"], "alias": "fee_events", "checksum": {"name": "sha256", "checksum": "98de1ad1292e68282b7c48533b1484ebb75e233b768bf881ccf6310f9d617b5a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_DEDUCT": {"name": "POOL_DEDUCT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__fee_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.3451, "relation_name": "MAYA.silver.fee_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  asset,\n  asset_e8,\n  pool_deduct,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__fee_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__fee_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__add_events": {"database": "MAYA", "schema": "silver", "name": "silver__add_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__add_events.sql", "original_file_path": "models/silver/silver__add_events.sql", "unique_id": "model.maya_models.silver__add_events", "fqn": ["maya_models", "silver", "silver__add_events"], "alias": "add_events", "checksum": {"name": "sha256", "checksum": "b54d239b9f51c19305569171444cd90e652e0d4645808c131157e02c52c4c62f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_E8": {"name": "cacao_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__add_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.3533409, "relation_name": "MAYA.silver.add_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  asset_e8,\n  memo,\n  cacao_e8,\n  pool AS pool_name,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__add_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__pool_balance_change_events": {"database": "MAYA", "schema": "silver", "name": "silver__pool_balance_change_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__pool_balance_change_events.sql", "original_file_path": "models/silver/silver__pool_balance_change_events.sql", "unique_id": "model.maya_models.silver__pool_balance_change_events", "fqn": ["maya_models", "silver", "silver__pool_balance_change_events"], "alias": "pool_balance_change_events", "checksum": {"name": "sha256", "checksum": "8118fdd91dfa1c7f1e3a59d62375a1b22c80f9f1b92f96a7e16786fac158f2d5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CACAO_AMOUNT": {"name": "CACAO_AMOUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CACAO_ADD": {"name": "CACAO_ADD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_ADD": {"name": "ASSET_ADD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REASON": {"name": "REASON", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__pool_balance_change_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.3780532, "relation_name": "MAYA.silver.pool_balance_change_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  asset,\n  cacao_amt AS cacao_amount,\n  cacao_add,\n  asset_amt AS asset_amount,\n  asset_add,\n  reason,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__pool_balance_change_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, asset\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__pool_balance_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__pool_balance_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__block_rewards": {"database": "MAYA", "schema": "silver", "name": "silver__block_rewards", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__block_rewards.sql", "original_file_path": "models/silver/silver__block_rewards.sql", "unique_id": "model.maya_models.silver__block_rewards", "fqn": ["maya_models", "silver", "silver__block_rewards"], "alias": "block_rewards", "checksum": {"name": "sha256", "checksum": "57333729c52cc663390cb34d13850a238d9a124d734a23c2223c303c672119c8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["day"]}, "tags": [], "description": "", "columns": {"DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQUIDITY_FEE": {"name": "LIQUIDITY_FEE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_REWARDS": {"name": "BLOCK_REWARDS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EARNINGS": {"name": "EARNINGS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BONDING_EARNINGS": {"name": "BONDING_EARNINGS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQUIDITY_EARNINGS": {"name": "LIQUIDITY_EARNINGS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVG_NODE_COUNT": {"name": "AVG_NODE_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__block_rewards.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "table", "cluster_by": ["day"]}, "created_at": 1741278782.366529, "relation_name": "MAYA.silver.block_rewards", "raw_code": "{{ config(\n  materialized = 'table',\n  cluster_by = ['day']\n) }}\n\nWITH all_block_id AS (\n\n  SELECT\n    block_timestamp,\n    MAX(_inserted_timestamp) AS _inserted_timestamp\n  FROM\n    {{ ref('silver__block_pool_depths') }}\n  GROUP BY\n    block_timestamp\n),\navg_nodes_tbl AS (\n  SELECT\n    block_timestamp,\n    SUM(\n      CASE\n        WHEN current_status = 'Active' THEN 1\n        WHEN former_status = 'Active' THEN -1\n        ELSE 0\n      END\n    ) AS delta\n  FROM\n    {{ ref('silver__update_node_account_status_events') }}\n  GROUP BY\n    block_timestamp\n),\nall_block_with_nodes AS (\n  SELECT\n    all_block_id.block_timestamp,\n    delta,\n    SUM(delta) over (\n      ORDER BY\n        all_block_id.block_timestamp ASC\n    ) AS avg_nodes,\n    _inserted_timestamp AS _inserted_timestamp\n  FROM\n    all_block_id\n    LEFT JOIN avg_nodes_tbl\n    ON all_block_id.block_timestamp = avg_nodes_tbl.block_timestamp\n),\nall_block_with_nodes_date AS (\n  SELECT\n    b.block_timestamp :: DATE AS DAY,\n    AVG(avg_nodes) AS avg_nodes,\n    MAX(\n      A._inserted_timestamp\n    ) AS _inserted_timestamp\n  FROM\n    all_block_with_nodes A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n  GROUP BY\n    DAY\n),\nliquidity_fee_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    COALESCE(SUM(liq_fee_in_cacao_e8), 0) AS liquidity_fee\n  FROM\n    {{ ref('silver__swap_events') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n  GROUP BY\n    1\n),\nbond_earnings_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    SUM(bond_e8) AS bond_earnings\n  FROM\n    {{ ref('silver__rewards_events') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n  GROUP BY\n    DAY\n),\ntotal_pool_rewards_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    SUM(cacao_e8) AS total_pool_rewards\n  FROM\n    {{ ref('silver__rewards_event_entries') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n  GROUP BY\n    DAY\n)\nSELECT\n  all_block_with_nodes_date.day,\n  COALESCE((liquidity_fee_tbl.liquidity_fee / power(10, 8)), 0) AS liquidity_fee,\n  (\n    (\n      COALESCE(\n        total_pool_rewards_tbl.total_pool_rewards,\n        0\n      ) + COALESCE(\n        bond_earnings_tbl.bond_earnings,\n        0\n      )\n    )\n  ) / power(\n    10,\n    8\n  ) AS block_rewards,\n  (\n    (\n      COALESCE(\n        total_pool_rewards_tbl.total_pool_rewards,\n        0\n      ) + COALESCE(\n        liquidity_fee_tbl.liquidity_fee,\n        0\n      ) + COALESCE(\n        bond_earnings_tbl.bond_earnings,\n        0\n      )\n    )\n  ) / power(\n    10,\n    8\n  ) AS earnings,\n  COALESCE((bond_earnings_tbl.bond_earnings / power(10, 8)), 0) AS bonding_earnings,\n  (\n    (\n      COALESCE(\n        total_pool_rewards_tbl.total_pool_rewards,\n        0\n      ) + COALESCE(\n        liquidity_fee_tbl.liquidity_fee,\n        0\n      )\n    )\n  ) / power(\n    10,\n    8\n  ) AS liquidity_earnings,\n  all_block_with_nodes_date.avg_nodes + 2 AS avg_node_count,\n  all_block_with_nodes_date._inserted_timestamp\nFROM\n  all_block_with_nodes_date\n  LEFT JOIN liquidity_fee_tbl\n  ON all_block_with_nodes_date.day = liquidity_fee_tbl.day\n  LEFT JOIN total_pool_rewards_tbl\n  ON all_block_with_nodes_date.day = total_pool_rewards_tbl.day\n  LEFT JOIN bond_earnings_tbl\n  ON all_block_with_nodes_date.day = bond_earnings_tbl.day", "language": "sql", "refs": [{"name": "silver__block_pool_depths", "package": null, "version": null}, {"name": "silver__update_node_account_status_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__swap_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__rewards_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__rewards_event_entries", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.silver__block_pool_depths", "model.maya_models.silver__update_node_account_status_events", "model.maya_models.silver__block_log", "model.maya_models.silver__swap_events", "model.maya_models.silver__rewards_events", "model.maya_models.silver__rewards_event_entries"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__cacao_price": {"database": "MAYA", "schema": "silver", "name": "silver__cacao_price", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__cacao_price.sql", "original_file_path": "models/silver/silver__cacao_price.sql", "unique_id": "model.maya_models.silver__cacao_price", "fqn": ["maya_models", "silver", "silver__cacao_price"], "alias": "cacao_price", "checksum": {"name": "sha256", "checksum": "bcbe99104c528b512d0c57f3961010cba9075e15951b2cafe89d59603a76dabf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"CACAO_PRICE_E8": {"name": "CACAO_PRICE_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__cacao_price.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.763498, "relation_name": "MAYA.silver.cacao_price", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  cacao_price_e8,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref(\n    'bronze__cacao_price'\n  ) }}\n  qualify(ROW_NUMBER() over (PARTITION BY block_timestamp\nORDER BY\n  cacao_price_e8 DESC) = 1)", "language": "sql", "refs": [{"name": "bronze__cacao_price", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__cacao_price"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__reserve_events": {"database": "MAYA", "schema": "silver", "name": "silver__reserve_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__reserve_events.sql", "original_file_path": "models/silver/silver__reserve_events.sql", "unique_id": "model.maya_models.silver__reserve_events", "fqn": ["maya_models", "silver", "silver__reserve_events"], "alias": "reserve_events", "checksum": {"name": "sha256", "checksum": "c49278e8d8b737973a7948f34db7f7511cef2beeb57dc2ee942a25704d0ba654"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.213761, "relation_name": "MAYA.silver.reserve_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  asset_e8,\n  memo,\n  addr AS address,\n  e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__reserve_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__reserve_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__reserve_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__streamling_swap_details_events": {"database": "MAYA", "schema": "silver", "name": "silver__streamling_swap_details_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__streamling_swap_details_events.sql", "original_file_path": "models/silver/silver__streamling_swap_details_events.sql", "unique_id": "model.maya_models.silver__streamling_swap_details_events", "fqn": ["maya_models", "silver", "silver__streamling_swap_details_events"], "alias": "streamling_swap_details_events", "checksum": {"name": "sha256", "checksum": "cd23093fc6ab54b49297d8e14f4d0d5418877a02252689bde5ed43de5240420a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INTERVAL": {"name": "INTERVAL", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COUNT": {"name": "COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_height": {"name": "last_height", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_asset": {"name": "deposit_asset", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_e8": {"name": "deposit_e8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "in_asset": {"name": "in_asset", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "in_e8": {"name": "in_e8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "out_asset": {"name": "out_asset", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "out_e8": {"name": "out_e8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failed_swaps": {"name": "failed_swaps", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failed_swaps_reasons": {"name": "failed_swaps_reasons", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__streamling_swap_details_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.76809, "relation_name": "MAYA.silver.streamling_swap_details_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx_id,\n  INTERVAL,\n  quantity,\n  COUNT,\n  last_height,\n  deposit_asset,\n  deposit_e8,\n  in_asset,\n  in_e8,\n  out_asset,\n  out_e8,\n  failed_swaps,\n  failed_swap_reasons,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__streamling_swap_details_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__INGESTED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__set_node_keys_events": {"database": "MAYA", "schema": "silver", "name": "silver__set_node_keys_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__set_node_keys_events.sql", "original_file_path": "models/silver/silver__set_node_keys_events.sql", "unique_id": "model.maya_models.silver__set_node_keys_events", "fqn": ["maya_models", "silver", "silver__set_node_keys_events"], "alias": "set_node_keys_events", "checksum": {"name": "sha256", "checksum": "cf71a60a56c22e33713e6ade188df247229982cc7c84c7e58e3e586ec7043398"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.2164779, "relation_name": "MAYA.silver.set_node_keys_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr AS node_address,\n  secp256k1,\n  ed25519,\n  validator_consensus,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__set_node_keys_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__set_node_keys_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__set_node_keys_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__block_log": {"database": "MAYA", "schema": "silver", "name": "silver__block_log", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__block_log.sql", "original_file_path": "models/silver/silver__block_log.sql", "unique_id": "model.maya_models.silver__block_log", "fqn": ["maya_models", "silver", "silver__block_log"], "alias": "block_log", "checksum": {"name": "sha256", "checksum": "864dd07b0e360adc9720da8516b99a3f042f0462d45e11fdc1ba2890f11b0908"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"TIMESTAMP": {"name": "TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "HEIGHT": {"name": "HEIGHT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "HASH": {"name": "HASH", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__block_log.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.7874508, "relation_name": "MAYA.silver.block_log", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nWITH base AS (\n\n  SELECT\n    height,\n    TO_TIMESTAMP(\n      TIMESTAMP / 1000000000\n    ) AS block_timestamp,\n    TIMESTAMP,\n    HASH,\n    agg_state,\n    DATEADD(\n      ms,\n      __HEVO__LOADED_AT,\n      '1970-01-01'\n    ) AS _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('bronze__block_log') }}\n    qualify(ROW_NUMBER() over(PARTITION BY height\n  ORDER BY\n    __HEVO__LOADED_AT DESC)) = 1\n)\nSELECT\n  height,\n  block_timestamp,\n  block_timestamp :: DATE AS block_date,\n  HOUR(block_timestamp) AS block_hour,\n  week(block_timestamp) AS block_week,\n  MONTH(block_timestamp) AS block_month,\n  quarter(block_timestamp) AS block_quarter,\n  YEAR(block_timestamp) AS block_year,\n  dayofmonth(block_timestamp) AS block_DAYOFMONTH,\n  dayofweek(block_timestamp) AS block_DAYOFWEEK,\n  dayofyear(block_timestamp) AS block_DAYOFYEAR,\n  TIMESTAMP,\n  HASH,\n  agg_state,\n  _INSERTED_TIMESTAMP\nFROM\n  base", "language": "sql", "refs": [{"name": "bronze__block_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__block_log"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__stake_events": {"database": "MAYA", "schema": "silver", "name": "silver__stake_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__stake_events.sql", "original_file_path": "models/silver/silver__stake_events.sql", "unique_id": "model.maya_models.silver__stake_events", "fqn": ["maya_models", "silver", "silver__stake_events"], "alias": "stake_events", "checksum": {"name": "sha256", "checksum": "d33d824ca1359d3bb94a20cc45ae325cc04666629c0f969cb0d2d9015f090b6b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STAKE_UNITS": {"name": "STAKE_UNITS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CACAO_E8": {"name": "CACAO_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_ASSET_IN_CACAO_E8": {"name": "_ASSET_IN_CACAO_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__stake_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.8048131, "relation_name": "MAYA.silver.stake_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool AS pool_name,\n  asset_tx AS asset_tx_id,\n  asset_chain AS asset_blockchain,\n  asset_addr AS asset_address,\n  asset_e8,\n  stake_units,\n  cacao_tx AS cacao_tx_id,\n  cacao_addr AS cacao_address,\n  cacao_e8,\n  _ASSET_IN_CACAO_E8,\n  memo,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__stake_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, cacao_addr, asset_addr\nORDER BY\n  __HEVO__INGESTED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__send_messages": {"database": "MAYA", "schema": "silver", "name": "silver__send_messages", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__send_messages.sql", "original_file_path": "models/silver/silver__send_messages.sql", "unique_id": "model.maya_models.silver__send_messages", "fqn": ["maya_models", "silver", "silver__send_messages"], "alias": "send_messages", "checksum": {"name": "sha256", "checksum": "31fc3da5f820ea52bc7fa8982cb7322cc80d849b14fcdfe4d1f107e815f3427f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"AMOUNT_E8": {"name": "AMOUNT_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EVENT_ID": {"name": "EVENT_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__send_messages.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.7944572, "relation_name": "MAYA.silver.send_messages", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  amount_e8,\n  asset,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  memo,\n  tx_id,\n  raw_log,\n  code,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__send_messages') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__send_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__send_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__rewards_event_entries": {"database": "MAYA", "schema": "silver", "name": "silver__rewards_event_entries", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__rewards_event_entries.sql", "original_file_path": "models/silver/silver__rewards_event_entries.sql", "unique_id": "model.maya_models.silver__rewards_event_entries", "fqn": ["maya_models", "silver", "silver__rewards_event_entries"], "alias": "rewards_event_entries", "checksum": {"name": "sha256", "checksum": "b11855f4627b6b414681468be0fdac7a1cea74cfe4a81eb583df213ed4234df4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CACAO_E8": {"name": "CACAO_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__rewards_event_entries.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.814611, "relation_name": "MAYA.silver.rewards_event_entries", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool AS pool_name,\n  cacao_e8,\n  saver_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__rewards_event_entries') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, pool\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__rewards_event_entries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__rewards_event_entries"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__slash_liquidity_events": {"database": "MAYA", "schema": "silver", "name": "silver__slash_liquidity_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__slash_liquidity_events.sql", "original_file_path": "models/silver/silver__slash_liquidity_events.sql", "unique_id": "model.maya_models.silver__slash_liquidity_events", "fqn": ["maya_models", "silver", "silver__slash_liquidity_events"], "alias": "slash_liquidity_events", "checksum": {"name": "sha256", "checksum": "08dc5533ae3bf0396dffce34fa9339822e54ef2a45311fbdcf7800f2ab39b0a9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.222477, "relation_name": "MAYA.silver.slash_liquidity_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  bond_address,\n  lp_address,\n  asset,\n  lp_units,\n  asset_e8_loss,\n  cacao_e10_loss,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__slash_liquidity_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, bond_address, lp_address, asset\nORDER BY\n  __HEVO__INGESTED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__slash_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__slash_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__set_ip_address_events": {"database": "MAYA", "schema": "silver", "name": "silver__set_ip_address_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__set_ip_address_events.sql", "original_file_path": "models/silver/silver__set_ip_address_events.sql", "unique_id": "model.maya_models.silver__set_ip_address_events", "fqn": ["maya_models", "silver", "silver__set_ip_address_events"], "alias": "set_ip_address_events", "checksum": {"name": "sha256", "checksum": "6ab897767ac3903ca8edf5edefb63b8c342bd25ffd0ba2958d11a878c95bcc8b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.2237382, "relation_name": "MAYA.silver.set_ip_address_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr AS node_address,\n  ip_addr,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__set_ip_address_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__set_ip_address_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__set_ip_address_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__prices": {"database": "MAYA", "schema": "silver", "name": "silver__prices", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__prices.sql", "original_file_path": "models/silver/silver__prices.sql", "unique_id": "model.maya_models.silver__prices", "fqn": ["maya_models", "silver", "silver__prices"], "alias": "prices", "checksum": {"name": "sha256", "checksum": "b1494f958c4a1cf499838aadb18385428b108057f16fe1dda8db556820b40b7b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.silver.prices__dbt_tmp)"]}, "tags": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PRICE_cacao_ASSET": {"name": "PRICE_cacao_ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PRICE_ASSET_cacao": {"name": "PRICE_ASSET_cacao", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_USD": {"name": "ASSET_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_USD": {"name": "cacao_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__prices.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.silver.prices__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278782.639769, "relation_name": "MAYA.silver.prices", "raw_code": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"_unique_key\",\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n-- block level prices by pool\n-- step 1 what is the USD pool with the highest balance (aka deepest pool)\nWITH blocks AS (\n\n  SELECT\n    height AS block_id,\n    b.block_timestamp,\n    pool_name,\n    cacao_e8,\n    asset_e8\n  FROM\n    {{ ref('silver__block_pool_depths') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\n),\nprice AS (\n  SELECT\n    height AS block_id,\n    b.block_timestamp,\n    cacao_price_e8 AS cacao_usd\n  FROM\n    {{ ref('silver__cacao_price') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\n) -- step 3 calculate the prices of assets by pool, in terms of tokens per tokens\n-- and in USD for both tokens\nSELECT\n  DISTINCT b.block_id,\n  b.block_timestamp,\n  COALESCE(\n    cacao_e8 / asset_e8,\n    0\n  ) AS price_cacao_asset,\n  COALESCE(\n    asset_e8 / cacao_e8,\n    0\n  ) AS price_asset_cacao,\n  COALESCE(cacao_usd * (cacao_e8 / asset_e8), 0) AS asset_usd,\n  COALESCE(\n    cacao_usd,\n    0\n  ) AS cacao_usd,\n  pool_name,\n  concat_ws(\n    '-',\n    b.block_id :: STRING,\n    pool_name :: STRING\n  ) AS _unique_key\nFROM\n  blocks b\n  JOIN price ru\n  ON b.block_id = ru.block_id\nWHERE\n  cacao_e8 > 0\n  AND asset_e8 > 0", "language": "sql", "refs": [{"name": "silver__block_pool_depths", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__cacao_price", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__block_pool_depths", "model.maya_models.silver__block_log", "model.maya_models.silver__cacao_price"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__total_block_rewards": {"database": "MAYA", "schema": "silver", "name": "silver__total_block_rewards", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__total_block_rewards.sql", "original_file_path": "models/silver/silver__total_block_rewards.sql", "unique_id": "model.maya_models.silver__total_block_rewards", "fqn": ["maya_models", "silver", "silver__total_block_rewards"], "alias": "total_block_rewards", "checksum": {"name": "sha256", "checksum": "69801c9f347122b6d223c401122c21de2e57249b546999ae85b899056f8bc8a6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"]}, "tags": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REWARD_ENTITY": {"name": "REWARD_ENTITY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT": {"name": "cacao_AMOUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT_USD": {"name": "cacao_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__total_block_rewards.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278782.669277, "relation_name": "MAYA.silver.total_block_rewards", "raw_code": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"_unique_key\",\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH block_prices AS (\n\n  SELECT\n    AVG(cacao_usd) AS cacao_usd,\n    block_id\n  FROM\n    {{ ref('silver__prices') }}\n  GROUP BY\n    block_id\n),\nfin AS (\n  SELECT\n    b.block_timestamp,\n    b.height AS block_id,\n    ree.pool_name AS reward_entity,\n    COALESCE(cacao_e8 / pow(10, 8), 0) AS cacao_amount,\n    COALESCE(cacao_e8 / pow(10, 8) * cacao_usd, 0) AS cacao_amount_usd,\n    concat_ws(\n      '-',\n      b.height,\n      reward_entity\n    ) AS _unique_key,\n    ree._inserted_timestamp\n  FROM\n    {{ ref('silver__rewards_event_entries') }}\n    ree\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON ree.block_timestamp = b.timestamp\n    LEFT JOIN {{ ref('silver__prices') }}\n    p\n    ON b.height = p.block_id\n    AND ree.pool_name = p.pool_name\n\n{% if is_incremental() %}\nWHERE\n  (\n    b.block_timestamp >= (\n      SELECT\n        MAX(\n          block_timestamp - INTERVAL '1 HOUR'\n        )\n      FROM\n        {{ this }}\n    )\n    OR concat_ws(\n      '-',\n      b.height,\n      reward_entity\n    ) IN (\n      SELECT\n        _unique_key\n      FROM\n        {{ this }}\n      WHERE\n        cacao_amount_USD IS NULL\n    )\n  )\n{% endif %}\nUNION\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  'bond_holders' AS reward_entity,\n  bond_e8 / pow(\n    10,\n    8\n  ) AS cacao_amount,\n  bond_e8 / pow(\n    10,\n    8\n  ) * cacao_usd AS cacao_amount_usd,\n  concat_ws(\n    '-',\n    b.height,\n    reward_entity\n  ) AS _unique_key,\n  re._inserted_timestamp\nFROM\n  {{ ref('silver__rewards_events') }}\n  re\n  JOIN {{ ref('silver__block_log') }}\n  b\n  ON re.block_timestamp = b.timestamp\n  LEFT JOIN block_prices p\n  ON b.height = p.block_id\n\n{% if is_incremental() %}\nWHERE\n  (\n    b.block_timestamp >= (\n      SELECT\n        MAX(\n          block_timestamp - INTERVAL '1 HOUR'\n        )\n      FROM\n        {{ this }}\n    )\n    OR concat_ws(\n      '-',\n      b.height,\n      reward_entity\n    ) IN (\n      SELECT\n        _unique_key\n      FROM\n        {{ this }}\n      WHERE\n        cacao_amount_USD IS NULL\n    )\n  )\n{% endif %}\n)\nSELECT\n  block_timestamp,\n  block_id,\n  reward_entity,\n  SUM(\n    cacao_amount\n  ) AS cacao_amount,\n  SUM(cacao_amount_usd) AS cacao_amount_usd,\n  _unique_key,\n  MAX(_inserted_timestamp) AS _inserted_timestamp\nFROM\n  fin\nGROUP BY\n  block_timestamp,\n  block_id,\n  reward_entity,\n  _unique_key", "language": "sql", "refs": [{"name": "silver__prices", "package": null, "version": null}, {"name": "silver__rewards_event_entries", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__prices", "package": null, "version": null}, {"name": "silver__rewards_events", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__prices", "model.maya_models.silver__rewards_event_entries", "model.maya_models.silver__block_log", "model.maya_models.silver__rewards_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__pending_liquidity_events": {"database": "MAYA", "schema": "silver", "name": "silver__pending_liquidity_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__pending_liquidity_events.sql", "original_file_path": "models/silver/silver__pending_liquidity_events.sql", "unique_id": "model.maya_models.silver__pending_liquidity_events", "fqn": ["maya_models", "silver", "silver__pending_liquidity_events"], "alias": "pending_liquidity_events", "checksum": {"name": "sha256", "checksum": "dbdc1850dc32a5f8c3c3aa795aef95da97141a7527c6c4524224b3befe07cda1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CACAO_ADDRESS": {"name": "CACAO_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CACAO_E8": {"name": "CACAO_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PENDING_TYPE": {"name": "PENDING_TYPE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__pending_liquidity_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.6560798, "relation_name": "MAYA.silver.pending_liquidity_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool AS pool_name,\n  asset_tx AS asset_tx_id,\n  asset_chain AS asset_blockchain,\n  asset_addr AS asset_address,\n  asset_e8,\n  cacao_tx AS cacao_tx_ID,\n  cacao_addr AS cacao_address,\n  cacao_e8,\n  pending_type,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__pending_liquidity_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, asset_addr, cacao_addr\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__pending_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__pending_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__gas_events": {"database": "MAYA", "schema": "silver", "name": "silver__gas_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__gas_events.sql", "original_file_path": "models/silver/silver__gas_events.sql", "unique_id": "model.maya_models.silver__gas_events", "fqn": ["maya_models", "silver", "silver__gas_events"], "alias": "gas_events", "checksum": {"name": "sha256", "checksum": "c94cc0ce64cba8546e3e84200b3272dd88aed3311b518a93a6e9778d24569922"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CACAO_E8": {"name": "CACAO_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__gas_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.68154, "relation_name": "MAYA.silver.gas_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  asset,\n  asset_e8,\n  cacao_e8,\n  tx_count,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__gas_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__pool_events": {"database": "MAYA", "schema": "silver", "name": "silver__pool_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__pool_events.sql", "original_file_path": "models/silver/silver__pool_events.sql", "unique_id": "model.maya_models.silver__pool_events", "fqn": ["maya_models", "silver", "silver__pool_events"], "alias": "pool_events", "checksum": {"name": "sha256", "checksum": "bb79b853c25cbdd7204195351807a50b173190625cddaeac6d8f0e3232cf47d0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.235595, "relation_name": "MAYA.silver.pool_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  asset,\n  status,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__pool_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__pool_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__pool_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__set_version_events": {"database": "MAYA", "schema": "silver", "name": "silver__set_version_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__set_version_events.sql", "original_file_path": "models/silver/silver__set_version_events.sql", "unique_id": "model.maya_models.silver__set_version_events", "fqn": ["maya_models", "silver", "silver__set_version_events"], "alias": "set_version_events", "checksum": {"name": "sha256", "checksum": "dc0cdbfcb39376e4602de7d49f9d2efe7fa1086d340ce112bbf1d3aee5402b2e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.236682, "relation_name": "MAYA.silver.set_version_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr AS node_address,\n  version,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__set_version_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__set_version_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__set_version_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__active_vault_events": {"database": "MAYA", "schema": "silver", "name": "silver__active_vault_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__active_vault_events.sql", "original_file_path": "models/silver/silver__active_vault_events.sql", "unique_id": "model.maya_models.silver__active_vault_events", "fqn": ["maya_models", "silver", "silver__active_vault_events"], "alias": "active_vault_events", "checksum": {"name": "sha256", "checksum": "814062e31bc31f7a3fdaf60545bac24f629c8ed94c267fba16df10ea68770f69"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_ASGARD_ADDR": {"name": "ADD_ASGARD_ADDR", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__active_vault_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278782.7450619, "relation_name": "MAYA.silver.active_vault_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  add_asgard_addr,\n  event_id,\n  block_timestamp,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__active_vault_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__active_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__active_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__pool_block_balances": {"database": "MAYA", "schema": "silver", "name": "silver__pool_block_balances", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__pool_block_balances.sql", "original_file_path": "models/silver/silver__pool_block_balances.sql", "unique_id": "model.maya_models.silver__pool_block_balances", "fqn": ["maya_models", "silver", "silver__pool_block_balances"], "alias": "pool_block_balances", "checksum": {"name": "sha256", "checksum": "cde316ea4250138efc7d0ce5269dff4f052d32819f850acd9740fb3d17e3a454"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"]}, "tags": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT": {"name": "cacao_AMOUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT_USD": {"name": "cacao_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_AMOUNT_USD": {"name": "ASSET_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYNTH_AMOUNT": {"name": "SYNTH_AMOUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYNTH_AMOUNT_USD": {"name": "SYNTH_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/silver/silver__pool_block_balances.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278782.7041988, "relation_name": "MAYA.silver.pool_block_balances", "raw_code": "{{ config(\n  materialized = 'incremental',\n  unique_key = '_unique_key',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  bpd.pool_name,\n  COALESCE(cacao_e8 / pow(10, 8), 0) AS cacao_amount,\n  COALESCE(cacao_e8 / pow(10, 8) * cacao_usd, 0) AS cacao_amount_usd,\n  COALESCE(asset_e8 / pow(10, 8), 0) AS asset_amount,\n  COALESCE(asset_e8 / pow(10, 8) * asset_usd, 0) AS asset_amount_usd,\n  COALESCE(synth_e8 / pow(10, 8), 0) AS synth_amount,\n  COALESCE(synth_e8 / pow(10, 8) * asset_usd, 0) AS synth_amount_usd,\n  concat_ws(\n    '-',\n    bpd.block_timestamp,\n    bpd.pool_name\n  ) AS _unique_key,\n  bpd._inserted_timestamp\nFROM\n  {{ ref('silver__block_pool_depths') }}\n  bpd\n  JOIN {{ ref('silver__block_log') }}\n  b\n  ON bpd.block_timestamp = b.timestamp\n  LEFT JOIN {{ ref('silver__prices') }}\n  p\n  ON b.height = p.block_id\n  AND bpd.pool_name = p.pool_name\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__block_pool_depths", "package": null, "version": null}, {"name": "silver__block_log", "package": null, "version": null}, {"name": "silver__prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__block_pool_depths", "model.maya_models.silver__block_log", "model.maya_models.silver__prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__slash_points_events": {"database": "MAYA", "schema": "silver", "name": "silver__slash_points_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__slash_points_events.sql", "original_file_path": "models/silver/silver__slash_points_events.sql", "unique_id": "model.maya_models.silver__slash_points_events", "fqn": ["maya_models", "silver", "silver__slash_points_events"], "alias": "slash_points_events", "checksum": {"name": "sha256", "checksum": "8430aba83ef588edc1df3237097210a34855438406efbd95c6f6c77e041616ab"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.242743, "relation_name": "MAYA.silver.slash_points_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_address,\n  slash_points,\n  reason,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__slash_points_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__INGESTED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__slash_points_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__slash_points_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__constants": {"database": "MAYA", "schema": "silver", "name": "silver__constants", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__constants.sql", "original_file_path": "models/silver/silver__constants.sql", "unique_id": "model.maya_models.silver__constants", "fqn": ["maya_models", "silver", "silver__constants"], "alias": "constants", "checksum": {"name": "sha256", "checksum": "39b41a7857eef32dd981406bbc26ec70c230705235d7c217b79993a344e73cde"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.243989, "relation_name": "MAYA.silver.constants", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  C.key,\n  C.value\nFROM\n  {{ ref('bronze__constants') }} C", "language": "sql", "refs": [{"name": "bronze__constants", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__constants"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.silver__new_node_events": {"database": "MAYA", "schema": "silver", "name": "silver__new_node_events", "resource_type": "model", "package_name": "maya_models", "path": "silver/silver__new_node_events.sql", "original_file_path": "models/silver/silver__new_node_events.sql", "unique_id": "model.maya_models.silver__new_node_events", "fqn": ["maya_models", "silver", "silver__new_node_events"], "alias": "new_node_events", "checksum": {"name": "sha256", "checksum": "b316c3335d8376b4fefaafda3fe7eb8162f213862d4b5a03e89d09900bc0e6d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.2453089, "relation_name": "MAYA.silver.new_node_events", "raw_code": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr AS node_address,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__new_node_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__new_node_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.maya_models.bronze__new_node_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.core__fact_mayaname_change_events": {"database": "MAYA", "schema": "core", "name": "core__fact_mayaname_change_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/core/core__fact_mayaname_change_events.sql", "original_file_path": "models/gold/core/core__fact_mayaname_change_events.sql", "unique_id": "model.maya_models.core__fact_mayaname_change_events", "fqn": ["maya_models", "gold", "core", "core__fact_mayaname_change_events"], "alias": "fact_mayaname_change_events", "checksum": {"name": "sha256", "checksum": "07a0942cacfb10059493e012c475d9432d6f374e780e6a428c9fa6921fd3271d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_mayaname_change_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.core.fact_mayaname_change_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows name change events", "columns": {"FACT_MAYANAME_CHANGE_EVENTS_ID": {"name": "FACT_MAYANAME_CHANGE_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "OWNER": {"name": "OWNER", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CHAIN": {"name": "CHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "expire": {"name": "expire", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FUND_AMOUNT_E8": {"name": "FUND_AMOUNT_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REGISTRATION_FEE_E8": {"name": "REGISTRATION_FEE_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/core/core__fact_mayaname_change_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_mayaname_change_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.core.fact_mayaname_change_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278782.822552, "relation_name": "MAYA.core.fact_mayaname_change_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_mayaname_change_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    NAME,\n    chain,\n    address,\n    registration_fee_e8,\n    fund_amount_e8,\n    height,\n    expire,\n    owner,\n    tx_id,\n    memo,\n    sender,\n    preferred_asset,\n    affiliate_bps,\n    sub_affiliates,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__mayaname_change_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.name']\n  ) }} AS fact_mayaname_change_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  NAME,\n  chain,\n  address,\n  registration_fee_e8,\n  fund_amount_e8,\n  height,\n  expire,\n  owner,\n  tx_id,\n  memo,\n  sender,\n  preferred_asset,\n  affiliate_bps,\n  sub_affiliates,\n  event_id,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__mayaname_change_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__mayaname_change_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.core__dim_block": {"database": "MAYA", "schema": "core", "name": "core__dim_block", "resource_type": "model", "package_name": "maya_models", "path": "gold/core/core__dim_block.sql", "original_file_path": "models/gold/core/core__dim_block.sql", "unique_id": "model.maya_models.core__dim_block", "fqn": ["maya_models", "gold", "core", "core__dim_block"], "alias": "dim_block", "checksum": {"name": "sha256", "checksum": "0d22d0058a8853b80a1d01020878ed721ce27e8e6026fc189d0c490442fa14e6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "dim_block_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_id >= (select min(block_id) from \n    \n    MAYA.core.dim_block__dbt_tmp)"]}, "tags": [], "description": "Records of all blocks that have occurred on Thorchain, dating back to the genesis block. ", "columns": {"DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "ID of the confirmed block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_DATE": {"name": "BLOCK_DATE", "description": "Date of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_HOUR": {"name": "BLOCK_HOUR", "description": "Date of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_WEEK": {"name": "BLOCK_WEEK", "description": "Date of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_MONTH": {"name": "BLOCK_MONTH", "description": "The numeric month of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_QUARTER": {"name": "BLOCK_QUARTER", "description": "The numeric quarter of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_YEAR": {"name": "BLOCK_YEAR", "description": "The numeric year of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_DAYOFMONTH": {"name": "BLOCK_DAYOFMONTH", "description": "The numeric day of month of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_DAYOFWEEK": {"name": "BLOCK_DAYOFWEEK", "description": "The numeric day of week of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_DAYOFYEAR": {"name": "BLOCK_DAYOFYEAR", "description": "The numeric day of year of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TIMESTAMP": {"name": "TIMESTAMP", "description": "integer value of the block_teimstamp", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "HASH": {"name": "HASH", "description": "block hash", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "agg_state": {"name": "agg_state", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/core/core__dim_block.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "dim_block_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_id >= (select min(block_id) from \n    \n    MAYA.core.dim_block__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278782.853787, "relation_name": "MAYA.core.dim_block", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'dim_block_id',\n    incremental_strategy = 'merge',\n    incremental_predicates = ['DBT_INTERNAL_DEST.block_id >= (select min(block_id) from ' ~ generate_tmp_view_name(this) ~ ')'],\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nSELECT\n    {{ dbt_utils.generate_surrogate_key(\n        ['height']\n    ) }} AS dim_block_id,\n    height AS block_id,\n    block_timestamp,\n    block_date,\n    block_hour,\n    block_week,\n    block_month,\n    block_quarter,\n    block_year,\n    block_DAYOFMONTH,\n    block_DAYOFWEEK,\n    block_DAYOFYEAR,\n    TIMESTAMP,\n    HASH,\n    agg_state,\n    _INSERTED_TIMESTAMP,\n    '{{ invocation_id }}' AS _invocation_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__block_log') }}\n\n{% if is_incremental() %}\nWHERE\n    block_id >= (\n        SELECT\n            MAX(\n                block_id - 600 --about 1 hour\n            )\n        FROM\n            {{ this }}\n    )\nUNION ALL\nSELECT\n    '-1' AS dim_block_id,\n    -1 AS block_id,\n    '1900-01-01' :: datetime AS block_timestamp,\n    NULL AS block_date,\n    NULL AS block_hour,\n    NULL AS block_week,\n    NULL AS block_month,\n    NULL AS block_quarter,\n    NULL AS block_year,\n    NULL AS block_DAYOFMONTH,\n    NULL AS block_DAYOFWEEK,\n    NULL AS block_DAYOFYEAR,\n    NULL AS TIMESTAMP,\n    NULL AS HASH,\n    NULL AS agg_state,\n    '1900-01-01' :: DATE AS _inserted_timestamp,\n    '{{ invocation_id }}' AS _invocation_id,\n    '1900-01-01' :: DATE AS inserted_timestamp,\n    '1900-01-01' :: DATE AS modified_timestamp\nUNION ALL\nSELECT\n    '-2' AS dim_block_id,\n    -2 AS block_id,\n    NULL AS block_timestamp,\n    NULL AS block_date,\n    NULL AS block_hour,\n    NULL AS block_week,\n    NULL AS block_month,\n    NULL AS block_quarter,\n    NULL AS block_year,\n    NULL AS block_DAYOFMONTH,\n    NULL AS block_DAYOFWEEK,\n    NULL AS block_DAYOFYEAR,\n    NULL AS TIMESTAMP,\n    NULL AS HASH,\n    NULL AS agg_state,\n    '1900-01-01' :: DATE AS _inserted_timestamp,\n    '{{ invocation_id }}' AS _invocation_id,\n    '1900-01-01' :: DATE AS inserted_timestamp,\n    '1900-01-01' :: DATE AS modified_timestamp\n{% endif %}", "language": "sql", "refs": [{"name": "silver__block_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__block_log"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.core__fact_set_mimir_events": {"database": "MAYA", "schema": "core", "name": "core__fact_set_mimir_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/core/core__fact_set_mimir_events.sql", "original_file_path": "models/gold/core/core__fact_set_mimir_events.sql", "unique_id": "model.maya_models.core__fact_set_mimir_events", "fqn": ["maya_models", "gold", "core", "core__fact_set_mimir_events"], "alias": "fact_set_mimir_events", "checksum": {"name": "sha256", "checksum": "7e18bebd611fadab330c4608132c9fd350495d11f5751199713338426b5fe695"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_set_mimir_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.core.fact_set_mimir_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows set mimir events", "columns": {"FACT_SET_MIMIR_EVENTS_ID": {"name": "FACT_SET_MIMIR_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "KEY": {"name": "KEY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "VALUE": {"name": "VALUE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/core/core__fact_set_mimir_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_set_mimir_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.core.fact_set_mimir_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278782.886921, "relation_name": "MAYA.core.fact_set_mimir_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_set_mimir_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    key,\n    VALUE,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__set_mimir_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.key','a.block_timestamp']\n  ) }} AS fact_set_mimir_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  key,\n  VALUE,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__set_mimir_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__set_mimir_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.core__fact_transfers": {"database": "MAYA", "schema": "core", "name": "core__fact_transfers", "resource_type": "model", "package_name": "maya_models", "path": "gold/core/core__fact_transfers.sql", "original_file_path": "models/gold/core/core__fact_transfers.sql", "unique_id": "model.maya_models.core__fact_transfers", "fqn": ["maya_models", "gold", "core", "core__fact_transfers"], "alias": "fact_transfers", "checksum": {"name": "sha256", "checksum": "738d827f99adbadb3f2c220f79a1bc81662e22fc9b20d0044c09fc3bfc3b6cdc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_transfers_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.core.fact_transfers__dbt_tmp)"]}, "tags": [], "description": "Fact table shows the transfer action between different address", "columns": {"FACT_TRANSFERS_ID": {"name": "FACT_TRANSFERS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT": {"name": "cacao_AMOUNT", "description": "The transferred cacao amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT_USD": {"name": "cacao_AMOUNT_USD", "description": "The transferred cacao amount in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/core/core__fact_transfers.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_transfers_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.core.fact_transfers__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278782.900776, "relation_name": "MAYA.core.fact_transfers", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_transfers_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_id,\n    from_address,\n    to_address,\n    asset,\n    cacao_amount,\n    cacao_amount_usd,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__transfers') }}\n\n{% if is_incremental() %}\nWHERE\n  block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a._unique_key']\n  ) }} AS fact_transfers_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  from_address,\n  to_address,\n  asset,\n  cacao_amount,\n  cacao_amount_usd,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_id = b.block_id", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.maya_models.silver__transfers", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.core__dim_midgard": {"database": "MAYA", "schema": "core", "name": "core__dim_midgard", "resource_type": "model", "package_name": "maya_models", "path": "gold/core/core__dim_midgard.sql", "original_file_path": "models/gold/core/core__dim_midgard.sql", "unique_id": "model.maya_models.core__dim_midgard", "fqn": ["maya_models", "gold", "core", "core__dim_midgard"], "alias": "dim_midgard", "checksum": {"name": "sha256", "checksum": "1e6ba0ef8e3f0a1f116aaddf31dfe482a6c38a95440dd5e503eb39c1d7ed5a4d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1741278781.264541, "relation_name": "MAYA.core.dim_midgard", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    '2.10.0' AS midgard_version", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.core__fact_transfer_events": {"database": "MAYA", "schema": "core", "name": "core__fact_transfer_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/core/core__fact_transfer_events.sql", "original_file_path": "models/gold/core/core__fact_transfer_events.sql", "unique_id": "model.maya_models.core__fact_transfer_events", "fqn": ["maya_models", "gold", "core", "core__fact_transfer_events"], "alias": "fact_transfer_events", "checksum": {"name": "sha256", "checksum": "1f339c0193b2576be9edd44096957a477043148b6755bafffd40203d32c4f740"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_transfer_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.core.fact_transfer_events__dbt_tmp)"]}, "tags": [], "description": "Fact table containing stake events", "columns": {"FACT_TRANSFER_EVENTS_ID": {"name": "FACT_TRANSFER_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AMOUNT_E8": {"name": "AMOUNT_E8", "description": "The asset amount for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/core/core__fact_transfer_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_transfer_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.core.fact_transfer_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278782.8699331, "relation_name": "MAYA.core.fact_transfer_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_transfer_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    from_address,\n    to_address,\n    asset,\n    amount_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__transfer_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id', 'a.from_address', 'a.to_address', 'a.asset', 'a.amount_e8']\n  ) }} AS fact_transfer_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  from_address,\n  to_address,\n  asset,\n  amount_e8,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__transfer_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__transfer_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.price__fact_cacao_price": {"database": "MAYA", "schema": "price", "name": "price__fact_cacao_price", "resource_type": "model", "package_name": "maya_models", "path": "gold/price/price__fact_cacao_price.sql", "original_file_path": "models/gold/price/price__fact_cacao_price.sql", "unique_id": "model.maya_models.price__fact_cacao_price", "fqn": ["maya_models", "gold", "price", "price__fact_cacao_price"], "alias": "fact_cacao_price", "checksum": {"name": "sha256", "checksum": "e5e0c3db057a467ec25b961be304721bb2e7741266fc1fab0cbaf4faefc860bb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_cacao_price_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.price.fact_cacao_price__dbt_tmp)"]}, "tags": [], "description": "Fact table that provides the cacao price at a given block height", "columns": {"FACT_cacao_PRICE_ID": {"name": "FACT_cacao_PRICE_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_USD": {"name": "cacao_USD", "description": "The cacao price in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/price/price__fact_cacao_price.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_cacao_price_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.price.fact_cacao_price__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278782.919633, "relation_name": "MAYA.price.fact_cacao_price", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_cacao_price_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    cacao_price_e8,\n    block_timestamp,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__cacao_price') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.block_timestamp']\n  ) }} AS fact_cacao_price_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  cacao_price_e8 AS cacao_usd,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _audit_run_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__cacao_price", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__cacao_price", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_daily_earnings": {"database": "MAYA", "schema": "defi", "name": "defi__fact_daily_earnings", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_daily_earnings.sql", "original_file_path": "models/gold/defi/defi__fact_daily_earnings.sql", "unique_id": "model.maya_models.defi__fact_daily_earnings", "fqn": ["maya_models", "gold", "defi", "defi__fact_daily_earnings"], "alias": "fact_daily_earnings", "checksum": {"name": "sha256", "checksum": "967017f871c49cbb45d8ff11b8ff9026ce01b87e39ba389013a5840ed6bf6df0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_daily_earnings_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.defi.fact_daily_earnings__dbt_tmp)"]}, "tags": [], "description": "The earnings information for the whole THORChain network broken down by daily", "columns": {"FACT_DAILY_EARNINGS_ID": {"name": "FACT_DAILY_EARNINGS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "The recorded day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQUIDITY_FEES": {"name": "LIQUIDITY_FEES", "description": "The summarized liquidity cost fee within this day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQUIDITY_FEES_USD": {"name": "LIQUIDITY_FEES_USD", "description": "The summarized liquidity cost fee within this day in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_REWARDS": {"name": "BLOCK_REWARDS", "description": "The summarized total block rewards within this day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_REWARDS_USD": {"name": "BLOCK_REWARDS_USD", "description": "The summarized total block rewards within this day in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_EARNINGS": {"name": "TOTAL_EARNINGS", "description": "The summarized total earnings within this day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_EARNINGS_USD": {"name": "TOTAL_EARNINGS_USD", "description": "The summarized total earnings within this day in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EARNINGS_TO_NODES": {"name": "EARNINGS_TO_NODES", "description": "The summarized bonding earnings within this day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EARNINGS_TO_NODES_USD": {"name": "EARNINGS_TO_NODES_USD", "description": "The summarized bonding earnings within this day in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EARNINGS_TO_POOLS": {"name": "EARNINGS_TO_POOLS", "description": "The summarized liquidity earnings fee within this day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EARNINGS_TO_POOLS_USD": {"name": "EARNINGS_TO_POOLS_USD", "description": "The summarized liquidity earnings fee within this day in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVG_NODE_COUNT": {"name": "AVG_NODE_COUNT", "description": "The summarized average node operators number within this day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_daily_earnings.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_daily_earnings_id", "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.defi.fact_daily_earnings__dbt_tmp)"], "incremental_strategy": "merge"}, "created_at": 1741278783.088661, "relation_name": "MAYA.defi.fact_daily_earnings", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_daily_earnings_id',\n  incremental_predicates = ['DBT_INTERNAL_DEST.day >= (select min(day) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  incremental_strategy = 'merge'\n) }}\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    liquidity_fees,\n    liquidity_fees_usd,\n    block_rewards,\n    block_rewards_usd,\n    total_earnings,\n    total_earnings_usd,\n    earnings_to_nodes,\n    earnings_to_nodes_usd,\n    earnings_to_pools,\n    earnings_to_pools_usd,\n    avg_node_count,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__daily_earnings') }}\n\n{% if is_incremental() %}\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.day']\n  ) }} AS fact_daily_earnings_id,\n  DAY,\n  liquidity_fees,\n  liquidity_fees_usd,\n  block_rewards,\n  block_rewards_usd,\n  total_earnings,\n  total_earnings_usd,\n  earnings_to_nodes,\n  earnings_to_nodes_usd,\n  earnings_to_pools,\n  earnings_to_pools_usd,\n  avg_node_count,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A", "language": "sql", "refs": [{"name": "silver__daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.maya_models.silver__daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_swaps_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_swaps_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_swaps_events.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.sql", "unique_id": "model.maya_models.defi__fact_swaps_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_swaps_events"], "alias": "fact_swaps_events", "checksum": {"name": "sha256", "checksum": "dcf77c2da66d7585cfbbc29ba78e1b9eeeb17105d0ed294eacde2832bd3b980a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM, SWAPS"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_swap_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_swaps_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows the swap event entries table shows the entries for the swaps", "columns": {"FACT_SWAP_EVENTS_ID": {"name": "FACT_SWAP_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The user address that initiates the swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The address we are swapping to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ASSET": {"name": "FROM_ASSET", "description": "The asset we are swapping from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_E8": {"name": "FROM_E8", "description": "The amount we are swapping from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET": {"name": "TO_ASSET", "description": "The asset we are swapping to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_E8": {"name": "TO_E8", "description": "The asset amount we are swapping for (divide by 10^8 to get the decimal amount)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The transaction memo", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "The name of the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_E8_MIN": {"name": "TO_E8_MIN", "description": "The minimum amount the swapper will receive", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SWAP_SLIP_BP": {"name": "SWAP_SLIP_BP", "description": "The slippage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQ_FEE_E8": {"name": "LIQ_FEE_E8", "description": "The fee (divide by 10^8 to get the decimal amount)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQ_FEE_IN_cacao_E8": {"name": "LIQ_FEE_IN_cacao_E8", "description": "The fee in cacao (divide by 10^8 to get the decimal amount)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_DIRECTION": {"name": "_DIRECTION", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STREAMING_COUNT": {"name": "STREAMING_COUNT", "description": "The count of the streaming events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STREAMING_QUANTITY": {"name": "STREAMING_QUANTITY", "description": "The quantity of the streaming events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM, SWAPS"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_swaps_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM, SWAPS"}}}, "unique_key": "fact_swap_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_swaps_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.136852, "relation_name": "MAYA.defi.fact_swaps_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM, SWAPS' }} },\n  unique_key = 'fact_swap_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    blockchain,\n    from_address,\n    to_address,\n    from_asset,\n    from_e8,\n    to_asset,\n    to_e8,\n    memo,\n    pool_name,\n    to_e8_min,\n    swap_slip_bp,\n    liq_fee_e8,\n    liq_fee_in_cacao_e8,\n    _DIRECTION,\n    event_id,\n    block_timestamp,\n    streaming_count,\n    streaming_quantity,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__swap_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.tx_id','a.blockchain','a.to_address','a.from_address','a.from_asset','a.from_e8','a.to_asset','a.to_e8','a.memo','a.pool_name','a._direction']\n  ) }} AS fact_swap_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  blockchain,\n  from_address,\n  to_address,\n  from_asset,\n  from_e8,\n  to_asset,\n  to_e8,\n  memo,\n  pool_name,\n  to_e8_min,\n  swap_slip_bp,\n  liq_fee_e8,\n  liq_fee_in_cacao_e8,\n  _DIRECTION,\n  event_id,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__swap_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_withdraw_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_withdraw_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_withdraw_events.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.sql", "unique_id": "model.maya_models.defi__fact_withdraw_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_withdraw_events"], "alias": "fact_withdraw_events", "checksum": {"name": "sha256", "checksum": "d062dad0f4d7bd70f7db5c3820fbd4316e596c173af05a48d657426bad39e762"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_withdraw_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_withdraw_events__dbt_tmp)"]}, "tags": [], "description": "Fact table containing all withdraw events", "columns": {"FACT_WITHDRAW_EVENTS_ID": {"name": "FACT_WITHDRAW_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset amount for this bond, using the price table we can calculate the cacao amount by asset amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EMIT_ASSET_E8": {"name": "EMIT_ASSET_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EMIT_cacao_E8": {"name": "EMIT_cacao_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The memo for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STAKE_UNITS": {"name": "STAKE_UNITS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BASIS_POINTS": {"name": "BASIS_POINTS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASYMMETRY": {"name": "ASYMMETRY", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IMP_LOSS_PROTECTION_E8": {"name": "IMP_LOSS_PROTECTION_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_EMIT_ASSET_IN_cacao_E8": {"name": "_EMIT_ASSET_IN_cacao_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_withdraw_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_withdraw_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_withdraw_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.1074739, "relation_name": "MAYA.defi.fact_withdraw_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_withdraw_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    e.tx_id,\n    e.blockchain,\n    e.from_address,\n    e.to_address,\n    e.asset,\n    e.asset_e8,\n    e.emit_asset_e8,\n    e.emit_cacao_e8,\n    e.memo,\n    e.pool_name,\n    e.stake_units,\n    e.basis_points,\n    e.asymmetry,\n    e.imp_loss_protection_e8,\n    e._emit_asset_in_cacao_e8,\n    e.block_timestamp,\n    e.event_id,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__withdraw_events') }}\n    e\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id']\n  ) }} AS fact_withdraw_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  A.tx_id,\n  A.blockchain,\n  A.from_address,\n  A.to_address,\n  A.asset,\n  A.asset_e8,\n  A.emit_asset_e8,\n  A.emit_cacao_e8,\n  A.memo,\n  A.pool_name,\n  A.stake_units,\n  A.basis_points,\n  A.asymmetry,\n  A.imp_loss_protection_e8,\n  A._emit_asset_in_cacao_e8,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _audit_run_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__withdraw_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_block_rewards": {"database": "MAYA", "schema": "defi", "name": "defi__fact_block_rewards", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_block_rewards.sql", "original_file_path": "models/gold/defi/defi__fact_block_rewards.sql", "unique_id": "model.maya_models.defi__fact_block_rewards", "fqn": ["maya_models", "gold", "defi", "defi__fact_block_rewards"], "alias": "fact_block_rewards", "checksum": {"name": "sha256", "checksum": "e896720a5aad2704a000f5c0e2e20d2a603164c39af8b7bb9673cd65cc591f79"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_block_rewards_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.defi.fact_block_rewards__dbt_tmp)"]}, "tags": [], "description": "The summarized rewards information for each block per day", "columns": {"FACT_BLOCK_REWARDS_ID": {"name": "FACT_BLOCK_REWARDS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "The recorded day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQUIDITY_FEE": {"name": "LIQUIDITY_FEE", "description": "The summarized liquidity cost fee within this day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_REWARDS": {"name": "BLOCK_REWARDS", "description": "The summarized total block rewards within this day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EARNINGS": {"name": "EARNINGS", "description": "The summarized earnings within this day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BONDING_EARNINGS": {"name": "BONDING_EARNINGS", "description": "The summarized bonding earnings within this day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQUIDITY_EARNINGS": {"name": "LIQUIDITY_EARNINGS", "description": "The summarized liquidity earnings fee within this day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVG_NODE_COUNT": {"name": "AVG_NODE_COUNT", "description": "The summarized average node operators number within this day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_block_rewards.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_block_rewards_id", "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.defi.fact_block_rewards__dbt_tmp)"], "incremental_strategy": "merge"}, "created_at": 1741278783.1621919, "relation_name": "MAYA.defi.fact_block_rewards", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_block_rewards_id',\n  incremental_predicates = ['DBT_INTERNAL_DEST.day >= (select min(day) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  incremental_strategy = 'merge'\n) }}\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    liquidity_fee,\n    block_rewards,\n    earnings,\n    bonding_earnings,\n    liquidity_earnings,\n    avg_node_count,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__block_rewards') }}\n\n{% if is_incremental() %}\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.day']\n  ) }} AS fact_block_rewards_id,\n  DAY,\n  liquidity_fee,\n  block_rewards,\n  earnings,\n  bonding_earnings,\n  liquidity_earnings,\n  avg_node_count,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A", "language": "sql", "refs": [{"name": "silver__block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.maya_models.silver__block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_outbound_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_outbound_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_outbound_events.sql", "original_file_path": "models/gold/defi/defi__fact_outbound_events.sql", "unique_id": "model.maya_models.defi__fact_outbound_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_outbound_events"], "alias": "fact_outbound_events", "checksum": {"name": "sha256", "checksum": "fb334ded0e6fd5e5d615994a5e2414871e6638df10c5ef8cc6d5e80f2823aeca"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_outbound_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_outbound_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that provides the summary of the gas events for each block", "columns": {"FACT_OUTBOUND_EVENTS_ID": {"name": "FACT_OUTBOUND_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Same as pool name, which pool this outbound event happens", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset amount for this outbound event, using the price table we can calculate the cacao amount by asset amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The memo for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IN_TX": {"name": "IN_TX", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_outbound_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_outbound_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_outbound_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.176054, "relation_name": "MAYA.defi.fact_outbound_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_outbound_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    blockchain,\n    from_address,\n    to_address,\n    asset,\n    asset_e8,\n    memo,\n    in_tx,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__outbound_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.tx_id ','a.blockchain','a.from_address','a.to_address','a.asset','a.memo ','a.in_tx','a.block_timestamp']\n  ) }} AS fact_outbound_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  blockchain,\n  from_address,\n  to_address,\n  asset,\n  asset_e8,\n  memo,\n  in_tx,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__outbound_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__outbound_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_pending_liquidity_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_pending_liquidity_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_pending_liquidity_events.sql", "original_file_path": "models/gold/defi/defi__fact_pending_liquidity_events.sql", "unique_id": "model.maya_models.defi__fact_pending_liquidity_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_pending_liquidity_events"], "alias": "fact_pending_liquidity_events", "checksum": {"name": "sha256", "checksum": "987ca9406c6ad79d6c4a314eb011612cc323262188add92bbe5b90d54eb6bf7b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_pending_liquidity_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_pending_liquidity_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that provides the summary of the gas events for each block", "columns": {"FACT_PENDING_LIQUIDITY_EVENTS_ID": {"name": "FACT_PENDING_LIQUIDITY_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_TX_ID": {"name": "ASSET_TX_ID", "description": "The unique transaction id for the cacao event, the liquidity type can be add/remove the cacao/asset, if the event related to cacao", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_BLOCKCHAIN": {"name": "ASSET_BLOCKCHAIN", "description": "The blockchain of the asset", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_ADDRESS": {"name": "ASSET_ADDRESS", "description": "The address of asset", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The amount of asset for the liquidity events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_TX_ID": {"name": "cacao_TX_ID", "description": "The unique transaction id for the cacao event, the liquidity type can be add/remove the cacao/asset, if the event related to cacao", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_ADDRESS": {"name": "cacao_ADDRESS", "description": "The address of cacao", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_E8": {"name": "cacao_E8", "description": "The amount of cacao for the liquidity events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PENDING_TYPE": {"name": "PENDING_TYPE", "description": "The type of liquidity, can be 'add' or 'withdraw'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_pending_liquidity_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_pending_liquidity_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_pending_liquidity_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.190179, "relation_name": "MAYA.defi.fact_pending_liquidity_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_pending_liquidity_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    pool_name,\n    asset_tx_id,\n    asset_blockchain,\n    asset_address,\n    asset_e8,\n    cacao_tx_id,\n    cacao_address,\n    cacao_e8,\n    pending_type,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__pending_liquidity_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.pool_name ','a.asset_tx_id','a.asset_blockchain','a.asset_address','a.cacao_tx_id','a.cacao_address ','a.pending_type','a.block_timestamp']\n  ) }} AS fact_pending_liquidity_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  pool_name,\n  asset_tx_id,\n  asset_blockchain,\n  asset_address,\n  asset_e8,\n  cacao_tx_id,\n  cacao_address,\n  cacao_e8,\n  pending_type,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__pending_liquidity_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__pending_liquidity_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_refund_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_refund_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_refund_events.sql", "original_file_path": "models/gold/defi/defi__fact_refund_events.sql", "unique_id": "model.maya_models.defi__fact_refund_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_refund_events"], "alias": "fact_refund_events", "checksum": {"name": "sha256", "checksum": "19172bd25b01f3bb0acc17398a3f546fe3763acfbffc95b4be4f55815b4ef7ff"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_refund_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_refund_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows that the refund events", "columns": {"FACT_REFUND_EVENTS_ID": {"name": "FACT_REFUND_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_2ND": {"name": "ASSET_2ND", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_2ND_E8": {"name": "ASSET_2ND_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The memo for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CODE": {"name": "CODE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REASON": {"name": "REASON", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_refund_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_refund_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_refund_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.2203178, "relation_name": "MAYA.defi.fact_refund_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_refund_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    blockchain,\n    from_address,\n    to_address,\n    asset,\n    asset_e8,\n    asset_2nd,\n    asset_2nd_e8,\n    memo,\n    code,\n    reason,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__refund_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.tx_id','a.blockchain','a.from_address' ,'a.to_address','a. asset', 'a.asset_2nd', 'a.memo', 'a.code', 'a.reason', 'a.block_timestamp']\n  ) }} AS fact_refund_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  blockchain,\n  from_address,\n  to_address,\n  asset,\n  asset_e8,\n  asset_2nd,\n  asset_2nd_e8,\n  memo,\n  code,\n  reason,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__refund_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__refund_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_gas_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_gas_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_gas_events.sql", "original_file_path": "models/gold/defi/defi__fact_gas_events.sql", "unique_id": "model.maya_models.defi__fact_gas_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_gas_events"], "alias": "fact_gas_events", "checksum": {"name": "sha256", "checksum": "07010ab7fba4d47d32bf5891a94813bd25a343056ac49e12e1f6b36bc9a6bd80"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_gas_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_gas_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that provides the summary of the gas events for each block", "columns": {"FACT_GAS_EVENTS_ID": {"name": "FACT_GAS_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset amount for this fee, using the price table we can calculate the cacao amount by asset amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_E8": {"name": "cacao_E8", "description": "The total gas amount in cacao", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "The total count of transactions within this block id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_gas_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_gas_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_gas_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.2050261, "relation_name": "MAYA.defi.fact_gas_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_gas_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    asset,\n    asset_e8,\n    cacao_e8,\n    tx_count,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__gas_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.asset','a.block_timestamp']\n  ) }} AS fact_gas_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  asset,\n  asset_e8,\n  cacao_e8,\n  tx_count,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n  OR asset IN (\n    SELECT\n      asset\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__gas_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__gas_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_bond_actions": {"database": "MAYA", "schema": "defi", "name": "defi__fact_bond_actions", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_bond_actions.sql", "original_file_path": "models/gold/defi/defi__fact_bond_actions.sql", "unique_id": "model.maya_models.defi__fact_bond_actions", "fqn": ["maya_models", "gold", "defi", "defi__fact_bond_actions"], "alias": "fact_bond_actions", "checksum": {"name": "sha256", "checksum": "7b16b8f58dbd276348a4192fcb6ba377a21893f932eb7391b92ff0b4241d874a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_bond_actions_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_bond_actions__dbt_tmp)"]}, "tags": [], "description": "Fact table containing the clean bond action table to record the node operators' behaviors", "columns": {"FACT_BOND_ACTIONS_ID": {"name": "FACT_BOND_ACTIONS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Same as pool name, which pool this bond events happens", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bond_type": {"name": "bond_type", "description": "There are 4 different types of bond:bond_reward, bond_paid, bond_cost, bond_returned", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "The asset amount for this bond event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_USD": {"name": "ASSET_USD", "description": "Used the price table to calculate the asset in the usd", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The memo for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_bond_actions.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_bond_actions_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_bond_actions__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.232476, "relation_name": "MAYA.defi.fact_bond_actions", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = \"fact_bond_actions_id\",\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH block_prices AS (\n\n  SELECT\n    AVG(cacao_usd) AS cacao_usd,\n    block_id\n  FROM\n    {{ ref('silver__prices') }}\n  GROUP BY\n    block_id\n),\nbond_events AS (\n  SELECT\n    block_timestamp,\n    tx_id,\n    from_address,\n    to_address,\n    asset,\n    blockchain,\n    bond_type,\n    asset_e8,\n    e8,\n    memo,\n    event_id,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__bond_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['be.event_id']\n  ) }} AS fact_bond_actions_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  from_address,\n  to_address,\n  asset,\n  blockchain,\n  bond_type,\n  COALESCE(e8 / pow(10, 8), 0) AS asset_amount,\n  COALESCE(\n    cacao_usd * asset_e8,\n    0\n  ) AS asset_usd,\n  memo,\n  be._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  bond_events be\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON be.block_timestamp = b.timestamp\n  LEFT JOIN block_prices p\n  ON b.block_id = p.block_id\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n  OR tx_id IN (\n    SELECT\n      tx_id\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__prices", "package": null, "version": null}, {"name": "silver__bond_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__prices", "model.maya_models.silver__bond_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_streamling_swap_details_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_streamling_swap_details_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_streamling_swap_details_events.sql", "original_file_path": "models/gold/defi/defi__fact_streamling_swap_details_events.sql", "unique_id": "model.maya_models.defi__fact_streamling_swap_details_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_streamling_swap_details_events"], "alias": "fact_streamling_swap_details_events", "checksum": {"name": "sha256", "checksum": "1347d91c6d31ede2ee534dd36e09e622302dcd3d5d215f0582c8f230f485dfa9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM, SWAPS"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_streamling_swap_details_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_streamling_swap_details_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows the streaming swap event transactions", "columns": {"FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID": {"name": "FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INTERVAL": {"name": "INTERVAL", "description": "the time interval of the swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "the quantity of the swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COUNT": {"name": "COUNT", "description": "the count of the swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_height": {"name": "last_height", "description": "the last height of the swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_asset": {"name": "deposit_asset", "description": "the deposit asset of the swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deposit_e8": {"name": "deposit_e8", "description": "the deposit amount of the swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "in_asset": {"name": "in_asset", "description": "the in asset of the swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "in_e8": {"name": "in_e8", "description": "the in amount of the swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "out_asset": {"name": "out_asset", "description": "the out asset of the swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "out_e8": {"name": "out_e8", "description": "the out amount of the swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failed_swaps": {"name": "failed_swaps", "description": "the count of failed swaps", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failed_swaps_reasons": {"name": "failed_swaps_reasons", "description": "DEPRECATING SOON! the reason of failed swaps", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failed_swap_reasons": {"name": "failed_swap_reasons", "description": "the reason of failed swaps", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM, SWAPS"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_streamling_swap_details_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM, SWAPS"}}}, "unique_key": "fact_streamling_swap_details_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_streamling_swap_details_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278782.935135, "relation_name": "MAYA.defi.fact_streamling_swap_details_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM, SWAPS' }} },\n  unique_key = 'fact_streamling_swap_details_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    INTERVAL,\n    quantity,\n    COUNT,\n    last_height,\n    deposit_asset,\n    deposit_e8,\n    in_asset,\n    in_e8,\n    out_asset,\n    out_e8,\n    failed_swaps,\n    failed_swap_reasons AS failed_swaps_reasons,\n    event_id,\n    block_timestamp,\n    failed_swap_reasons,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__streamling_swap_details_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id']\n  ) }} AS fact_streamling_swap_details_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  INTERVAL,\n  quantity,\n  COUNT,\n  last_height,\n  deposit_asset,\n  deposit_e8,\n  in_asset,\n  in_e8,\n  out_asset,\n  out_e8,\n  failed_swaps,\n  failed_swaps_reasons,\n  event_id,\n  failed_swap_reasons,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__streamling_swap_details_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__streamling_swap_details_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_inactive_vault_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_inactive_vault_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_inactive_vault_events.sql", "original_file_path": "models/gold/defi/defi__fact_inactive_vault_events.sql", "unique_id": "model.maya_models.defi__fact_inactive_vault_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_inactive_vault_events"], "alias": "fact_inactive_vault_events", "checksum": {"name": "sha256", "checksum": "8d67c4fc909ae0d7eb8bdb6f26a37c39a6dd49e6ce0e025ae53fabfd4790ade1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_inactive_vault_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_inactive_vault_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that provides the summary of the gas events for each block", "columns": {"FACT_INACTIVE_VAULT_EVENTS_ID": {"name": "FACT_INACTIVE_VAULT_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_ASGARD_ADDRESS": {"name": "ADD_ASGARD_ADDRESS", "description": "The asgard address in the vault which are inactive", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_inactive_vault_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_inactive_vault_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_inactive_vault_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278782.949916, "relation_name": "MAYA.defi.fact_inactive_vault_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_inactive_vault_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    add_asgard_address,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__inactive_vault_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.add_asgard_address','a.block_timestamp']\n  ) }} AS fact_inactive_vault_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  add_asgard_address,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__inactive_vault_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__inactive_vault_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_rewards_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_rewards_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_rewards_events.sql", "original_file_path": "models/gold/defi/defi__fact_rewards_events.sql", "unique_id": "model.maya_models.defi__fact_rewards_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_rewards_events"], "alias": "fact_rewards_events", "checksum": {"name": "sha256", "checksum": "0d6db5dfd2d886499b66fe15ac5ea6beeab7bd8115ff77416b2adabd606cb564"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_rewards_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_rewards_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows the entries for the rewards", "columns": {"FACT_REWARDS_EVENTS_ID": {"name": "FACT_REWARDS_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BOND_E8": {"name": "BOND_E8", "description": "The cacao amount of the bond for this pool at this block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_rewards_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_rewards_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_rewards_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.0065742, "relation_name": "MAYA.defi.fact_rewards_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_rewards_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    bond_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__rewards_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.block_timestamp']\n  ) }} AS fact_rewards_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  bond_e8,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__rewards_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__rewards_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_bond_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_bond_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_bond_events.sql", "original_file_path": "models/gold/defi/defi__fact_bond_events.sql", "unique_id": "model.maya_models.defi__fact_bond_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_bond_events"], "alias": "fact_bond_events", "checksum": {"name": "sha256", "checksum": "cb38a55d06cda8f3c3830e6fd02996019eaa2139dcaef8ad17b71a21a6b95bbf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_bond_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_bond_events__dbt_tmp)"]}, "tags": [], "description": "Fact table containing all the information about the bond activities. THORChain uses a spinoff of the Proof of Stake consensus mechanism called Proof of Bond.", "columns": {"FACT_BOND_EVENTS_ID": {"name": "FACT_BOND_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Same as pool name, which pool this bond events happens", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset amount for this bond, using the price table we can calculate the cacao amount by asset amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The memo for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bond_type": {"name": "bond_type", "description": "There are 4 different types of bond:bond_reward, bond_paid, bond_cost, bond_returned", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "E8": {"name": "E8", "description": "The cacao amount for this bond event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_bond_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_bond_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_bond_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278782.968261, "relation_name": "MAYA.defi.fact_bond_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_bond_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    blockchain,\n    from_address,\n    to_address,\n    asset,\n    asset_e8,\n    memo,\n    bond_type,\n    e8,\n    block_timestamp,\n    event_id,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__bond_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id']\n  ) }} AS fact_bond_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  blockchain,\n  from_address,\n  to_address,\n  asset,\n  asset_e8,\n  memo,\n  bond_type,\n  e8,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n  OR tx_id IN (\n    SELECT\n      tx_id\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__bond_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__bond_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_update_node_account_status_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_update_node_account_status_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_update_node_account_status_events.sql", "original_file_path": "models/gold/defi/defi__fact_update_node_account_status_events.sql", "unique_id": "model.maya_models.defi__fact_update_node_account_status_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_update_node_account_status_events"], "alias": "fact_update_node_account_status_events", "checksum": {"name": "sha256", "checksum": "0562bb953e8435b841ac3cf3f876e370a1d67979aa4b3e382eec89df048b54fb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_update_node_account_status_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_update_node_account_status_events__dbt_tmp)"]}, "tags": [], "description": "Fact table containing node account status events", "columns": {"FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID": {"name": "FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FORMER_STATUS": {"name": "FORMER_STATUS", "description": "The amount of cacao for this add event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CURRENT_STATUS": {"name": "CURRENT_STATUS", "description": "The name of the blockchain", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NODE_ADDRESS": {"name": "NODE_ADDRESS", "description": "Address of node operator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_update_node_account_status_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_update_node_account_status_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_update_node_account_status_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.050873, "relation_name": "MAYA.defi.fact_update_node_account_status_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_update_node_account_status_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_timestamp,\n    former_status,\n    current_status,\n    node_address,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__update_node_account_status_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.node_address', 'a.block_timestamp', 'a.current_status', 'a.former_status']\n  ) }} AS fact_update_node_account_status_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  former_status,\n  current_status,\n  node_address,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__update_node_account_status_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__update_node_account_status_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_pool_block_statistics": {"database": "MAYA", "schema": "defi", "name": "defi__fact_pool_block_statistics", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_pool_block_statistics.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_statistics.sql", "unique_id": "model.maya_models.defi__fact_pool_block_statistics", "fqn": ["maya_models", "gold", "defi", "defi__fact_pool_block_statistics"], "alias": "fact_pool_block_statistics", "checksum": {"name": "sha256", "checksum": "39849855fa32c503e889086d566255bd6bee9b324d90e4f9d2ec1ed8cd343978"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_pool_block_statistics_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["day"], "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.defi.fact_pool_block_statistics__dbt_tmp)"]}, "tags": [], "description": "Fact table containing the actions the liquidity providers do in the THORChain, with the amount in cacao/Asset", "columns": {"FACT_POOL_BLOCK_STATISTICS_ID": {"name": "FACT_POOL_BLOCK_STATISTICS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "The timestamp in day for the recorded of the block fee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_ASSET_LIQUIDITY_VOLUME": {"name": "ADD_ASSET_LIQUIDITY_VOLUME", "description": "How much asset liquidity has been added to the pool at this time for this pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_LIQUIDITY_COUNT": {"name": "ADD_LIQUIDITY_COUNT", "description": "The count of add liquidity transactions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_LIQUIDITY_VOLUME": {"name": "ADD_LIQUIDITY_VOLUME", "description": "The asset volume of liquidity added to the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_DEPTH": {"name": "ASSET_DEPTH", "description": "The current pool depth, which is the total cacao pooled in the asset", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_PRICE": {"name": "ASSET_PRICE", "description": "The asset price in cacao for this day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_PRICE_USD": {"name": "ASSET_PRICE_USD", "description": "The asset price in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVERAGE_SLIP": {"name": "AVERAGE_SLIP", "description": "The average slip point for this block within the day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IMPERMANENT_LOSS_PROTECTION_PAID": {"name": "IMPERMANENT_LOSS_PROTECTION_PAID", "description": "The total impermanent loss protection paid for this pool on this day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_DEPTH": {"name": "cacao_DEPTH", "description": "The pool depth", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "The pool status, which is active or not", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SWAP_COUNT": {"name": "SWAP_COUNT", "description": "Total swap transactions count", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SWAP_VOLUME": {"name": "SWAP_VOLUME", "description": "Total swap volume", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET_AVERAGE_SLIP": {"name": "TO_ASSET_AVERAGE_SLIP", "description": "If the transaction is from cacao to Asset, the average slip point", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET_COUNT": {"name": "TO_ASSET_COUNT", "description": "How many swaps happen from cacao to Asset", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET_FEES": {"name": "TO_ASSET_FEES", "description": "The total swap fees paid to transfer from cacao to Asset", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET_VOLUME": {"name": "TO_ASSET_VOLUME", "description": "The total volume transferred from cacao to Asset", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_cacao_AVERAGE_SLIP": {"name": "TO_cacao_AVERAGE_SLIP", "description": "If the transaction is from Asset to cacao, the average slip point", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_cacao_COUNT": {"name": "TO_cacao_COUNT", "description": "How many swaps happen from Asset to cacao", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_cacao_FEES": {"name": "TO_cacao_FEES", "description": "The total swap fees paid to transfer from Asset to cacao", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_cacao_VOLUME": {"name": "TO_cacao_VOLUME", "description": "The total volume transferred from Asset to cacao", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTALFEES": {"name": "TOTALFEES", "description": "The total fees paid for the swaps", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "UNIQUE_MEMBER_COUNT": {"name": "UNIQUE_MEMBER_COUNT", "description": "All memberships with a cacao address. Take the member from cacao and asset and then subtract the balance = 0 then get the results", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "UNIQUE_SWAPPER_COUNT": {"name": "UNIQUE_SWAPPER_COUNT", "description": "The unique swap addresses for this pool ", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "UNITS": {"name": "UNITS", "description": "The swap units", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_ASSET_VOLUME": {"name": "WITHDRAW_ASSET_VOLUME", "description": "How many assets get withdrawn from the liquidity pools", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_COUNT": {"name": "WITHDRAW_COUNT", "description": "How many times the withdraw events happens", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_cacao_VOLUME": {"name": "WITHDRAW_cacao_VOLUME", "description": "How many cacao volume get withdrawn from the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_VOLUME": {"name": "WITHDRAW_VOLUME", "description": "How many asset volume get withdrawn from the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_STAKE": {"name": "TOTAL_STAKE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DEPTH_PRODUCT": {"name": "DEPTH_PRODUCT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYNTH_UNITS": {"name": "SYNTH_UNITS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_UNITS": {"name": "POOL_UNITS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQUIDITY_UNIT_VALUE_INDEX": {"name": "LIQUIDITY_UNIT_VALUE_INDEX", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PREV_LIQUIDITY_UNIT_VALUE_INDEX": {"name": "PREV_LIQUIDITY_UNIT_VALUE_INDEX", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_pool_block_statistics.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_pool_block_statistics_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.defi.fact_pool_block_statistics__dbt_tmp)"], "cluster_by": ["day"]}, "created_at": 1741278783.044037, "relation_name": "MAYA.defi.fact_pool_block_statistics", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_pool_block_statistics_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.day >= (select min(day) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['day']\n) }}\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    add_asset_liquidity_volume,\n    add_liquidity_count,\n    add_liquidity_volume,\n    add_cacao_liquidity_volume,\n    asset,\n    asset_depth,\n    asset_price,\n    asset_price_usd,\n    average_slip,\n    impermanent_loss_protection_paid,\n    cacao_depth,\n    status,\n    swap_count,\n    swap_volume,\n    to_asset_average_slip,\n    to_asset_count,\n    to_asset_fees,\n    to_asset_volume,\n    to_cacao_average_slip,\n    to_cacao_count,\n    to_cacao_fees,\n    to_cacao_volume,\n    totalfees,\n    unique_member_count,\n    unique_swapper_count,\n    units,\n    withdraw_asset_volume,\n    withdraw_count,\n    withdraw_cacao_volume,\n    withdraw_volume,\n    total_stake,\n    depth_product,\n    synth_units,\n    pool_units,\n    liquidity_unit_value_index,\n    prev_liquidity_unit_value_index,\n    _UNIQUE_KEY\n  FROM\n    {{ ref('silver__pool_block_statistics') }}\n\n{% if is_incremental() %}\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a._unique_key']\n  ) }} AS fact_pool_block_statistics_id,\n  DAY,\n  add_asset_liquidity_volume,\n  add_liquidity_count,\n  add_liquidity_volume,\n  add_cacao_liquidity_volume,\n  asset,\n  asset_depth,\n  asset_price,\n  asset_price_usd,\n  average_slip,\n  impermanent_loss_protection_paid,\n  cacao_depth,\n  status,\n  swap_count,\n  swap_volume,\n  to_asset_average_slip,\n  to_asset_count,\n  to_asset_fees,\n  to_asset_volume,\n  to_cacao_average_slip,\n  to_cacao_count,\n  to_cacao_fees,\n  to_cacao_volume,\n  totalfees,\n  unique_member_count,\n  unique_swapper_count,\n  units,\n  withdraw_asset_volume,\n  withdraw_count,\n  withdraw_cacao_volume,\n  withdraw_volume,\n  total_stake,\n  depth_product,\n  synth_units,\n  pool_units,\n  liquidity_unit_value_index,\n  prev_liquidity_unit_value_index,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_failed_deposit_messages": {"database": "MAYA", "schema": "defi", "name": "defi__fact_failed_deposit_messages", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_failed_deposit_messages.sql", "original_file_path": "models/gold/defi/defi__fact_failed_deposit_messages.sql", "unique_id": "model.maya_models.defi__fact_failed_deposit_messages", "fqn": ["maya_models", "gold", "defi", "defi__fact_failed_deposit_messages"], "alias": "fact_failed_deposit_messages", "checksum": {"name": "sha256", "checksum": "a57b51d07c1048be2955e81aa8f04e1180a486c7566c1040beac69f69f689d8f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_failed_deposit_messages_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_failed_deposit_messages__dbt_tmp)"]}, "tags": [], "description": "Fact table containing failed deposit messages", "columns": {"FACT_FAILED_DEPOSIT_MESSAGES_ID": {"name": "FACT_FAILED_DEPOSIT_MESSAGES_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AMOUNT_E8": {"name": "AMOUNT_E8", "description": "The amount of the failed deposit in E8 notation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The memo for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CODE": {"name": "CODE", "description": "Error code associated with the failed deposit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REASON": {"name": "REASON", "description": "Detailed reason for the failed deposit", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EVENT_ID": {"name": "EVENT_ID", "description": "Unique identifier for the failed deposit event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_failed_deposit_messages.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_failed_deposit_messages_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_failed_deposit_messages__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.02657, "relation_name": "MAYA.defi.fact_failed_deposit_messages", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_failed_deposit_messages_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    amount_e8,\n    asset,\n    from_address,\n    memo,\n    code,\n    reason,\n    tx_id,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__failed_deposit_messages') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.block_timestamp']\n  ) }} AS fact_failed_deposit_messages_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  amount_e8,\n  asset,\n  from_address,\n  memo,\n  code,\n  reason,\n  tx_id,\n  event_id,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n  OR event_id IN (\n    SELECT\n      event_id\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__failed_deposit_messages", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__failed_deposit_messages", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_pool_block_fees": {"database": "MAYA", "schema": "defi", "name": "defi__fact_pool_block_fees", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_pool_block_fees.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_fees.sql", "unique_id": "model.maya_models.defi__fact_pool_block_fees", "fqn": ["maya_models", "gold", "defi", "defi__fact_pool_block_fees"], "alias": "fact_pool_block_fees", "checksum": {"name": "sha256", "checksum": "1e6cc4aa802d137544a6c0e8f91765c3622c769ba68f17d233a05670a0a93e99"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_pool_block_fees_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["day"], "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.defi.fact_pool_block_fees__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows the fee paid by each pool at different timestamp", "columns": {"FACT_POOL_BLOCK_FEES_ID": {"name": "FACT_POOL_BLOCK_FEES_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REWARDS": {"name": "REWARDS", "description": "The total rewards", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_LIQUIDITY_FEES_cacao": {"name": "TOTAL_LIQUIDITY_FEES_cacao", "description": "The total liquidity fees paid in cacao", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_LIQUIDITY_FEES": {"name": "ASSET_LIQUIDITY_FEES", "description": "The liquidity fees paid in Asset", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_LIQUIDITY_FEES": {"name": "cacao_LIQUIDITY_FEES", "description": "The liquidity fees paid in cacao", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EARNINGS": {"name": "EARNINGS", "description": "The total earnings for this pool at this time", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_pool_block_fees.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_pool_block_fees_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.defi.fact_pool_block_fees__dbt_tmp)"], "cluster_by": ["day"]}, "created_at": 1741278783.0807838, "relation_name": "MAYA.defi.fact_pool_block_fees", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_pool_block_fees_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.day >= (select min(day) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['day']\n) }}\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    pool_name,\n    rewards,\n    total_liquidity_fees_cacao,\n    asset_liquidity_fees,\n    cacao_liquidity_fees,\n    earnings,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__pool_block_fees') }}\n\n{% if is_incremental() %}\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a._unique_key']\n  ) }} AS fact_pool_block_fees_id,\n  DAY,\n  pool_name,\n  rewards,\n  total_liquidity_fees_cacao,\n  asset_liquidity_fees,\n  cacao_liquidity_fees,\n  earnings,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A", "language": "sql", "refs": [{"name": "silver__pool_block_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.maya_models.silver__pool_block_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_pool_balance_change_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_pool_balance_change_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_pool_balance_change_events.sql", "original_file_path": "models/gold/defi/defi__fact_pool_balance_change_events.sql", "unique_id": "model.maya_models.defi__fact_pool_balance_change_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_pool_balance_change_events"], "alias": "fact_pool_balance_change_events", "checksum": {"name": "sha256", "checksum": "9dd9916eab1769840afb8ce6c3edc8b1e9cccd6d13f2015861f5909887cbf0f4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_pool_balance_change_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_pool_balance_change_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows the change of the pool balance", "columns": {"FACT_POOL_BALANCE_CHANGE_EVENTS_ID": {"name": "FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Same as pool name, which pool this bond events happens", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT": {"name": "cacao_AMOUNT", "description": "The amount of cacao for the pool balance change", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_ADD": {"name": "cacao_ADD", "description": "False or True, if True, then the event is to add cacao not asset", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "The amount of asset for the pool balance change", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_ADD": {"name": "ASSET_ADD", "description": "False or True, if True, then the event is to add asset not cacao", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REASON": {"name": "REASON", "description": "The reason for the pool balance change", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_pool_balance_change_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_pool_balance_change_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_pool_balance_change_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.068397, "relation_name": "MAYA.defi.fact_pool_balance_change_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_pool_balance_change_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    asset,\n    cacao_amount,\n    cacao_add,\n    asset_amount,\n    asset_add,\n    reason,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__pool_balance_change_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.asset','a.block_timestamp']\n  ) }} AS fact_pool_balance_change_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  asset,\n  cacao_amount,\n  cacao_add,\n  asset_amount,\n  asset_add,\n  reason,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n  OR asset IN (\n    SELECT\n      asset\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__pool_balance_change_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__pool_balance_change_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_reserve_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_reserve_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_reserve_events.sql", "original_file_path": "models/gold/defi/defi__fact_reserve_events.sql", "unique_id": "model.maya_models.defi__fact_reserve_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_reserve_events"], "alias": "fact_reserve_events", "checksum": {"name": "sha256", "checksum": "f9fccc0dc5ab0b8efab8d4fc995cf47e029955aff9184b6e9724c540317efe87"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_reserve_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_reserve_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows the amount of cacao reserved into the network", "columns": {"FACT_RESERVE_EVENTS_ID": {"name": "FACT_RESERVE_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The memo for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The address reserve the amount to the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "E8": {"name": "E8", "description": "The cacao amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_reserve_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_reserve_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_reserve_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.3713841, "relation_name": "MAYA.defi.fact_reserve_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_reserve_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    blockchain,\n    from_address,\n    to_address,\n    asset,\n    asset_e8,\n    memo,\n    address,\n    e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__reserve_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.tx_id','a.blockchain','a.from_address','a.to_address','a.asset','a.memo','a.address','a.block_timestamp']\n  ) }} AS fact_reserve_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  blockchain,\n  from_address,\n  to_address,\n  asset,\n  asset_e8,\n  memo,\n  address,\n  e8,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__reserve_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__reserve_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_stake_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_stake_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_stake_events.sql", "original_file_path": "models/gold/defi/defi__fact_stake_events.sql", "unique_id": "model.maya_models.defi__fact_stake_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_stake_events"], "alias": "fact_stake_events", "checksum": {"name": "sha256", "checksum": "a170cd2b53c542c71df690aa308ccaa015f3b0a0997e3f6819330ac46df432c7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM, STAKING"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_stake_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_stake_events__dbt_tmp)"]}, "tags": [], "description": "Fact table containing stake events", "columns": {"FACT_STAKE_EVENTS_ID": {"name": "FACT_STAKE_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_TX_ID": {"name": "ASSET_TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_BLOCKCHAIN": {"name": "ASSET_BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_ADDRESS": {"name": "ASSET_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset amount for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STAKE_UNITS": {"name": "STAKE_UNITS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_TX_ID": {"name": "cacao_TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_ADDRESS": {"name": "cacao_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_E8": {"name": "cacao_E8", "description": "The asset amount for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_ASSET_IN_cacao_E8": {"name": "_ASSET_IN_cacao_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM, STAKING"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_stake_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM, STAKING"}}}, "unique_key": "fact_stake_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_stake_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.394717, "relation_name": "MAYA.defi.fact_stake_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM, STAKING' }} },\n  unique_key = 'fact_stake_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    pool_name,\n    asset_tx_id,\n    asset_blockchain,\n    asset_address,\n    asset_e8,\n    stake_units,\n    cacao_tx_id,\n    cacao_address,\n    cacao_e8,\n    _ASSET_IN_cacao_E8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__stake_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id', 'a.cacao_address', 'a.asset_address']\n  ) }} AS fact_stake_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  pool_name,\n  asset_tx_id,\n  asset_blockchain,\n  asset_address,\n  asset_e8,\n  stake_units,\n  cacao_tx_id,\n  cacao_address,\n  cacao_e8,\n  _ASSET_IN_cacao_E8,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__stake_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__stake_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_slash_liquidity_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_slash_liquidity_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_slash_liquidity_events.sql", "original_file_path": "models/gold/defi/defi__fact_slash_liquidity_events.sql", "unique_id": "model.maya_models.defi__fact_slash_liquidity_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_slash_liquidity_events"], "alias": "fact_slash_liquidity_events", "checksum": {"name": "sha256", "checksum": "23cf4adf72d8558b4a11d46dda7e25bb27bcc85b77be840e567ecb01548f7ec2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM, SWAPS"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_slash_liquidity_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_slash_liquidity_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows the slash liquidity event entries", "columns": {"FACT_SLASH_LIQUIDITY_EVENTS_ID": {"name": "FACT_SLASH_LIQUIDITY_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bond_address": {"name": "bond_address", "description": "The address of the bond", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lp_address": {"name": "lp_address", "description": "The address of the liquidity pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "asset": {"name": "asset", "description": "The asset that was slashed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lp_units": {"name": "lp_units", "description": "The number of liquidity pool units that were slashed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "asset_e8_loss": {"name": "asset_e8_loss", "description": "The amount of asset lost in E8", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_e10_loss": {"name": "cacao_e10_loss", "description": "The amount of cacao lost in E10", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM, SWAPS"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_slash_liquidity_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM, SWAPS"}}}, "unique_key": "fact_slash_liquidity_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_slash_liquidity_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.3836539, "relation_name": "MAYA.defi.fact_slash_liquidity_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM, SWAPS' }} },\n  unique_key = 'fact_slash_liquidity_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    bond_address,\n    lp_address,\n    asset,\n    lp_units,\n    asset_e8_loss,\n    cacao_e10_loss,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__slash_liquidity_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id', 'a.bond_address', 'a.lp_address', 'a.asset']\n  ) }} AS fact_slash_liquidity_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  bond_address,\n  lp_address,\n  asset,\n  lp_units,\n  asset_e8_loss,\n  cacao_e10_loss,\n  event_id,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__slash_liquidity_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__slash_liquidity_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_swaps": {"database": "MAYA", "schema": "defi", "name": "defi__fact_swaps", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_swaps.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.sql", "unique_id": "model.maya_models.defi__fact_swaps", "fqn": ["maya_models", "gold", "defi", "defi__fact_swaps"], "alias": "fact_swaps", "checksum": {"name": "sha256", "checksum": "9357266421f5bc3d896806f24b2957c31178a05fc75330353a3734427900ffe7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM, SWAPS"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_swaps_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_swaps__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows the swap activity in Thorchain", "columns": {"FACT_SWAPS_ID": {"name": "FACT_SWAPS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The user address that initiates the swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NATIVE_TO_ADDRESS": {"name": "NATIVE_TO_ADDRESS", "description": "The user address that is receiving the result of the swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_POOL_ADDRESS": {"name": "TO_POOL_ADDRESS", "description": "The pool address that processes the swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AFFILIATE_ADDRESS": {"name": "AFFILIATE_ADDRESS", "description": "The affiliate address that is receiving the affiliate fee (redundant with array)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AFFILIATE_FEE_BASIS_POINTS": {"name": "AFFILIATE_FEE_BASIS_POINTS", "description": "The affiliate fee basis points that is received by the affiliate address (redundant with array)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AFFILIATE_ADDRESSES_ARRAY": {"name": "AFFILIATE_ADDRESSES_ARRAY", "description": "The affiliate addresses that are receiving the affiliate fee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AFFILIATE_FEE_BASIS_POINTS_ARRAY": {"name": "AFFILIATE_FEE_BASIS_POINTS_ARRAY", "description": "The affiliate fee basis points that are received by the affiliate addresses", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ASSET": {"name": "FROM_ASSET", "description": "Initial asset to swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET": {"name": "TO_ASSET", "description": "The asset swap to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_AMOUNT": {"name": "FROM_AMOUNT", "description": "Amount of the asset to swap from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_AMOUNT": {"name": "TO_AMOUNT", "description": "Amount of the asset to swap for", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MIN_TO_AMOUNT": {"name": "MIN_TO_AMOUNT", "description": "Minimal amount to swap for", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_AMOUNT_USD": {"name": "FROM_AMOUNT_USD", "description": "Amount in USD of the asset to swap from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_AMOUNT_USD": {"name": "TO_AMOUNT_USD", "description": "Amount in USD of the asset to swap for", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_USD": {"name": "cacao_USD", "description": "Minimal amount in USD to swap for", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_USD": {"name": "ASSET_USD", "description": "Asset amount in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_AMOUNT_MIN_USD": {"name": "TO_AMOUNT_MIN_USD", "description": "Min asset amount in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SWAP_SLIP_BP": {"name": "SWAP_SLIP_BP", "description": "The slippage during the swap process", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQ_FEE_cacao": {"name": "LIQ_FEE_cacao", "description": "The amount of cacao liquidity fee paid in cacao for the swaps", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQ_FEE_cacao_USD": {"name": "LIQ_FEE_cacao_USD", "description": "The amount of cacao in USD liquidity fee paid in cacao for the swaps", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQ_FEE_ASSET": {"name": "LIQ_FEE_ASSET", "description": "The amount of Asset liquidity fee paid in cacao for the swaps", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQ_FEE_ASSET_USD": {"name": "LIQ_FEE_ASSET_USD", "description": "The amount of Asset in USD liquidity fee paid in cacao for the swaps", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STREAMING_COUNT": {"name": "STREAMING_COUNT", "description": "The count of the streaming events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STREAMING_QUANTITY": {"name": "STREAMING_QUANTITY", "description": "The quantity of the streaming events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM, SWAPS"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_swaps.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM, SWAPS"}}}, "unique_key": "fact_swaps_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_swaps__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.41148, "relation_name": "MAYA.defi.fact_swaps", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM, SWAPS' }} },\n  unique_key = 'fact_swaps_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    blockchain,\n    pool_name,\n    from_address,\n    native_to_address,\n    to_pool_address,\n    affiliate_address,\n    affiliate_fee_basis_points,\n    affiliate_addresses_array,\n    affiliate_fee_basis_points_array,\n    from_asset,\n    to_asset,\n    from_amount,\n    to_amount,\n    min_to_amount,\n    from_amount_usd,\n    to_amount_usd,\n    cacao_usd,\n    asset_usd,\n    to_amount_min_usd,\n    swap_slip_bp,\n    liq_fee_cacao,\n    liq_fee_cacao_usd,\n    liq_fee_asset,\n    liq_fee_asset_usd,\n    streaming_count,\n    streaming_quantity,\n    _unique_key,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__swaps') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a._unique_key']\n  ) }} AS fact_swaps_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  blockchain,\n  pool_name,\n  from_address,\n  native_to_address,\n  to_pool_address,\n  affiliate_address,\n  affiliate_fee_basis_points,\n  affiliate_addresses_array,\n  affiliate_fee_basis_points_array,\n  from_asset,\n  to_asset,\n  from_amount,\n  to_amount,\n  min_to_amount,\n  from_amount_usd,\n  to_amount_usd,\n  cacao_usd,\n  asset_usd,\n  to_amount_min_usd,\n  swap_slip_bp,\n  liq_fee_cacao,\n  liq_fee_cacao_usd,\n  liq_fee_asset,\n  liq_fee_asset_usd,\n  streaming_count,\n  streaming_quantity,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_id = b.block_id\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__swaps", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_fee_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_fee_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_fee_events.sql", "original_file_path": "models/gold/defi/defi__fact_fee_events.sql", "unique_id": "model.maya_models.defi__fact_fee_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_fee_events"], "alias": "fact_fee_events", "checksum": {"name": "sha256", "checksum": "6da39501c6c11b712869b886292fc4c262c3d9ecde770882a6937f4ad2ca6c02"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_fee_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_fee_events__dbt_tmp)"]}, "tags": [], "description": "Fact table containing all related fees that happen in the Thorchain network", "columns": {"FACT_FEE_EVENTS_ID": {"name": "FACT_FEE_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_DEDUCT": {"name": "POOL_DEDUCT", "description": "The amount deducted from the pool related to the fee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset amount for this fee, using the price table we can calculate the cacao amount by asset amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_fee_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_fee_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_fee_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.423593, "relation_name": "MAYA.defi.fact_fee_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_fee_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    asset,\n    pool_deduct,\n    asset_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__fee_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.asset','a.asset_e8','a.pool_deduct','a.block_timestamp','a.tx_id ']\n  ) }} AS fact_fee_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  asset,\n  pool_deduct,\n  asset_e8,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n  OR tx_id IN (\n    SELECT\n      tx_id\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__fee_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__fee_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_block_pool_depths": {"database": "MAYA", "schema": "defi", "name": "defi__fact_block_pool_depths", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_block_pool_depths.sql", "original_file_path": "models/gold/defi/defi__fact_block_pool_depths.sql", "unique_id": "model.maya_models.defi__fact_block_pool_depths", "fqn": ["maya_models", "gold", "defi", "defi__fact_block_pool_depths"], "alias": "fact_block_pool_depths", "checksum": {"name": "sha256", "checksum": "81bdf5a78bdee77848d1d1ef550d4c24e7ec48f66d4731357c60eea9f9cae1ba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_pool_depths_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_block_pool_depths__dbt_tmp)"]}, "tags": [], "description": "Fact table containing all the available pools and its cacao/asset depth at each block interval", "columns": {"FACT_POOL_DEPTHS_ID": {"name": "FACT_POOL_DEPTHS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_E8": {"name": "cacao_E8", "description": "The cacao depth for this pool at this block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset depth for this pool at this block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYNTH_E8": {"name": "SYNTH_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_block_pool_depths.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_pool_depths_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_block_pool_depths__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.4548302, "relation_name": "MAYA.defi.fact_block_pool_depths", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_pool_depths_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    pool_name,\n    asset_e8,\n    cacao_e8,\n    synth_e8,\n    block_timestamp,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__block_pool_depths') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.pool_name','a.block_timestamp']\n  ) }} AS fact_pool_depths_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  cacao_e8,\n  asset_e8,\n  synth_e8,\n  pool_name,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n  OR pool_name IN (\n    SELECT\n      pool_name\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__block_pool_depths", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__block_pool_depths", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_add_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_add_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_add_events.sql", "original_file_path": "models/gold/defi/defi__fact_add_events.sql", "unique_id": "model.maya_models.defi__fact_add_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_add_events"], "alias": "fact_add_events", "checksum": {"name": "sha256", "checksum": "aa7ba79c406af3d3ae488c48e4f015f941684c01dcea3e5c1407fa573f761e14"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_add_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_add_events__dbt_tmp)"]}, "tags": [], "description": "Fact table containing add events", "columns": {"FACT_ADD_EVENTS_ID": {"name": "FACT_ADD_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_E8": {"name": "cacao_E8", "description": "The amount of cacao for this add event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The memo for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_add_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_add_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_add_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.4386618, "relation_name": "MAYA.defi.fact_add_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_add_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    e.block_timestamp,\n    e.tx_id,\n    e.cacao_e8,\n    e.blockchain,\n    e.asset_e8,\n    e.pool_name,\n    e.memo,\n    e.to_address,\n    e.from_address,\n    e.asset,\n    e.event_id,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__add_events') }}\n    e\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.tx_id','a.blockchain','a.from_address','a.to_address','a.asset','a.memo','a.block_timestamp']\n  ) }} AS fact_add_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  A.tx_id,\n  A.cacao_e8,\n  A.blockchain,\n  A.asset_e8,\n  A.pool_name,\n  A.memo,\n  A.to_address,\n  A.from_address,\n  A.asset,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n  OR tx_id IN (\n    SELECT\n      tx_id\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__add_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__add_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_send_messages": {"database": "MAYA", "schema": "defi", "name": "defi__fact_send_messages", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_send_messages.sql", "original_file_path": "models/gold/defi/defi__fact_send_messages.sql", "unique_id": "model.maya_models.defi__fact_send_messages", "fqn": ["maya_models", "gold", "defi", "defi__fact_send_messages"], "alias": "fact_send_messages", "checksum": {"name": "sha256", "checksum": "f6356f5a283a134490e72decfa50ef98f22acf49fb2001acb61445812884a362"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "event_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_send_messages__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows send messages", "columns": {"FACT_SEND_MESSAGES_ID": {"name": "FACT_SEND_MESSAGES_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AMOUNT_E8": {"name": "AMOUNT_E8", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EVENT_ID": {"name": "EVENT_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_send_messages.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "event_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_send_messages__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.252138, "relation_name": "MAYA.defi.fact_send_messages", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'event_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    amount_e8,\n    asset,\n    from_address,\n    to_address,\n    memo,\n    tx_id,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__send_messages') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.amount_e8','a.asset','a.from_address','a.to_address','a.memo','a.tx_id','a.event_id','a.block_timestamp']\n  ) }} AS fact_send_messages_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  amount_e8,\n  asset,\n  from_address,\n  to_address,\n  memo,\n  tx_id,\n  event_id,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n  OR event_id IN (\n    SELECT\n      event_id\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__send_messages", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__send_messages", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_liquidity_actions": {"database": "MAYA", "schema": "defi", "name": "defi__fact_liquidity_actions", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_liquidity_actions.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_actions.sql", "unique_id": "model.maya_models.defi__fact_liquidity_actions", "fqn": ["maya_models", "gold", "defi", "defi__fact_liquidity_actions"], "alias": "fact_liquidity_actions", "checksum": {"name": "sha256", "checksum": "75ffc9a1f68edb2d45c650b01573f91f074e4dde51bc5e77f7e13846e8bdaedf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_liquidity_actions_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_liquidity_actions__dbt_tmp)"]}, "tags": [], "description": "Fact table containing the actions the liquidity providers do in the THORChain, with the amount in cacao/Asset", "columns": {"FACT_LIQUIDITY_ACTIONS_ID": {"name": "FACT_LIQUIDITY_ACTIONS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LP_ACTION": {"name": "LP_ACTION", "description": "The direction of the liquidity providers, add or remove the liquidity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT": {"name": "cacao_AMOUNT", "description": "How many cacao liquidity added/removed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT_USD": {"name": "cacao_AMOUNT_USD", "description": "How many cacao liquidity added/removed in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "How many Asset liquidity added/removed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_AMOUNT_USD": {"name": "ASSET_AMOUNT_USD", "description": "How many Asset liquidity added/removed in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STAKE_UNITS": {"name": "STAKE_UNITS", "description": "Stake units are a way of representing how much liquidity an address has in the pool. THORChain converts the raw amounts you are depositing / withdrawing into stake_units to represent what % of the pool you own a claim to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "asset_tx_id": {"name": "asset_tx_id", "description": "The transaction id for adding/removing the asset", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "asset_address": {"name": "asset_address", "description": "The asset address of the liquidity provider", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "asset_blockchain": {"name": "asset_blockchain", "description": "The name of the blockchain", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "il_protection": {"name": "il_protection", "description": "The total impermanent loss protection paid for this pool on this day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "il_protection_usd": {"name": "il_protection_usd", "description": "The total impermanent loss protection paid  in USD for this pool on this day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unstake_asymmetry": {"name": "unstake_asymmetry", "description": "Only exists in unstake, or removing the liquidity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unstake_basis_points": {"name": "unstake_basis_points", "description": "The basis points for unstaking, or removing the liquidity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_liquidity_actions.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_liquidity_actions_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_liquidity_actions__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.262092, "relation_name": "MAYA.defi.fact_liquidity_actions", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_liquidity_actions_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_id,\n    tx_id,\n    lp_action,\n    pool_name,\n    from_address,\n    to_address,\n    cacao_amount,\n    cacao_amount_usd,\n    asset_amount,\n    asset_amount_usd,\n    stake_units,\n    asset_tx_id,\n    asset_address,\n    asset_blockchain,\n    il_protection,\n    il_protection_usd,\n    unstake_asymmetry,\n    unstake_basis_points,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__liquidity_actions') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a._unique_key']\n  ) }} AS fact_liquidity_actions_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  lp_action,\n  pool_name,\n  from_address,\n  to_address,\n  cacao_amount,\n  cacao_amount_usd,\n  asset_amount,\n  asset_amount_usd,\n  stake_units,\n  asset_tx_id,\n  asset_address,\n  asset_blockchain,\n  il_protection,\n  il_protection_usd,\n  unstake_asymmetry,\n  unstake_basis_points,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_id = b.block_id\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__liquidity_actions", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__liquidity_actions", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_pool_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_pool_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_pool_events.sql", "original_file_path": "models/gold/defi/defi__fact_pool_events.sql", "unique_id": "model.maya_models.defi__fact_pool_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_pool_events"], "alias": "fact_pool_events", "checksum": {"name": "sha256", "checksum": "3d458ed472fd681f3e3c3ad721b033ac95fb6e95aea3b3133ed008b517b3b4ab"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_pool_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_pool_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows that the status of the pool at each block id", "columns": {"FACT_POOL_EVENTS_ID": {"name": "FACT_POOL_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "The asset/pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "The current status for this pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_pool_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_pool_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_pool_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.309809, "relation_name": "MAYA.defi.fact_pool_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_pool_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    asset,\n    status,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__pool_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.asset','a.status','a.block_timestamp']\n  ) }} AS fact_pool_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  asset,\n  status,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n  OR asset IN (\n    SELECT\n      asset\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__pool_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__pool_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_active_vault_events": {"database": "MAYA", "schema": "defi", "name": "defi__fact_active_vault_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_active_vault_events.sql", "original_file_path": "models/gold/defi/defi__fact_active_vault_events.sql", "unique_id": "model.maya_models.defi__fact_active_vault_events", "fqn": ["maya_models", "gold", "defi", "defi__fact_active_vault_events"], "alias": "fact_active_vault_events", "checksum": {"name": "sha256", "checksum": "e43e27d63204b3e2e5e1c445138754fb9040d8955df3c457dbf18794768db912"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_active_vault_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_active_vault_events__dbt_tmp)"]}, "tags": [], "description": "Fact table containing the events triggered by the churning activities", "columns": {"FACT_ACTIVE_VAULT_EVENTS_ID": {"name": "FACT_ACTIVE_VAULT_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_ASGARD_ADDR": {"name": "ADD_ASGARD_ADDR", "description": "The asgard address added to the vault", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_active_vault_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_active_vault_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_active_vault_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.296082, "relation_name": "MAYA.defi.fact_active_vault_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_active_vault_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_timestamp,\n    add_asgard_addr,\n    event_id,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__active_vault_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.block_timestamp','a.add_asgard_addr']\n  ) }} AS fact_active_vault_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  add_asgard_addr,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__active_vault_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__active_vault_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_pool_block_balances": {"database": "MAYA", "schema": "defi", "name": "defi__fact_pool_block_balances", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_pool_block_balances.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_balances.sql", "unique_id": "model.maya_models.defi__fact_pool_block_balances", "fqn": ["maya_models", "gold", "defi", "defi__fact_pool_block_balances"], "alias": "fact_pool_block_balances", "checksum": {"name": "sha256", "checksum": "f8a08871eb5935f752b04008adc1ad7c0d5fdfd4f6b073810c1ec9be62df9ebd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_pool_block_balances_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_pool_block_balances__dbt_tmp)"]}, "tags": [], "description": "Fact table containing the actions the liquidity providers do in the THORChain, with the amount in cacao/Asset", "columns": {"FACT_POOL_BLOCK_BALANCES_ID": {"name": "FACT_POOL_BLOCK_BALANCES_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT": {"name": "cacao_AMOUNT", "description": "The cacao amount balance for this pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT_USD": {"name": "cacao_AMOUNT_USD", "description": "The cacao amount balance in USD for this pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "The asset amount balance for this pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_AMOUNT_USD": {"name": "ASSET_AMOUNT_USD", "description": "The asset amount balance in USD for this pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYNTH_AMOUNT": {"name": "SYNTH_AMOUNT", "description": "The synth amount balance for this pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYNTH_AMOUNT_USD": {"name": "SYNTH_AMOUNT_USD", "description": "The synth amount balance in USD for this pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_pool_block_balances.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_pool_block_balances_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_pool_block_balances__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.279317, "relation_name": "MAYA.defi.fact_pool_block_balances", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_pool_block_balances_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_id,\n    pool_name,\n    cacao_amount,\n    cacao_amount_usd,\n    asset_amount,\n    asset_amount_usd,\n    synth_amount,\n    synth_amount_usd,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__pool_block_balances') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a._unique_key']\n  ) }} AS fact_pool_block_balances_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  pool_name,\n  cacao_amount,\n  cacao_amount_usd,\n  asset_amount,\n  asset_amount_usd,\n  synth_amount,\n  synth_amount_usd,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_id = b.block_id\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__pool_block_balances", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__pool_block_balances", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_total_value_locked": {"database": "MAYA", "schema": "defi", "name": "defi__fact_total_value_locked", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_total_value_locked.sql", "original_file_path": "models/gold/defi/defi__fact_total_value_locked.sql", "unique_id": "model.maya_models.defi__fact_total_value_locked", "fqn": ["maya_models", "gold", "defi", "defi__fact_total_value_locked"], "alias": "fact_total_value_locked", "checksum": {"name": "sha256", "checksum": "2829347a9379bc284a8886dea5d3a68dcc78aff7330bec0ec8c2ec8bc077d686"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_total_value_locked_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.defi.fact_total_value_locked__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows set mimir events", "columns": {"FACT_TOTAL_VALUE_LOCKED_ID": {"name": "FACT_TOTAL_VALUE_LOCKED_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "The timestamp in day for the recorded of the block fee", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_POOLED": {"name": "TOTAL_VALUE_POOLED", "description": "The total amount of cacao provided by the liquidity provides and pooled in the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_BONDED": {"name": "TOTAL_VALUE_BONDED", "description": "The total amount of cacao provided by the node operators and bonded in the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_LOCKED": {"name": "TOTAL_VALUE_LOCKED", "description": "The total cacao value locked in the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_total_value_locked.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_total_value_locked_id", "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.defi.fact_total_value_locked__dbt_tmp)"], "incremental_strategy": "merge"}, "created_at": 1741278783.321284, "relation_name": "MAYA.defi.fact_total_value_locked", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_total_value_locked_id',\n  incremental_predicates = ['DBT_INTERNAL_DEST.day >= (select min(day) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  incremental_strategy = 'merge'\n) }}\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    total_value_pooled,\n    total_value_bonded,\n    total_value_locked,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__total_value_locked') }}\n\n{% if is_incremental() %}\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.day']\n  ) }} AS fact_total_value_locked_id,\n  DAY,\n  total_value_pooled,\n  total_value_bonded,\n  total_value_locked,\n  _INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A", "language": "sql", "refs": [{"name": "silver__total_value_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.maya_models.silver__total_value_locked"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_daily_tvl": {"database": "MAYA", "schema": "defi", "name": "defi__fact_daily_tvl", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_daily_tvl.sql", "original_file_path": "models/gold/defi/defi__fact_daily_tvl.sql", "unique_id": "model.maya_models.defi__fact_daily_tvl", "fqn": ["maya_models", "gold", "defi", "defi__fact_daily_tvl"], "alias": "fact_daily_tvl", "checksum": {"name": "sha256", "checksum": "aacdb1a1085f97b771656301850d4f99e5947a06460ab807e8d60006db934a5d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_daily_tvl_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["day"], "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.defi.fact_daily_tvl__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows the total valued locked and the total value bonded/pooled", "columns": {"FACT_DAILY_TVL_ID": {"name": "FACT_DAILY_TVL_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_POOLED": {"name": "TOTAL_VALUE_POOLED", "description": "The total amount of cacao provided by the liquidity provides and pooled in the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_POOLED_USD": {"name": "TOTAL_VALUE_POOLED_USD", "description": "The total USD amount of cacao provided by the liquidity provides and pooled in the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_BONDED": {"name": "TOTAL_VALUE_BONDED", "description": "The total amount of cacao provided by the node operators and bonded in the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_BONDED_USD": {"name": "TOTAL_VALUE_BONDED_USD", "description": "The total USD amount of cacao provided by the node operators and bonded in the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_LOCKED": {"name": "TOTAL_VALUE_LOCKED", "description": "The total cacao value locked in the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_VALUE_LOCKED_USD": {"name": "TOTAL_VALUE_LOCKED_USD", "description": "The total USD value locked in the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_daily_tvl.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_daily_tvl_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.defi.fact_daily_tvl__dbt_tmp)"], "cluster_by": ["day"]}, "created_at": 1741278783.338052, "relation_name": "MAYA.defi.fact_daily_tvl", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_daily_tvl_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.day >= (select min(day) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['day']\n) }}\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    total_value_pooled,\n    total_value_pooled_usd,\n    total_value_bonded,\n    total_value_bonded_usd,\n    total_value_locked,\n    total_value_locked_usd\n  FROM\n    {{ ref('silver__daily_tvl') }}\n\n{% if is_incremental() %}\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.day']\n  ) }} AS fact_daily_tvl_id,\n  DAY,\n  total_value_pooled,\n  total_value_pooled_usd,\n  total_value_bonded,\n  total_value_bonded_usd,\n  total_value_locked,\n  total_value_locked_usd,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A", "language": "sql", "refs": [{"name": "silver__daily_tvl", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.maya_models.silver__daily_tvl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_daily_pool_stats": {"database": "MAYA", "schema": "defi", "name": "defi__fact_daily_pool_stats", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_daily_pool_stats.sql", "original_file_path": "models/gold/defi/defi__fact_daily_pool_stats.sql", "unique_id": "model.maya_models.defi__fact_daily_pool_stats", "fqn": ["maya_models", "gold", "defi", "defi__fact_daily_pool_stats"], "alias": "fact_daily_pool_stats", "checksum": {"name": "sha256", "checksum": "57508a6502be3023d1947e2637fa28cae458481eb3826ca8a82646eea071d573"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_daily_pool_stats_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["day"], "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.defi.fact_daily_pool_stats__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows the total valued locked and the total value bonded/pooled", "columns": {"FACT_DAILY_POOL_STATS_ID": {"name": "FACT_DAILY_POOL_STATS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYSTEM_REWARDS": {"name": "SYSTEM_REWARDS", "description": "The total daily system rewards in cacao to the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYSTEM_REWARDS_USD": {"name": "SYSTEM_REWARDS_USD", "description": "The total daily system rewards in USD to the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_LIQUIDITY": {"name": "ASSET_LIQUIDITY", "description": "The total asset liquidity for this pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_PRICE": {"name": "ASSET_PRICE", "description": "Current asset price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_PRICE_USD": {"name": "ASSET_PRICE_USD", "description": "Current asset price in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_LIQUIDITY": {"name": "cacao_LIQUIDITY", "description": "The total cacao liquidity for this pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_PRICE": {"name": "cacao_PRICE", "description": "Current cacao price", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_PRICE_USD": {"name": "cacao_PRICE_USD", "description": "Current cacao price in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_LIQUIDITY_COUNT": {"name": "ADD_LIQUIDITY_COUNT", "description": "How many times to add liquidity to the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_ASSET_LIQUIDITY": {"name": "ADD_ASSET_LIQUIDITY", "description": "The total amount of asset liquidity added to the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_ASSET_LIQUIDITY_USD": {"name": "ADD_ASSET_LIQUIDITY_USD", "description": "The total amount in usd of asset liquidity added to the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_cacao_LIQUIDITY": {"name": "ADD_cacao_LIQUIDITY", "description": "The total amount of cacao liquidity added to the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADD_cacao_LIQUIDITY_USD": {"name": "ADD_cacao_LIQUIDITY_USD", "description": "The total amount in usd of cacao liquidity added to the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_COUNT": {"name": "WITHDRAW_COUNT", "description": "Time to withdraw from the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_ASSET_LIQUIDITY": {"name": "WITHDRAW_ASSET_LIQUIDITY", "description": "The total amount of asset withdrawn from the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_ASSET_LIQUIDITY_USD": {"name": "WITHDRAW_ASSET_LIQUIDITY_USD", "description": "The total amount in USD of asset withdrawn from the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_cacao_LIQUIDITY": {"name": "WITHDRAW_cacao_LIQUIDITY", "description": "The total amount of cacao withdrawn from the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "WITHDRAW_cacao_LIQUIDITY_USD": {"name": "WITHDRAW_cacao_LIQUIDITY_USD", "description": "The total amount in USD of cacao withdrawn from the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IL_PROTECTION_PAID": {"name": "IL_PROTECTION_PAID", "description": "Impermanent loss protection cost paid to the network", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IL_PROTECTION_PAID_USD": {"name": "IL_PROTECTION_PAID_USD", "description": "Impermanent loss protection cost in USD paid to the network", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AVERAGE_SLIP": {"name": "AVERAGE_SLIP", "description": "Average slippage ", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET_AVERAGE_SLIP": {"name": "TO_ASSET_AVERAGE_SLIP", "description": "When swap from cacao to Asset, the average slippage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_cacao_AVERAGE_SLIP": {"name": "TO_cacao_AVERAGE_SLIP", "description": "When swap from Asset to cacao, the average slippage", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SWAP_COUNT": {"name": "SWAP_COUNT", "description": "Total number of swaps", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET_SWAP_COUNT": {"name": "TO_ASSET_SWAP_COUNT", "description": "Total number of swaps from cacao TO Asset", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_cacao_SWAP_COUNT": {"name": "TO_cacao_SWAP_COUNT", "description": "Total number of swaps from Asset TO cacao", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SWAP_VOLUME_cacao": {"name": "SWAP_VOLUME_cacao", "description": "The swap amount of cacao", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SWAP_VOLUME_cacao_USD": {"name": "SWAP_VOLUME_cacao_USD", "description": "The swap amount of cacao in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ASSET_SWAP_VOLUME": {"name": "TO_ASSET_SWAP_VOLUME", "description": "The swap volume from cacao to Asset", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_cacao_SWAP_VOLUME": {"name": "TO_cacao_SWAP_VOLUME", "description": "The swap volume from Asset to cacao", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_SWAP_FEES_cacao": {"name": "TOTAL_SWAP_FEES_cacao", "description": "Total swap fees in cacao", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_SWAP_FEES_USD": {"name": "TOTAL_SWAP_FEES_USD", "description": "Total swap fees in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_ASSET_SWAP_FEES": {"name": "TOTAL_ASSET_SWAP_FEES", "description": "Total asset swap fees in asset", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_ASSET_cacao_FEES": {"name": "TOTAL_ASSET_cacao_FEES", "description": "Total asset swap fees in cacao", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "UNIQUE_MEMBER_COUNT": {"name": "UNIQUE_MEMBER_COUNT", "description": "All memberships with a cacao address. Take the member from cacao and asset and then subtract the balance = 0 then get the results", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "UNIQUE_SWAPPER_COUNT": {"name": "UNIQUE_SWAPPER_COUNT", "description": "The unique swap address for this pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQUIDITY_UNITS": {"name": "LIQUIDITY_UNITS", "description": "The amount of units for the liquidity in the pool", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_daily_pool_stats.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_daily_pool_stats_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.day >= (select min(day) from \n    \n    MAYA.defi.fact_daily_pool_stats__dbt_tmp)"], "cluster_by": ["day"]}, "created_at": 1741278783.330782, "relation_name": "MAYA.defi.fact_daily_pool_stats", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_daily_pool_stats_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.day >= (select min(day) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['day']\n) }}\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    pool_name,\n    system_rewards,\n    system_rewards_usd,\n    asset_liquidity,\n    asset_price,\n    asset_price_usd,\n    cacao_liquidity,\n    cacao_price,\n    cacao_price_usd,\n    add_liquidity_count,\n    add_asset_liquidity,\n    add_asset_liquidity_usd,\n    add_cacao_liquidity,\n    add_cacao_liquidity_usd,\n    withdraw_count,\n    withdraw_asset_liquidity,\n    withdraw_asset_liquidity_usd,\n    withdraw_cacao_liquidity,\n    withdraw_cacao_liquidity_usd,\n    il_protection_paid,\n    il_protection_paid_usd,\n    average_slip,\n    to_asset_average_slip,\n    to_cacao_average_slip,\n    swap_count,\n    to_asset_swap_count,\n    to_cacao_swap_count,\n    swap_volume_cacao,\n    swap_volume_cacao_usd,\n    to_asset_swap_volume,\n    to_cacao_swap_volume,\n    total_swap_fees_cacao,\n    total_swap_fees_usd,\n    total_asset_swap_fees,\n    total_asset_cacao_fees,\n    unique_member_count,\n    unique_swapper_count,\n    liquidity_units,\n    _UNIQUE_KEY\n  FROM\n    {{ ref('silver__daily_pool_stats') }}\n\n{% if is_incremental() %}\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY - INTERVAL '2 DAYS' --counteract clock skew\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.day','a.pool_name']\n  ) }} AS fact_daily_pool_stats_id,\n  DAY,\n  pool_name,\n  system_rewards,\n  system_rewards_usd,\n  asset_liquidity,\n  asset_price,\n  asset_price_usd,\n  cacao_liquidity,\n  cacao_price,\n  cacao_price_usd,\n  add_liquidity_count,\n  add_asset_liquidity,\n  add_asset_liquidity_usd,\n  add_cacao_liquidity,\n  add_cacao_liquidity_usd,\n  withdraw_count,\n  withdraw_asset_liquidity,\n  withdraw_asset_liquidity_usd,\n  withdraw_cacao_liquidity,\n  withdraw_cacao_liquidity_usd,\n  il_protection_paid,\n  il_protection_paid_usd,\n  average_slip,\n  to_asset_average_slip,\n  to_cacao_average_slip,\n  swap_count,\n  to_asset_swap_count,\n  to_cacao_swap_count,\n  swap_volume_cacao,\n  swap_volume_cacao_usd,\n  to_asset_swap_volume,\n  to_cacao_swap_volume,\n  total_swap_fees_cacao,\n  total_swap_fees_usd,\n  total_asset_swap_fees,\n  total_asset_cacao_fees,\n  unique_member_count,\n  unique_swapper_count,\n  liquidity_units,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_total_block_rewards": {"database": "MAYA", "schema": "defi", "name": "defi__fact_total_block_rewards", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_total_block_rewards.sql", "original_file_path": "models/gold/defi/defi__fact_total_block_rewards.sql", "unique_id": "model.maya_models.defi__fact_total_block_rewards", "fqn": ["maya_models", "gold", "defi", "defi__fact_total_block_rewards"], "alias": "fact_total_block_rewards", "checksum": {"name": "sha256", "checksum": "ecf86768fe730c680b3c2e635e4814f0680fe4dcefa328c9756df107c1cbd3c4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_total_block_rewards_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_total_block_rewards__dbt_tmp)"]}, "tags": [], "description": "Fact table containing stake events", "columns": {"FACT_TOTAL_BLOCK_REWARDS_ID": {"name": "FACT_TOTAL_BLOCK_REWARDS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REWARD_ENTITY": {"name": "REWARD_ENTITY", "description": "The asset or named as pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT": {"name": "cacao_AMOUNT", "description": "The rewards measured in cacao amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_AMOUNT_USD": {"name": "cacao_AMOUNT_USD", "description": "The rewards measured in cacao amount in the USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_total_block_rewards.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_total_block_rewards_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_total_block_rewards__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.357783, "relation_name": "MAYA.defi.fact_total_block_rewards", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_total_block_rewards_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_id,\n    reward_entity,\n    cacao_amount,\n    cacao_amount_usd,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__total_block_rewards') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a._unique_key']\n  ) }} AS fact_total_block_rewards_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  reward_entity,\n  cacao_amount,\n  cacao_amount_usd,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_id = b.block_id\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__total_block_rewards", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__total_block_rewards", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.defi__fact_rewards_event_entries": {"database": "MAYA", "schema": "defi", "name": "defi__fact_rewards_event_entries", "resource_type": "model", "package_name": "maya_models", "path": "gold/defi/defi__fact_rewards_event_entries.sql", "original_file_path": "models/gold/defi/defi__fact_rewards_event_entries.sql", "unique_id": "model.maya_models.defi__fact_rewards_event_entries", "fqn": ["maya_models", "gold", "defi", "defi__fact_rewards_event_entries"], "alias": "fact_rewards_event_entries", "checksum": {"name": "sha256", "checksum": "04e82fa173c3482c09cdb874916cc34aa0b26c873345bef047f3ad1f5167898a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_rewards_event_entries_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_rewards_event_entries__dbt_tmp)"]}, "tags": [], "description": "Fact table that hows the entries for the rewards", "columns": {"FACT_REWARDS_EVENT_ENTRIES_ID": {"name": "FACT_REWARDS_EVENT_ENTRIES_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cacao_E8": {"name": "cacao_E8", "description": "The cacao amount of the rewards for this pool at this block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SAVER_E8": {"name": "SAVER_E8", "description": "The savers amount for this pool at this block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/defi/defi__fact_rewards_event_entries.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_rewards_event_entries_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.defi.fact_rewards_event_entries__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.345661, "relation_name": "MAYA.defi.fact_rewards_event_entries", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_rewards_event_entries_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    pool_name,\n    cacao_e8,\n    saver_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__rewards_event_entries') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.pool_name','a.block_timestamp']\n  ) }} AS fact_rewards_event_entries_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  pool_name,\n  cacao_e8,\n  saver_e8,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__rewards_event_entries", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__rewards_event_entries", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.gov__fact_set_node_keys_events": {"database": "MAYA", "schema": "gov", "name": "gov__fact_set_node_keys_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/gov/gov__fact_set_node_keys_events.sql", "original_file_path": "models/gold/gov/gov__fact_set_node_keys_events.sql", "unique_id": "model.maya_models.gov__fact_set_node_keys_events", "fqn": ["maya_models", "gold", "gov", "gov__fact_set_node_keys_events"], "alias": "fact_set_node_keys_events", "checksum": {"name": "sha256", "checksum": "18b796047e3f449d989a210acf2319bb91ec03bbf3374cbbf2beb05d3bd7f2ed"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_set_node_keys_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.gov.fact_set_node_keys_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows set node key events", "columns": {"FACT_SET_NODE_KEYS_EVENTS_ID": {"name": "FACT_SET_NODE_KEYS_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NODE_ADDRESS": {"name": "NODE_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SECP256K1": {"name": "SECP256K1", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ED25519": {"name": "ED25519", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "VALIDATOR_CONSENSUS": {"name": "VALIDATOR_CONSENSUS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/gov/gov__fact_set_node_keys_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_set_node_keys_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.gov.fact_set_node_keys_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.470461, "relation_name": "MAYA.gov.fact_set_node_keys_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_set_node_keys_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    node_address,\n    secp256k1,\n    ed25519,\n    validator_consensus,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__set_node_keys_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id', 'a.node_address', 'a.secp256k1', 'a.ed25519', 'a.block_timestamp', 'a.validator_consensus']\n  ) }} AS fact_set_node_keys_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  node_address,\n  secp256k1,\n  ed25519,\n  validator_consensus,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__set_node_keys_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__set_node_keys_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.gov__fact_new_node_events": {"database": "MAYA", "schema": "gov", "name": "gov__fact_new_node_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/gov/gov__fact_new_node_events.sql", "original_file_path": "models/gold/gov/gov__fact_new_node_events.sql", "unique_id": "model.maya_models.gov__fact_new_node_events", "fqn": ["maya_models", "gold", "gov", "gov__fact_new_node_events"], "alias": "fact_new_node_events", "checksum": {"name": "sha256", "checksum": "0b45bf0167721d6c4e22db14904731a325e1a3a6dd5f77ab1c40175f0d28ee38"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_new_node_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.gov.fact_new_node_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows new node events", "columns": {"FACT_NEW_NODE_EVENTS_ID": {"name": "FACT_NEW_NODE_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NODE_ADDRESS": {"name": "NODE_ADDRESS", "description": "The asgard address in the vault which are inactive", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/gov/gov__fact_new_node_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_new_node_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.gov.fact_new_node_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.498223, "relation_name": "MAYA.gov.fact_new_node_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_new_node_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    node_address,\n    block_timestamp,\n    event_id,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__new_node_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.node_address','a.block_timestamp']\n  ) }} AS fact_new_node_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  node_address,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n  OR node_address IN (\n    SELECT\n      node_address\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__new_node_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__new_node_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.gov__fact_slash_points": {"database": "MAYA", "schema": "gov", "name": "gov__fact_slash_points", "resource_type": "model", "package_name": "maya_models", "path": "gold/gov/gov__fact_slash_points.sql", "original_file_path": "models/gold/gov/gov__fact_slash_points.sql", "unique_id": "model.maya_models.gov__fact_slash_points", "fqn": ["maya_models", "gold", "gov", "gov__fact_slash_points"], "alias": "fact_slash_points", "checksum": {"name": "sha256", "checksum": "8449543a8229150d2411cca3fc465b083603475f987673e6acce7979197b6441"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_slash_points_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.gov.fact_slash_points__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows set mimir events", "columns": {"FACT_SLASH_POINTS_ID": {"name": "FACT_SLASH_POINTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NODE_ADDRESS": {"name": "NODE_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SLASH_POINTS": {"name": "SLASH_POINTS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REASON": {"name": "REASON", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/gov/gov__fact_slash_points.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_slash_points_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.gov.fact_slash_points__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.4843688, "relation_name": "MAYA.gov.fact_slash_points", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_slash_points_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    node_address,\n    slash_points,\n    reason,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__slash_points_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.node_address','a.slash_points']\n  ) }} AS fact_slash_points_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  node_address,\n  slash_points,\n  reason,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__slash_points_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__slash_points_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.gov__fact_validator_request_leave_events": {"database": "MAYA", "schema": "gov", "name": "gov__fact_validator_request_leave_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/gov/gov__fact_validator_request_leave_events.sql", "original_file_path": "models/gold/gov/gov__fact_validator_request_leave_events.sql", "unique_id": "model.maya_models.gov__fact_validator_request_leave_events", "fqn": ["maya_models", "gold", "gov", "gov__fact_validator_request_leave_events"], "alias": "fact_validator_request_leave_events", "checksum": {"name": "sha256", "checksum": "a9e8ab3a1beb7cd8bdfa43b2034a0a16e0ea5882bcc2f3e021d9a2b3bb450c94"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_validator_request_leave_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.gov.fact_validator_request_leave_events__dbt_tmp)"]}, "tags": [], "description": "Fact table containing validator request leave events", "columns": {"FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID": {"name": "FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NODE_ADDRESS": {"name": "NODE_ADDRESS", "description": "Address of node operator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/gov/gov__fact_validator_request_leave_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_validator_request_leave_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.gov.fact_validator_request_leave_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.5434072, "relation_name": "MAYA.gov.fact_validator_request_leave_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_validator_request_leave_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_timestamp,\n    tx_id,\n    from_address,\n    node_address,\n    event_id,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__validator_request_leave_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.block_timestamp','a.tx_id', 'a.from_address', 'a.node_address']\n  ) }} AS fact_validator_request_leave_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  from_address,\n  node_address,\n  A._inserted_timestamp,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__validator_request_leave_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__validator_request_leave_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.gov__fact_set_version_events": {"database": "MAYA", "schema": "gov", "name": "gov__fact_set_version_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/gov/gov__fact_set_version_events.sql", "original_file_path": "models/gold/gov/gov__fact_set_version_events.sql", "unique_id": "model.maya_models.gov__fact_set_version_events", "fqn": ["maya_models", "gold", "gov", "gov__fact_set_version_events"], "alias": "fact_set_version_events", "checksum": {"name": "sha256", "checksum": "56747db9ed534806768e9d7bcededbb0fd58031b74895fcd18fbb6ccd219bca7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_set_version_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.gov.fact_set_version_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows set version events", "columns": {"FACT_SET_VERSION_EVENTS_ID": {"name": "FACT_SET_VERSION_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "VERSION": {"name": "VERSION", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/gov/gov__fact_set_version_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_set_version_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.gov.fact_set_version_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.5283399, "relation_name": "MAYA.gov.fact_set_version_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_set_version_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    node_address,\n    version,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__set_version_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id', 'a.node_address', 'a.block_timestamp', 'a.version']\n  ) }} AS fact_set_version_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  node_address,\n  version,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__set_version_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__set_version_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.gov__fact_slash_amounts": {"database": "MAYA", "schema": "gov", "name": "gov__fact_slash_amounts", "resource_type": "model", "package_name": "maya_models", "path": "gold/gov/gov__fact_slash_amounts.sql", "original_file_path": "models/gold/gov/gov__fact_slash_amounts.sql", "unique_id": "model.maya_models.gov__fact_slash_amounts", "fqn": ["maya_models", "gold", "gov", "gov__fact_slash_amounts"], "alias": "fact_slash_amounts", "checksum": {"name": "sha256", "checksum": "b7ad56749ad47b90559fd7db6c5ddbfa9964d5a030645e7021788dd22a06a2b6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_slash_amounts_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.gov.fact_slash_amounts__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows slash events", "columns": {"FACT_SLASH_AMOUNTS_ID": {"name": "FACT_SLASH_AMOUNTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": " The asset amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/gov/gov__fact_slash_amounts.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_slash_amounts_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.gov.fact_slash_amounts__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.512794, "relation_name": "MAYA.gov.fact_slash_amounts", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_slash_amounts_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    pool_name,\n    asset,\n    asset_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__slash_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.pool_name','a.asset']\n  ) }} AS fact_slash_amounts_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  pool_name,\n  asset,\n  asset_e8,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__slash_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__slash_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.maya_models.gov__fact_set_ip_address_events": {"database": "MAYA", "schema": "gov", "name": "gov__fact_set_ip_address_events", "resource_type": "model", "package_name": "maya_models", "path": "gold/gov/gov__fact_set_ip_address_events.sql", "original_file_path": "models/gold/gov/gov__fact_set_ip_address_events.sql", "unique_id": "model.maya_models.gov__fact_set_ip_address_events", "fqn": ["maya_models", "gold", "gov", "gov__fact_set_ip_address_events"], "alias": "fact_set_ip_address_events", "checksum": {"name": "sha256", "checksum": "7d9343a599899033db77772d1788db9d7ed14d5136ad8eca860afbee03765729"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_set_ip_address_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.gov.fact_set_ip_address_events__dbt_tmp)"]}, "tags": [], "description": "Fact table that shows set ip address events", "columns": {"FACT_SET_IP_ADDRESS_EVENTS_ID": {"name": "FACT_SET_IP_ADDRESS_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NODE_ADDRESS": {"name": "NODE_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IP_ADDR": {"name": "IP_ADDR", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "maya_models://models/gold/gov/gov__fact_set_ip_address_events.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "DEX, AMM"}}}, "unique_key": "fact_set_ip_address_events_id", "incremental_strategy": "merge", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from \n    \n    MAYA.gov.fact_set_ip_address_events__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1741278783.5612621, "relation_name": "MAYA.gov.fact_set_ip_address_events", "raw_code": "{{ config(\n  materialized = 'incremental',\n  meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'DEX, AMM' }} },\n  unique_key = 'fact_set_ip_address_events_id',\n  incremental_strategy = 'merge',\n  incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp >= (select min(block_timestamp) from ' ~ generate_tmp_view_name(this) ~ ')'],\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    node_address,\n    ip_addr,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__set_ip_address_events') }}\n)\nSELECT\n  {{ dbt_utils.generate_surrogate_key(\n    ['a.event_id','a.node_address','a.ip_addr','a.block_timestamp']\n  ) }} AS fact_set_ip_address_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  node_address,\n  ip_addr,\n  A._INSERTED_TIMESTAMP,\n  '{{ invocation_id }}' AS _invocation_id,\n  SYSDATE() AS inserted_timestamp,\n  SYSDATE() AS modified_timestamp\nFROM\n  base A\n  JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp >= (\n    SELECT\n      MAX(\n        block_timestamp - INTERVAL '1 HOUR'\n      )\n    FROM\n      {{ this }}\n  )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__set_ip_address_events", "package": null, "version": null}, {"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.maya_models.silver__set_ip_address_events", "model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "operation.maya_models.maya_models-on-run-start-0": {"database": "MAYA", "schema": "maya_models-on-run-start-0", "name": "maya_models-on-run-start-0", "resource_type": "operation", "package_name": "maya_models", "path": "hooks/maya_models-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.maya_models.maya_models-on-run-start-0", "fqn": ["maya_models", "hooks", "maya_models-on-run-start-0"], "alias": "maya_models-on-run-start-0", "checksum": {"name": "sha256", "checksum": "52e876a3c1606e4767b2a69c8f091bcf54ce2de85a0c1f5ba83c4317fd63b429"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1741278781.573465, "relation_name": null, "raw_code": "{{create_sps()}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.create_sps"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "operation.maya_models.maya_models-on-run-start-1": {"database": "MAYA", "schema": "maya_models-on-run-start-1", "name": "maya_models-on-run-start-1", "resource_type": "operation", "package_name": "maya_models", "path": "hooks/maya_models-on-run-start-1.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.maya_models.maya_models-on-run-start-1", "fqn": ["maya_models", "hooks", "maya_models-on-run-start-1"], "alias": "maya_models-on-run-start-1", "checksum": {"name": "sha256", "checksum": "52e876a3c1606e4767b2a69c8f091bcf54ce2de85a0c1f5ba83c4317fd63b429"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1741278781.581492, "relation_name": null, "raw_code": "{{create_udfs()}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.create_udfs"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 1}, "model.fsc_utils._datashare___create_udfs": {"database": "MAYA", "schema": "_datashare", "name": "_datashare___create_udfs", "resource_type": "model", "package_name": "fsc_utils", "path": "datashare/_datashare___create_udfs.sql", "original_file_path": "models/datashare/_datashare___create_udfs.sql", "unique_id": "model.fsc_utils._datashare___create_udfs", "fqn": ["fsc_utils", "datashare", "_datashare___create_udfs"], "alias": "_create_udfs", "checksum": {"name": "sha256", "checksum": "fc39e053d81b2ed8b8106cf5c917ea005b96942a61f37ee4850a838c6c8f7ce6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ddl_hash", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "merge_update_columns": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "merge", "unique_key": "ddl_hash", "merge_update_columns": [], "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1741278781.662292, "relation_name": "MAYA._datashare._create_udfs", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    incremental_strategy = 'merge',\n    unique_key = 'ddl_hash',\n    merge_update_columns = [],\n    )\n}}\n{% if execute %}\nSELECT\nCONCAT_WS('\\n',{{- fsc_utils.generate_datashare_udf_ddl().strip() -}}) AS ddl,\nmd5(ddl) AS ddl_hash,\nsysdate() as ddl_created_at\n{% else %}\nSELECT\nnull as ddl,\nnull as ddl_hash,\nnull as ddl_created_at\nfrom dual limit 0\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fsc_utils._datashare___create_gold": {"database": "MAYA", "schema": "_datashare", "name": "_datashare___create_gold", "resource_type": "model", "package_name": "fsc_utils", "path": "datashare/_datashare___create_gold.sql", "original_file_path": "models/datashare/_datashare___create_gold.sql", "unique_id": "model.fsc_utils._datashare___create_gold", "fqn": ["fsc_utils", "datashare", "_datashare___create_gold"], "alias": "_create_gold", "checksum": {"name": "sha256", "checksum": "e05db71a87f76f4cff0b9c4d1b83b975ef424d147379e2442907b1004f709887"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ddl_hash", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "merge_update_columns": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "merge", "unique_key": "ddl_hash", "merge_update_columns": [], "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1741278781.6674109, "relation_name": "MAYA._datashare._create_gold", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    incremental_strategy = 'merge',\n    unique_key = 'ddl_hash',\n    merge_update_columns = [],\n    )\n}}\n{% if execute %}\nSELECT\n$${{- fsc_utils.generate_datashare_ddl() -}}$$ AS ddl,\nmd5(ddl) AS ddl_hash,\nsysdate() as ddl_created_at\n{% else %}\nSELECT\nnull as ddl,\nnull as ddl_hash,\nnull as ddl_created_at\nfrom dual limit 0\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_base.live__allow_list": {"database": "MAYA", "schema": "live", "name": "live__allow_list", "resource_type": "model", "package_name": "livequery_base", "path": "live__allow_list.sql", "original_file_path": "models/live__allow_list.sql", "unique_id": "model.livequery_base.live__allow_list", "fqn": ["livequery_base", "live__allow_list"], "alias": "allow_list", "checksum": {"name": "sha256", "checksum": "0f0f0355e5f959d9d75458d90cee37209b5632f984414c3fcf65eca0e0e5de2b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {"select": ["VELOCITY_INTERNAL", "VELOCITY_ETHEREUM", "INTERNAL_DEV", "BI_ANALYTICS_READER"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "grants": {"+select": ["VELOCITY_INTERNAL", "VELOCITY_ETHEREUM", "INTERNAL_DEV", "BI_ANALYTICS_READER"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1741278781.6985018, "relation_name": "MAYA.live.allow_list", "raw_code": "-- depends_on: {{ ref('live') }}\n{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\nSELECT '*.' || t.value AS allowed_domains\nFROM table(flatten(input => {{ this.database }}.live.udf_allow_list())) AS t\nORDER BY\n    split_part(allowed_domains, '.', -1),\n    split_part(allowed_domains, '.', -2),\n    split_part(allowed_domains, '.', -3)", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.livequery_base.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_base._live": {"database": "MAYA", "schema": "_live", "name": "_live", "resource_type": "model", "package_name": "livequery_base", "path": "deploy/core/_live.sql", "original_file_path": "models/deploy/core/_live.sql", "unique_id": "model.livequery_base._live", "fqn": ["livequery_base", "deploy", "core", "_live"], "alias": "", "checksum": {"name": "sha256", "checksum": "c96cbb9dfef8ff10375c8e187dc394f7a38d172e8df94f343761d485338f4036"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["core"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1741278781.7023911, "relation_name": null, "raw_code": "{% set config = config_core__live %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.ephemeral_deploy_core"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_base.utils": {"database": "MAYA", "schema": "utils", "name": "utils", "resource_type": "model", "package_name": "livequery_base", "path": "deploy/core/utils.sql", "original_file_path": "models/deploy/core/utils.sql", "unique_id": "model.livequery_base.utils", "fqn": ["livequery_base", "deploy", "core", "utils"], "alias": "", "checksum": {"name": "sha256", "checksum": "306321713017a3700a99c47db3a99ca2f64fdf6fe567c883a7507f13bd8095c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["core"], "description": "", "columns": {"udf_json_rpc_call": {"name": "udf_json_rpc_call", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_urlencode": {"name": "udf_urlencode", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_int_to_binary": {"name": "udf_int_to_binary", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_binary_to_int": {"name": "udf_binary_to_int", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_evm_decode_log": {"name": "udf_evm_decode_log", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_base://models/deploy/core/utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1741278783.678108, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_utils') }}\n{% set config = config_core_utils %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.ephemeral_deploy_core"], "nodes": ["model.livequery_base._utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_base.live": {"database": "MAYA", "schema": "live", "name": "live", "resource_type": "model", "package_name": "livequery_base", "path": "deploy/core/live.sql", "original_file_path": "models/deploy/core/live.sql", "unique_id": "model.livequery_base.live", "fqn": ["livequery_base", "deploy", "core", "live"], "alias": "", "checksum": {"name": "sha256", "checksum": "71b371765e23aa22b9961eeaeb7657413cc7f6d5995b811f85a5c110ae1d4d00"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["core"], "description": "", "columns": {"udf_api": {"name": "udf_api", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_base://models/deploy/core/live.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1741278783.826522, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_utils') }}\n-- depends_on: {{ ref('utils') }}\n-- depends_on: {{ ref('_live') }}\n{% set config = config_core_live %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}, {"name": "_live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.ephemeral_deploy_core"], "nodes": ["model.livequery_base._utils", "model.livequery_base.utils", "model.livequery_base._live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_base._utils": {"database": "MAYA", "schema": "_utils", "name": "_utils", "resource_type": "model", "package_name": "livequery_base", "path": "deploy/core/_utils.sql", "original_file_path": "models/deploy/core/_utils.sql", "unique_id": "model.livequery_base._utils", "fqn": ["livequery_base", "deploy", "core", "_utils"], "alias": "", "checksum": {"name": "sha256", "checksum": "3d202cb82095728dae3b02cdca6d2c5f9521ecf50b687a50739f44b5ee828015"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["core"], "description": "", "columns": {"udf_introspect": {"name": "udf_introspect", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_base://models/deploy/core/_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1741278783.837284, "relation_name": null, "raw_code": "{% set config = config_core__utils %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.ephemeral_deploy_core"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "analysis.livequery_base.test_functions_py": {"database": "MAYA", "schema": "test_functions_py", "name": "test_functions_py", "resource_type": "analysis", "package_name": "livequery_base", "path": "analysis/test_functions_py.sql", "original_file_path": "analysis/test_functions_py.sql", "unique_id": "analysis.livequery_base.test_functions_py", "fqn": ["livequery_base", "analysis", "test_functions_py"], "alias": "", "checksum": {"name": "sha256", "checksum": "3e379c91a7abf83ca2438fdd68efa21b5f98a91a7c1beb62091f7b4d13d33745"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1741278781.803746, "relation_name": null, "raw_code": "{{ python_hex_to_int() }}\n{{ python_udf_hex_to_int_with_encoding() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.python_hex_to_int", "macro.livequery_base.python_udf_hex_to_int_with_encoding"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.livequery_base.test_functions": {"database": "MAYA", "schema": "test_functions", "name": "test_functions", "resource_type": "analysis", "package_name": "livequery_base", "path": "analysis/test_functions.sql", "original_file_path": "analysis/test_functions.sql", "unique_id": "analysis.livequery_base.test_functions", "fqn": ["livequery_base", "analysis", "test_functions"], "alias": "", "checksum": {"name": "sha256", "checksum": "0ab84ce91d84a3416f20a65f80f6226b0dec39313dbd0f555f40cdf721121b9e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1741278781.811101, "relation_name": null, "raw_code": "{{ sql_udf_json_rpc_call(True) }}\n{# {{ sql_udf_json_rpc_call(False) }} #}\n{{ config_core__live() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.sql_udf_json_rpc_call", "macro.livequery_base.config_core__live"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.livequery_base.test_create_or_drop_function_from_config": {"database": "MAYA", "schema": "test_create_or_drop_function_from_config", "name": "test_create_or_drop_function_from_config", "resource_type": "analysis", "package_name": "livequery_base", "path": "analysis/test_create_or_drop_function_from_config.sql", "original_file_path": "analysis/test_create_or_drop_function_from_config.sql", "unique_id": "analysis.livequery_base.test_create_or_drop_function_from_config", "fqn": ["livequery_base", "analysis", "test_create_or_drop_function_from_config"], "alias": "", "checksum": {"name": "sha256", "checksum": "6da8747a0512c8c0c522b3b56816f437171257a7544716d8795b1a4cc04c8664"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1741278781.815277, "relation_name": null, "raw_code": "{%-  set udfs = fromyaml(config_core_live()) -%}\n{% do udfs.extend(fromyaml(config_core__live())) %}\n{% do udfs.extend(fromyaml(config_core__utils())) %}\n{% do udfs.extend(fromyaml(config_core_utils())) %}\n\n{%- for udf in udfs -%}\n{{- create_or_drop_function_from_config(udf, drop_=True) -}}\n{{- create_or_drop_function_from_config(udf, drop_=False) -}}\n{% endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.config_core_live", "macro.livequery_base.config_core__live", "macro.livequery_base.config_core__utils", "macro.livequery_base.config_core_utils", "macro.livequery_base.create_or_drop_function_from_config"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "seed.livequery_base.live__verified_api_endpoints": {"database": "MAYA", "schema": "live", "name": "live__verified_api_endpoints", "resource_type": "seed", "package_name": "livequery_base", "path": "live__verified_api_endpoints.csv", "original_file_path": "data/live__verified_api_endpoints.csv", "unique_id": "seed.livequery_base.live__verified_api_endpoints", "fqn": ["livequery_base", "live__verified_api_endpoints"], "alias": "verified_api_endpoints", "checksum": {"name": "sha256", "checksum": "f801025b0fb9a370678db2b5b63ead57dc1371caffa0688266d9be12605a8afa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": "{{ target.database not in ['livequery', 'livequery_dev'] }}"}, "created_at": 1741278781.901878, "relation_name": "MAYA.live.verified_api_endpoints", "raw_code": "", "root_path": "/Users/ericlaurello/git/maya-models/dbt_packages/livequery_base", "depends_on": {"macros": []}}, "operation.livequery_base.livequery_base-on-run-start-0": {"database": "MAYA", "schema": "livequery_base-on-run-start-0", "name": "livequery_base-on-run-start-0", "resource_type": "operation", "package_name": "livequery_base", "path": "hooks/livequery_base-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.livequery_base.livequery_base-on-run-start-0", "fqn": ["livequery_base", "hooks", "livequery_base-on-run-start-0"], "alias": "", "checksum": {"name": "sha256", "checksum": "2996b929cefc54b878628db9ebdada0e002737cd97dee849023f2751445b8a93"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1741278781.913493, "relation_name": null, "raw_code": "{{ create_sps() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.create_sps"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "operation.livequery_base.livequery_base-on-run-end-0": {"database": "MAYA", "schema": "livequery_base-on-run-end-0", "name": "livequery_base-on-run-end-0", "resource_type": "operation", "package_name": "livequery_base", "path": "hooks/livequery_base-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.livequery_base.livequery_base-on-run-end-0", "fqn": ["livequery_base", "hooks", "livequery_base-on-run-end-0"], "alias": "", "checksum": {"name": "sha256", "checksum": "2996b929cefc54b878628db9ebdada0e002737cd97dee849023f2751445b8a93"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1741278781.9170759, "relation_name": null, "raw_code": "{{ apply_meta_as_tags(results) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.apply_meta_as_tags"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "operation.dbt_constraints.dbt_constraints-on-run-end-0": {"database": "MAYA", "schema": "dbt_constraints-on-run-end-0", "name": "dbt_constraints-on-run-end-0", "resource_type": "operation", "package_name": "dbt_constraints", "path": "hooks/dbt_constraints-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.dbt_constraints.dbt_constraints-on-run-end-0", "fqn": ["dbt_constraints", "hooks", "dbt_constraints-on-run-end-0"], "alias": "dbt_constraints-on-run-end-0", "checksum": {"name": "sha256", "checksum": "7f5fba13a435f75dfd9bf1b5c15d80141a4e0d60ea500ffee371ca679ea5b244"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1741278781.9371781, "relation_name": null, "raw_code": "{{ dbt_constraints.create_constraints() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.create_constraints"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "test.maya_models.not_null_silver__transfer_events_BLOCK_TIMESTAMP.1ff60425a6": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__transfer_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__transfer_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transfer_events.yml", "unique_id": "test.maya_models.not_null_silver__transfer_events_BLOCK_TIMESTAMP.1ff60425a6", "fqn": ["maya_models", "silver", "not_null_silver__transfer_events_BLOCK_TIMESTAMP"], "alias": "transfer_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.20611, "relation_name": "MAYA.not_null_silver.transfer_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfer_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfer_events", "attached_node": "model.maya_models.silver__transfer_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfer_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__transfer_events_ASSET.4d061223da": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__transfer_events_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__transfer_events_ASSET.sql", "original_file_path": "models/silver/silver__transfer_events.yml", "unique_id": "test.maya_models.not_null_silver__transfer_events_ASSET.4d061223da", "fqn": ["maya_models", "silver", "not_null_silver__transfer_events_ASSET"], "alias": "transfer_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.207144, "relation_name": "MAYA.not_null_silver.transfer_events_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfer_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET", "file_key_name": "models.silver__transfer_events", "attached_node": "model.maya_models.silver__transfer_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__transfer_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__transfer_events_AMOUNT_E8.4a22457c1d": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__transfer_events_AMOUNT_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__transfer_events_AMOUNT_E8.sql", "original_file_path": "models/silver/silver__transfer_events.yml", "unique_id": "test.maya_models.not_null_silver__transfer_events_AMOUNT_E8.4a22457c1d", "fqn": ["maya_models", "silver", "not_null_silver__transfer_events_AMOUNT_E8"], "alias": "transfer_events_AMOUNT_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.207935, "relation_name": "MAYA.not_null_silver.transfer_events_AMOUNT_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfer_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_E8", "file_key_name": "models.silver__transfer_events", "attached_node": "model.maya_models.silver__transfer_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_E8", "model": "{{ get_where_subquery(ref('silver__transfer_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__transfer_events_FROM_ADDRESS.199be5d0bb": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__transfer_events_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__transfer_events_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__transfer_events.yml", "unique_id": "test.maya_models.not_null_silver__transfer_events_FROM_ADDRESS.199be5d0bb", "fqn": ["maya_models", "silver", "not_null_silver__transfer_events_FROM_ADDRESS"], "alias": "transfer_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.208683, "relation_name": "MAYA.not_null_silver.transfer_events_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfer_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transfer_events", "attached_node": "model.maya_models.silver__transfer_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfer_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__transfer_events_TO_ADDRESS.3db72ea291": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__transfer_events_TO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__transfer_events_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__transfer_events.yml", "unique_id": "test.maya_models.not_null_silver__transfer_events_TO_ADDRESS.3db72ea291", "fqn": ["maya_models", "silver", "not_null_silver__transfer_events_TO_ADDRESS"], "alias": "transfer_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.209428, "relation_name": "MAYA.not_null_silver.transfer_events_TO_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfer_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ADDRESS", "file_key_name": "models.silver__transfer_events", "attached_node": "model.maya_models.silver__transfer_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfer_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__validator_request_leave_events_EVENT_ID.b55c332547": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__validator_request_leave_events_EVENT_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__validator_request_leave_events_EVENT_ID.sql", "original_file_path": "models/silver/silver__validator_request_leave_events.yml", "unique_id": "test.maya_models.not_null_silver__validator_request_leave_events_EVENT_ID.b55c332547", "fqn": ["maya_models", "silver", "not_null_silver__validator_request_leave_events_EVENT_ID"], "alias": "validator_request_leave_events_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.211401, "relation_name": "MAYA.not_null_silver.validator_request_leave_events_EVENT_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__validator_request_leave_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EVENT_ID", "file_key_name": "models.silver__validator_request_leave_events", "attached_node": "model.maya_models.silver__validator_request_leave_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_ID", "model": "{{ get_where_subquery(ref('silver__validator_request_leave_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__validator_request_leave_events_TX_ID.e98479bb26": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__validator_request_leave_events_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__validator_request_leave_events_TX_ID.sql", "original_file_path": "models/silver/silver__validator_request_leave_events.yml", "unique_id": "test.maya_models.not_null_silver__validator_request_leave_events_TX_ID.e98479bb26", "fqn": ["maya_models", "silver", "not_null_silver__validator_request_leave_events_TX_ID"], "alias": "validator_request_leave_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.2121658, "relation_name": "MAYA.not_null_silver.validator_request_leave_events_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__validator_request_leave_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__validator_request_leave_events", "attached_node": "model.maya_models.silver__validator_request_leave_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__validator_request_leave_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__validator_request_leave_events_FROM_ADDRESS.209d28d48f": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__validator_request_leave_events_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__validator_request_leave_events_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__validator_request_leave_events.yml", "unique_id": "test.maya_models.not_null_silver__validator_request_leave_events_FROM_ADDRESS.209d28d48f", "fqn": ["maya_models", "silver", "not_null_silver__validator_request_leave_events_FROM_ADDRESS"], "alias": "validator_request_leave_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.212893, "relation_name": "MAYA.not_null_silver.validator_request_leave_events_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__validator_request_leave_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__validator_request_leave_events", "attached_node": "model.maya_models.silver__validator_request_leave_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__validator_request_leave_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__validator_request_leave_events_NODE_ADDRESS.c91207bb4e": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__validator_request_leave_events_NODE_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__validator_request_leave_events_NODE_ADDRESS.sql", "original_file_path": "models/silver/silver__validator_request_leave_events.yml", "unique_id": "test.maya_models.not_null_silver__validator_request_leave_events_NODE_ADDRESS.c91207bb4e", "fqn": ["maya_models", "silver", "not_null_silver__validator_request_leave_events_NODE_ADDRESS"], "alias": "validator_request_leave_events_NODE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.213619, "relation_name": "MAYA.not_null_silver.validator_request_leave_events_NODE_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__validator_request_leave_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "NODE_ADDRESS", "file_key_name": "models.silver__validator_request_leave_events", "attached_node": "model.maya_models.silver__validator_request_leave_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NODE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__validator_request_leave_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP.290714d793": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__validator_request_leave_events.yml", "unique_id": "test.maya_models.not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP.290714d793", "fqn": ["maya_models", "silver", "not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP"], "alias": "validator_request_leave_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.214854, "relation_name": "MAYA.not_null_silver.validator_request_leave_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__validator_request_leave_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__validator_request_leave_events", "attached_node": "model.maya_models.silver__validator_request_leave_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__validator_request_leave_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__validator_request_leave_events_EVENT_ID__TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__NODE_ADDRESS.90d08ddaee": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__validator_request_leave_events_EVENT_ID__TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__NODE_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_52edc9d46a9389dc8e96e64b68bd014f.sql", "original_file_path": "models/silver/silver__validator_request_leave_events.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__validator_request_leave_events_EVENT_ID__TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__NODE_ADDRESS.90d08ddaee", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__validator_request_leave_events_EVENT_ID__TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__NODE_ADDRESS"], "alias": "validator_request_leave_events_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_52edc9d46a9389dc8e96e64b68bd014f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_52edc9d46a9389dc8e96e64b68bd014f"}, "created_at": 1741278782.21569, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.validator_request_leave_events_EVENT_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_52edc9d46a9389dc8e96e64b68bd014f\") }}", "language": "sql", "refs": [{"name": "silver__validator_request_leave_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__validator_request_leave_events", "attached_node": "model.maya_models.silver__validator_request_leave_events", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["EVENT_ID", "TX_ID", "BLOCK_TIMESTAMP", "FROM_ADDRESS", "NODE_ADDRESS"], "model": "{{ get_where_subquery(ref('silver__validator_request_leave_events')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__refund_events_TX_ID.d818e4a9c0": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__refund_events_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__refund_events_TX_ID.sql", "original_file_path": "models/silver/silver__refund_events.yml", "unique_id": "test.maya_models.not_null_silver__refund_events_TX_ID.d818e4a9c0", "fqn": ["maya_models", "silver", "not_null_silver__refund_events_TX_ID"], "alias": "refund_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.228684, "relation_name": "MAYA.not_null_silver.refund_events_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__refund_events", "attached_node": "model.maya_models.silver__refund_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__refund_events_BLOCKCHAIN.377143648d": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__refund_events_BLOCKCHAIN", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__refund_events_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__refund_events.yml", "unique_id": "test.maya_models.not_null_silver__refund_events_BLOCKCHAIN.377143648d", "fqn": ["maya_models", "silver", "not_null_silver__refund_events_BLOCKCHAIN"], "alias": "refund_events_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.2296152, "relation_name": "MAYA.not_null_silver.refund_events_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__refund_events", "attached_node": "model.maya_models.silver__refund_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__refund_events_FROM_ADDRESS.95dd9f9c95": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__refund_events_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__refund_events_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__refund_events.yml", "unique_id": "test.maya_models.not_null_silver__refund_events_FROM_ADDRESS.95dd9f9c95", "fqn": ["maya_models", "silver", "not_null_silver__refund_events_FROM_ADDRESS"], "alias": "refund_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.230371, "relation_name": "MAYA.not_null_silver.refund_events_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__refund_events", "attached_node": "model.maya_models.silver__refund_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__refund_events_TO_ADDRESS.2fda85c5dd": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__refund_events_TO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__refund_events_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__refund_events.yml", "unique_id": "test.maya_models.not_null_silver__refund_events_TO_ADDRESS.2fda85c5dd", "fqn": ["maya_models", "silver", "not_null_silver__refund_events_TO_ADDRESS"], "alias": "refund_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.231215, "relation_name": "MAYA.not_null_silver.refund_events_TO_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ADDRESS", "file_key_name": "models.silver__refund_events", "attached_node": "model.maya_models.silver__refund_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__refund_events_ASSET.8d91917f0d": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__refund_events_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__refund_events_ASSET.sql", "original_file_path": "models/silver/silver__refund_events.yml", "unique_id": "test.maya_models.not_null_silver__refund_events_ASSET.8d91917f0d", "fqn": ["maya_models", "silver", "not_null_silver__refund_events_ASSET"], "alias": "refund_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.232033, "relation_name": "MAYA.not_null_silver.refund_events_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET", "file_key_name": "models.silver__refund_events", "attached_node": "model.maya_models.silver__refund_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__refund_events_ASSET_E8.2e099ee072": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__refund_events_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__refund_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__refund_events.yml", "unique_id": "test.maya_models.not_null_silver__refund_events_ASSET_E8.2e099ee072", "fqn": ["maya_models", "silver", "not_null_silver__refund_events_ASSET_E8"], "alias": "refund_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.232841, "relation_name": "MAYA.not_null_silver.refund_events_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.silver__refund_events", "attached_node": "model.maya_models.silver__refund_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__refund_events_ASSET_2ND_E8.f8450d1bd5": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__refund_events_ASSET_2ND_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__refund_events_ASSET_2ND_E8.sql", "original_file_path": "models/silver/silver__refund_events.yml", "unique_id": "test.maya_models.not_null_silver__refund_events_ASSET_2ND_E8.f8450d1bd5", "fqn": ["maya_models", "silver", "not_null_silver__refund_events_ASSET_2ND_E8"], "alias": "refund_events_ASSET_2ND_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.2336361, "relation_name": "MAYA.not_null_silver.refund_events_ASSET_2ND_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_2ND_E8", "file_key_name": "models.silver__refund_events", "attached_node": "model.maya_models.silver__refund_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_2ND_E8", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__refund_events_CODE.fee514c705": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__refund_events_CODE", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__refund_events_CODE.sql", "original_file_path": "models/silver/silver__refund_events.yml", "unique_id": "test.maya_models.not_null_silver__refund_events_CODE.fee514c705", "fqn": ["maya_models", "silver", "not_null_silver__refund_events_CODE"], "alias": "refund_events_CODE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.234464, "relation_name": "MAYA.not_null_silver.refund_events_CODE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CODE", "file_key_name": "models.silver__refund_events", "attached_node": "model.maya_models.silver__refund_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CODE", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__refund_events_REASON.080b9527d1": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__refund_events_REASON", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__refund_events_REASON.sql", "original_file_path": "models/silver/silver__refund_events.yml", "unique_id": "test.maya_models.not_null_silver__refund_events_REASON.080b9527d1", "fqn": ["maya_models", "silver", "not_null_silver__refund_events_REASON"], "alias": "refund_events_REASON", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.2352152, "relation_name": "MAYA.not_null_silver.refund_events_REASON", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "REASON", "file_key_name": "models.silver__refund_events", "attached_node": "model.maya_models.silver__refund_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REASON", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__refund_events_BLOCK_TIMESTAMP.60c1f10234": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__refund_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__refund_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__refund_events.yml", "unique_id": "test.maya_models.not_null_silver__refund_events_BLOCK_TIMESTAMP.60c1f10234", "fqn": ["maya_models", "silver", "not_null_silver__refund_events_BLOCK_TIMESTAMP"], "alias": "refund_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.235948, "relation_name": "MAYA.not_null_silver.refund_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__refund_events", "attached_node": "model.maya_models.silver__refund_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__refund_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__ASSET_2ND__MEMO__CODE__REASON__BLOCK_TIMESTAMP__EVENT_ID.bfb7525b50": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__refund_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__ASSET_2ND__MEMO__CODE__REASON__BLOCK_TIMESTAMP__EVENT_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_6b24c44f7cd0585f45933ce94e36b73b.sql", "original_file_path": "models/silver/silver__refund_events.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__refund_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__ASSET_2ND__MEMO__CODE__REASON__BLOCK_TIMESTAMP__EVENT_ID.bfb7525b50", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__refund_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__ASSET_2ND__MEMO__CODE__REASON__BLOCK_TIMESTAMP__EVENT_ID"], "alias": "refund_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6b24c44f7cd0585f45933ce94e36b73b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_6b24c44f7cd0585f45933ce94e36b73b"}, "created_at": 1741278782.236693, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.refund_events_TX_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6b24c44f7cd0585f45933ce94e36b73b\") }}", "language": "sql", "refs": [{"name": "silver__refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__refund_events", "attached_node": "model.maya_models.silver__refund_events", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "BLOCKCHAIN", "FROM_ADDRESS", "TO_ADDRESS", "ASSET", "ASSET_2ND", "MEMO", "CODE", "REASON", "BLOCK_TIMESTAMP", "EVENT_ID"], "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__liquidity_actions_BLOCK_TIMESTAMP.ff2d2892a0": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__liquidity_actions_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__liquidity_actions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "unique_id": "test.maya_models.not_null_silver__liquidity_actions_BLOCK_TIMESTAMP.ff2d2892a0", "fqn": ["maya_models", "silver", "not_null_silver__liquidity_actions_BLOCK_TIMESTAMP"], "alias": "liquidity_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.240615, "relation_name": "MAYA.not_null_silver.liquidity_actions_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__liquidity_actions", "attached_node": "model.maya_models.silver__liquidity_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__liquidity_actions_BLOCK_TIMESTAMP__day__1.20722a4e9a": {"database": "MAYA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__liquidity_actions_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_row_va_7a5c0b70df6d9bae5b9860796ac1b35e.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "unique_id": "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__liquidity_actions_BLOCK_TIMESTAMP__day__1.20722a4e9a", "fqn": ["maya_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__liquidity_actions_BLOCK_TIMESTAMP__day__1"], "alias": "liquidity_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_7a5c0b70df6d9bae5b9860796ac1b35e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_7a5c0b70df6d9bae5b9860796ac1b35e"}, "created_at": 1741278782.241406, "relation_name": "MAYA.dbt_expectations_expect_row_values_to_have_recent_data_silver.liquidity_actions_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_7a5c0b70df6d9bae5b9860796ac1b35e\") }}", "language": "sql", "refs": [{"name": "silver__liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__liquidity_actions", "attached_node": "model.maya_models.silver__liquidity_actions", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.not_null_silver__liquidity_actions_BLOCK_ID.39dcd6abaa": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__liquidity_actions_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__liquidity_actions_BLOCK_ID.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "unique_id": "test.maya_models.not_null_silver__liquidity_actions_BLOCK_ID.39dcd6abaa", "fqn": ["maya_models", "silver", "not_null_silver__liquidity_actions_BLOCK_ID"], "alias": "liquidity_actions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.2527869, "relation_name": "MAYA.not_null_silver.liquidity_actions_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.silver__liquidity_actions", "attached_node": "model.maya_models.silver__liquidity_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__liquidity_actions_LP_ACTION.c249d79d62": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__liquidity_actions_LP_ACTION", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__liquidity_actions_LP_ACTION.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "unique_id": "test.maya_models.not_null_silver__liquidity_actions_LP_ACTION.c249d79d62", "fqn": ["maya_models", "silver", "not_null_silver__liquidity_actions_LP_ACTION"], "alias": "liquidity_actions_LP_ACTION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.2535858, "relation_name": "MAYA.not_null_silver.liquidity_actions_LP_ACTION", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LP_ACTION", "file_key_name": "models.silver__liquidity_actions", "attached_node": "model.maya_models.silver__liquidity_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LP_ACTION", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__liquidity_actions_POOL_NAME.3ad71b8145": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__liquidity_actions_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__liquidity_actions_POOL_NAME.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "unique_id": "test.maya_models.not_null_silver__liquidity_actions_POOL_NAME.3ad71b8145", "fqn": ["maya_models", "silver", "not_null_silver__liquidity_actions_POOL_NAME"], "alias": "liquidity_actions_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.2543502, "relation_name": "MAYA.not_null_silver.liquidity_actions_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.silver__liquidity_actions", "attached_node": "model.maya_models.silver__liquidity_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__liquidity_actions_cacao_AMOUNT.fad92cc503": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__liquidity_actions_cacao_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__liquidity_actions_cacao_AMOUNT.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "unique_id": "test.maya_models.not_null_silver__liquidity_actions_cacao_AMOUNT.fad92cc503", "fqn": ["maya_models", "silver", "not_null_silver__liquidity_actions_cacao_AMOUNT"], "alias": "liquidity_actions_cacao_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.255111, "relation_name": "MAYA.not_null_silver.liquidity_actions_cacao_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_AMOUNT", "file_key_name": "models.silver__liquidity_actions", "attached_node": "model.maya_models.silver__liquidity_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_AMOUNT", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__liquidity_actions_cacao_AMOUNT_USD.4f2702f843": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__liquidity_actions_cacao_AMOUNT_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__liquidity_actions_cacao_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "unique_id": "test.maya_models.not_null_silver__liquidity_actions_cacao_AMOUNT_USD.4f2702f843", "fqn": ["maya_models", "silver", "not_null_silver__liquidity_actions_cacao_AMOUNT_USD"], "alias": "liquidity_actions_cacao_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "BLOCK_TIMESTAMP <= SYSDATE() - interval '2 day' AND BLOCK_TIMESTAMP >= '2021-04-13'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP <= SYSDATE() - interval '2 day' AND BLOCK_TIMESTAMP >= '2021-04-13'"}, "created_at": 1741278782.25606, "relation_name": "MAYA.not_null_silver.liquidity_actions_cacao_AMOUNT_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP <= SYSDATE() - interval '2 day' AND BLOCK_TIMESTAMP >= '2021-04-13'\") }}", "language": "sql", "refs": [{"name": "silver__liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_AMOUNT_USD", "file_key_name": "models.silver__liquidity_actions", "attached_node": "model.maya_models.silver__liquidity_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__liquidity_actions_ASSET_AMOUNT.9620d465a9": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__liquidity_actions_ASSET_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__liquidity_actions_ASSET_AMOUNT.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "unique_id": "test.maya_models.not_null_silver__liquidity_actions_ASSET_AMOUNT.9620d465a9", "fqn": ["maya_models", "silver", "not_null_silver__liquidity_actions_ASSET_AMOUNT"], "alias": "liquidity_actions_ASSET_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.256889, "relation_name": "MAYA.not_null_silver.liquidity_actions_ASSET_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_AMOUNT", "file_key_name": "models.silver__liquidity_actions", "attached_node": "model.maya_models.silver__liquidity_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_AMOUNT", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__liquidity_actions_STAKE_UNITS.689ec0ada5": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__liquidity_actions_STAKE_UNITS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__liquidity_actions_STAKE_UNITS.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "unique_id": "test.maya_models.not_null_silver__liquidity_actions_STAKE_UNITS.689ec0ada5", "fqn": ["maya_models", "silver", "not_null_silver__liquidity_actions_STAKE_UNITS"], "alias": "liquidity_actions_STAKE_UNITS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.257629, "relation_name": "MAYA.not_null_silver.liquidity_actions_STAKE_UNITS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STAKE_UNITS", "file_key_name": "models.silver__liquidity_actions", "attached_node": "model.maya_models.silver__liquidity_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STAKE_UNITS", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__total_value_locked_DAY.5d7ba86e85": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__total_value_locked_DAY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__total_value_locked_DAY.sql", "original_file_path": "models/silver/silver__total_value_locked.yml", "unique_id": "test.maya_models.not_null_silver__total_value_locked_DAY.5d7ba86e85", "fqn": ["maya_models", "silver", "not_null_silver__total_value_locked_DAY"], "alias": "total_value_locked_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.259448, "relation_name": "MAYA.not_null_silver.total_value_locked_DAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__total_value_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__total_value_locked"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.silver__total_value_locked", "attached_node": "model.maya_models.silver__total_value_locked", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__total_value_locked')) }}"}, "namespace": null}}, "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_value_locked_DAY__day__2.40cc6ac950": {"database": "MAYA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__total_value_locked_DAY__day__2", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_row_va_9369b6d277ea2d18a386aadec3ae011e.sql", "original_file_path": "models/silver/silver__total_value_locked.yml", "unique_id": "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_value_locked_DAY__day__2.40cc6ac950", "fqn": ["maya_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__total_value_locked_DAY__day__2"], "alias": "total_value_locked_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_9369b6d277ea2d18a386aadec3ae011e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_9369b6d277ea2d18a386aadec3ae011e"}, "created_at": 1741278782.260236, "relation_name": "MAYA.dbt_expectations_expect_row_values_to_have_recent_data_silver.total_value_locked_DAY", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_9369b6d277ea2d18a386aadec3ae011e\") }}", "language": "sql", "refs": [{"name": "silver__total_value_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__total_value_locked"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.silver__total_value_locked", "attached_node": "model.maya_models.silver__total_value_locked", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__total_value_locked')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.not_null_silver__total_value_locked_TOTAL_VALUE_POOLED.ca339c528a": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__total_value_locked_TOTAL_VALUE_POOLED", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__total_value_locked_TOTAL_VALUE_POOLED.sql", "original_file_path": "models/silver/silver__total_value_locked.yml", "unique_id": "test.maya_models.not_null_silver__total_value_locked_TOTAL_VALUE_POOLED.ca339c528a", "fqn": ["maya_models", "silver", "not_null_silver__total_value_locked_TOTAL_VALUE_POOLED"], "alias": "total_value_locked_TOTAL_VALUE_POOLED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.263486, "relation_name": "MAYA.not_null_silver.total_value_locked_TOTAL_VALUE_POOLED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__total_value_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__total_value_locked"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_VALUE_POOLED", "file_key_name": "models.silver__total_value_locked", "attached_node": "model.maya_models.silver__total_value_locked", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_POOLED", "model": "{{ get_where_subquery(ref('silver__total_value_locked')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__total_value_locked_TOTAL_VALUE_BONDED.6df7fe839f": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__total_value_locked_TOTAL_VALUE_BONDED", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__total_value_locked_TOTAL_VALUE_BONDED.sql", "original_file_path": "models/silver/silver__total_value_locked.yml", "unique_id": "test.maya_models.not_null_silver__total_value_locked_TOTAL_VALUE_BONDED.6df7fe839f", "fqn": ["maya_models", "silver", "not_null_silver__total_value_locked_TOTAL_VALUE_BONDED"], "alias": "total_value_locked_TOTAL_VALUE_BONDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.26425, "relation_name": "MAYA.not_null_silver.total_value_locked_TOTAL_VALUE_BONDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__total_value_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__total_value_locked"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_VALUE_BONDED", "file_key_name": "models.silver__total_value_locked", "attached_node": "model.maya_models.silver__total_value_locked", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_BONDED", "model": "{{ get_where_subquery(ref('silver__total_value_locked')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED.32714bbc40": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED.sql", "original_file_path": "models/silver/silver__total_value_locked.yml", "unique_id": "test.maya_models.not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED.32714bbc40", "fqn": ["maya_models", "silver", "not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED"], "alias": "total_value_locked_TOTAL_VALUE_LOCKED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.2650108, "relation_name": "MAYA.not_null_silver.total_value_locked_TOTAL_VALUE_LOCKED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__total_value_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__total_value_locked"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_VALUE_LOCKED", "file_key_name": "models.silver__total_value_locked", "attached_node": "model.maya_models.silver__total_value_locked", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_LOCKED", "model": "{{ get_where_subquery(ref('silver__total_value_locked')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__total_value_locked_DAY.156a4d804a": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__total_value_locked_DAY", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_d0e69123d2660f700edc7ed218670be4.sql", "original_file_path": "models/silver/silver__total_value_locked.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__total_value_locked_DAY.156a4d804a", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__total_value_locked_DAY"], "alias": "total_value_locked_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d0e69123d2660f700edc7ed218670be4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_d0e69123d2660f700edc7ed218670be4"}, "created_at": 1741278782.2657568, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.total_value_locked_DAY", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d0e69123d2660f700edc7ed218670be4\") }}", "language": "sql", "refs": [{"name": "silver__total_value_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__total_value_locked"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__total_value_locked", "attached_node": "model.maya_models.silver__total_value_locked", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["DAY"], "model": "{{ get_where_subquery(ref('silver__total_value_locked')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__update_node_account_status_events_NODE_ADDRESS.2462678a83": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__update_node_account_status_events_NODE_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__update_node_account_status_events_NODE_ADDRESS.sql", "original_file_path": "models/silver/silver__update_node_account_status_events.yml", "unique_id": "test.maya_models.not_null_silver__update_node_account_status_events_NODE_ADDRESS.2462678a83", "fqn": ["maya_models", "silver", "not_null_silver__update_node_account_status_events_NODE_ADDRESS"], "alias": "update_node_account_status_events_NODE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.268568, "relation_name": "MAYA.not_null_silver.update_node_account_status_events_NODE_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__update_node_account_status_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__update_node_account_status_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "NODE_ADDRESS", "file_key_name": "models.silver__update_node_account_status_events", "attached_node": "model.maya_models.silver__update_node_account_status_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NODE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__update_node_account_status_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__update_node_account_status_events_CURRENT_STATUS.e8417a26f7": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__update_node_account_status_events_CURRENT_STATUS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__update_node_a_74e2c6d2f51a2c38a24d83c86198c34d.sql", "original_file_path": "models/silver/silver__update_node_account_status_events.yml", "unique_id": "test.maya_models.not_null_silver__update_node_account_status_events_CURRENT_STATUS.e8417a26f7", "fqn": ["maya_models", "silver", "not_null_silver__update_node_account_status_events_CURRENT_STATUS"], "alias": "update_node_account_status_events_CURRENT_STATUS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__update_node_a_74e2c6d2f51a2c38a24d83c86198c34d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "not_null_silver__update_node_a_74e2c6d2f51a2c38a24d83c86198c34d"}, "created_at": 1741278782.269355, "relation_name": "MAYA.not_null_silver.update_node_account_status_events_CURRENT_STATUS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__update_node_a_74e2c6d2f51a2c38a24d83c86198c34d\") }}", "language": "sql", "refs": [{"name": "silver__update_node_account_status_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__update_node_account_status_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CURRENT_STATUS", "file_key_name": "models.silver__update_node_account_status_events", "attached_node": "model.maya_models.silver__update_node_account_status_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CURRENT_STATUS", "model": "{{ get_where_subquery(ref('silver__update_node_account_status_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__update_node_account_status_events_FORMER_STATUS.a863f18a99": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__update_node_account_status_events_FORMER_STATUS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__update_node_a_bdcbdf6bfd34cc7212466dd2038c8530.sql", "original_file_path": "models/silver/silver__update_node_account_status_events.yml", "unique_id": "test.maya_models.not_null_silver__update_node_account_status_events_FORMER_STATUS.a863f18a99", "fqn": ["maya_models", "silver", "not_null_silver__update_node_account_status_events_FORMER_STATUS"], "alias": "update_node_account_status_events_FORMER_STATUS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__update_node_a_bdcbdf6bfd34cc7212466dd2038c8530", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "not_null_silver__update_node_a_bdcbdf6bfd34cc7212466dd2038c8530"}, "created_at": 1741278782.270106, "relation_name": "MAYA.not_null_silver.update_node_account_status_events_FORMER_STATUS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__update_node_a_bdcbdf6bfd34cc7212466dd2038c8530\") }}", "language": "sql", "refs": [{"name": "silver__update_node_account_status_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__update_node_account_status_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FORMER_STATUS", "file_key_name": "models.silver__update_node_account_status_events", "attached_node": "model.maya_models.silver__update_node_account_status_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FORMER_STATUS", "model": "{{ get_where_subquery(ref('silver__update_node_account_status_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__update_node_account_status_events_BLOCK_TIMESTAMP.f7cd76f13b": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__update_node_account_status_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__update_node_a_49711e2a488329120c3c93ab7d9cc5e4.sql", "original_file_path": "models/silver/silver__update_node_account_status_events.yml", "unique_id": "test.maya_models.not_null_silver__update_node_account_status_events_BLOCK_TIMESTAMP.f7cd76f13b", "fqn": ["maya_models", "silver", "not_null_silver__update_node_account_status_events_BLOCK_TIMESTAMP"], "alias": "update_node_account_status_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__update_node_a_49711e2a488329120c3c93ab7d9cc5e4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "not_null_silver__update_node_a_49711e2a488329120c3c93ab7d9cc5e4"}, "created_at": 1741278782.270848, "relation_name": "MAYA.not_null_silver.update_node_account_status_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__update_node_a_49711e2a488329120c3c93ab7d9cc5e4\") }}", "language": "sql", "refs": [{"name": "silver__update_node_account_status_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__update_node_account_status_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__update_node_account_status_events", "attached_node": "model.maya_models.silver__update_node_account_status_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__update_node_account_status_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__update_node_account_status_events_NODE_ADDRESS__CURRENT_STATUS__FORMER_STATUS__BLOCK_TIMESTAMP__EVENT_ID.a1b6af9de0": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__update_node_account_status_events_NODE_ADDRESS__CURRENT_STATUS__FORMER_STATUS__BLOCK_TIMESTAMP__EVENT_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_67fa483b88dd0be33ab762549a68005f.sql", "original_file_path": "models/silver/silver__update_node_account_status_events.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__update_node_account_status_events_NODE_ADDRESS__CURRENT_STATUS__FORMER_STATUS__BLOCK_TIMESTAMP__EVENT_ID.a1b6af9de0", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__update_node_account_status_events_NODE_ADDRESS__CURRENT_STATUS__FORMER_STATUS__BLOCK_TIMESTAMP__EVENT_ID"], "alias": "update_node_account_status_events_NODE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_67fa483b88dd0be33ab762549a68005f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_67fa483b88dd0be33ab762549a68005f"}, "created_at": 1741278782.2716758, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.update_node_account_status_events_NODE_ADDRESS", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_67fa483b88dd0be33ab762549a68005f\") }}", "language": "sql", "refs": [{"name": "silver__update_node_account_status_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__update_node_account_status_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__update_node_account_status_events", "attached_node": "model.maya_models.silver__update_node_account_status_events", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["NODE_ADDRESS", "CURRENT_STATUS", "FORMER_STATUS", "BLOCK_TIMESTAMP", "EVENT_ID"], "model": "{{ get_where_subquery(ref('silver__update_node_account_status_events')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__bond_events_BLOCK_TIMESTAMP.b9485030e0": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__bond_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__bond_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__bond_events.yml", "unique_id": "test.maya_models.not_null_silver__bond_events_BLOCK_TIMESTAMP.b9485030e0", "fqn": ["maya_models", "silver", "not_null_silver__bond_events_BLOCK_TIMESTAMP"], "alias": "bond_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.2744918, "relation_name": "MAYA.not_null_silver.bond_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__bond_events", "attached_node": "model.maya_models.silver__bond_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__bond_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__bond_events_TX_ID.d18467b918": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__bond_events_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__bond_events_TX_ID.sql", "original_file_path": "models/silver/silver__bond_events.yml", "unique_id": "test.maya_models.not_null_silver__bond_events_TX_ID.d18467b918", "fqn": ["maya_models", "silver", "not_null_silver__bond_events_TX_ID"], "alias": "bond_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.275279, "relation_name": "MAYA.not_null_silver.bond_events_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__bond_events", "attached_node": "model.maya_models.silver__bond_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__bond_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__bond_events_ASSET_E8.2bc5c2e174": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__bond_events_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__bond_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__bond_events.yml", "unique_id": "test.maya_models.not_null_silver__bond_events_ASSET_E8.2bc5c2e174", "fqn": ["maya_models", "silver", "not_null_silver__bond_events_ASSET_E8"], "alias": "bond_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.276041, "relation_name": "MAYA.not_null_silver.bond_events_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.silver__bond_events", "attached_node": "model.maya_models.silver__bond_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__bond_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__bond_events_BOND_TYPE.598bb69e8e": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__bond_events_BOND_TYPE", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__bond_events_BOND_TYPE.sql", "original_file_path": "models/silver/silver__bond_events.yml", "unique_id": "test.maya_models.not_null_silver__bond_events_BOND_TYPE.598bb69e8e", "fqn": ["maya_models", "silver", "not_null_silver__bond_events_BOND_TYPE"], "alias": "bond_events_BOND_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.276783, "relation_name": "MAYA.not_null_silver.bond_events_BOND_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BOND_TYPE", "file_key_name": "models.silver__bond_events", "attached_node": "model.maya_models.silver__bond_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BOND_TYPE", "model": "{{ get_where_subquery(ref('silver__bond_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__bond_events_E8.c19384976b": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__bond_events_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__bond_events_E8.sql", "original_file_path": "models/silver/silver__bond_events.yml", "unique_id": "test.maya_models.not_null_silver__bond_events_E8.c19384976b", "fqn": ["maya_models", "silver", "not_null_silver__bond_events_E8"], "alias": "bond_events_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.277965, "relation_name": "MAYA.not_null_silver.bond_events_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "E8", "file_key_name": "models.silver__bond_events", "attached_node": "model.maya_models.silver__bond_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "E8", "model": "{{ get_where_subquery(ref('silver__bond_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_fees_DAY.ecfb240ac6": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_fees_DAY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_fees_DAY.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_fees_DAY.ecfb240ac6", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_fees_DAY"], "alias": "pool_block_fees_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.280326, "relation_name": "MAYA.not_null_silver.pool_block_fees_DAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.silver__pool_block_fees", "attached_node": "model.maya_models.silver__pool_block_fees", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": null}}, "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_fees_DAY__day__2.ece5c1920a": {"database": "MAYA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_fees_DAY__day__2", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_row_va_d0c6b7a12ddd87e515265aac5c26a674.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "unique_id": "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_fees_DAY__day__2.ece5c1920a", "fqn": ["maya_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_fees_DAY__day__2"], "alias": "pool_block_fees_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_d0c6b7a12ddd87e515265aac5c26a674", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_d0c6b7a12ddd87e515265aac5c26a674"}, "created_at": 1741278782.281137, "relation_name": "MAYA.dbt_expectations_expect_row_values_to_have_recent_data_silver.pool_block_fees_DAY", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_d0c6b7a12ddd87e515265aac5c26a674\") }}", "language": "sql", "refs": [{"name": "silver__pool_block_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__pool_block_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.silver__pool_block_fees", "attached_node": "model.maya_models.silver__pool_block_fees", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.not_null_silver__pool_block_fees_POOL_NAME.f126e2294d": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_fees_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_fees_POOL_NAME.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_fees_POOL_NAME.f126e2294d", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_fees_POOL_NAME"], "alias": "pool_block_fees_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.2840471, "relation_name": "MAYA.not_null_silver.pool_block_fees_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.silver__pool_block_fees", "attached_node": "model.maya_models.silver__pool_block_fees", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_fees_REWARDS.5b1d8b2e19": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_fees_REWARDS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_fees_REWARDS.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_fees_REWARDS.5b1d8b2e19", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_fees_REWARDS"], "alias": "pool_block_fees_REWARDS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.2848058, "relation_name": "MAYA.not_null_silver.pool_block_fees_REWARDS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "REWARDS", "file_key_name": "models.silver__pool_block_fees", "attached_node": "model.maya_models.silver__pool_block_fees", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REWARDS", "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_cacao.f8aaa086a0": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_cacao", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_cacao.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_cacao.f8aaa086a0", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_cacao"], "alias": "pool_block_fees_TOTAL_LIQUIDITY_FEES_cacao", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.285547, "relation_name": "MAYA.not_null_silver.pool_block_fees_TOTAL_LIQUIDITY_FEES_cacao", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_LIQUIDITY_FEES_cacao", "file_key_name": "models.silver__pool_block_fees", "attached_node": "model.maya_models.silver__pool_block_fees", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_LIQUIDITY_FEES_cacao", "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES.b890f32362": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES.b890f32362", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES"], "alias": "pool_block_fees_ASSET_LIQUIDITY_FEES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.286338, "relation_name": "MAYA.not_null_silver.pool_block_fees_ASSET_LIQUIDITY_FEES", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_LIQUIDITY_FEES", "file_key_name": "models.silver__pool_block_fees", "attached_node": "model.maya_models.silver__pool_block_fees", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_LIQUIDITY_FEES", "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_fees_cacao_LIQUIDITY_FEES.d6bd4f1894": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_fees_cacao_LIQUIDITY_FEES", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_fees_cacao_LIQUIDITY_FEES.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_fees_cacao_LIQUIDITY_FEES.d6bd4f1894", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_fees_cacao_LIQUIDITY_FEES"], "alias": "pool_block_fees_cacao_LIQUIDITY_FEES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.287172, "relation_name": "MAYA.not_null_silver.pool_block_fees_cacao_LIQUIDITY_FEES", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_LIQUIDITY_FEES", "file_key_name": "models.silver__pool_block_fees", "attached_node": "model.maya_models.silver__pool_block_fees", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_LIQUIDITY_FEES", "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_fees_EARNINGS.78b1e80755": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_fees_EARNINGS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_fees_EARNINGS.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_fees_EARNINGS.78b1e80755", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_fees_EARNINGS"], "alias": "pool_block_fees_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.2881138, "relation_name": "MAYA.not_null_silver.pool_block_fees_EARNINGS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EARNINGS", "file_key_name": "models.silver__pool_block_fees", "attached_node": "model.maya_models.silver__pool_block_fees", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS", "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pool_block_fees_DAY__POOL_NAME.bd55b36cef": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__pool_block_fees_DAY__POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_2b663c3397481424837dbc7dd9be622c.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pool_block_fees_DAY__POOL_NAME.bd55b36cef", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__pool_block_fees_DAY__POOL_NAME"], "alias": "pool_block_fees_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2b663c3397481424837dbc7dd9be622c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_2b663c3397481424837dbc7dd9be622c"}, "created_at": 1741278782.288921, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.pool_block_fees_DAY", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2b663c3397481424837dbc7dd9be622c\") }}", "language": "sql", "refs": [{"name": "silver__pool_block_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__pool_block_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__pool_block_fees", "attached_node": "model.maya_models.silver__pool_block_fees", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["DAY", "POOL_NAME"], "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__rewards_events_BLOCK_TIMESTAMP.9c9ab7fca9": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__rewards_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__rewards_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__rewards_events.yml", "unique_id": "test.maya_models.not_null_silver__rewards_events_BLOCK_TIMESTAMP.9c9ab7fca9", "fqn": ["maya_models", "silver", "not_null_silver__rewards_events_BLOCK_TIMESTAMP"], "alias": "rewards_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.291907, "relation_name": "MAYA.not_null_silver.rewards_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__rewards_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__rewards_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__rewards_events", "attached_node": "model.maya_models.silver__rewards_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__rewards_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__rewards_events_BOND_E8.7e5ede5d73": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__rewards_events_BOND_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__rewards_events_BOND_E8.sql", "original_file_path": "models/silver/silver__rewards_events.yml", "unique_id": "test.maya_models.not_null_silver__rewards_events_BOND_E8.7e5ede5d73", "fqn": ["maya_models", "silver", "not_null_silver__rewards_events_BOND_E8"], "alias": "rewards_events_BOND_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.292887, "relation_name": "MAYA.not_null_silver.rewards_events_BOND_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__rewards_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__rewards_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BOND_E8", "file_key_name": "models.silver__rewards_events", "attached_node": "model.maya_models.silver__rewards_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BOND_E8", "model": "{{ get_where_subquery(ref('silver__rewards_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__rewards_events_BLOCK_TIMESTAMP.b923b50047": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__rewards_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_03e9d7d02497531e0ea89534e09f4774.sql", "original_file_path": "models/silver/silver__rewards_events.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__rewards_events_BLOCK_TIMESTAMP.b923b50047", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__rewards_events_BLOCK_TIMESTAMP"], "alias": "rewards_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_03e9d7d02497531e0ea89534e09f4774", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_03e9d7d02497531e0ea89534e09f4774"}, "created_at": 1741278782.293712, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.rewards_events_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_03e9d7d02497531e0ea89534e09f4774\") }}", "language": "sql", "refs": [{"name": "silver__rewards_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__rewards_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__rewards_events", "attached_node": "model.maya_models.silver__rewards_events", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_TIMESTAMP"], "model": "{{ get_where_subquery(ref('silver__rewards_events')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__swap_events_TX_ID.ba927b5821": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swap_events_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swap_events_TX_ID.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.not_null_silver__swap_events_TX_ID.ba927b5821", "fqn": ["maya_models", "silver", "not_null_silver__swap_events_TX_ID"], "alias": "swap_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.2983859, "relation_name": "MAYA.not_null_silver.swap_events_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swap_events_BLOCKCHAIN.46d45dd5fc": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swap_events_BLOCKCHAIN", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swap_events_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.not_null_silver__swap_events_BLOCKCHAIN.46d45dd5fc", "fqn": ["maya_models", "silver", "not_null_silver__swap_events_BLOCKCHAIN"], "alias": "swap_events_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.299296, "relation_name": "MAYA.not_null_silver.swap_events_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swap_events_FROM_ADDRESS.06e1df5a46": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swap_events_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swap_events_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.not_null_silver__swap_events_FROM_ADDRESS.06e1df5a46", "fqn": ["maya_models", "silver", "not_null_silver__swap_events_FROM_ADDRESS"], "alias": "swap_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.300138, "relation_name": "MAYA.not_null_silver.swap_events_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swap_events_TO_ADDRESS.3c473194d8": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swap_events_TO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swap_events_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.not_null_silver__swap_events_TO_ADDRESS.3c473194d8", "fqn": ["maya_models", "silver", "not_null_silver__swap_events_TO_ADDRESS"], "alias": "swap_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.30093, "relation_name": "MAYA.not_null_silver.swap_events_TO_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ADDRESS", "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swap_events_FROM_ASSET.cfbedd6f2a": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swap_events_FROM_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swap_events_FROM_ASSET.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.not_null_silver__swap_events_FROM_ASSET.cfbedd6f2a", "fqn": ["maya_models", "silver", "not_null_silver__swap_events_FROM_ASSET"], "alias": "swap_events_FROM_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3017092, "relation_name": "MAYA.not_null_silver.swap_events_FROM_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ASSET", "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ASSET", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swap_events_FROM_E8.74389cdde1": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swap_events_FROM_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swap_events_FROM_E8.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.not_null_silver__swap_events_FROM_E8.74389cdde1", "fqn": ["maya_models", "silver", "not_null_silver__swap_events_FROM_E8"], "alias": "swap_events_FROM_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.302467, "relation_name": "MAYA.not_null_silver.swap_events_FROM_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_E8", "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_E8", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swap_events_TO_ASSET.2a903da825": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swap_events_TO_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swap_events_TO_ASSET.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.not_null_silver__swap_events_TO_ASSET.2a903da825", "fqn": ["maya_models", "silver", "not_null_silver__swap_events_TO_ASSET"], "alias": "swap_events_TO_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.30322, "relation_name": "MAYA.not_null_silver.swap_events_TO_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ASSET", "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swap_events_TO_E8.5ad719c657": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swap_events_TO_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swap_events_TO_E8.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.not_null_silver__swap_events_TO_E8.5ad719c657", "fqn": ["maya_models", "silver", "not_null_silver__swap_events_TO_E8"], "alias": "swap_events_TO_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.30493, "relation_name": "MAYA.not_null_silver.swap_events_TO_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_E8", "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_E8", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swap_events_MEMO.29e2c5dd27": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swap_events_MEMO", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swap_events_MEMO.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.not_null_silver__swap_events_MEMO.29e2c5dd27", "fqn": ["maya_models", "silver", "not_null_silver__swap_events_MEMO"], "alias": "swap_events_MEMO", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.306133, "relation_name": "MAYA.not_null_silver.swap_events_MEMO", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MEMO", "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MEMO", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swap_events_POOL_NAME.e529db3476": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swap_events_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swap_events_POOL_NAME.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.not_null_silver__swap_events_POOL_NAME.e529db3476", "fqn": ["maya_models", "silver", "not_null_silver__swap_events_POOL_NAME"], "alias": "swap_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3070111, "relation_name": "MAYA.not_null_silver.swap_events_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swap_events_TO_E8_MIN.d4667fb218": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swap_events_TO_E8_MIN", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swap_events_TO_E8_MIN.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.not_null_silver__swap_events_TO_E8_MIN.d4667fb218", "fqn": ["maya_models", "silver", "not_null_silver__swap_events_TO_E8_MIN"], "alias": "swap_events_TO_E8_MIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3078341, "relation_name": "MAYA.not_null_silver.swap_events_TO_E8_MIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_E8_MIN", "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_E8_MIN", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swap_events_SWAP_SLIP_BP.61c1b2db2f": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swap_events_SWAP_SLIP_BP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swap_events_SWAP_SLIP_BP.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.not_null_silver__swap_events_SWAP_SLIP_BP.61c1b2db2f", "fqn": ["maya_models", "silver", "not_null_silver__swap_events_SWAP_SLIP_BP"], "alias": "swap_events_SWAP_SLIP_BP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3086588, "relation_name": "MAYA.not_null_silver.swap_events_SWAP_SLIP_BP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SWAP_SLIP_BP", "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_SLIP_BP", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swap_events_LIQ_FEE_E8.3403a5a47e": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swap_events_LIQ_FEE_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swap_events_LIQ_FEE_E8.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.not_null_silver__swap_events_LIQ_FEE_E8.3403a5a47e", "fqn": ["maya_models", "silver", "not_null_silver__swap_events_LIQ_FEE_E8"], "alias": "swap_events_LIQ_FEE_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3094778, "relation_name": "MAYA.not_null_silver.swap_events_LIQ_FEE_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQ_FEE_E8", "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQ_FEE_E8", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swap_events_LIQ_FEE_IN_CACAO_E8.8d242c34b0": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swap_events_LIQ_FEE_IN_CACAO_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swap_events_LIQ_FEE_IN_CACAO_E8.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.not_null_silver__swap_events_LIQ_FEE_IN_CACAO_E8.8d242c34b0", "fqn": ["maya_models", "silver", "not_null_silver__swap_events_LIQ_FEE_IN_CACAO_E8"], "alias": "swap_events_LIQ_FEE_IN_CACAO_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.310347, "relation_name": "MAYA.not_null_silver.swap_events_LIQ_FEE_IN_CACAO_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQ_FEE_IN_CACAO_E8", "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQ_FEE_IN_CACAO_E8", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swap_events__DIRECTION.910c1bf98a": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swap_events__DIRECTION", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swap_events__DIRECTION.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.not_null_silver__swap_events__DIRECTION.910c1bf98a", "fqn": ["maya_models", "silver", "not_null_silver__swap_events__DIRECTION"], "alias": "swap_events", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.311083, "relation_name": "MAYA.not_null_silver.swap_events", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "_DIRECTION", "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_DIRECTION", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swap_events_BLOCK_TIMESTAMP.a57ee76fa3": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swap_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swap_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.not_null_silver__swap_events_BLOCK_TIMESTAMP.a57ee76fa3", "fqn": ["maya_models", "silver", "not_null_silver__swap_events_BLOCK_TIMESTAMP"], "alias": "swap_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.311818, "relation_name": "MAYA.not_null_silver.swap_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__swap_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__FROM_ASSET__FROM_E8__TO_ASSET__TO_E8__MEMO__POOL_NAME__TO_E8_MIN__SWAP_SLIP_BP__LIQ_FEE_E8__LIQ_FEE_IN_CACAO_E8___DIRECTION__BLOCK_TIMESTAMP__EVENT_ID.6b4a3b623f": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__swap_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__FROM_ASSET__FROM_E8__TO_ASSET__TO_E8__MEMO__POOL_NAME__TO_E8_MIN__SWAP_SLIP_BP__LIQ_FEE_E8__LIQ_FEE_IN_CACAO_E8___DIRECTION__BLOCK_TIMESTAMP__EVENT_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_4bdace324051bac18f379ece7bdc0d1d.sql", "original_file_path": "models/silver/silver__swap_events.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__swap_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__FROM_ASSET__FROM_E8__TO_ASSET__TO_E8__MEMO__POOL_NAME__TO_E8_MIN__SWAP_SLIP_BP__LIQ_FEE_E8__LIQ_FEE_IN_CACAO_E8___DIRECTION__BLOCK_TIMESTAMP__EVENT_ID.6b4a3b623f", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__swap_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__FROM_ASSET__FROM_E8__TO_ASSET__TO_E8__MEMO__POOL_NAME__TO_E8_MIN__SWAP_SLIP_BP__LIQ_FEE_E8__LIQ_FEE_IN_CACAO_E8___DIRECTION__BLOCK_TIMESTAMP__EVENT_ID"], "alias": "swap_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4bdace324051bac18f379ece7bdc0d1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_4bdace324051bac18f379ece7bdc0d1d"}, "created_at": 1741278782.312596, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.swap_events_TX_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4bdace324051bac18f379ece7bdc0d1d\") }}", "language": "sql", "refs": [{"name": "silver__swap_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__swap_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__swap_events", "attached_node": "model.maya_models.silver__swap_events", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "BLOCKCHAIN", "FROM_ADDRESS", "TO_ADDRESS", "FROM_ASSET", "FROM_E8", "TO_ASSET", "TO_E8", "MEMO", "POOL_NAME", "TO_E8_MIN", "SWAP_SLIP_BP", "LIQ_FEE_E8", "LIQ_FEE_IN_CACAO_E8", "_DIRECTION", "BLOCK_TIMESTAMP", "EVENT_ID"], "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__swaps_BLOCK_ID.85d35d8cd4": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_BLOCK_ID.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_BLOCK_ID.85d35d8cd4", "fqn": ["maya_models", "silver", "not_null_silver__swaps_BLOCK_ID"], "alias": "swaps_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.319102, "relation_name": "MAYA.not_null_silver.swaps_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_BLOCK_TIMESTAMP_DATE.57ccf41e0a": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_BLOCK_TIMESTAMP_DATE", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_BLOCK_TIMESTAMP_DATE.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_BLOCK_TIMESTAMP_DATE.57ccf41e0a", "fqn": ["maya_models", "silver", "not_null_silver__swaps_BLOCK_TIMESTAMP_DATE"], "alias": "swaps_BLOCK_TIMESTAMP_DATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.319978, "relation_name": "MAYA.not_null_silver.swaps_BLOCK_TIMESTAMP_DATE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP::DATE", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP::DATE", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_BLOCK_TIMESTAMP_DATE__day__2.d8a8588da7": {"database": "MAYA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_BLOCK_TIMESTAMP_DATE__day__2", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_row_va_dd4b0ad4ce2be1b8950c46e6dd540ba8.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_BLOCK_TIMESTAMP_DATE__day__2.d8a8588da7", "fqn": ["maya_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_BLOCK_TIMESTAMP_DATE__day__2"], "alias": "swaps_BLOCK_TIMESTAMP_DATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_dd4b0ad4ce2be1b8950c46e6dd540ba8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_dd4b0ad4ce2be1b8950c46e6dd540ba8"}, "created_at": 1741278782.3208299, "relation_name": "MAYA.dbt_expectations_expect_row_values_to_have_recent_data_silver.swaps_BLOCK_TIMESTAMP_DATE", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_dd4b0ad4ce2be1b8950c46e6dd540ba8\") }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP::DATE", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "BLOCK_TIMESTAMP::DATE", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.not_null_silver__swaps_TX_ID.429c1bdd9e": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_TX_ID.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_TX_ID.429c1bdd9e", "fqn": ["maya_models", "silver", "not_null_silver__swaps_TX_ID"], "alias": "swaps_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.324238, "relation_name": "MAYA.not_null_silver.swaps_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_BLOCKCHAIN.704d8b1b68": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_BLOCKCHAIN", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_BLOCKCHAIN.704d8b1b68", "fqn": ["maya_models", "silver", "not_null_silver__swaps_BLOCKCHAIN"], "alias": "swaps_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.325036, "relation_name": "MAYA.not_null_silver.swaps_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_POOL_NAME.8d3cfe0652": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_POOL_NAME.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_POOL_NAME.8d3cfe0652", "fqn": ["maya_models", "silver", "not_null_silver__swaps_POOL_NAME"], "alias": "swaps_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.325817, "relation_name": "MAYA.not_null_silver.swaps_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_FROM_ADDRESS.247c2a81d9": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_FROM_ADDRESS.247c2a81d9", "fqn": ["maya_models", "silver", "not_null_silver__swaps_FROM_ADDRESS"], "alias": "swaps_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.326721, "relation_name": "MAYA.not_null_silver.swaps_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_TO_POOL_ADDRESS.eec1cbbccd": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_TO_POOL_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_TO_POOL_ADDRESS.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_TO_POOL_ADDRESS.eec1cbbccd", "fqn": ["maya_models", "silver", "not_null_silver__swaps_TO_POOL_ADDRESS"], "alias": "swaps_TO_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3274581, "relation_name": "MAYA.not_null_silver.swaps_TO_POOL_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_POOL_ADDRESS", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_POOL_ADDRESS", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_FROM_ASSET.2503f2d93d": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_FROM_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_FROM_ASSET.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_FROM_ASSET.2503f2d93d", "fqn": ["maya_models", "silver", "not_null_silver__swaps_FROM_ASSET"], "alias": "swaps_FROM_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.328204, "relation_name": "MAYA.not_null_silver.swaps_FROM_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ASSET", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ASSET", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_TO_ASSET.d9705bc2c4": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_TO_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_TO_ASSET.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_TO_ASSET.d9705bc2c4", "fqn": ["maya_models", "silver", "not_null_silver__swaps_TO_ASSET"], "alias": "swaps_TO_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3289971, "relation_name": "MAYA.not_null_silver.swaps_TO_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ASSET", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_FROM_AMOUNT.a2d756c197": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_FROM_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_FROM_AMOUNT.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_FROM_AMOUNT.a2d756c197", "fqn": ["maya_models", "silver", "not_null_silver__swaps_FROM_AMOUNT"], "alias": "swaps_FROM_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3298519, "relation_name": "MAYA.not_null_silver.swaps_FROM_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_AMOUNT", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_AMOUNT", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_TO_AMOUNT.db49c788b2": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_TO_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_TO_AMOUNT.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_TO_AMOUNT.db49c788b2", "fqn": ["maya_models", "silver", "not_null_silver__swaps_TO_AMOUNT"], "alias": "swaps_TO_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.330631, "relation_name": "MAYA.not_null_silver.swaps_TO_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_AMOUNT", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_AMOUNT", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_MIN_TO_AMOUNT.75770dfa8f": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_MIN_TO_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_MIN_TO_AMOUNT.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_MIN_TO_AMOUNT.75770dfa8f", "fqn": ["maya_models", "silver", "not_null_silver__swaps_MIN_TO_AMOUNT"], "alias": "swaps_MIN_TO_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.331389, "relation_name": "MAYA.not_null_silver.swaps_MIN_TO_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MIN_TO_AMOUNT", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MIN_TO_AMOUNT", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_FROM_AMOUNT_USD.78ab9ab5ae": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_FROM_AMOUNT_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_FROM_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_FROM_AMOUNT_USD.78ab9ab5ae", "fqn": ["maya_models", "silver", "not_null_silver__swaps_FROM_AMOUNT_USD"], "alias": "swaps_FROM_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.332224, "relation_name": "MAYA.not_null_silver.swaps_FROM_AMOUNT_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_AMOUNT_USD", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_TO_AMOUNT_USD.f7a4de00a3": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_TO_AMOUNT_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_TO_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_TO_AMOUNT_USD.f7a4de00a3", "fqn": ["maya_models", "silver", "not_null_silver__swaps_TO_AMOUNT_USD"], "alias": "swaps_TO_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.333026, "relation_name": "MAYA.not_null_silver.swaps_TO_AMOUNT_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_AMOUNT_USD", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_TO_AMOUNT_MIN_USD.cc63ea20d5": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_TO_AMOUNT_MIN_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_TO_AMOUNT_MIN_USD.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_TO_AMOUNT_MIN_USD.cc63ea20d5", "fqn": ["maya_models", "silver", "not_null_silver__swaps_TO_AMOUNT_MIN_USD"], "alias": "swaps_TO_AMOUNT_MIN_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.333908, "relation_name": "MAYA.not_null_silver.swaps_TO_AMOUNT_MIN_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_AMOUNT_MIN_USD", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_AMOUNT_MIN_USD", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_SWAP_SLIP_BP.049ffdaa3d": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_SWAP_SLIP_BP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_SWAP_SLIP_BP.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_SWAP_SLIP_BP.049ffdaa3d", "fqn": ["maya_models", "silver", "not_null_silver__swaps_SWAP_SLIP_BP"], "alias": "swaps_SWAP_SLIP_BP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.334733, "relation_name": "MAYA.not_null_silver.swaps_SWAP_SLIP_BP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SWAP_SLIP_BP", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_SLIP_BP", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_LIQ_FEE_cacao.545480628b": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_LIQ_FEE_cacao", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_LIQ_FEE_cacao.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_LIQ_FEE_cacao.545480628b", "fqn": ["maya_models", "silver", "not_null_silver__swaps_LIQ_FEE_cacao"], "alias": "swaps_LIQ_FEE_cacao", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.335802, "relation_name": "MAYA.not_null_silver.swaps_LIQ_FEE_cacao", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQ_FEE_cacao", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQ_FEE_cacao", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_LIQ_FEE_cacao_USD.1a59fb77e9": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_LIQ_FEE_cacao_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_LIQ_FEE_cacao_USD.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_LIQ_FEE_cacao_USD.1a59fb77e9", "fqn": ["maya_models", "silver", "not_null_silver__swaps_LIQ_FEE_cacao_USD"], "alias": "swaps_LIQ_FEE_cacao_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.336967, "relation_name": "MAYA.not_null_silver.swaps_LIQ_FEE_cacao_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQ_FEE_cacao_USD", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQ_FEE_cacao_USD", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_LIQ_FEE_ASSET.3ab6185469": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_LIQ_FEE_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_LIQ_FEE_ASSET.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_LIQ_FEE_ASSET.3ab6185469", "fqn": ["maya_models", "silver", "not_null_silver__swaps_LIQ_FEE_ASSET"], "alias": "swaps_LIQ_FEE_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3380659, "relation_name": "MAYA.not_null_silver.swaps_LIQ_FEE_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQ_FEE_ASSET", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQ_FEE_ASSET", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__swaps_LIQ_FEE_ASSET_USD.542bee191c": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__swaps_LIQ_FEE_ASSET_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__swaps_LIQ_FEE_ASSET_USD.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.not_null_silver__swaps_LIQ_FEE_ASSET_USD.542bee191c", "fqn": ["maya_models", "silver", "not_null_silver__swaps_LIQ_FEE_ASSET_USD"], "alias": "swaps_LIQ_FEE_ASSET_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.338888, "relation_name": "MAYA.not_null_silver.swaps_LIQ_FEE_ASSET_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQ_FEE_ASSET_USD", "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQ_FEE_ASSET_USD", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__swaps_BLOCK_ID__TX_ID__POOL_NAME__FROM_ADDRESS__TO_POOL_ADDRESS__FROM_ASSET__TO_ASSET__NATIVE_TO_ADDRESS__FROM_AMOUNT__TO_AMOUNT.aa735861a8": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_BLOCK_ID__TX_ID__POOL_NAME__FROM_ADDRESS__TO_POOL_ADDRESS__FROM_ASSET__TO_ASSET__NATIVE_TO_ADDRESS__FROM_AMOUNT__TO_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_d76f65ca2ce3addaa2f536045ea56e99.sql", "original_file_path": "models/silver/silver__swaps.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__swaps_BLOCK_ID__TX_ID__POOL_NAME__FROM_ADDRESS__TO_POOL_ADDRESS__FROM_ASSET__TO_ASSET__NATIVE_TO_ADDRESS__FROM_AMOUNT__TO_AMOUNT.aa735861a8", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__swaps_BLOCK_ID__TX_ID__POOL_NAME__FROM_ADDRESS__TO_POOL_ADDRESS__FROM_ASSET__TO_ASSET__NATIVE_TO_ADDRESS__FROM_AMOUNT__TO_AMOUNT"], "alias": "swaps_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d76f65ca2ce3addaa2f536045ea56e99", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_d76f65ca2ce3addaa2f536045ea56e99"}, "created_at": 1741278782.339744, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.swaps_BLOCK_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d76f65ca2ce3addaa2f536045ea56e99\") }}", "language": "sql", "refs": [{"name": "silver__swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__swaps", "attached_node": "model.maya_models.silver__swaps", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID", "POOL_NAME", "FROM_ADDRESS", "TO_POOL_ADDRESS", "FROM_ASSET", "TO_ASSET", "NATIVE_TO_ADDRESS", "FROM_AMOUNT", "TO_AMOUNT"], "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__fee_events_BLOCK_TIMESTAMP.c40fd33f4a": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__fee_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__fee_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__fee_events.yml", "unique_id": "test.maya_models.not_null_silver__fee_events_BLOCK_TIMESTAMP.c40fd33f4a", "fqn": ["maya_models", "silver", "not_null_silver__fee_events_BLOCK_TIMESTAMP"], "alias": "fee_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.345747, "relation_name": "MAYA.not_null_silver.fee_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__fee_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__fee_events", "attached_node": "model.maya_models.silver__fee_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__fee_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__fee_events_TX_ID.bfb2bd0eb8": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__fee_events_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__fee_events_TX_ID.sql", "original_file_path": "models/silver/silver__fee_events.yml", "unique_id": "test.maya_models.not_null_silver__fee_events_TX_ID.bfb2bd0eb8", "fqn": ["maya_models", "silver", "not_null_silver__fee_events_TX_ID"], "alias": "fee_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.346813, "relation_name": "MAYA.not_null_silver.fee_events_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__fee_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__fee_events", "attached_node": "model.maya_models.silver__fee_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__fee_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__fee_events_ASSET.3832e5408e": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__fee_events_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__fee_events_ASSET.sql", "original_file_path": "models/silver/silver__fee_events.yml", "unique_id": "test.maya_models.not_null_silver__fee_events_ASSET.3832e5408e", "fqn": ["maya_models", "silver", "not_null_silver__fee_events_ASSET"], "alias": "fee_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.348045, "relation_name": "MAYA.not_null_silver.fee_events_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__fee_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET", "file_key_name": "models.silver__fee_events", "attached_node": "model.maya_models.silver__fee_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__fee_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__fee_events_POOL_DEDUCT.3a131f1475": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__fee_events_POOL_DEDUCT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__fee_events_POOL_DEDUCT.sql", "original_file_path": "models/silver/silver__fee_events.yml", "unique_id": "test.maya_models.not_null_silver__fee_events_POOL_DEDUCT.3a131f1475", "fqn": ["maya_models", "silver", "not_null_silver__fee_events_POOL_DEDUCT"], "alias": "fee_events_POOL_DEDUCT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.349002, "relation_name": "MAYA.not_null_silver.fee_events_POOL_DEDUCT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__fee_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_DEDUCT", "file_key_name": "models.silver__fee_events", "attached_node": "model.maya_models.silver__fee_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_DEDUCT", "model": "{{ get_where_subquery(ref('silver__fee_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__fee_events_ASSET_E8.0ae7bb759e": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__fee_events_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__fee_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__fee_events.yml", "unique_id": "test.maya_models.not_null_silver__fee_events_ASSET_E8.0ae7bb759e", "fqn": ["maya_models", "silver", "not_null_silver__fee_events_ASSET_E8"], "alias": "fee_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.350486, "relation_name": "MAYA.not_null_silver.fee_events_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__fee_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.silver__fee_events", "attached_node": "model.maya_models.silver__fee_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__fee_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__add_events_TX_ID.3e7dfb5274": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__add_events_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__add_events_TX_ID.sql", "original_file_path": "models/silver/silver__add_events.yml", "unique_id": "test.maya_models.not_null_silver__add_events_TX_ID.3e7dfb5274", "fqn": ["maya_models", "silver", "not_null_silver__add_events_TX_ID"], "alias": "add_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.354302, "relation_name": "MAYA.not_null_silver.add_events_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__add_events", "attached_node": "model.maya_models.silver__add_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__add_events_FROM_ADDRESS.c11c449394": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__add_events_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__add_events_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__add_events.yml", "unique_id": "test.maya_models.not_null_silver__add_events_FROM_ADDRESS.c11c449394", "fqn": ["maya_models", "silver", "not_null_silver__add_events_FROM_ADDRESS"], "alias": "add_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.355319, "relation_name": "MAYA.not_null_silver.add_events_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__add_events", "attached_node": "model.maya_models.silver__add_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__add_events_TO_ADDRESS.ee57bfcd57": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__add_events_TO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__add_events_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__add_events.yml", "unique_id": "test.maya_models.not_null_silver__add_events_TO_ADDRESS.ee57bfcd57", "fqn": ["maya_models", "silver", "not_null_silver__add_events_TO_ADDRESS"], "alias": "add_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3562, "relation_name": "MAYA.not_null_silver.add_events_TO_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ADDRESS", "file_key_name": "models.silver__add_events", "attached_node": "model.maya_models.silver__add_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__add_events_ASSET_E8.49cc46d9aa": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__add_events_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__add_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__add_events.yml", "unique_id": "test.maya_models.not_null_silver__add_events_ASSET_E8.49cc46d9aa", "fqn": ["maya_models", "silver", "not_null_silver__add_events_ASSET_E8"], "alias": "add_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3579571, "relation_name": "MAYA.not_null_silver.add_events_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.silver__add_events", "attached_node": "model.maya_models.silver__add_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__add_events_MEMO.111566b9b2": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__add_events_MEMO", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__add_events_MEMO.sql", "original_file_path": "models/silver/silver__add_events.yml", "unique_id": "test.maya_models.not_null_silver__add_events_MEMO.111566b9b2", "fqn": ["maya_models", "silver", "not_null_silver__add_events_MEMO"], "alias": "add_events_MEMO", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3594618, "relation_name": "MAYA.not_null_silver.add_events_MEMO", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MEMO", "file_key_name": "models.silver__add_events", "attached_node": "model.maya_models.silver__add_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MEMO", "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__add_events_cacao_E8.9839039ade": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__add_events_cacao_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__add_events_cacao_E8.sql", "original_file_path": "models/silver/silver__add_events.yml", "unique_id": "test.maya_models.not_null_silver__add_events_cacao_E8.9839039ade", "fqn": ["maya_models", "silver", "not_null_silver__add_events_cacao_E8"], "alias": "add_events_cacao_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.360363, "relation_name": "MAYA.not_null_silver.add_events_cacao_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_E8", "file_key_name": "models.silver__add_events", "attached_node": "model.maya_models.silver__add_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_E8", "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__add_events_POOL_NAME.66d963165a": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__add_events_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__add_events_POOL_NAME.sql", "original_file_path": "models/silver/silver__add_events.yml", "unique_id": "test.maya_models.not_null_silver__add_events_POOL_NAME.66d963165a", "fqn": ["maya_models", "silver", "not_null_silver__add_events_POOL_NAME"], "alias": "add_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3611991, "relation_name": "MAYA.not_null_silver.add_events_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.silver__add_events", "attached_node": "model.maya_models.silver__add_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__add_events_BLOCK_TIMESTAMP.00d2f77a19": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__add_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__add_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__add_events.yml", "unique_id": "test.maya_models.not_null_silver__add_events_BLOCK_TIMESTAMP.00d2f77a19", "fqn": ["maya_models", "silver", "not_null_silver__add_events_BLOCK_TIMESTAMP"], "alias": "add_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.362027, "relation_name": "MAYA.not_null_silver.add_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__add_events", "attached_node": "model.maya_models.silver__add_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__add_events_EVENT_ID__TX_ID__BLOCKCHAIN__POOL_NAME__FROM_ADDRESS__TO_ADDRESS__MEMO.ba16b70ba9": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__add_events_EVENT_ID__TX_ID__BLOCKCHAIN__POOL_NAME__FROM_ADDRESS__TO_ADDRESS__MEMO", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_df8db349b5b0e5698ca0696cb18d6905.sql", "original_file_path": "models/silver/silver__add_events.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__add_events_EVENT_ID__TX_ID__BLOCKCHAIN__POOL_NAME__FROM_ADDRESS__TO_ADDRESS__MEMO.ba16b70ba9", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__add_events_EVENT_ID__TX_ID__BLOCKCHAIN__POOL_NAME__FROM_ADDRESS__TO_ADDRESS__MEMO"], "alias": "add_events_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_df8db349b5b0e5698ca0696cb18d6905", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_df8db349b5b0e5698ca0696cb18d6905"}, "created_at": 1741278782.362914, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.add_events_EVENT_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_df8db349b5b0e5698ca0696cb18d6905\") }}", "language": "sql", "refs": [{"name": "silver__add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__add_events", "attached_node": "model.maya_models.silver__add_events", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["EVENT_ID", "TX_ID", "BLOCKCHAIN", "POOL_NAME", "FROM_ADDRESS", "TO_ADDRESS", "MEMO"], "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__block_rewards_DAY.202d1b684a": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__block_rewards_DAY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__block_rewards_DAY.sql", "original_file_path": "models/silver/silver__block_rewards.yml", "unique_id": "test.maya_models.not_null_silver__block_rewards_DAY.202d1b684a", "fqn": ["maya_models", "silver", "not_null_silver__block_rewards_DAY"], "alias": "block_rewards_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3670459, "relation_name": "MAYA.not_null_silver.block_rewards_DAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.silver__block_rewards", "attached_node": "model.maya_models.silver__block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__block_rewards')) }}"}, "namespace": null}}, "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_rewards_DAY__day__2.c5edb01bcd": {"database": "MAYA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__block_rewards_DAY__day__2", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_row_va_bee157395ffef35c1532dd31d5a424de.sql", "original_file_path": "models/silver/silver__block_rewards.yml", "unique_id": "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_rewards_DAY__day__2.c5edb01bcd", "fqn": ["maya_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__block_rewards_DAY__day__2"], "alias": "block_rewards_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_bee157395ffef35c1532dd31d5a424de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_bee157395ffef35c1532dd31d5a424de"}, "created_at": 1741278782.367892, "relation_name": "MAYA.dbt_expectations_expect_row_values_to_have_recent_data_silver.block_rewards_DAY", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_bee157395ffef35c1532dd31d5a424de\") }}", "language": "sql", "refs": [{"name": "silver__block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.silver__block_rewards", "attached_node": "model.maya_models.silver__block_rewards", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__block_rewards')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.not_null_silver__block_rewards_LIQUIDITY_FEE.0d49408c2f": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__block_rewards_LIQUIDITY_FEE", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__block_rewards_LIQUIDITY_FEE.sql", "original_file_path": "models/silver/silver__block_rewards.yml", "unique_id": "test.maya_models.not_null_silver__block_rewards_LIQUIDITY_FEE.0d49408c2f", "fqn": ["maya_models", "silver", "not_null_silver__block_rewards_LIQUIDITY_FEE"], "alias": "block_rewards_LIQUIDITY_FEE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3710349, "relation_name": "MAYA.not_null_silver.block_rewards_LIQUIDITY_FEE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQUIDITY_FEE", "file_key_name": "models.silver__block_rewards", "attached_node": "model.maya_models.silver__block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_FEE", "model": "{{ get_where_subquery(ref('silver__block_rewards')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__block_rewards_BLOCK_REWARDS.1424b5c928": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__block_rewards_BLOCK_REWARDS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__block_rewards_BLOCK_REWARDS.sql", "original_file_path": "models/silver/silver__block_rewards.yml", "unique_id": "test.maya_models.not_null_silver__block_rewards_BLOCK_REWARDS.1424b5c928", "fqn": ["maya_models", "silver", "not_null_silver__block_rewards_BLOCK_REWARDS"], "alias": "block_rewards_BLOCK_REWARDS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3718169, "relation_name": "MAYA.not_null_silver.block_rewards_BLOCK_REWARDS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_REWARDS", "file_key_name": "models.silver__block_rewards", "attached_node": "model.maya_models.silver__block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_REWARDS", "model": "{{ get_where_subquery(ref('silver__block_rewards')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__block_rewards_EARNINGS.cc83b753f9": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__block_rewards_EARNINGS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__block_rewards_EARNINGS.sql", "original_file_path": "models/silver/silver__block_rewards.yml", "unique_id": "test.maya_models.not_null_silver__block_rewards_EARNINGS.cc83b753f9", "fqn": ["maya_models", "silver", "not_null_silver__block_rewards_EARNINGS"], "alias": "block_rewards_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.372577, "relation_name": "MAYA.not_null_silver.block_rewards_EARNINGS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EARNINGS", "file_key_name": "models.silver__block_rewards", "attached_node": "model.maya_models.silver__block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS", "model": "{{ get_where_subquery(ref('silver__block_rewards')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__block_rewards_BONDING_EARNINGS.46eaa4df77": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__block_rewards_BONDING_EARNINGS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__block_rewards_BONDING_EARNINGS.sql", "original_file_path": "models/silver/silver__block_rewards.yml", "unique_id": "test.maya_models.not_null_silver__block_rewards_BONDING_EARNINGS.46eaa4df77", "fqn": ["maya_models", "silver", "not_null_silver__block_rewards_BONDING_EARNINGS"], "alias": "block_rewards_BONDING_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3733408, "relation_name": "MAYA.not_null_silver.block_rewards_BONDING_EARNINGS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BONDING_EARNINGS", "file_key_name": "models.silver__block_rewards", "attached_node": "model.maya_models.silver__block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BONDING_EARNINGS", "model": "{{ get_where_subquery(ref('silver__block_rewards')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__block_rewards_LIQUIDITY_EARNINGS.61a45ddd0e": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__block_rewards_LIQUIDITY_EARNINGS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__block_rewards_LIQUIDITY_EARNINGS.sql", "original_file_path": "models/silver/silver__block_rewards.yml", "unique_id": "test.maya_models.not_null_silver__block_rewards_LIQUIDITY_EARNINGS.61a45ddd0e", "fqn": ["maya_models", "silver", "not_null_silver__block_rewards_LIQUIDITY_EARNINGS"], "alias": "block_rewards_LIQUIDITY_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.374111, "relation_name": "MAYA.not_null_silver.block_rewards_LIQUIDITY_EARNINGS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQUIDITY_EARNINGS", "file_key_name": "models.silver__block_rewards", "attached_node": "model.maya_models.silver__block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_EARNINGS", "model": "{{ get_where_subquery(ref('silver__block_rewards')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__block_rewards_DAY.62cb5ef71d": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__block_rewards_DAY", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_637871af9e3035225b8949726d0c1b1f.sql", "original_file_path": "models/silver/silver__block_rewards.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__block_rewards_DAY.62cb5ef71d", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__block_rewards_DAY"], "alias": "block_rewards_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_637871af9e3035225b8949726d0c1b1f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_637871af9e3035225b8949726d0c1b1f"}, "created_at": 1741278782.374866, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.block_rewards_DAY", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_637871af9e3035225b8949726d0c1b1f\") }}", "language": "sql", "refs": [{"name": "silver__block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__block_rewards", "attached_node": "model.maya_models.silver__block_rewards", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["DAY"], "model": "{{ get_where_subquery(ref('silver__block_rewards')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP.17e9062fd9": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__pool_balance_change_events.yml", "unique_id": "test.maya_models.not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP.17e9062fd9", "fqn": ["maya_models", "silver", "not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP"], "alias": "pool_balance_change_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.37851, "relation_name": "MAYA.not_null_silver.pool_balance_change_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_balance_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_balance_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__pool_balance_change_events", "attached_node": "model.maya_models.silver__pool_balance_change_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__pool_balance_change_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_balance_change_events_ASSET.fe12efdf7a": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_balance_change_events_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_balance_change_events_ASSET.sql", "original_file_path": "models/silver/silver__pool_balance_change_events.yml", "unique_id": "test.maya_models.not_null_silver__pool_balance_change_events_ASSET.fe12efdf7a", "fqn": ["maya_models", "silver", "not_null_silver__pool_balance_change_events_ASSET"], "alias": "pool_balance_change_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.379627, "relation_name": "MAYA.not_null_silver.pool_balance_change_events_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_balance_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_balance_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET", "file_key_name": "models.silver__pool_balance_change_events", "attached_node": "model.maya_models.silver__pool_balance_change_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__pool_balance_change_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_balance_change_events_CACAO_AMOUNT.612b63c529": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_balance_change_events_CACAO_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_balance_change_events_CACAO_AMOUNT.sql", "original_file_path": "models/silver/silver__pool_balance_change_events.yml", "unique_id": "test.maya_models.not_null_silver__pool_balance_change_events_CACAO_AMOUNT.612b63c529", "fqn": ["maya_models", "silver", "not_null_silver__pool_balance_change_events_CACAO_AMOUNT"], "alias": "pool_balance_change_events_CACAO_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3807201, "relation_name": "MAYA.not_null_silver.pool_balance_change_events_CACAO_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_balance_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_balance_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CACAO_AMOUNT", "file_key_name": "models.silver__pool_balance_change_events", "attached_node": "model.maya_models.silver__pool_balance_change_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CACAO_AMOUNT", "model": "{{ get_where_subquery(ref('silver__pool_balance_change_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_balance_change_events_CACAO_ADD.5b7cd349b8": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_balance_change_events_CACAO_ADD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_balance_change_events_CACAO_ADD.sql", "original_file_path": "models/silver/silver__pool_balance_change_events.yml", "unique_id": "test.maya_models.not_null_silver__pool_balance_change_events_CACAO_ADD.5b7cd349b8", "fqn": ["maya_models", "silver", "not_null_silver__pool_balance_change_events_CACAO_ADD"], "alias": "pool_balance_change_events_CACAO_ADD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3817558, "relation_name": "MAYA.not_null_silver.pool_balance_change_events_CACAO_ADD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_balance_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_balance_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CACAO_ADD", "file_key_name": "models.silver__pool_balance_change_events", "attached_node": "model.maya_models.silver__pool_balance_change_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CACAO_ADD", "model": "{{ get_where_subquery(ref('silver__pool_balance_change_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_balance_change_events_ASSET_AMOUNT.c610565710": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_balance_change_events_ASSET_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_balance_change_events_ASSET_AMOUNT.sql", "original_file_path": "models/silver/silver__pool_balance_change_events.yml", "unique_id": "test.maya_models.not_null_silver__pool_balance_change_events_ASSET_AMOUNT.c610565710", "fqn": ["maya_models", "silver", "not_null_silver__pool_balance_change_events_ASSET_AMOUNT"], "alias": "pool_balance_change_events_ASSET_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3825338, "relation_name": "MAYA.not_null_silver.pool_balance_change_events_ASSET_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_balance_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_balance_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_AMOUNT", "file_key_name": "models.silver__pool_balance_change_events", "attached_node": "model.maya_models.silver__pool_balance_change_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_AMOUNT", "model": "{{ get_where_subquery(ref('silver__pool_balance_change_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_balance_change_events_ASSET_ADD.ca42123793": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_balance_change_events_ASSET_ADD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_balance_change_events_ASSET_ADD.sql", "original_file_path": "models/silver/silver__pool_balance_change_events.yml", "unique_id": "test.maya_models.not_null_silver__pool_balance_change_events_ASSET_ADD.ca42123793", "fqn": ["maya_models", "silver", "not_null_silver__pool_balance_change_events_ASSET_ADD"], "alias": "pool_balance_change_events_ASSET_ADD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.383289, "relation_name": "MAYA.not_null_silver.pool_balance_change_events_ASSET_ADD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_balance_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_balance_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_ADD", "file_key_name": "models.silver__pool_balance_change_events", "attached_node": "model.maya_models.silver__pool_balance_change_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ADD", "model": "{{ get_where_subquery(ref('silver__pool_balance_change_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_balance_change_events_REASON.cc5900d926": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_balance_change_events_REASON", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_balance_change_events_REASON.sql", "original_file_path": "models/silver/silver__pool_balance_change_events.yml", "unique_id": "test.maya_models.not_null_silver__pool_balance_change_events_REASON.cc5900d926", "fqn": ["maya_models", "silver", "not_null_silver__pool_balance_change_events_REASON"], "alias": "pool_balance_change_events_REASON", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.384029, "relation_name": "MAYA.not_null_silver.pool_balance_change_events_REASON", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_balance_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_balance_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "REASON", "file_key_name": "models.silver__pool_balance_change_events", "attached_node": "model.maya_models.silver__pool_balance_change_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REASON", "model": "{{ get_where_subquery(ref('silver__pool_balance_change_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__outbound_events_BLOCKCHAIN.65ee27c62d": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__outbound_events_BLOCKCHAIN", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__outbound_events_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "unique_id": "test.maya_models.not_null_silver__outbound_events_BLOCKCHAIN.65ee27c62d", "fqn": ["maya_models", "silver", "not_null_silver__outbound_events_BLOCKCHAIN"], "alias": "outbound_events_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.385789, "relation_name": "MAYA.not_null_silver.outbound_events_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__outbound_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__outbound_events", "attached_node": "model.maya_models.silver__outbound_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__outbound_events_FROM_ADDRESS.50d56a9b55": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__outbound_events_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__outbound_events_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "unique_id": "test.maya_models.not_null_silver__outbound_events_FROM_ADDRESS.50d56a9b55", "fqn": ["maya_models", "silver", "not_null_silver__outbound_events_FROM_ADDRESS"], "alias": "outbound_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.386554, "relation_name": "MAYA.not_null_silver.outbound_events_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__outbound_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__outbound_events", "attached_node": "model.maya_models.silver__outbound_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__outbound_events_TO_ADDRESS.48297fe87a": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__outbound_events_TO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__outbound_events_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "unique_id": "test.maya_models.not_null_silver__outbound_events_TO_ADDRESS.48297fe87a", "fqn": ["maya_models", "silver", "not_null_silver__outbound_events_TO_ADDRESS"], "alias": "outbound_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.3872929, "relation_name": "MAYA.not_null_silver.outbound_events_TO_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__outbound_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ADDRESS", "file_key_name": "models.silver__outbound_events", "attached_node": "model.maya_models.silver__outbound_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__outbound_events_ASSET.0d7a3cb9ee": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__outbound_events_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__outbound_events_ASSET.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "unique_id": "test.maya_models.not_null_silver__outbound_events_ASSET.0d7a3cb9ee", "fqn": ["maya_models", "silver", "not_null_silver__outbound_events_ASSET"], "alias": "outbound_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.38803, "relation_name": "MAYA.not_null_silver.outbound_events_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__outbound_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET", "file_key_name": "models.silver__outbound_events", "attached_node": "model.maya_models.silver__outbound_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__outbound_events_ASSET_E8.e28187620c": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__outbound_events_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__outbound_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "unique_id": "test.maya_models.not_null_silver__outbound_events_ASSET_E8.e28187620c", "fqn": ["maya_models", "silver", "not_null_silver__outbound_events_ASSET_E8"], "alias": "outbound_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.388771, "relation_name": "MAYA.not_null_silver.outbound_events_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__outbound_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.silver__outbound_events", "attached_node": "model.maya_models.silver__outbound_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__outbound_events_MEMO.88f8ed52e8": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__outbound_events_MEMO", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__outbound_events_MEMO.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "unique_id": "test.maya_models.not_null_silver__outbound_events_MEMO.88f8ed52e8", "fqn": ["maya_models", "silver", "not_null_silver__outbound_events_MEMO"], "alias": "outbound_events_MEMO", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.389971, "relation_name": "MAYA.not_null_silver.outbound_events_MEMO", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__outbound_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MEMO", "file_key_name": "models.silver__outbound_events", "attached_node": "model.maya_models.silver__outbound_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MEMO", "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__outbound_events_IN_TX.6b2f2fb6dc": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__outbound_events_IN_TX", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__outbound_events_IN_TX.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "unique_id": "test.maya_models.not_null_silver__outbound_events_IN_TX.6b2f2fb6dc", "fqn": ["maya_models", "silver", "not_null_silver__outbound_events_IN_TX"], "alias": "outbound_events_IN_TX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.390962, "relation_name": "MAYA.not_null_silver.outbound_events_IN_TX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__outbound_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "IN_TX", "file_key_name": "models.silver__outbound_events", "attached_node": "model.maya_models.silver__outbound_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IN_TX", "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__outbound_events_BLOCK_TIMESTAMP.95d579ffd3": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__outbound_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__outbound_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "unique_id": "test.maya_models.not_null_silver__outbound_events_BLOCK_TIMESTAMP.95d579ffd3", "fqn": ["maya_models", "silver", "not_null_silver__outbound_events_BLOCK_TIMESTAMP"], "alias": "outbound_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.391859, "relation_name": "MAYA.not_null_silver.outbound_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__outbound_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__outbound_events", "attached_node": "model.maya_models.silver__outbound_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__outbound_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__IN_TX__BLOCK_TIMESTAMP__EVENT_ID.4205fd70e7": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__outbound_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__IN_TX__BLOCK_TIMESTAMP__EVENT_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_f771b1bbd82c97df42bd859f3238a5b3.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__outbound_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__IN_TX__BLOCK_TIMESTAMP__EVENT_ID.4205fd70e7", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__outbound_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__IN_TX__BLOCK_TIMESTAMP__EVENT_ID"], "alias": "outbound_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f771b1bbd82c97df42bd859f3238a5b3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_f771b1bbd82c97df42bd859f3238a5b3"}, "created_at": 1741278782.392718, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.outbound_events_TX_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f771b1bbd82c97df42bd859f3238a5b3\") }}", "language": "sql", "refs": [{"name": "silver__outbound_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__outbound_events", "attached_node": "model.maya_models.silver__outbound_events", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "BLOCKCHAIN", "FROM_ADDRESS", "TO_ADDRESS", "ASSET", "MEMO", "IN_TX", "BLOCK_TIMESTAMP", "EVENT_ID"], "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__daily_tvl_DAY.b4b5f55703": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_tvl_DAY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_tvl_DAY.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "unique_id": "test.maya_models.not_null_silver__daily_tvl_DAY.b4b5f55703", "fqn": ["maya_models", "silver", "not_null_silver__daily_tvl_DAY"], "alias": "daily_tvl_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.396402, "relation_name": "MAYA.not_null_silver.daily_tvl_DAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_tvl", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_tvl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.silver__daily_tvl", "attached_node": "model.maya_models.silver__daily_tvl", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": null}}, "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_tvl_DAY__day__2.852820090f": {"database": "MAYA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_tvl_DAY__day__2", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_row_va_8ee837217a4f4abd19465291e18bfbb1.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "unique_id": "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_tvl_DAY__day__2.852820090f", "fqn": ["maya_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_tvl_DAY__day__2"], "alias": "daily_tvl_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_8ee837217a4f4abd19465291e18bfbb1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_8ee837217a4f4abd19465291e18bfbb1"}, "created_at": 1741278782.3972049, "relation_name": "MAYA.dbt_expectations_expect_row_values_to_have_recent_data_silver.daily_tvl_DAY", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_8ee837217a4f4abd19465291e18bfbb1\") }}", "language": "sql", "refs": [{"name": "silver__daily_tvl", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__daily_tvl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.silver__daily_tvl", "attached_node": "model.maya_models.silver__daily_tvl", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED.681d912d91": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_tvl_TOTAL_VALUE_POOLED", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_tvl_TOTAL_VALUE_POOLED.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "unique_id": "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED.681d912d91", "fqn": ["maya_models", "silver", "not_null_silver__daily_tvl_TOTAL_VALUE_POOLED"], "alias": "daily_tvl_TOTAL_VALUE_POOLED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.4005382, "relation_name": "MAYA.not_null_silver.daily_tvl_TOTAL_VALUE_POOLED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_tvl", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_tvl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_VALUE_POOLED", "file_key_name": "models.silver__daily_tvl", "attached_node": "model.maya_models.silver__daily_tvl", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_POOLED", "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD.87301e85c3": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "unique_id": "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD.87301e85c3", "fqn": ["maya_models", "silver", "not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD"], "alias": "daily_tvl_TOTAL_VALUE_POOLED_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.401574, "relation_name": "MAYA.not_null_silver.daily_tvl_TOTAL_VALUE_POOLED_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_tvl", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_tvl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_VALUE_POOLED_USD", "file_key_name": "models.silver__daily_tvl", "attached_node": "model.maya_models.silver__daily_tvl", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_POOLED_USD", "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED.0fa0211531": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_tvl_TOTAL_VALUE_BONDED", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_tvl_TOTAL_VALUE_BONDED.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "unique_id": "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED.0fa0211531", "fqn": ["maya_models", "silver", "not_null_silver__daily_tvl_TOTAL_VALUE_BONDED"], "alias": "daily_tvl_TOTAL_VALUE_BONDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.402389, "relation_name": "MAYA.not_null_silver.daily_tvl_TOTAL_VALUE_BONDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_tvl", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_tvl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_VALUE_BONDED", "file_key_name": "models.silver__daily_tvl", "attached_node": "model.maya_models.silver__daily_tvl", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_BONDED", "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD.6132803dfb": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "unique_id": "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD.6132803dfb", "fqn": ["maya_models", "silver", "not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD"], "alias": "daily_tvl_TOTAL_VALUE_BONDED_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.4032562, "relation_name": "MAYA.not_null_silver.daily_tvl_TOTAL_VALUE_BONDED_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_tvl", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_tvl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_VALUE_BONDED_USD", "file_key_name": "models.silver__daily_tvl", "attached_node": "model.maya_models.silver__daily_tvl", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_BONDED_USD", "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED.8b27efa4f5": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "unique_id": "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED.8b27efa4f5", "fqn": ["maya_models", "silver", "not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED"], "alias": "daily_tvl_TOTAL_VALUE_LOCKED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.4041119, "relation_name": "MAYA.not_null_silver.daily_tvl_TOTAL_VALUE_LOCKED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_tvl", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_tvl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_VALUE_LOCKED", "file_key_name": "models.silver__daily_tvl", "attached_node": "model.maya_models.silver__daily_tvl", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_LOCKED", "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD.14a3029246": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "unique_id": "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD.14a3029246", "fqn": ["maya_models", "silver", "not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD"], "alias": "daily_tvl_TOTAL_VALUE_LOCKED_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.4048882, "relation_name": "MAYA.not_null_silver.daily_tvl_TOTAL_VALUE_LOCKED_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_tvl", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_tvl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_VALUE_LOCKED_USD", "file_key_name": "models.silver__daily_tvl", "attached_node": "model.maya_models.silver__daily_tvl", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_LOCKED_USD", "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY.dc405aa093": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY.dc405aa093", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY"], "alias": "daily_tvl_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.4057732, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.daily_tvl_DAY", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_tvl", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__daily_tvl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__daily_tvl", "attached_node": "model.maya_models.silver__daily_tvl", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["DAY"], "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__daily_earnings_DAY.507c4965f2": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_earnings_DAY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_earnings_DAY.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "unique_id": "test.maya_models.not_null_silver__daily_earnings_DAY.507c4965f2", "fqn": ["maya_models", "silver", "not_null_silver__daily_earnings_DAY"], "alias": "daily_earnings_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.437984, "relation_name": "MAYA.not_null_silver.daily_earnings_DAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.silver__daily_earnings", "attached_node": "model.maya_models.silver__daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_earnings_DAY__day__2.439dcce651": {"database": "MAYA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_earnings_DAY__day__2", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_row_va_0c9773625c5965b039fcb667faa0f1de.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "unique_id": "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_earnings_DAY__day__2.439dcce651", "fqn": ["maya_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_earnings_DAY__day__2"], "alias": "daily_earnings_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_0c9773625c5965b039fcb667faa0f1de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_0c9773625c5965b039fcb667faa0f1de"}, "created_at": 1741278782.440039, "relation_name": "MAYA.dbt_expectations_expect_row_values_to_have_recent_data_silver.daily_earnings_DAY", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_0c9773625c5965b039fcb667faa0f1de\") }}", "language": "sql", "refs": [{"name": "silver__daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.silver__daily_earnings", "attached_node": "model.maya_models.silver__daily_earnings", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.not_null_silver__daily_earnings_LIQUIDITY_FEES.f7387c05a8": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_earnings_LIQUIDITY_FEES", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_earnings_LIQUIDITY_FEES.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "unique_id": "test.maya_models.not_null_silver__daily_earnings_LIQUIDITY_FEES.f7387c05a8", "fqn": ["maya_models", "silver", "not_null_silver__daily_earnings_LIQUIDITY_FEES"], "alias": "daily_earnings_LIQUIDITY_FEES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.447207, "relation_name": "MAYA.not_null_silver.daily_earnings_LIQUIDITY_FEES", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQUIDITY_FEES", "file_key_name": "models.silver__daily_earnings", "attached_node": "model.maya_models.silver__daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_FEES", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_earnings_LIQUIDITY_FEES_USD.cab6f63899": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_earnings_LIQUIDITY_FEES_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_earnings_LIQUIDITY_FEES_USD.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "unique_id": "test.maya_models.not_null_silver__daily_earnings_LIQUIDITY_FEES_USD.cab6f63899", "fqn": ["maya_models", "silver", "not_null_silver__daily_earnings_LIQUIDITY_FEES_USD"], "alias": "daily_earnings_LIQUIDITY_FEES_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.452128, "relation_name": "MAYA.not_null_silver.daily_earnings_LIQUIDITY_FEES_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQUIDITY_FEES_USD", "file_key_name": "models.silver__daily_earnings", "attached_node": "model.maya_models.silver__daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_FEES_USD", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_earnings_BLOCK_REWARDS.425ab37b25": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_earnings_BLOCK_REWARDS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_earnings_BLOCK_REWARDS.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "unique_id": "test.maya_models.not_null_silver__daily_earnings_BLOCK_REWARDS.425ab37b25", "fqn": ["maya_models", "silver", "not_null_silver__daily_earnings_BLOCK_REWARDS"], "alias": "daily_earnings_BLOCK_REWARDS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.453174, "relation_name": "MAYA.not_null_silver.daily_earnings_BLOCK_REWARDS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_REWARDS", "file_key_name": "models.silver__daily_earnings", "attached_node": "model.maya_models.silver__daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_REWARDS", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_earnings_BLOCK_REWARDS_USD.ea664e5f41": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_earnings_BLOCK_REWARDS_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_earnings_BLOCK_REWARDS_USD.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "unique_id": "test.maya_models.not_null_silver__daily_earnings_BLOCK_REWARDS_USD.ea664e5f41", "fqn": ["maya_models", "silver", "not_null_silver__daily_earnings_BLOCK_REWARDS_USD"], "alias": "daily_earnings_BLOCK_REWARDS_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.454676, "relation_name": "MAYA.not_null_silver.daily_earnings_BLOCK_REWARDS_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_REWARDS_USD", "file_key_name": "models.silver__daily_earnings", "attached_node": "model.maya_models.silver__daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_REWARDS_USD", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_earnings_TOTAL_EARNINGS.ccc7cfc3fb": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_earnings_TOTAL_EARNINGS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_earnings_TOTAL_EARNINGS.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "unique_id": "test.maya_models.not_null_silver__daily_earnings_TOTAL_EARNINGS.ccc7cfc3fb", "fqn": ["maya_models", "silver", "not_null_silver__daily_earnings_TOTAL_EARNINGS"], "alias": "daily_earnings_TOTAL_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.4580412, "relation_name": "MAYA.not_null_silver.daily_earnings_TOTAL_EARNINGS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_EARNINGS", "file_key_name": "models.silver__daily_earnings", "attached_node": "model.maya_models.silver__daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_EARNINGS", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_earnings_TOTAL_EARNINGS_USD.3fd52ad085": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_earnings_TOTAL_EARNINGS_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_earnings_TOTAL_EARNINGS_USD.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "unique_id": "test.maya_models.not_null_silver__daily_earnings_TOTAL_EARNINGS_USD.3fd52ad085", "fqn": ["maya_models", "silver", "not_null_silver__daily_earnings_TOTAL_EARNINGS_USD"], "alias": "daily_earnings_TOTAL_EARNINGS_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.460018, "relation_name": "MAYA.not_null_silver.daily_earnings_TOTAL_EARNINGS_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_EARNINGS_USD", "file_key_name": "models.silver__daily_earnings", "attached_node": "model.maya_models.silver__daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_EARNINGS_USD", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES.32ed3a19df": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_earnings_EARNINGS_TO_NODES", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_earnings_EARNINGS_TO_NODES.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "unique_id": "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES.32ed3a19df", "fqn": ["maya_models", "silver", "not_null_silver__daily_earnings_EARNINGS_TO_NODES"], "alias": "daily_earnings_EARNINGS_TO_NODES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.462595, "relation_name": "MAYA.not_null_silver.daily_earnings_EARNINGS_TO_NODES", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EARNINGS_TO_NODES", "file_key_name": "models.silver__daily_earnings", "attached_node": "model.maya_models.silver__daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS_TO_NODES", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD.4cb99a589c": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "unique_id": "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD.4cb99a589c", "fqn": ["maya_models", "silver", "not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD"], "alias": "daily_earnings_EARNINGS_TO_NODES_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.464878, "relation_name": "MAYA.not_null_silver.daily_earnings_EARNINGS_TO_NODES_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EARNINGS_TO_NODES_USD", "file_key_name": "models.silver__daily_earnings", "attached_node": "model.maya_models.silver__daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS_TO_NODES_USD", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS.6073eca3d0": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_earnings_EARNINGS_TO_POOLS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_earnings_EARNINGS_TO_POOLS.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "unique_id": "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS.6073eca3d0", "fqn": ["maya_models", "silver", "not_null_silver__daily_earnings_EARNINGS_TO_POOLS"], "alias": "daily_earnings_EARNINGS_TO_POOLS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.46703, "relation_name": "MAYA.not_null_silver.daily_earnings_EARNINGS_TO_POOLS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EARNINGS_TO_POOLS", "file_key_name": "models.silver__daily_earnings", "attached_node": "model.maya_models.silver__daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS_TO_POOLS", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD.7172cf23ad": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "unique_id": "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD.7172cf23ad", "fqn": ["maya_models", "silver", "not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD"], "alias": "daily_earnings_EARNINGS_TO_POOLS_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.469785, "relation_name": "MAYA.not_null_silver.daily_earnings_EARNINGS_TO_POOLS_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EARNINGS_TO_POOLS_USD", "file_key_name": "models.silver__daily_earnings", "attached_node": "model.maya_models.silver__daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS_TO_POOLS_USD", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__daily_earnings_DAY.5ba256d244": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__daily_earnings_DAY", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_e8045d88eed8a3687f670e0696703bea.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__daily_earnings_DAY.5ba256d244", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__daily_earnings_DAY"], "alias": "daily_earnings_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e8045d88eed8a3687f670e0696703bea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_e8045d88eed8a3687f670e0696703bea"}, "created_at": 1741278782.474056, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.daily_earnings_DAY", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e8045d88eed8a3687f670e0696703bea\") }}", "language": "sql", "refs": [{"name": "silver__daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__daily_earnings", "attached_node": "model.maya_models.silver__daily_earnings", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["DAY"], "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__daily_pool_stats_DAY.1fc2ebda22": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_DAY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_DAY.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_DAY.1fc2ebda22", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_DAY"], "alias": "daily_pool_stats_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.4937139, "relation_name": "MAYA.not_null_silver.daily_pool_stats_DAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_pool_stats_DAY__day__2.57bf32999f": {"database": "MAYA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_pool_stats_DAY__day__2", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_row_va_6c705fa79dc4fe15c32ca3f65d72c6d2.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_pool_stats_DAY__day__2.57bf32999f", "fqn": ["maya_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_pool_stats_DAY__day__2"], "alias": "daily_pool_stats_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_6c705fa79dc4fe15c32ca3f65d72c6d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_6c705fa79dc4fe15c32ca3f65d72c6d2"}, "created_at": 1741278782.4947321, "relation_name": "MAYA.dbt_expectations_expect_row_values_to_have_recent_data_silver.daily_pool_stats_DAY", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_6c705fa79dc4fe15c32ca3f65d72c6d2\") }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.not_null_silver__daily_pool_stats_POOL_NAME.65d2c5c182": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_POOL_NAME.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_POOL_NAME.65d2c5c182", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_POOL_NAME"], "alias": "daily_pool_stats_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.49885, "relation_name": "MAYA.not_null_silver.daily_pool_stats_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS.e8287959c7": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_SYSTEM_REWARDS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_SYSTEM_REWARDS.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS.e8287959c7", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_SYSTEM_REWARDS"], "alias": "daily_pool_stats_SYSTEM_REWARDS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.499807, "relation_name": "MAYA.not_null_silver.daily_pool_stats_SYSTEM_REWARDS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SYSTEM_REWARDS", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYSTEM_REWARDS", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD.03e77f1a19": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD.03e77f1a19", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD"], "alias": "daily_pool_stats_SYSTEM_REWARDS_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.50064, "relation_name": "MAYA.not_null_silver.daily_pool_stats_SYSTEM_REWARDS_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SYSTEM_REWARDS_USD", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYSTEM_REWARDS_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_ASSET_LIQUIDITY.c39639a01a": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_ASSET_LIQUIDITY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_ASSET_LIQUIDITY.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_ASSET_LIQUIDITY.c39639a01a", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_ASSET_LIQUIDITY"], "alias": "daily_pool_stats_ASSET_LIQUIDITY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.501554, "relation_name": "MAYA.not_null_silver.daily_pool_stats_ASSET_LIQUIDITY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_LIQUIDITY", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_LIQUIDITY", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_ASSET_PRICE.1404d1ca43": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_ASSET_PRICE", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_ASSET_PRICE.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_ASSET_PRICE.1404d1ca43", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_ASSET_PRICE"], "alias": "daily_pool_stats_ASSET_PRICE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.502387, "relation_name": "MAYA.not_null_silver.daily_pool_stats_ASSET_PRICE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_PRICE", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_PRICE", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_ASSET_PRICE_USD.43269ee26c": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_ASSET_PRICE_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_ASSET_PRICE_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_ASSET_PRICE_USD.43269ee26c", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_ASSET_PRICE_USD"], "alias": "daily_pool_stats_ASSET_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5032032, "relation_name": "MAYA.not_null_silver.daily_pool_stats_ASSET_PRICE_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_PRICE_USD", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_PRICE_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_cacao_LIQUIDITY.09de9215b3": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_cacao_LIQUIDITY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_cacao_LIQUIDITY.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_cacao_LIQUIDITY.09de9215b3", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_cacao_LIQUIDITY"], "alias": "daily_pool_stats_cacao_LIQUIDITY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.50442, "relation_name": "MAYA.not_null_silver.daily_pool_stats_cacao_LIQUIDITY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_LIQUIDITY", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_LIQUIDITY", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_cacao_PRICE.dbd669288c": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_cacao_PRICE", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_cacao_PRICE.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_cacao_PRICE.dbd669288c", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_cacao_PRICE"], "alias": "daily_pool_stats_cacao_PRICE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.505375, "relation_name": "MAYA.not_null_silver.daily_pool_stats_cacao_PRICE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_PRICE", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_PRICE", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_cacao_PRICE_USD.e340e04f34": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_cacao_PRICE_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_cacao_PRICE_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_cacao_PRICE_USD.e340e04f34", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_cacao_PRICE_USD"], "alias": "daily_pool_stats_cacao_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5064352, "relation_name": "MAYA.not_null_silver.daily_pool_stats_cacao_PRICE_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_PRICE_USD", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_PRICE_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT.8ad59930c0": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT.8ad59930c0", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT"], "alias": "daily_pool_stats_ADD_LIQUIDITY_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5077481, "relation_name": "MAYA.not_null_silver.daily_pool_stats_ADD_LIQUIDITY_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADD_LIQUIDITY_COUNT", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_LIQUIDITY_COUNT", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY.6894fa8392": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY.6894fa8392", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY"], "alias": "daily_pool_stats_ADD_ASSET_LIQUIDITY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.509117, "relation_name": "MAYA.not_null_silver.daily_pool_stats_ADD_ASSET_LIQUIDITY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADD_ASSET_LIQUIDITY", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_ASSET_LIQUIDITY", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD.2667955ead": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD.2667955ead", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD"], "alias": "daily_pool_stats_ADD_ASSET_LIQUIDITY_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.510026, "relation_name": "MAYA.not_null_silver.daily_pool_stats_ADD_ASSET_LIQUIDITY_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADD_ASSET_LIQUIDITY_USD", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_ASSET_LIQUIDITY_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_ADD_cacao_LIQUIDITY_USD.4061945e18": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_ADD_cacao_LIQUIDITY_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_ADD_cacao_LIQUIDITY_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_ADD_cacao_LIQUIDITY_USD.4061945e18", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_ADD_cacao_LIQUIDITY_USD"], "alias": "daily_pool_stats_ADD_cacao_LIQUIDITY_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.510846, "relation_name": "MAYA.not_null_silver.daily_pool_stats_ADD_cacao_LIQUIDITY_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADD_cacao_LIQUIDITY_USD", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_cacao_LIQUIDITY_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_COUNT.44ef41bdfd": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_WITHDRAW_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_WITHDRAW_COUNT.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_COUNT.44ef41bdfd", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_WITHDRAW_COUNT"], "alias": "daily_pool_stats_WITHDRAW_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5123498, "relation_name": "MAYA.not_null_silver.daily_pool_stats_WITHDRAW_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "WITHDRAW_COUNT", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_COUNT", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY.87edc02d31": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY.87edc02d31", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY"], "alias": "daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.513333, "relation_name": "MAYA.not_null_silver.daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "WITHDRAW_ASSET_LIQUIDITY", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_ASSET_LIQUIDITY", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD.fd07f09d47": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD.fd07f09d47", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD"], "alias": "daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5147939, "relation_name": "MAYA.not_null_silver.daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "WITHDRAW_ASSET_LIQUIDITY_USD", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_ASSET_LIQUIDITY_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_cacao_LIQUIDITY.71885f6e08": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_WITHDRAW_cacao_LIQUIDITY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_WITHDRAW_cacao_LIQUIDITY.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_cacao_LIQUIDITY.71885f6e08", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_WITHDRAW_cacao_LIQUIDITY"], "alias": "daily_pool_stats_WITHDRAW_cacao_LIQUIDITY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.515949, "relation_name": "MAYA.not_null_silver.daily_pool_stats_WITHDRAW_cacao_LIQUIDITY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "WITHDRAW_cacao_LIQUIDITY", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_cacao_LIQUIDITY", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_cacao_LIQUIDITY_USD.9816b8ad37": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_WITHDRAW_cacao_LIQUIDITY_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_WITHDRAW_cacao_LIQUIDITY_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_cacao_LIQUIDITY_USD.9816b8ad37", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_WITHDRAW_cacao_LIQUIDITY_USD"], "alias": "daily_pool_stats_WITHDRAW_cacao_LIQUIDITY_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.516917, "relation_name": "MAYA.not_null_silver.daily_pool_stats_WITHDRAW_cacao_LIQUIDITY_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "WITHDRAW_cacao_LIQUIDITY_USD", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_cacao_LIQUIDITY_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID.b751810329": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_IL_PROTECTION_PAID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_IL_PROTECTION_PAID.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID.b751810329", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_IL_PROTECTION_PAID"], "alias": "daily_pool_stats_IL_PROTECTION_PAID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.517747, "relation_name": "MAYA.not_null_silver.daily_pool_stats_IL_PROTECTION_PAID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "IL_PROTECTION_PAID", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IL_PROTECTION_PAID", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD.bd460521d5": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD.bd460521d5", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD"], "alias": "daily_pool_stats_IL_PROTECTION_PAID_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5185869, "relation_name": "MAYA.not_null_silver.daily_pool_stats_IL_PROTECTION_PAID_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "IL_PROTECTION_PAID_USD", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IL_PROTECTION_PAID_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_AVERAGE_SLIP.8d606cbfae": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_AVERAGE_SLIP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_AVERAGE_SLIP.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_AVERAGE_SLIP.8d606cbfae", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_AVERAGE_SLIP"], "alias": "daily_pool_stats_AVERAGE_SLIP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.519413, "relation_name": "MAYA.not_null_silver.daily_pool_stats_AVERAGE_SLIP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AVERAGE_SLIP", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVERAGE_SLIP", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP.cf8b4755a7": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP.cf8b4755a7", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP"], "alias": "daily_pool_stats_TO_ASSET_AVERAGE_SLIP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.520231, "relation_name": "MAYA.not_null_silver.daily_pool_stats_TO_ASSET_AVERAGE_SLIP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ASSET_AVERAGE_SLIP", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET_AVERAGE_SLIP", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_TO_cacao_AVERAGE_SLIP.70fc8fc61f": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_TO_cacao_AVERAGE_SLIP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_TO_cacao_AVERAGE_SLIP.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_TO_cacao_AVERAGE_SLIP.70fc8fc61f", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_TO_cacao_AVERAGE_SLIP"], "alias": "daily_pool_stats_TO_cacao_AVERAGE_SLIP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5211048, "relation_name": "MAYA.not_null_silver.daily_pool_stats_TO_cacao_AVERAGE_SLIP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_cacao_AVERAGE_SLIP", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_cacao_AVERAGE_SLIP", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_SWAP_COUNT.ed3ad68953": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_SWAP_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_SWAP_COUNT.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_SWAP_COUNT.ed3ad68953", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_SWAP_COUNT"], "alias": "daily_pool_stats_SWAP_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.521912, "relation_name": "MAYA.not_null_silver.daily_pool_stats_SWAP_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SWAP_COUNT", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_COUNT", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT.366a142cfd": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT.366a142cfd", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT"], "alias": "daily_pool_stats_TO_ASSET_SWAP_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.522701, "relation_name": "MAYA.not_null_silver.daily_pool_stats_TO_ASSET_SWAP_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ASSET_SWAP_COUNT", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET_SWAP_COUNT", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_TO_cacao_SWAP_COUNT.3ff1620fff": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_TO_cacao_SWAP_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_TO_cacao_SWAP_COUNT.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_TO_cacao_SWAP_COUNT.3ff1620fff", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_TO_cacao_SWAP_COUNT"], "alias": "daily_pool_stats_TO_cacao_SWAP_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.523485, "relation_name": "MAYA.not_null_silver.daily_pool_stats_TO_cacao_SWAP_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_cacao_SWAP_COUNT", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_cacao_SWAP_COUNT", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_cacao.5ebb701e40": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_SWAP_VOLUME_cacao", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_SWAP_VOLUME_cacao.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_cacao.5ebb701e40", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_SWAP_VOLUME_cacao"], "alias": "daily_pool_stats_SWAP_VOLUME_cacao", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.52429, "relation_name": "MAYA.not_null_silver.daily_pool_stats_SWAP_VOLUME_cacao", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SWAP_VOLUME_cacao", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_VOLUME_cacao", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_cacao_USD.95397f1143": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_SWAP_VOLUME_cacao_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_SWAP_VOLUME_cacao_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_cacao_USD.95397f1143", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_SWAP_VOLUME_cacao_USD"], "alias": "daily_pool_stats_SWAP_VOLUME_cacao_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.525652, "relation_name": "MAYA.not_null_silver.daily_pool_stats_SWAP_VOLUME_cacao_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SWAP_VOLUME_cacao_USD", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_VOLUME_cacao_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME.475255ccb5": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME.475255ccb5", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME"], "alias": "daily_pool_stats_TO_ASSET_SWAP_VOLUME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5265632, "relation_name": "MAYA.not_null_silver.daily_pool_stats_TO_ASSET_SWAP_VOLUME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ASSET_SWAP_VOLUME", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET_SWAP_VOLUME", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_TO_cacao_SWAP_VOLUME.edee77e991": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_TO_cacao_SWAP_VOLUME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_TO_cacao_SWAP_VOLUME.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_TO_cacao_SWAP_VOLUME.edee77e991", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_TO_cacao_SWAP_VOLUME"], "alias": "daily_pool_stats_TO_cacao_SWAP_VOLUME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.528521, "relation_name": "MAYA.not_null_silver.daily_pool_stats_TO_cacao_SWAP_VOLUME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_cacao_SWAP_VOLUME", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_cacao_SWAP_VOLUME", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_cacao.af0178ad49": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_cacao", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_cacao.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_cacao.af0178ad49", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_cacao"], "alias": "daily_pool_stats_TOTAL_SWAP_FEES_cacao", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.52944, "relation_name": "MAYA.not_null_silver.daily_pool_stats_TOTAL_SWAP_FEES_cacao", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_SWAP_FEES_cacao", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SWAP_FEES_cacao", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD.ef71577e45": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD.ef71577e45", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD"], "alias": "daily_pool_stats_TOTAL_SWAP_FEES_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.530279, "relation_name": "MAYA.not_null_silver.daily_pool_stats_TOTAL_SWAP_FEES_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_SWAP_FEES_USD", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SWAP_FEES_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES.e8298a5287": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES.e8298a5287", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES"], "alias": "daily_pool_stats_TOTAL_ASSET_SWAP_FEES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.53109, "relation_name": "MAYA.not_null_silver.daily_pool_stats_TOTAL_ASSET_SWAP_FEES", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_ASSET_SWAP_FEES", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_ASSET_SWAP_FEES", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_cacao_FEES.635f330f09": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_TOTAL_ASSET_cacao_FEES", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_TOTAL_ASSET_cacao_FEES.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_cacao_FEES.635f330f09", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_TOTAL_ASSET_cacao_FEES"], "alias": "daily_pool_stats_TOTAL_ASSET_cacao_FEES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.531895, "relation_name": "MAYA.not_null_silver.daily_pool_stats_TOTAL_ASSET_cacao_FEES", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_ASSET_cacao_FEES", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_ASSET_cacao_FEES", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT.c70ad54d24": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT.c70ad54d24", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT"], "alias": "daily_pool_stats_UNIQUE_MEMBER_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.532693, "relation_name": "MAYA.not_null_silver.daily_pool_stats_UNIQUE_MEMBER_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "UNIQUE_MEMBER_COUNT", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNIQUE_MEMBER_COUNT", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT.38ba7212c2": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT.38ba7212c2", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT"], "alias": "daily_pool_stats_UNIQUE_SWAPPER_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.533658, "relation_name": "MAYA.not_null_silver.daily_pool_stats_UNIQUE_SWAPPER_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "UNIQUE_SWAPPER_COUNT", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNIQUE_SWAPPER_COUNT", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__daily_pool_stats_LIQUIDITY_UNITS.71283b6ef9": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__daily_pool_stats_LIQUIDITY_UNITS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__daily_pool_stats_LIQUIDITY_UNITS.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_silver__daily_pool_stats_LIQUIDITY_UNITS.71283b6ef9", "fqn": ["maya_models", "silver", "not_null_silver__daily_pool_stats_LIQUIDITY_UNITS"], "alias": "daily_pool_stats_LIQUIDITY_UNITS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.534453, "relation_name": "MAYA.not_null_silver.daily_pool_stats_LIQUIDITY_UNITS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQUIDITY_UNITS", "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_UNITS", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__daily_pool_stats_DAY__POOL_NAME.66912a355d": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__daily_pool_stats_DAY__POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_ee3b3af325930b4c028f7dbbf999646b.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__daily_pool_stats_DAY__POOL_NAME.66912a355d", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__daily_pool_stats_DAY__POOL_NAME"], "alias": "daily_pool_stats_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ee3b3af325930b4c028f7dbbf999646b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_ee3b3af325930b4c028f7dbbf999646b"}, "created_at": 1741278782.5352561, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.daily_pool_stats_DAY", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ee3b3af325930b4c028f7dbbf999646b\") }}", "language": "sql", "refs": [{"name": "silver__daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__daily_pool_stats", "attached_node": "model.maya_models.silver__daily_pool_stats", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["DAY", "POOL_NAME"], "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__failed_deposit_messages_AMOUNT_E8.9331d6135c": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__failed_deposit_messages_AMOUNT_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__failed_deposit_messages_AMOUNT_E8.sql", "original_file_path": "models/silver/silver__failed_deposit_messages.yml", "unique_id": "test.maya_models.not_null_silver__failed_deposit_messages_AMOUNT_E8.9331d6135c", "fqn": ["maya_models", "silver", "not_null_silver__failed_deposit_messages_AMOUNT_E8"], "alias": "failed_deposit_messages_AMOUNT_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.539066, "relation_name": "MAYA.not_null_silver.failed_deposit_messages_AMOUNT_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__failed_deposit_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_E8", "file_key_name": "models.silver__failed_deposit_messages", "attached_node": "model.maya_models.silver__failed_deposit_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_E8", "model": "{{ get_where_subquery(ref('silver__failed_deposit_messages')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__failed_deposit_messages_ASSET.1b88575223": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__failed_deposit_messages_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__failed_deposit_messages_ASSET.sql", "original_file_path": "models/silver/silver__failed_deposit_messages.yml", "unique_id": "test.maya_models.not_null_silver__failed_deposit_messages_ASSET.1b88575223", "fqn": ["maya_models", "silver", "not_null_silver__failed_deposit_messages_ASSET"], "alias": "failed_deposit_messages_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.54062, "relation_name": "MAYA.not_null_silver.failed_deposit_messages_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__failed_deposit_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET", "file_key_name": "models.silver__failed_deposit_messages", "attached_node": "model.maya_models.silver__failed_deposit_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__failed_deposit_messages')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__failed_deposit_messages_FROM_ADDRESS.f300bfa3ee": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__failed_deposit_messages_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__failed_deposit_messages_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__failed_deposit_messages.yml", "unique_id": "test.maya_models.not_null_silver__failed_deposit_messages_FROM_ADDRESS.f300bfa3ee", "fqn": ["maya_models", "silver", "not_null_silver__failed_deposit_messages_FROM_ADDRESS"], "alias": "failed_deposit_messages_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.542913, "relation_name": "MAYA.not_null_silver.failed_deposit_messages_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__failed_deposit_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__failed_deposit_messages", "attached_node": "model.maya_models.silver__failed_deposit_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__failed_deposit_messages')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__failed_deposit_messages_TX_ID.96bf8221ba": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__failed_deposit_messages_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__failed_deposit_messages_TX_ID.sql", "original_file_path": "models/silver/silver__failed_deposit_messages.yml", "unique_id": "test.maya_models.not_null_silver__failed_deposit_messages_TX_ID.96bf8221ba", "fqn": ["maya_models", "silver", "not_null_silver__failed_deposit_messages_TX_ID"], "alias": "failed_deposit_messages_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.54413, "relation_name": "MAYA.not_null_silver.failed_deposit_messages_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__failed_deposit_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__failed_deposit_messages", "attached_node": "model.maya_models.silver__failed_deposit_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__failed_deposit_messages')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__failed_deposit_messages_EVENT_ID.8c685c70e8": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__failed_deposit_messages_EVENT_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__failed_deposit_messages_EVENT_ID.sql", "original_file_path": "models/silver/silver__failed_deposit_messages.yml", "unique_id": "test.maya_models.not_null_silver__failed_deposit_messages_EVENT_ID.8c685c70e8", "fqn": ["maya_models", "silver", "not_null_silver__failed_deposit_messages_EVENT_ID"], "alias": "failed_deposit_messages_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5451221, "relation_name": "MAYA.not_null_silver.failed_deposit_messages_EVENT_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__failed_deposit_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EVENT_ID", "file_key_name": "models.silver__failed_deposit_messages", "attached_node": "model.maya_models.silver__failed_deposit_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_ID", "model": "{{ get_where_subquery(ref('silver__failed_deposit_messages')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__failed_deposit_messages_BLOCK_TIMESTAMP.68750ec9c1": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__failed_deposit_messages_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__failed_deposit_messages_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__failed_deposit_messages.yml", "unique_id": "test.maya_models.not_null_silver__failed_deposit_messages_BLOCK_TIMESTAMP.68750ec9c1", "fqn": ["maya_models", "silver", "not_null_silver__failed_deposit_messages_BLOCK_TIMESTAMP"], "alias": "failed_deposit_messages_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5460851, "relation_name": "MAYA.not_null_silver.failed_deposit_messages_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__failed_deposit_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__failed_deposit_messages", "attached_node": "model.maya_models.silver__failed_deposit_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__failed_deposit_messages')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__failed_deposit_messages_EVENT_ID.f82d89db78": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__failed_deposit_messages_EVENT_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_352079585c82cc108efa9c5a606ca317.sql", "original_file_path": "models/silver/silver__failed_deposit_messages.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__failed_deposit_messages_EVENT_ID.f82d89db78", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__failed_deposit_messages_EVENT_ID"], "alias": "failed_deposit_messages_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_352079585c82cc108efa9c5a606ca317", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_352079585c82cc108efa9c5a606ca317"}, "created_at": 1741278782.546976, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.failed_deposit_messages_EVENT_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_352079585c82cc108efa9c5a606ca317\") }}", "language": "sql", "refs": [{"name": "silver__failed_deposit_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__failed_deposit_messages", "attached_node": "model.maya_models.silver__failed_deposit_messages", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["EVENT_ID"], "model": "{{ get_where_subquery(ref('silver__failed_deposit_messages')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__withdraw_events_TX_ID.b23e83e2df": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__withdraw_events_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__withdraw_events_TX_ID.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.not_null_silver__withdraw_events_TX_ID.b23e83e2df", "fqn": ["maya_models", "silver", "not_null_silver__withdraw_events_TX_ID"], "alias": "withdraw_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.552591, "relation_name": "MAYA.not_null_silver.withdraw_events_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__withdraw_events_BLOCKCHAIN.2a184325c3": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__withdraw_events_BLOCKCHAIN", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__withdraw_events_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.not_null_silver__withdraw_events_BLOCKCHAIN.2a184325c3", "fqn": ["maya_models", "silver", "not_null_silver__withdraw_events_BLOCKCHAIN"], "alias": "withdraw_events_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.553478, "relation_name": "MAYA.not_null_silver.withdraw_events_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__withdraw_events_FROM_ADDRESS.221980d7cb": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__withdraw_events_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__withdraw_events_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.not_null_silver__withdraw_events_FROM_ADDRESS.221980d7cb", "fqn": ["maya_models", "silver", "not_null_silver__withdraw_events_FROM_ADDRESS"], "alias": "withdraw_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.554291, "relation_name": "MAYA.not_null_silver.withdraw_events_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__withdraw_events_TO_ADDRESS.7500c7f147": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__withdraw_events_TO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__withdraw_events_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.not_null_silver__withdraw_events_TO_ADDRESS.7500c7f147", "fqn": ["maya_models", "silver", "not_null_silver__withdraw_events_TO_ADDRESS"], "alias": "withdraw_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5551848, "relation_name": "MAYA.not_null_silver.withdraw_events_TO_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ADDRESS", "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__withdraw_events_ASSET.ea07249536": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__withdraw_events_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__withdraw_events_ASSET.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.not_null_silver__withdraw_events_ASSET.ea07249536", "fqn": ["maya_models", "silver", "not_null_silver__withdraw_events_ASSET"], "alias": "withdraw_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5560079, "relation_name": "MAYA.not_null_silver.withdraw_events_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET", "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__withdraw_events_ASSET_E8.faae5c4b97": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__withdraw_events_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__withdraw_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.not_null_silver__withdraw_events_ASSET_E8.faae5c4b97", "fqn": ["maya_models", "silver", "not_null_silver__withdraw_events_ASSET_E8"], "alias": "withdraw_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5567858, "relation_name": "MAYA.not_null_silver.withdraw_events_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__withdraw_events_EMIT_ASSET_E8.dc3f62c561": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__withdraw_events_EMIT_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__withdraw_events_EMIT_ASSET_E8.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.not_null_silver__withdraw_events_EMIT_ASSET_E8.dc3f62c561", "fqn": ["maya_models", "silver", "not_null_silver__withdraw_events_EMIT_ASSET_E8"], "alias": "withdraw_events_EMIT_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5577521, "relation_name": "MAYA.not_null_silver.withdraw_events_EMIT_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EMIT_ASSET_E8", "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EMIT_ASSET_E8", "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__withdraw_events_EMIT_cacao_E8.7f717e247c": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__withdraw_events_EMIT_cacao_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__withdraw_events_EMIT_cacao_E8.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.not_null_silver__withdraw_events_EMIT_cacao_E8.7f717e247c", "fqn": ["maya_models", "silver", "not_null_silver__withdraw_events_EMIT_cacao_E8"], "alias": "withdraw_events_EMIT_cacao_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5585651, "relation_name": "MAYA.not_null_silver.withdraw_events_EMIT_cacao_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EMIT_cacao_E8", "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EMIT_cacao_E8", "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__withdraw_events_MEMO.0237304635": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__withdraw_events_MEMO", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__withdraw_events_MEMO.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.not_null_silver__withdraw_events_MEMO.0237304635", "fqn": ["maya_models", "silver", "not_null_silver__withdraw_events_MEMO"], "alias": "withdraw_events_MEMO", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.559356, "relation_name": "MAYA.not_null_silver.withdraw_events_MEMO", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MEMO", "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MEMO", "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__withdraw_events_POOL_NAME.f200904b8c": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__withdraw_events_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__withdraw_events_POOL_NAME.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.not_null_silver__withdraw_events_POOL_NAME.f200904b8c", "fqn": ["maya_models", "silver", "not_null_silver__withdraw_events_POOL_NAME"], "alias": "withdraw_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.560128, "relation_name": "MAYA.not_null_silver.withdraw_events_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__withdraw_events_STAKE_UNITS.602d35eb7a": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__withdraw_events_STAKE_UNITS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__withdraw_events_STAKE_UNITS.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.not_null_silver__withdraw_events_STAKE_UNITS.602d35eb7a", "fqn": ["maya_models", "silver", "not_null_silver__withdraw_events_STAKE_UNITS"], "alias": "withdraw_events_STAKE_UNITS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.561193, "relation_name": "MAYA.not_null_silver.withdraw_events_STAKE_UNITS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STAKE_UNITS", "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STAKE_UNITS", "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__withdraw_events_BASIS_POINTS.a18baacaeb": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__withdraw_events_BASIS_POINTS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__withdraw_events_BASIS_POINTS.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.not_null_silver__withdraw_events_BASIS_POINTS.a18baacaeb", "fqn": ["maya_models", "silver", "not_null_silver__withdraw_events_BASIS_POINTS"], "alias": "withdraw_events_BASIS_POINTS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.56205, "relation_name": "MAYA.not_null_silver.withdraw_events_BASIS_POINTS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BASIS_POINTS", "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BASIS_POINTS", "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__withdraw_events_ASYMMETRY.5e0af14a3f": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__withdraw_events_ASYMMETRY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__withdraw_events_ASYMMETRY.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.not_null_silver__withdraw_events_ASYMMETRY.5e0af14a3f", "fqn": ["maya_models", "silver", "not_null_silver__withdraw_events_ASYMMETRY"], "alias": "withdraw_events_ASYMMETRY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.562829, "relation_name": "MAYA.not_null_silver.withdraw_events_ASYMMETRY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASYMMETRY", "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASYMMETRY", "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__withdraw_events_IMP_LOSS_PROTECTION_E8.3f9dd7135b": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__withdraw_events_IMP_LOSS_PROTECTION_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__withdraw_events_IMP_LOSS_PROTECTION_E8.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.not_null_silver__withdraw_events_IMP_LOSS_PROTECTION_E8.3f9dd7135b", "fqn": ["maya_models", "silver", "not_null_silver__withdraw_events_IMP_LOSS_PROTECTION_E8"], "alias": "withdraw_events_IMP_LOSS_PROTECTION_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.563784, "relation_name": "MAYA.not_null_silver.withdraw_events_IMP_LOSS_PROTECTION_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "IMP_LOSS_PROTECTION_E8", "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMP_LOSS_PROTECTION_E8", "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__withdraw_events__EMIT_ASSET_IN_cacao_E8.02d525bd2d": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__withdraw_events__EMIT_ASSET_IN_cacao_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__withdraw_events__EMIT_ASSET_IN_cacao_E8.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.not_null_silver__withdraw_events__EMIT_ASSET_IN_cacao_E8.02d525bd2d", "fqn": ["maya_models", "silver", "not_null_silver__withdraw_events__EMIT_ASSET_IN_cacao_E8"], "alias": "withdraw_events", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.564606, "relation_name": "MAYA.not_null_silver.withdraw_events", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "_EMIT_ASSET_IN_cacao_E8", "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_EMIT_ASSET_IN_cacao_E8", "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__withdraw_events_BLOCK_TIMESTAMP.7a02200069": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__withdraw_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__withdraw_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.not_null_silver__withdraw_events_BLOCK_TIMESTAMP.7a02200069", "fqn": ["maya_models", "silver", "not_null_silver__withdraw_events_BLOCK_TIMESTAMP"], "alias": "withdraw_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5656729, "relation_name": "MAYA.not_null_silver.withdraw_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__withdraw_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__POOL_NAME__BLOCK_TIMESTAMP__EVENT_ID.0ddc8ceed7": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__withdraw_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__POOL_NAME__BLOCK_TIMESTAMP__EVENT_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_a82d54643ca47eb10e63352654367f30.sql", "original_file_path": "models/silver/silver__withdraw_events.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__withdraw_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__POOL_NAME__BLOCK_TIMESTAMP__EVENT_ID.0ddc8ceed7", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__withdraw_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__POOL_NAME__BLOCK_TIMESTAMP__EVENT_ID"], "alias": "withdraw_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a82d54643ca47eb10e63352654367f30", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_a82d54643ca47eb10e63352654367f30"}, "created_at": 1741278782.56663, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.withdraw_events_TX_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a82d54643ca47eb10e63352654367f30\") }}", "language": "sql", "refs": [{"name": "silver__withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__withdraw_events", "attached_node": "model.maya_models.silver__withdraw_events", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "BLOCKCHAIN", "FROM_ADDRESS", "TO_ADDRESS", "ASSET", "MEMO", "POOL_NAME", "BLOCK_TIMESTAMP", "EVENT_ID"], "model": "{{ get_where_subquery(ref('silver__withdraw_events')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__transfers_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.maya_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "fqn": ["maya_models", "silver", "not_null_silver__transfers_BLOCK_TIMESTAMP"], "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.571569, "relation_name": "MAYA.not_null_silver.transfers_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers", "attached_node": "model.maya_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__transfers_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__transfers_BLOCK_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.maya_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c", "fqn": ["maya_models", "silver", "not_null_silver__transfers_BLOCK_ID"], "alias": "transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5731132, "relation_name": "MAYA.not_null_silver.transfers_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.silver__transfers", "attached_node": "model.maya_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__transfers_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__transfers_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.maya_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c", "fqn": ["maya_models", "silver", "not_null_silver__transfers_FROM_ADDRESS"], "alias": "transfers_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.574432, "relation_name": "MAYA.not_null_silver.transfers_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transfers", "attached_node": "model.maya_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__transfers_TO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__transfers_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.maya_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c", "fqn": ["maya_models", "silver", "not_null_silver__transfers_TO_ADDRESS"], "alias": "transfers_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.576104, "relation_name": "MAYA.not_null_silver.transfers_TO_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ADDRESS", "file_key_name": "models.silver__transfers", "attached_node": "model.maya_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__transfers_cacao_AMOUNT.fc29e27e26": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__transfers_cacao_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__transfers_cacao_AMOUNT.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.maya_models.not_null_silver__transfers_cacao_AMOUNT.fc29e27e26", "fqn": ["maya_models", "silver", "not_null_silver__transfers_cacao_AMOUNT"], "alias": "transfers_cacao_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.57703, "relation_name": "MAYA.not_null_silver.transfers_cacao_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_AMOUNT", "file_key_name": "models.silver__transfers", "attached_node": "model.maya_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_AMOUNT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__transfers_cacao_AMOUNT_USD.518cddefe8": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__transfers_cacao_AMOUNT_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__transfers_cacao_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__transfers.yml", "unique_id": "test.maya_models.not_null_silver__transfers_cacao_AMOUNT_USD.518cddefe8", "fqn": ["maya_models", "silver", "not_null_silver__transfers_cacao_AMOUNT_USD"], "alias": "transfers_cacao_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "BLOCK_TIMESTAMP <= SYSDATE() - interval '2 day'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP <= SYSDATE() - interval '2 day'"}, "created_at": 1741278782.578399, "relation_name": "MAYA.not_null_silver.transfers_cacao_AMOUNT_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP <= SYSDATE() - interval '2 day'\") }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_AMOUNT_USD", "file_key_name": "models.silver__transfers", "attached_node": "model.maya_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__block_pool_depths_BLOCK_TIMESTAMP.d45c965914": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__block_pool_depths_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__block_pool_depths_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__block_pool_depths.yml", "unique_id": "test.maya_models.not_null_silver__block_pool_depths_BLOCK_TIMESTAMP.d45c965914", "fqn": ["maya_models", "silver", "not_null_silver__block_pool_depths_BLOCK_TIMESTAMP"], "alias": "block_pool_depths_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5810401, "relation_name": "MAYA.not_null_silver.block_pool_depths_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__block_pool_depths", "attached_node": "model.maya_models.silver__block_pool_depths", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__block_pool_depths')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__block_pool_depths_POOL_NAME.6b5899c602": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__block_pool_depths_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__block_pool_depths_POOL_NAME.sql", "original_file_path": "models/silver/silver__block_pool_depths.yml", "unique_id": "test.maya_models.not_null_silver__block_pool_depths_POOL_NAME.6b5899c602", "fqn": ["maya_models", "silver", "not_null_silver__block_pool_depths_POOL_NAME"], "alias": "block_pool_depths_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.582121, "relation_name": "MAYA.not_null_silver.block_pool_depths_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.silver__block_pool_depths", "attached_node": "model.maya_models.silver__block_pool_depths", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__block_pool_depths')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__block_pool_depths_ASSET_E8.aacfa8eedf": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__block_pool_depths_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__block_pool_depths_ASSET_E8.sql", "original_file_path": "models/silver/silver__block_pool_depths.yml", "unique_id": "test.maya_models.not_null_silver__block_pool_depths_ASSET_E8.aacfa8eedf", "fqn": ["maya_models", "silver", "not_null_silver__block_pool_depths_ASSET_E8"], "alias": "block_pool_depths_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.5829551, "relation_name": "MAYA.not_null_silver.block_pool_depths_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.silver__block_pool_depths", "attached_node": "model.maya_models.silver__block_pool_depths", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__block_pool_depths')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__block_pool_depths_CACAO_E8.6ea6c27fb2": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__block_pool_depths_CACAO_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__block_pool_depths_CACAO_E8.sql", "original_file_path": "models/silver/silver__block_pool_depths.yml", "unique_id": "test.maya_models.not_null_silver__block_pool_depths_CACAO_E8.6ea6c27fb2", "fqn": ["maya_models", "silver", "not_null_silver__block_pool_depths_CACAO_E8"], "alias": "block_pool_depths_CACAO_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.583767, "relation_name": "MAYA.not_null_silver.block_pool_depths_CACAO_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CACAO_E8", "file_key_name": "models.silver__block_pool_depths", "attached_node": "model.maya_models.silver__block_pool_depths", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CACAO_E8", "model": "{{ get_where_subquery(ref('silver__block_pool_depths')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__block_pool_depths_SYNTH_E8.4ac67d8c72": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__block_pool_depths_SYNTH_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__block_pool_depths_SYNTH_E8.sql", "original_file_path": "models/silver/silver__block_pool_depths.yml", "unique_id": "test.maya_models.not_null_silver__block_pool_depths_SYNTH_E8.4ac67d8c72", "fqn": ["maya_models", "silver", "not_null_silver__block_pool_depths_SYNTH_E8"], "alias": "block_pool_depths_SYNTH_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.584664, "relation_name": "MAYA.not_null_silver.block_pool_depths_SYNTH_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SYNTH_E8", "file_key_name": "models.silver__block_pool_depths", "attached_node": "model.maya_models.silver__block_pool_depths", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYNTH_E8", "model": "{{ get_where_subquery(ref('silver__block_pool_depths')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__block_pool_depths_BLOCK_TIMESTAMP__POOL_NAME.b5ab31baa3": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__block_pool_depths_BLOCK_TIMESTAMP__POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_54f5bb2fd4fc4fd0e38329cb8168a438.sql", "original_file_path": "models/silver/silver__block_pool_depths.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__block_pool_depths_BLOCK_TIMESTAMP__POOL_NAME.b5ab31baa3", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__block_pool_depths_BLOCK_TIMESTAMP__POOL_NAME"], "alias": "block_pool_depths_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_54f5bb2fd4fc4fd0e38329cb8168a438", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_54f5bb2fd4fc4fd0e38329cb8168a438"}, "created_at": 1741278782.585577, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.block_pool_depths_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_54f5bb2fd4fc4fd0e38329cb8168a438\") }}", "language": "sql", "refs": [{"name": "silver__block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__block_pool_depths", "attached_node": "model.maya_models.silver__block_pool_depths", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_TIMESTAMP", "POOL_NAME"], "model": "{{ get_where_subquery(ref('silver__block_pool_depths')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__pool_block_statistics_DAY.e1d1716d58": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_DAY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_DAY.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_DAY.e1d1716d58", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_DAY"], "alias": "pool_block_statistics_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.595158, "relation_name": "MAYA.not_null_silver.pool_block_statistics_DAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_statistics_DAY__day__2.56faaa8dbf": {"database": "MAYA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_statistics_DAY__day__2", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_row_va_05ad7318df74b22366e3240e33c643cd.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_statistics_DAY__day__2.56faaa8dbf", "fqn": ["maya_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_statistics_DAY__day__2"], "alias": "pool_block_statistics_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_05ad7318df74b22366e3240e33c643cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_05ad7318df74b22366e3240e33c643cd"}, "created_at": 1741278782.596145, "relation_name": "MAYA.dbt_expectations_expect_row_values_to_have_recent_data_silver.pool_block_statistics_DAY", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_05ad7318df74b22366e3240e33c643cd\") }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.not_null_silver__pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME.d13b4e223c": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_st_2b838ef8047e9a1025ffd36319907961.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME.d13b4e223c", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME"], "alias": "pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__pool_block_st_2b838ef8047e9a1025ffd36319907961", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "not_null_silver__pool_block_st_2b838ef8047e9a1025ffd36319907961"}, "created_at": 1741278782.59956, "relation_name": "MAYA.not_null_silver.pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__pool_block_st_2b838ef8047e9a1025ffd36319907961\") }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADD_ASSET_LIQUIDITY_VOLUME", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_ASSET_LIQUIDITY_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT.a6468ef5dd": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT.a6468ef5dd", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT"], "alias": "pool_block_statistics_ADD_LIQUIDITY_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.600587, "relation_name": "MAYA.not_null_silver.pool_block_statistics_ADD_LIQUIDITY_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADD_LIQUIDITY_COUNT", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_LIQUIDITY_COUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME.8c96da03e7": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME.8c96da03e7", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME"], "alias": "pool_block_statistics_ADD_LIQUIDITY_VOLUME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.602116, "relation_name": "MAYA.not_null_silver.pool_block_statistics_ADD_LIQUIDITY_VOLUME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADD_LIQUIDITY_VOLUME", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_LIQUIDITY_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_ADD_cacao_LIQUIDITY_VOLUME.d205951804": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_ADD_cacao_LIQUIDITY_VOLUME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_st_4a25fe18c3e7387d87e325e088812366.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_ADD_cacao_LIQUIDITY_VOLUME.d205951804", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_ADD_cacao_LIQUIDITY_VOLUME"], "alias": "pool_block_statistics_ADD_cacao_LIQUIDITY_VOLUME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__pool_block_st_4a25fe18c3e7387d87e325e088812366", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "not_null_silver__pool_block_st_4a25fe18c3e7387d87e325e088812366"}, "created_at": 1741278782.603623, "relation_name": "MAYA.not_null_silver.pool_block_statistics_ADD_cacao_LIQUIDITY_VOLUME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__pool_block_st_4a25fe18c3e7387d87e325e088812366\") }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADD_cacao_LIQUIDITY_VOLUME", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_cacao_LIQUIDITY_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_ASSET.e2a9d555b4": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_ASSET.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_ASSET.e2a9d555b4", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_ASSET"], "alias": "pool_block_statistics_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.6052852, "relation_name": "MAYA.not_null_silver.pool_block_statistics_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_ASSET_DEPTH.afecafb5a1": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_ASSET_DEPTH", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_ASSET_DEPTH.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_ASSET_DEPTH.afecafb5a1", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_ASSET_DEPTH"], "alias": "pool_block_statistics_ASSET_DEPTH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.60624, "relation_name": "MAYA.not_null_silver.pool_block_statistics_ASSET_DEPTH", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_DEPTH", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_DEPTH", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_ASSET_PRICE.13060f5529": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_ASSET_PRICE", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_ASSET_PRICE.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_ASSET_PRICE.13060f5529", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_ASSET_PRICE"], "alias": "pool_block_statistics_ASSET_PRICE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.6070778, "relation_name": "MAYA.not_null_silver.pool_block_statistics_ASSET_PRICE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_PRICE", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_PRICE", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_ASSET_PRICE_USD.d58add8c57": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_ASSET_PRICE_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_ASSET_PRICE_USD.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_ASSET_PRICE_USD.d58add8c57", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_ASSET_PRICE_USD"], "alias": "pool_block_statistics_ASSET_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.607908, "relation_name": "MAYA.not_null_silver.pool_block_statistics_ASSET_PRICE_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_PRICE_USD", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_PRICE_USD", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_AVERAGE_SLIP.0dd0338788": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_AVERAGE_SLIP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_AVERAGE_SLIP.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_AVERAGE_SLIP.0dd0338788", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_AVERAGE_SLIP"], "alias": "pool_block_statistics_AVERAGE_SLIP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.608717, "relation_name": "MAYA.not_null_silver.pool_block_statistics_AVERAGE_SLIP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AVERAGE_SLIP", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVERAGE_SLIP", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID.de64fea0f1": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_st_f7ba95fd4617615cf10ba227787756e8.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID.de64fea0f1", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID"], "alias": "pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__pool_block_st_f7ba95fd4617615cf10ba227787756e8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "not_null_silver__pool_block_st_f7ba95fd4617615cf10ba227787756e8"}, "created_at": 1741278782.6096199, "relation_name": "MAYA.not_null_silver.pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__pool_block_st_f7ba95fd4617615cf10ba227787756e8\") }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "IMPERMANENT_LOSS_PROTECTION_PAID", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMPERMANENT_LOSS_PROTECTION_PAID", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_cacao_DEPTH.e194b1e7f1": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_cacao_DEPTH", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_cacao_DEPTH.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_cacao_DEPTH.e194b1e7f1", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_cacao_DEPTH"], "alias": "pool_block_statistics_cacao_DEPTH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.610423, "relation_name": "MAYA.not_null_silver.pool_block_statistics_cacao_DEPTH", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_DEPTH", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_DEPTH", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_STATUS.12571911dc": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_STATUS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_STATUS.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_STATUS.12571911dc", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_STATUS"], "alias": "pool_block_statistics_STATUS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.6112, "relation_name": "MAYA.not_null_silver.pool_block_statistics_STATUS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STATUS", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATUS", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_SWAP_COUNT.d16cc64040": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_SWAP_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_SWAP_COUNT.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_SWAP_COUNT.d16cc64040", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_SWAP_COUNT"], "alias": "pool_block_statistics_SWAP_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.6119921, "relation_name": "MAYA.not_null_silver.pool_block_statistics_SWAP_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SWAP_COUNT", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_COUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_SWAP_VOLUME.4d59da2017": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_SWAP_VOLUME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_SWAP_VOLUME.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_SWAP_VOLUME.4d59da2017", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_SWAP_VOLUME"], "alias": "pool_block_statistics_SWAP_VOLUME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.612768, "relation_name": "MAYA.not_null_silver.pool_block_statistics_SWAP_VOLUME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SWAP_VOLUME", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP.616ea124ef": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP.616ea124ef", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP"], "alias": "pool_block_statistics_TO_ASSET_AVERAGE_SLIP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.613546, "relation_name": "MAYA.not_null_silver.pool_block_statistics_TO_ASSET_AVERAGE_SLIP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ASSET_AVERAGE_SLIP", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET_AVERAGE_SLIP", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_COUNT.686e56b6a2": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_TO_ASSET_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_TO_ASSET_COUNT.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_COUNT.686e56b6a2", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_TO_ASSET_COUNT"], "alias": "pool_block_statistics_TO_ASSET_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.61477, "relation_name": "MAYA.not_null_silver.pool_block_statistics_TO_ASSET_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ASSET_COUNT", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET_COUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_FEES.4243fd1291": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_TO_ASSET_FEES", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_TO_ASSET_FEES.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_FEES.4243fd1291", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_TO_ASSET_FEES"], "alias": "pool_block_statistics_TO_ASSET_FEES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.615545, "relation_name": "MAYA.not_null_silver.pool_block_statistics_TO_ASSET_FEES", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ASSET_FEES", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET_FEES", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_VOLUME.a7619cb0c1": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_TO_ASSET_VOLUME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_TO_ASSET_VOLUME.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_VOLUME.a7619cb0c1", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_TO_ASSET_VOLUME"], "alias": "pool_block_statistics_TO_ASSET_VOLUME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.61691, "relation_name": "MAYA.not_null_silver.pool_block_statistics_TO_ASSET_VOLUME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ASSET_VOLUME", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_AVERAGE_SLIP.3ec16dcf5b": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_TO_cacao_AVERAGE_SLIP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_TO_cacao_AVERAGE_SLIP.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_AVERAGE_SLIP.3ec16dcf5b", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_TO_cacao_AVERAGE_SLIP"], "alias": "pool_block_statistics_TO_cacao_AVERAGE_SLIP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.6180968, "relation_name": "MAYA.not_null_silver.pool_block_statistics_TO_cacao_AVERAGE_SLIP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_cacao_AVERAGE_SLIP", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_cacao_AVERAGE_SLIP", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_COUNT.b9826d563a": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_TO_cacao_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_TO_cacao_COUNT.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_COUNT.b9826d563a", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_TO_cacao_COUNT"], "alias": "pool_block_statistics_TO_cacao_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.619175, "relation_name": "MAYA.not_null_silver.pool_block_statistics_TO_cacao_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_cacao_COUNT", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_cacao_COUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_FEES.b88c364faa": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_TO_cacao_FEES", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_TO_cacao_FEES.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_FEES.b88c364faa", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_TO_cacao_FEES"], "alias": "pool_block_statistics_TO_cacao_FEES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.620127, "relation_name": "MAYA.not_null_silver.pool_block_statistics_TO_cacao_FEES", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_cacao_FEES", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_cacao_FEES", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_VOLUME.eddc6586ac": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_TO_cacao_VOLUME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_TO_cacao_VOLUME.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_VOLUME.eddc6586ac", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_TO_cacao_VOLUME"], "alias": "pool_block_statistics_TO_cacao_VOLUME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.62109, "relation_name": "MAYA.not_null_silver.pool_block_statistics_TO_cacao_VOLUME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_cacao_VOLUME", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_cacao_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_TOTALFEES.cb447c44c8": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_TOTALFEES", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_TOTALFEES.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_TOTALFEES.cb447c44c8", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_TOTALFEES"], "alias": "pool_block_statistics_TOTALFEES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.621919, "relation_name": "MAYA.not_null_silver.pool_block_statistics_TOTALFEES", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTALFEES", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTALFEES", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT.e21371b8b6": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT.e21371b8b6", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT"], "alias": "pool_block_statistics_UNIQUE_MEMBER_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.622716, "relation_name": "MAYA.not_null_silver.pool_block_statistics_UNIQUE_MEMBER_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "UNIQUE_MEMBER_COUNT", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNIQUE_MEMBER_COUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT.f58c3b5939": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT.f58c3b5939", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT"], "alias": "pool_block_statistics_UNIQUE_SWAPPER_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.623528, "relation_name": "MAYA.not_null_silver.pool_block_statistics_UNIQUE_SWAPPER_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "UNIQUE_SWAPPER_COUNT", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNIQUE_SWAPPER_COUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_UNITS.1c3ee9d2a0": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_UNITS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_UNITS.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_UNITS.1c3ee9d2a0", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_UNITS"], "alias": "pool_block_statistics_UNITS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.624737, "relation_name": "MAYA.not_null_silver.pool_block_statistics_UNITS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "UNITS", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNITS", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME.8109e4b0cb": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME.8109e4b0cb", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME"], "alias": "pool_block_statistics_WITHDRAW_ASSET_VOLUME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.625996, "relation_name": "MAYA.not_null_silver.pool_block_statistics_WITHDRAW_ASSET_VOLUME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "WITHDRAW_ASSET_VOLUME", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_ASSET_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_COUNT.5fcea77d8b": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_WITHDRAW_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_WITHDRAW_COUNT.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_COUNT.5fcea77d8b", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_WITHDRAW_COUNT"], "alias": "pool_block_statistics_WITHDRAW_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.62712, "relation_name": "MAYA.not_null_silver.pool_block_statistics_WITHDRAW_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "WITHDRAW_COUNT", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_COUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_cacao_VOLUME.e852869cf9": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_WITHDRAW_cacao_VOLUME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_WITHDRAW_cacao_VOLUME.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_cacao_VOLUME.e852869cf9", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_WITHDRAW_cacao_VOLUME"], "alias": "pool_block_statistics_WITHDRAW_cacao_VOLUME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.6282198, "relation_name": "MAYA.not_null_silver.pool_block_statistics_WITHDRAW_cacao_VOLUME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "WITHDRAW_cacao_VOLUME", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_cacao_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_VOLUME.7c44597ab7": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_WITHDRAW_VOLUME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_WITHDRAW_VOLUME.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_VOLUME.7c44597ab7", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_WITHDRAW_VOLUME"], "alias": "pool_block_statistics_WITHDRAW_VOLUME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.6290472, "relation_name": "MAYA.not_null_silver.pool_block_statistics_WITHDRAW_VOLUME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "WITHDRAW_VOLUME", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_TOTAL_STAKE.acfd31062e": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_TOTAL_STAKE", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_TOTAL_STAKE.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_TOTAL_STAKE.acfd31062e", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_TOTAL_STAKE"], "alias": "pool_block_statistics_TOTAL_STAKE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.630135, "relation_name": "MAYA.not_null_silver.pool_block_statistics_TOTAL_STAKE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_STAKE", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_STAKE", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_DEPTH_PRODUCT.10ec4d6762": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_DEPTH_PRODUCT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_DEPTH_PRODUCT.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_DEPTH_PRODUCT.10ec4d6762", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_DEPTH_PRODUCT"], "alias": "pool_block_statistics_DEPTH_PRODUCT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.6309938, "relation_name": "MAYA.not_null_silver.pool_block_statistics_DEPTH_PRODUCT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DEPTH_PRODUCT", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DEPTH_PRODUCT", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_SYNTH_UNITS.d34b8ef943": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_SYNTH_UNITS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_SYNTH_UNITS.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_SYNTH_UNITS.d34b8ef943", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_SYNTH_UNITS"], "alias": "pool_block_statistics_SYNTH_UNITS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.631951, "relation_name": "MAYA.not_null_silver.pool_block_statistics_SYNTH_UNITS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SYNTH_UNITS", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYNTH_UNITS", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_POOL_UNITS.a9fd8a4a48": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_POOL_UNITS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_statistics_POOL_UNITS.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_POOL_UNITS.a9fd8a4a48", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_POOL_UNITS"], "alias": "pool_block_statistics_POOL_UNITS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.632781, "relation_name": "MAYA.not_null_silver.pool_block_statistics_POOL_UNITS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_UNITS", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_UNITS", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_LIQUIDITY_UNIT_VALUE_INDEX.2961093934": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_LIQUIDITY_UNIT_VALUE_INDEX", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_st_5276afc6838757b92ccc341bfeedbd84.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_LIQUIDITY_UNIT_VALUE_INDEX.2961093934", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_LIQUIDITY_UNIT_VALUE_INDEX"], "alias": "pool_block_statistics_LIQUIDITY_UNIT_VALUE_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__pool_block_st_5276afc6838757b92ccc341bfeedbd84", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "not_null_silver__pool_block_st_5276afc6838757b92ccc341bfeedbd84"}, "created_at": 1741278782.633708, "relation_name": "MAYA.not_null_silver.pool_block_statistics_LIQUIDITY_UNIT_VALUE_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__pool_block_st_5276afc6838757b92ccc341bfeedbd84\") }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQUIDITY_UNIT_VALUE_INDEX", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_UNIT_VALUE_INDEX", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_statistics_PREV_LIQUIDITY_UNIT_VALUE_INDEX.a33c024362": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_statistics_PREV_LIQUIDITY_UNIT_VALUE_INDEX", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_st_5ef3f9238da342f675e3d4e0b40ba12e.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_statistics_PREV_LIQUIDITY_UNIT_VALUE_INDEX.a33c024362", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_statistics_PREV_LIQUIDITY_UNIT_VALUE_INDEX"], "alias": "pool_block_statistics_PREV_LIQUIDITY_UNIT_VALUE_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__pool_block_st_5ef3f9238da342f675e3d4e0b40ba12e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "day <= '2021-04-10'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "not_null_silver__pool_block_st_5ef3f9238da342f675e3d4e0b40ba12e", "where": "day <= '2021-04-10'"}, "created_at": 1741278782.634961, "relation_name": "MAYA.not_null_silver.pool_block_statistics_PREV_LIQUIDITY_UNIT_VALUE_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"day <= '2021-04-10'\",alias=\"not_null_silver__pool_block_st_5ef3f9238da342f675e3d4e0b40ba12e\") }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PREV_LIQUIDITY_UNIT_VALUE_INDEX", "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PREV_LIQUIDITY_UNIT_VALUE_INDEX", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pool_block_statistics_DAY__ASSET.aa179a7a3e": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__pool_block_statistics_DAY__ASSET", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_695c762c9a4e0091848158293ea35693.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pool_block_statistics_DAY__ASSET.aa179a7a3e", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__pool_block_statistics_DAY__ASSET"], "alias": "pool_block_statistics_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_695c762c9a4e0091848158293ea35693", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_695c762c9a4e0091848158293ea35693"}, "created_at": 1741278782.635774, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.pool_block_statistics_DAY", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_695c762c9a4e0091848158293ea35693\") }}", "language": "sql", "refs": [{"name": "silver__pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__pool_block_statistics", "attached_node": "model.maya_models.silver__pool_block_statistics", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["DAY", "ASSET"], "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__prices_BLOCK_ID.b3347041fc": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__prices_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__prices_BLOCK_ID.sql", "original_file_path": "models/silver/silver__prices.yml", "unique_id": "test.maya_models.not_null_silver__prices_BLOCK_ID.b3347041fc", "fqn": ["maya_models", "silver", "not_null_silver__prices_BLOCK_ID"], "alias": "prices_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.6417348, "relation_name": "MAYA.not_null_silver.prices_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.silver__prices", "attached_node": "model.maya_models.silver__prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__prices_BLOCK_TIMESTAMP.d245b83d4f": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__prices_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__prices_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__prices.yml", "unique_id": "test.maya_models.not_null_silver__prices_BLOCK_TIMESTAMP.d245b83d4f", "fqn": ["maya_models", "silver", "not_null_silver__prices_BLOCK_TIMESTAMP"], "alias": "prices_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.6435819, "relation_name": "MAYA.not_null_silver.prices_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__prices", "attached_node": "model.maya_models.silver__prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}}, "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_BLOCK_TIMESTAMP__day__1.00281f997e": {"database": "MAYA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_row_va_9da273394f8f2bb28c152409efed30bd.sql", "original_file_path": "models/silver/silver__prices.yml", "unique_id": "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_BLOCK_TIMESTAMP__day__1.00281f997e", "fqn": ["maya_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_BLOCK_TIMESTAMP__day__1"], "alias": "prices_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_9da273394f8f2bb28c152409efed30bd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_9da273394f8f2bb28c152409efed30bd"}, "created_at": 1741278782.644491, "relation_name": "MAYA.dbt_expectations_expect_row_values_to_have_recent_data_silver.prices_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_9da273394f8f2bb28c152409efed30bd\") }}", "language": "sql", "refs": [{"name": "silver__prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__prices", "attached_node": "model.maya_models.silver__prices", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.not_null_silver__prices_PRICE_cacao_ASSET.2443bbba18": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__prices_PRICE_cacao_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__prices_PRICE_cacao_ASSET.sql", "original_file_path": "models/silver/silver__prices.yml", "unique_id": "test.maya_models.not_null_silver__prices_PRICE_cacao_ASSET.2443bbba18", "fqn": ["maya_models", "silver", "not_null_silver__prices_PRICE_cacao_ASSET"], "alias": "prices_PRICE_cacao_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.6482189, "relation_name": "MAYA.not_null_silver.prices_PRICE_cacao_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PRICE_cacao_ASSET", "file_key_name": "models.silver__prices", "attached_node": "model.maya_models.silver__prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE_cacao_ASSET", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__prices_PRICE_ASSET_cacao.8241728751": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__prices_PRICE_ASSET_cacao", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__prices_PRICE_ASSET_cacao.sql", "original_file_path": "models/silver/silver__prices.yml", "unique_id": "test.maya_models.not_null_silver__prices_PRICE_ASSET_cacao.8241728751", "fqn": ["maya_models", "silver", "not_null_silver__prices_PRICE_ASSET_cacao"], "alias": "prices_PRICE_ASSET_cacao", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.649219, "relation_name": "MAYA.not_null_silver.prices_PRICE_ASSET_cacao", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PRICE_ASSET_cacao", "file_key_name": "models.silver__prices", "attached_node": "model.maya_models.silver__prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE_ASSET_cacao", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__prices_ASSET_USD.a900d8c697": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__prices_ASSET_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__prices_ASSET_USD.sql", "original_file_path": "models/silver/silver__prices.yml", "unique_id": "test.maya_models.not_null_silver__prices_ASSET_USD.a900d8c697", "fqn": ["maya_models", "silver", "not_null_silver__prices_ASSET_USD"], "alias": "prices_ASSET_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.6500459, "relation_name": "MAYA.not_null_silver.prices_ASSET_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_USD", "file_key_name": "models.silver__prices", "attached_node": "model.maya_models.silver__prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_USD", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__prices_cacao_USD.fb9aeff69a": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__prices_cacao_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__prices_cacao_USD.sql", "original_file_path": "models/silver/silver__prices.yml", "unique_id": "test.maya_models.not_null_silver__prices_cacao_USD.fb9aeff69a", "fqn": ["maya_models", "silver", "not_null_silver__prices_cacao_USD"], "alias": "prices_cacao_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.650882, "relation_name": "MAYA.not_null_silver.prices_cacao_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_USD", "file_key_name": "models.silver__prices", "attached_node": "model.maya_models.silver__prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_USD", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__prices_POOL_NAME.7eacc16a03": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__prices_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__prices_POOL_NAME.sql", "original_file_path": "models/silver/silver__prices.yml", "unique_id": "test.maya_models.not_null_silver__prices_POOL_NAME.7eacc16a03", "fqn": ["maya_models", "silver", "not_null_silver__prices_POOL_NAME"], "alias": "prices_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.651674, "relation_name": "MAYA.not_null_silver.prices_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.silver__prices", "attached_node": "model.maya_models.silver__prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__prices_BLOCK_ID__POOL_NAME.7a2931d6eb": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__prices_BLOCK_ID__POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_f6e279ceae09d7398500f23ebd437815.sql", "original_file_path": "models/silver/silver__prices.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__prices_BLOCK_ID__POOL_NAME.7a2931d6eb", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__prices_BLOCK_ID__POOL_NAME"], "alias": "prices_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f6e279ceae09d7398500f23ebd437815", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_f6e279ceae09d7398500f23ebd437815"}, "created_at": 1741278782.6525812, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.prices_BLOCK_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f6e279ceae09d7398500f23ebd437815\") }}", "language": "sql", "refs": [{"name": "silver__prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__prices", "attached_node": "model.maya_models.silver__prices", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "POOL_NAME"], "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__pending_liquidity_events_POOL_NAME.5e22402fb9": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pending_liquidity_events_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pending_liquidity_events_POOL_NAME.sql", "original_file_path": "models/silver/silver__pending_liquidity_events.yml", "unique_id": "test.maya_models.not_null_silver__pending_liquidity_events_POOL_NAME.5e22402fb9", "fqn": ["maya_models", "silver", "not_null_silver__pending_liquidity_events_POOL_NAME"], "alias": "pending_liquidity_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.6566029, "relation_name": "MAYA.not_null_silver.pending_liquidity_events_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pending_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pending_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.silver__pending_liquidity_events", "attached_node": "model.maya_models.silver__pending_liquidity_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__pending_liquidity_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pending_liquidity_events_ASSET_E8.c201915269": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pending_liquidity_events_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pending_liquidity_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__pending_liquidity_events.yml", "unique_id": "test.maya_models.not_null_silver__pending_liquidity_events_ASSET_E8.c201915269", "fqn": ["maya_models", "silver", "not_null_silver__pending_liquidity_events_ASSET_E8"], "alias": "pending_liquidity_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.658241, "relation_name": "MAYA.not_null_silver.pending_liquidity_events_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pending_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pending_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.silver__pending_liquidity_events", "attached_node": "model.maya_models.silver__pending_liquidity_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__pending_liquidity_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pending_liquidity_events_CACAO_ADDRESS.871aaa4926": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pending_liquidity_events_CACAO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pending_liquidity_events_CACAO_ADDRESS.sql", "original_file_path": "models/silver/silver__pending_liquidity_events.yml", "unique_id": "test.maya_models.not_null_silver__pending_liquidity_events_CACAO_ADDRESS.871aaa4926", "fqn": ["maya_models", "silver", "not_null_silver__pending_liquidity_events_CACAO_ADDRESS"], "alias": "pending_liquidity_events_CACAO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.659568, "relation_name": "MAYA.not_null_silver.pending_liquidity_events_CACAO_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pending_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pending_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CACAO_ADDRESS", "file_key_name": "models.silver__pending_liquidity_events", "attached_node": "model.maya_models.silver__pending_liquidity_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CACAO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__pending_liquidity_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pending_liquidity_events_CACAO_E8.857d5c83f2": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pending_liquidity_events_CACAO_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pending_liquidity_events_CACAO_E8.sql", "original_file_path": "models/silver/silver__pending_liquidity_events.yml", "unique_id": "test.maya_models.not_null_silver__pending_liquidity_events_CACAO_E8.857d5c83f2", "fqn": ["maya_models", "silver", "not_null_silver__pending_liquidity_events_CACAO_E8"], "alias": "pending_liquidity_events_CACAO_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.661272, "relation_name": "MAYA.not_null_silver.pending_liquidity_events_CACAO_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pending_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pending_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CACAO_E8", "file_key_name": "models.silver__pending_liquidity_events", "attached_node": "model.maya_models.silver__pending_liquidity_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CACAO_E8", "model": "{{ get_where_subquery(ref('silver__pending_liquidity_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pending_liquidity_events_PENDING_TYPE.98039831a1": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pending_liquidity_events_PENDING_TYPE", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pending_liquidity_events_PENDING_TYPE.sql", "original_file_path": "models/silver/silver__pending_liquidity_events.yml", "unique_id": "test.maya_models.not_null_silver__pending_liquidity_events_PENDING_TYPE.98039831a1", "fqn": ["maya_models", "silver", "not_null_silver__pending_liquidity_events_PENDING_TYPE"], "alias": "pending_liquidity_events_PENDING_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.662736, "relation_name": "MAYA.not_null_silver.pending_liquidity_events_PENDING_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pending_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pending_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PENDING_TYPE", "file_key_name": "models.silver__pending_liquidity_events", "attached_node": "model.maya_models.silver__pending_liquidity_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PENDING_TYPE", "model": "{{ get_where_subquery(ref('silver__pending_liquidity_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP.ab766ea5ff": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__pending_liquidity_events.yml", "unique_id": "test.maya_models.not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP.ab766ea5ff", "fqn": ["maya_models", "silver", "not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP"], "alias": "pending_liquidity_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.6640902, "relation_name": "MAYA.not_null_silver.pending_liquidity_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pending_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pending_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__pending_liquidity_events", "attached_node": "model.maya_models.silver__pending_liquidity_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__pending_liquidity_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pending_liquidity_events_EVENT_ID__ASSET_ADDRESS__CACAO_ADDRESS.188b780819": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__pending_liquidity_events_EVENT_ID__ASSET_ADDRESS__CACAO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_89790fd7bfd3a37ee4dab742dc651f6d.sql", "original_file_path": "models/silver/silver__pending_liquidity_events.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pending_liquidity_events_EVENT_ID__ASSET_ADDRESS__CACAO_ADDRESS.188b780819", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__pending_liquidity_events_EVENT_ID__ASSET_ADDRESS__CACAO_ADDRESS"], "alias": "pending_liquidity_events_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_89790fd7bfd3a37ee4dab742dc651f6d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_89790fd7bfd3a37ee4dab742dc651f6d"}, "created_at": 1741278782.665534, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.pending_liquidity_events_EVENT_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_89790fd7bfd3a37ee4dab742dc651f6d\") }}", "language": "sql", "refs": [{"name": "silver__pending_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__pending_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__pending_liquidity_events", "attached_node": "model.maya_models.silver__pending_liquidity_events", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["EVENT_ID", "ASSET_ADDRESS", "CACAO_ADDRESS"], "model": "{{ get_where_subquery(ref('silver__pending_liquidity_events')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__total_block_rewards_BLOCK_TIMESTAMP.7d7b639434": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__total_block_rewards_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__total_block_rewards_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__total_block_rewards.yml", "unique_id": "test.maya_models.not_null_silver__total_block_rewards_BLOCK_TIMESTAMP.7d7b639434", "fqn": ["maya_models", "silver", "not_null_silver__total_block_rewards_BLOCK_TIMESTAMP"], "alias": "total_block_rewards_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.670045, "relation_name": "MAYA.not_null_silver.total_block_rewards_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__total_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__total_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__total_block_rewards", "attached_node": "model.maya_models.silver__total_block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__total_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_block_rewards_BLOCK_TIMESTAMP__day__1.8b65eead55": {"database": "MAYA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__total_block_rewards_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_row_va_56bd833e7a783543b57683c07cad0001.sql", "original_file_path": "models/silver/silver__total_block_rewards.yml", "unique_id": "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_block_rewards_BLOCK_TIMESTAMP__day__1.8b65eead55", "fqn": ["maya_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__total_block_rewards_BLOCK_TIMESTAMP__day__1"], "alias": "total_block_rewards_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_56bd833e7a783543b57683c07cad0001", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_56bd833e7a783543b57683c07cad0001"}, "created_at": 1741278782.671008, "relation_name": "MAYA.dbt_expectations_expect_row_values_to_have_recent_data_silver.total_block_rewards_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_56bd833e7a783543b57683c07cad0001\") }}", "language": "sql", "refs": [{"name": "silver__total_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__total_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__total_block_rewards", "attached_node": "model.maya_models.silver__total_block_rewards", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__total_block_rewards')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.not_null_silver__total_block_rewards_BLOCK_ID.8619b81300": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__total_block_rewards_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__total_block_rewards_BLOCK_ID.sql", "original_file_path": "models/silver/silver__total_block_rewards.yml", "unique_id": "test.maya_models.not_null_silver__total_block_rewards_BLOCK_ID.8619b81300", "fqn": ["maya_models", "silver", "not_null_silver__total_block_rewards_BLOCK_ID"], "alias": "total_block_rewards_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.67488, "relation_name": "MAYA.not_null_silver.total_block_rewards_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__total_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__total_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.silver__total_block_rewards", "attached_node": "model.maya_models.silver__total_block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__total_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__total_block_rewards_REWARD_ENTITY.06013c60c2": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__total_block_rewards_REWARD_ENTITY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__total_block_rewards_REWARD_ENTITY.sql", "original_file_path": "models/silver/silver__total_block_rewards.yml", "unique_id": "test.maya_models.not_null_silver__total_block_rewards_REWARD_ENTITY.06013c60c2", "fqn": ["maya_models", "silver", "not_null_silver__total_block_rewards_REWARD_ENTITY"], "alias": "total_block_rewards_REWARD_ENTITY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.676098, "relation_name": "MAYA.not_null_silver.total_block_rewards_REWARD_ENTITY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__total_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__total_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "REWARD_ENTITY", "file_key_name": "models.silver__total_block_rewards", "attached_node": "model.maya_models.silver__total_block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REWARD_ENTITY", "model": "{{ get_where_subquery(ref('silver__total_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__total_block_rewards_cacao_AMOUNT.991c1821ee": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__total_block_rewards_cacao_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__total_block_rewards_cacao_AMOUNT.sql", "original_file_path": "models/silver/silver__total_block_rewards.yml", "unique_id": "test.maya_models.not_null_silver__total_block_rewards_cacao_AMOUNT.991c1821ee", "fqn": ["maya_models", "silver", "not_null_silver__total_block_rewards_cacao_AMOUNT"], "alias": "total_block_rewards_cacao_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.677584, "relation_name": "MAYA.not_null_silver.total_block_rewards_cacao_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__total_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__total_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_AMOUNT", "file_key_name": "models.silver__total_block_rewards", "attached_node": "model.maya_models.silver__total_block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_AMOUNT", "model": "{{ get_where_subquery(ref('silver__total_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__total_block_rewards_BLOCK_ID__REWARD_ENTITY.23ceb96a43": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__total_block_rewards_BLOCK_ID__REWARD_ENTITY", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_f6fcfc1ed0803db068ffa343e9f96fbf.sql", "original_file_path": "models/silver/silver__total_block_rewards.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__total_block_rewards_BLOCK_ID__REWARD_ENTITY.23ceb96a43", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__total_block_rewards_BLOCK_ID__REWARD_ENTITY"], "alias": "total_block_rewards_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f6fcfc1ed0803db068ffa343e9f96fbf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_f6fcfc1ed0803db068ffa343e9f96fbf"}, "created_at": 1741278782.678696, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.total_block_rewards_BLOCK_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f6fcfc1ed0803db068ffa343e9f96fbf\") }}", "language": "sql", "refs": [{"name": "silver__total_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__total_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__total_block_rewards", "attached_node": "model.maya_models.silver__total_block_rewards", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "REWARD_ENTITY"], "model": "{{ get_where_subquery(ref('silver__total_block_rewards')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__gas_events_BLOCK_TIMESTAMP.88c6e43d24": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__gas_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__gas_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__gas_events.yml", "unique_id": "test.maya_models.not_null_silver__gas_events_BLOCK_TIMESTAMP.88c6e43d24", "fqn": ["maya_models", "silver", "not_null_silver__gas_events_BLOCK_TIMESTAMP"], "alias": "gas_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.683336, "relation_name": "MAYA.not_null_silver.gas_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__gas_events", "attached_node": "model.maya_models.silver__gas_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__gas_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__gas_events_ASSET.59ad7ccacd": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__gas_events_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__gas_events_ASSET.sql", "original_file_path": "models/silver/silver__gas_events.yml", "unique_id": "test.maya_models.not_null_silver__gas_events_ASSET.59ad7ccacd", "fqn": ["maya_models", "silver", "not_null_silver__gas_events_ASSET"], "alias": "gas_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.684751, "relation_name": "MAYA.not_null_silver.gas_events_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET", "file_key_name": "models.silver__gas_events", "attached_node": "model.maya_models.silver__gas_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__gas_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__gas_events_CACAO_E8.4dad242a6b": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__gas_events_CACAO_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__gas_events_CACAO_E8.sql", "original_file_path": "models/silver/silver__gas_events.yml", "unique_id": "test.maya_models.not_null_silver__gas_events_CACAO_E8.4dad242a6b", "fqn": ["maya_models", "silver", "not_null_silver__gas_events_CACAO_E8"], "alias": "gas_events_CACAO_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.6870131, "relation_name": "MAYA.not_null_silver.gas_events_CACAO_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CACAO_E8", "file_key_name": "models.silver__gas_events", "attached_node": "model.maya_models.silver__gas_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CACAO_E8", "model": "{{ get_where_subquery(ref('silver__gas_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__gas_events_TX_COUNT.a45fc07260": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__gas_events_TX_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__gas_events_TX_COUNT.sql", "original_file_path": "models/silver/silver__gas_events.yml", "unique_id": "test.maya_models.not_null_silver__gas_events_TX_COUNT.a45fc07260", "fqn": ["maya_models", "silver", "not_null_silver__gas_events_TX_COUNT"], "alias": "gas_events_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.688156, "relation_name": "MAYA.not_null_silver.gas_events_TX_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_COUNT", "file_key_name": "models.silver__gas_events", "attached_node": "model.maya_models.silver__gas_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__gas_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__gas_events_ASSET_E8.2072d4ce77": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__gas_events_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__gas_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__gas_events.yml", "unique_id": "test.maya_models.not_null_silver__gas_events_ASSET_E8.2072d4ce77", "fqn": ["maya_models", "silver", "not_null_silver__gas_events_ASSET_E8"], "alias": "gas_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.690377, "relation_name": "MAYA.not_null_silver.gas_events_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.silver__gas_events", "attached_node": "model.maya_models.silver__gas_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__gas_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__gas_events_EVENT_ID__ASSET__BLOCK_TIMESTAMP.b0baea926f": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__gas_events_EVENT_ID__ASSET__BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_2a8604a8b7d703ccc4f57bb6f598ba40.sql", "original_file_path": "models/silver/silver__gas_events.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__gas_events_EVENT_ID__ASSET__BLOCK_TIMESTAMP.b0baea926f", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__gas_events_EVENT_ID__ASSET__BLOCK_TIMESTAMP"], "alias": "gas_events_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2a8604a8b7d703ccc4f57bb6f598ba40", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_2a8604a8b7d703ccc4f57bb6f598ba40"}, "created_at": 1741278782.692789, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.gas_events_EVENT_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2a8604a8b7d703ccc4f57bb6f598ba40\") }}", "language": "sql", "refs": [{"name": "silver__gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__gas_events", "attached_node": "model.maya_models.silver__gas_events", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["EVENT_ID", "ASSET", "BLOCK_TIMESTAMP"], "model": "{{ get_where_subquery(ref('silver__gas_events')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__pool_block_balances_BLOCK_TIMESTAMP.9d9432e579": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_balances_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_balances_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_balances_BLOCK_TIMESTAMP.9d9432e579", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_balances_BLOCK_TIMESTAMP"], "alias": "pool_block_balances_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.7058392, "relation_name": "MAYA.not_null_silver.pool_block_balances_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__pool_block_balances", "attached_node": "model.maya_models.silver__pool_block_balances", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_balances_BLOCK_TIMESTAMP__day__1.06ec2e6c79": {"database": "MAYA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_balances_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_row_va_e45b750ef0b3d5aab123a6e5193c647c.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "unique_id": "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_balances_BLOCK_TIMESTAMP__day__1.06ec2e6c79", "fqn": ["maya_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_balances_BLOCK_TIMESTAMP__day__1"], "alias": "pool_block_balances_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_e45b750ef0b3d5aab123a6e5193c647c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_e45b750ef0b3d5aab123a6e5193c647c"}, "created_at": 1741278782.707935, "relation_name": "MAYA.dbt_expectations_expect_row_values_to_have_recent_data_silver.pool_block_balances_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_e45b750ef0b3d5aab123a6e5193c647c\") }}", "language": "sql", "refs": [{"name": "silver__pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__pool_block_balances", "attached_node": "model.maya_models.silver__pool_block_balances", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.not_null_silver__pool_block_balances_BLOCK_ID.6a3b314f7c": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_balances_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_balances_BLOCK_ID.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_balances_BLOCK_ID.6a3b314f7c", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_balances_BLOCK_ID"], "alias": "pool_block_balances_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.722649, "relation_name": "MAYA.not_null_silver.pool_block_balances_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.silver__pool_block_balances", "attached_node": "model.maya_models.silver__pool_block_balances", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_balances_POOL_NAME.95fecffc4b": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_balances_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_balances_POOL_NAME.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_balances_POOL_NAME.95fecffc4b", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_balances_POOL_NAME"], "alias": "pool_block_balances_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.725735, "relation_name": "MAYA.not_null_silver.pool_block_balances_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.silver__pool_block_balances", "attached_node": "model.maya_models.silver__pool_block_balances", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_balances_cacao_AMOUNT.a4ce75ab63": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_balances_cacao_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_balances_cacao_AMOUNT.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_balances_cacao_AMOUNT.a4ce75ab63", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_balances_cacao_AMOUNT"], "alias": "pool_block_balances_cacao_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.728856, "relation_name": "MAYA.not_null_silver.pool_block_balances_cacao_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_AMOUNT", "file_key_name": "models.silver__pool_block_balances", "attached_node": "model.maya_models.silver__pool_block_balances", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_AMOUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_balances_cacao_AMOUNT_USD.d6dbe01d1f": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_balances_cacao_AMOUNT_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_balances_cacao_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_balances_cacao_AMOUNT_USD.d6dbe01d1f", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_balances_cacao_AMOUNT_USD"], "alias": "pool_block_balances_cacao_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "BLOCK_TIMESTAMP <= current_date -2 AND BLOCK_TIMESTAMP >= '2021-04-13'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP <= current_date -2 AND BLOCK_TIMESTAMP >= '2021-04-13'"}, "created_at": 1741278782.733711, "relation_name": "MAYA.not_null_silver.pool_block_balances_cacao_AMOUNT_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP <= current_date -2 AND BLOCK_TIMESTAMP >= '2021-04-13'\") }}", "language": "sql", "refs": [{"name": "silver__pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_AMOUNT_USD", "file_key_name": "models.silver__pool_block_balances", "attached_node": "model.maya_models.silver__pool_block_balances", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_balances_ASSET_AMOUNT.69087d909b": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_balances_ASSET_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_balances_ASSET_AMOUNT.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_balances_ASSET_AMOUNT.69087d909b", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_balances_ASSET_AMOUNT"], "alias": "pool_block_balances_ASSET_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.734944, "relation_name": "MAYA.not_null_silver.pool_block_balances_ASSET_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_AMOUNT", "file_key_name": "models.silver__pool_block_balances", "attached_node": "model.maya_models.silver__pool_block_balances", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_AMOUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_balances_ASSET_AMOUNT_USD.eedbf84e66": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_balances_ASSET_AMOUNT_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_balances_ASSET_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_balances_ASSET_AMOUNT_USD.eedbf84e66", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_balances_ASSET_AMOUNT_USD"], "alias": "pool_block_balances_ASSET_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.735871, "relation_name": "MAYA.not_null_silver.pool_block_balances_ASSET_AMOUNT_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_AMOUNT_USD", "file_key_name": "models.silver__pool_block_balances", "attached_node": "model.maya_models.silver__pool_block_balances", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT.6394f07310": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_balances_SYNTH_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_balances_SYNTH_AMOUNT.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT.6394f07310", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_balances_SYNTH_AMOUNT"], "alias": "pool_block_balances_SYNTH_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.736854, "relation_name": "MAYA.not_null_silver.pool_block_balances_SYNTH_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SYNTH_AMOUNT", "file_key_name": "models.silver__pool_block_balances", "attached_node": "model.maya_models.silver__pool_block_balances", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYNTH_AMOUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD.e507c3e553": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "unique_id": "test.maya_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD.e507c3e553", "fqn": ["maya_models", "silver", "not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD"], "alias": "pool_block_balances_SYNTH_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.737837, "relation_name": "MAYA.not_null_silver.pool_block_balances_SYNTH_AMOUNT_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SYNTH_AMOUNT_USD", "file_key_name": "models.silver__pool_block_balances", "attached_node": "model.maya_models.silver__pool_block_balances", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYNTH_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pool_block_balances_BLOCK_ID__POOL_NAME.db3d915190": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__pool_block_balances_BLOCK_ID__POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_b81ac9894957b103c4b6a5e259a2cad9.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pool_block_balances_BLOCK_ID__POOL_NAME.db3d915190", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__pool_block_balances_BLOCK_ID__POOL_NAME"], "alias": "pool_block_balances_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b81ac9894957b103c4b6a5e259a2cad9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_b81ac9894957b103c4b6a5e259a2cad9"}, "created_at": 1741278782.738733, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.pool_block_balances_BLOCK_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b81ac9894957b103c4b6a5e259a2cad9\") }}", "language": "sql", "refs": [{"name": "silver__pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__pool_block_balances", "attached_node": "model.maya_models.silver__pool_block_balances", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "POOL_NAME"], "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__active_vault_events_BLOCK_TIMESTAMP.bfcca60868": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__active_vault_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__active_vault_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__active_vault_events.yml", "unique_id": "test.maya_models.not_null_silver__active_vault_events_BLOCK_TIMESTAMP.bfcca60868", "fqn": ["maya_models", "silver", "not_null_silver__active_vault_events_BLOCK_TIMESTAMP"], "alias": "active_vault_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.749092, "relation_name": "MAYA.not_null_silver.active_vault_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__active_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__active_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__active_vault_events", "attached_node": "model.maya_models.silver__active_vault_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__active_vault_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__active_vault_events_ADD_ASGARD_ADDR.cd001c3c13": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__active_vault_events_ADD_ASGARD_ADDR", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__active_vault_events_ADD_ASGARD_ADDR.sql", "original_file_path": "models/silver/silver__active_vault_events.yml", "unique_id": "test.maya_models.not_null_silver__active_vault_events_ADD_ASGARD_ADDR.cd001c3c13", "fqn": ["maya_models", "silver", "not_null_silver__active_vault_events_ADD_ASGARD_ADDR"], "alias": "active_vault_events_ADD_ASGARD_ADDR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.756542, "relation_name": "MAYA.not_null_silver.active_vault_events_ADD_ASGARD_ADDR", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__active_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__active_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADD_ASGARD_ADDR", "file_key_name": "models.silver__active_vault_events", "attached_node": "model.maya_models.silver__active_vault_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_ASGARD_ADDR", "model": "{{ get_where_subquery(ref('silver__active_vault_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__active_vault_events_EVENT_ID__BLOCK_TIMESTAMP__ADD_ASGARD_ADDR.f7fa9e1978": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__active_vault_events_EVENT_ID__BLOCK_TIMESTAMP__ADD_ASGARD_ADDR", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_0d63789058f52da39ab0c87e9e7318b7.sql", "original_file_path": "models/silver/silver__active_vault_events.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__active_vault_events_EVENT_ID__BLOCK_TIMESTAMP__ADD_ASGARD_ADDR.f7fa9e1978", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__active_vault_events_EVENT_ID__BLOCK_TIMESTAMP__ADD_ASGARD_ADDR"], "alias": "active_vault_events_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0d63789058f52da39ab0c87e9e7318b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_0d63789058f52da39ab0c87e9e7318b7"}, "created_at": 1741278782.760163, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.active_vault_events_EVENT_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0d63789058f52da39ab0c87e9e7318b7\") }}", "language": "sql", "refs": [{"name": "silver__active_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__active_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__active_vault_events", "attached_node": "model.maya_models.silver__active_vault_events", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["EVENT_ID", "BLOCK_TIMESTAMP", "ADD_ASGARD_ADDR"], "model": "{{ get_where_subquery(ref('silver__active_vault_events')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__cacao_price_CACAO_PRICE_E8.9e3d0f25c9": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__cacao_price_CACAO_PRICE_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__cacao_price_CACAO_PRICE_E8.sql", "original_file_path": "models/silver/silver__cacao_price.yml", "unique_id": "test.maya_models.not_null_silver__cacao_price_CACAO_PRICE_E8.9e3d0f25c9", "fqn": ["maya_models", "silver", "not_null_silver__cacao_price_CACAO_PRICE_E8"], "alias": "cacao_price_CACAO_PRICE_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.7640069, "relation_name": "MAYA.not_null_silver.cacao_price_CACAO_PRICE_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__cacao_price", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__cacao_price"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CACAO_PRICE_E8", "file_key_name": "models.silver__cacao_price", "attached_node": "model.maya_models.silver__cacao_price", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CACAO_PRICE_E8", "model": "{{ get_where_subquery(ref('silver__cacao_price')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__cacao_price_BLOCK_TIMESTAMP.70949f9fc4": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__cacao_price_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__cacao_price_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__cacao_price.yml", "unique_id": "test.maya_models.not_null_silver__cacao_price_BLOCK_TIMESTAMP.70949f9fc4", "fqn": ["maya_models", "silver", "not_null_silver__cacao_price_BLOCK_TIMESTAMP"], "alias": "cacao_price_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.764879, "relation_name": "MAYA.not_null_silver.cacao_price_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__cacao_price", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__cacao_price"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__cacao_price", "attached_node": "model.maya_models.silver__cacao_price", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__cacao_price')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__streamling_swap_details_events_TX_ID.8949f66cf6": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__streamling_swap_details_events_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__streamling_swap_details_events_TX_ID.sql", "original_file_path": "models/silver/silver__streamling_swap_details_events.yml", "unique_id": "test.maya_models.not_null_silver__streamling_swap_details_events_TX_ID.8949f66cf6", "fqn": ["maya_models", "silver", "not_null_silver__streamling_swap_details_events_TX_ID"], "alias": "streamling_swap_details_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.768851, "relation_name": "MAYA.not_null_silver.streamling_swap_details_events_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__streamling_swap_details_events", "attached_node": "model.maya_models.silver__streamling_swap_details_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__streamling_swap_details_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__streamling_swap_details_events_INTERVAL.1071875126": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__streamling_swap_details_events_INTERVAL", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__streamling_swap_details_events_INTERVAL.sql", "original_file_path": "models/silver/silver__streamling_swap_details_events.yml", "unique_id": "test.maya_models.not_null_silver__streamling_swap_details_events_INTERVAL.1071875126", "fqn": ["maya_models", "silver", "not_null_silver__streamling_swap_details_events_INTERVAL"], "alias": "streamling_swap_details_events_INTERVAL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.770035, "relation_name": "MAYA.not_null_silver.streamling_swap_details_events_INTERVAL", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INTERVAL", "file_key_name": "models.silver__streamling_swap_details_events", "attached_node": "model.maya_models.silver__streamling_swap_details_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INTERVAL", "model": "{{ get_where_subquery(ref('silver__streamling_swap_details_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__streamling_swap_details_events_quantity.fd5461e50b": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__streamling_swap_details_events_quantity", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__streamling_swap_details_events_quantity.sql", "original_file_path": "models/silver/silver__streamling_swap_details_events.yml", "unique_id": "test.maya_models.not_null_silver__streamling_swap_details_events_quantity.fd5461e50b", "fqn": ["maya_models", "silver", "not_null_silver__streamling_swap_details_events_quantity"], "alias": "streamling_swap_details_events_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.771308, "relation_name": "MAYA.not_null_silver.streamling_swap_details_events_quantity", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "quantity", "file_key_name": "models.silver__streamling_swap_details_events", "attached_node": "model.maya_models.silver__streamling_swap_details_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "quantity", "model": "{{ get_where_subquery(ref('silver__streamling_swap_details_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__streamling_swap_details_events_COUNT.12c52bff4c": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__streamling_swap_details_events_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__streamling_swap_details_events_COUNT.sql", "original_file_path": "models/silver/silver__streamling_swap_details_events.yml", "unique_id": "test.maya_models.not_null_silver__streamling_swap_details_events_COUNT.12c52bff4c", "fqn": ["maya_models", "silver", "not_null_silver__streamling_swap_details_events_COUNT"], "alias": "streamling_swap_details_events_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.7723289, "relation_name": "MAYA.not_null_silver.streamling_swap_details_events_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COUNT", "file_key_name": "models.silver__streamling_swap_details_events", "attached_node": "model.maya_models.silver__streamling_swap_details_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COUNT", "model": "{{ get_where_subquery(ref('silver__streamling_swap_details_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__streamling_swap_details_events_last_height.e19319cce2": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__streamling_swap_details_events_last_height", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__streamling_swap_details_events_last_height.sql", "original_file_path": "models/silver/silver__streamling_swap_details_events.yml", "unique_id": "test.maya_models.not_null_silver__streamling_swap_details_events_last_height.e19319cce2", "fqn": ["maya_models", "silver", "not_null_silver__streamling_swap_details_events_last_height"], "alias": "streamling_swap_details_events_last_height", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.773362, "relation_name": "MAYA.not_null_silver.streamling_swap_details_events_last_height", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_height", "file_key_name": "models.silver__streamling_swap_details_events", "attached_node": "model.maya_models.silver__streamling_swap_details_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_height", "model": "{{ get_where_subquery(ref('silver__streamling_swap_details_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__streamling_swap_details_events_deposit_asset.910fc757bd": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__streamling_swap_details_events_deposit_asset", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__streamling_swap_details_events_deposit_asset.sql", "original_file_path": "models/silver/silver__streamling_swap_details_events.yml", "unique_id": "test.maya_models.not_null_silver__streamling_swap_details_events_deposit_asset.910fc757bd", "fqn": ["maya_models", "silver", "not_null_silver__streamling_swap_details_events_deposit_asset"], "alias": "streamling_swap_details_events_deposit_asset", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.7745159, "relation_name": "MAYA.not_null_silver.streamling_swap_details_events_deposit_asset", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "deposit_asset", "file_key_name": "models.silver__streamling_swap_details_events", "attached_node": "model.maya_models.silver__streamling_swap_details_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "deposit_asset", "model": "{{ get_where_subquery(ref('silver__streamling_swap_details_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__streamling_swap_details_events_deposit_e8.be8b643427": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__streamling_swap_details_events_deposit_e8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__streamling_swap_details_events_deposit_e8.sql", "original_file_path": "models/silver/silver__streamling_swap_details_events.yml", "unique_id": "test.maya_models.not_null_silver__streamling_swap_details_events_deposit_e8.be8b643427", "fqn": ["maya_models", "silver", "not_null_silver__streamling_swap_details_events_deposit_e8"], "alias": "streamling_swap_details_events_deposit_e8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.775382, "relation_name": "MAYA.not_null_silver.streamling_swap_details_events_deposit_e8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "deposit_e8", "file_key_name": "models.silver__streamling_swap_details_events", "attached_node": "model.maya_models.silver__streamling_swap_details_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "deposit_e8", "model": "{{ get_where_subquery(ref('silver__streamling_swap_details_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__streamling_swap_details_events_in_asset.a79e30ae3f": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__streamling_swap_details_events_in_asset", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__streamling_swap_details_events_in_asset.sql", "original_file_path": "models/silver/silver__streamling_swap_details_events.yml", "unique_id": "test.maya_models.not_null_silver__streamling_swap_details_events_in_asset.a79e30ae3f", "fqn": ["maya_models", "silver", "not_null_silver__streamling_swap_details_events_in_asset"], "alias": "streamling_swap_details_events_in_asset", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.776844, "relation_name": "MAYA.not_null_silver.streamling_swap_details_events_in_asset", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "in_asset", "file_key_name": "models.silver__streamling_swap_details_events", "attached_node": "model.maya_models.silver__streamling_swap_details_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "in_asset", "model": "{{ get_where_subquery(ref('silver__streamling_swap_details_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__streamling_swap_details_events_in_e8.a0acf84a1f": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__streamling_swap_details_events_in_e8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__streamling_swap_details_events_in_e8.sql", "original_file_path": "models/silver/silver__streamling_swap_details_events.yml", "unique_id": "test.maya_models.not_null_silver__streamling_swap_details_events_in_e8.a0acf84a1f", "fqn": ["maya_models", "silver", "not_null_silver__streamling_swap_details_events_in_e8"], "alias": "streamling_swap_details_events_in_e8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.778177, "relation_name": "MAYA.not_null_silver.streamling_swap_details_events_in_e8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "in_e8", "file_key_name": "models.silver__streamling_swap_details_events", "attached_node": "model.maya_models.silver__streamling_swap_details_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "in_e8", "model": "{{ get_where_subquery(ref('silver__streamling_swap_details_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__streamling_swap_details_events_out_asset.4e10bc70d0": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__streamling_swap_details_events_out_asset", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__streamling_swap_details_events_out_asset.sql", "original_file_path": "models/silver/silver__streamling_swap_details_events.yml", "unique_id": "test.maya_models.not_null_silver__streamling_swap_details_events_out_asset.4e10bc70d0", "fqn": ["maya_models", "silver", "not_null_silver__streamling_swap_details_events_out_asset"], "alias": "streamling_swap_details_events_out_asset", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.779306, "relation_name": "MAYA.not_null_silver.streamling_swap_details_events_out_asset", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "out_asset", "file_key_name": "models.silver__streamling_swap_details_events", "attached_node": "model.maya_models.silver__streamling_swap_details_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "out_asset", "model": "{{ get_where_subquery(ref('silver__streamling_swap_details_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__streamling_swap_details_events_out_e8.3869542c15": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__streamling_swap_details_events_out_e8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__streamling_swap_details_events_out_e8.sql", "original_file_path": "models/silver/silver__streamling_swap_details_events.yml", "unique_id": "test.maya_models.not_null_silver__streamling_swap_details_events_out_e8.3869542c15", "fqn": ["maya_models", "silver", "not_null_silver__streamling_swap_details_events_out_e8"], "alias": "streamling_swap_details_events_out_e8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.780156, "relation_name": "MAYA.not_null_silver.streamling_swap_details_events_out_e8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "out_e8", "file_key_name": "models.silver__streamling_swap_details_events", "attached_node": "model.maya_models.silver__streamling_swap_details_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "out_e8", "model": "{{ get_where_subquery(ref('silver__streamling_swap_details_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__streamling_swap_details_events_event_id.84d056a572": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__streamling_swap_details_events_event_id", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__streamling_swap_details_events_event_id.sql", "original_file_path": "models/silver/silver__streamling_swap_details_events.yml", "unique_id": "test.maya_models.not_null_silver__streamling_swap_details_events_event_id.84d056a572", "fqn": ["maya_models", "silver", "not_null_silver__streamling_swap_details_events_event_id"], "alias": "streamling_swap_details_events_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.7817469, "relation_name": "MAYA.not_null_silver.streamling_swap_details_events_event_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_id", "file_key_name": "models.silver__streamling_swap_details_events", "attached_node": "model.maya_models.silver__streamling_swap_details_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('silver__streamling_swap_details_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__streamling_swap_details_events_block_timestamp.2889dd87d2": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__streamling_swap_details_events_block_timestamp", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__streamling_swap_details_events_block_timestamp.sql", "original_file_path": "models/silver/silver__streamling_swap_details_events.yml", "unique_id": "test.maya_models.not_null_silver__streamling_swap_details_events_block_timestamp.2889dd87d2", "fqn": ["maya_models", "silver", "not_null_silver__streamling_swap_details_events_block_timestamp"], "alias": "streamling_swap_details_events_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.782826, "relation_name": "MAYA.not_null_silver.streamling_swap_details_events_block_timestamp", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "block_timestamp", "file_key_name": "models.silver__streamling_swap_details_events", "attached_node": "model.maya_models.silver__streamling_swap_details_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__streamling_swap_details_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__streamling_swap_details_events_EVENT_ID.9d2418d597": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__streamling_swap_details_events_EVENT_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_c27b73911317122026ffb35ba64f208d.sql", "original_file_path": "models/silver/silver__streamling_swap_details_events.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__streamling_swap_details_events_EVENT_ID.9d2418d597", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__streamling_swap_details_events_EVENT_ID"], "alias": "streamling_swap_details_events_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c27b73911317122026ffb35ba64f208d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_c27b73911317122026ffb35ba64f208d"}, "created_at": 1741278782.783735, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.streamling_swap_details_events_EVENT_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c27b73911317122026ffb35ba64f208d\") }}", "language": "sql", "refs": [{"name": "silver__streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__streamling_swap_details_events", "attached_node": "model.maya_models.silver__streamling_swap_details_events", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["EVENT_ID"], "model": "{{ get_where_subquery(ref('silver__streamling_swap_details_events')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__block_log_TIMESTAMP.211bc1ece9": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__block_log_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__block_log_TIMESTAMP.sql", "original_file_path": "models/silver/silver__block_log.yml", "unique_id": "test.maya_models.not_null_silver__block_log_TIMESTAMP.211bc1ece9", "fqn": ["maya_models", "silver", "not_null_silver__block_log_TIMESTAMP"], "alias": "block_log_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.788189, "relation_name": "MAYA.not_null_silver.block_log_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__block_log"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TIMESTAMP", "file_key_name": "models.silver__block_log", "attached_node": "model.maya_models.silver__block_log", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__block_log')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__block_log_HEIGHT.e9a4d0156c": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__block_log_HEIGHT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__block_log_HEIGHT.sql", "original_file_path": "models/silver/silver__block_log.yml", "unique_id": "test.maya_models.not_null_silver__block_log_HEIGHT.e9a4d0156c", "fqn": ["maya_models", "silver", "not_null_silver__block_log_HEIGHT"], "alias": "block_log_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.789075, "relation_name": "MAYA.not_null_silver.block_log_HEIGHT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__block_log"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "HEIGHT", "file_key_name": "models.silver__block_log", "attached_node": "model.maya_models.silver__block_log", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HEIGHT", "model": "{{ get_where_subquery(ref('silver__block_log')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__block_log_HASH.832559848d": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__block_log_HASH", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__block_log_HASH.sql", "original_file_path": "models/silver/silver__block_log.yml", "unique_id": "test.maya_models.not_null_silver__block_log_HASH.832559848d", "fqn": ["maya_models", "silver", "not_null_silver__block_log_HASH"], "alias": "block_log_HASH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.79037, "relation_name": "MAYA.not_null_silver.block_log_HASH", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__block_log"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "HASH", "file_key_name": "models.silver__block_log", "attached_node": "model.maya_models.silver__block_log", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HASH", "model": "{{ get_where_subquery(ref('silver__block_log')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__block_log_HEIGHT__TIMESTAMP__HASH__AGG_STATE.ba5ad4e27e": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__block_log_HEIGHT__TIMESTAMP__HASH__AGG_STATE", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_00ae7d0103218d620bbdaac21883d8a7.sql", "original_file_path": "models/silver/silver__block_log.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__block_log_HEIGHT__TIMESTAMP__HASH__AGG_STATE.ba5ad4e27e", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__block_log_HEIGHT__TIMESTAMP__HASH__AGG_STATE"], "alias": "block_log_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_00ae7d0103218d620bbdaac21883d8a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_00ae7d0103218d620bbdaac21883d8a7"}, "created_at": 1741278782.79133, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.block_log_HEIGHT", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_00ae7d0103218d620bbdaac21883d8a7\") }}", "language": "sql", "refs": [{"name": "silver__block_log", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__block_log"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__block_log", "attached_node": "model.maya_models.silver__block_log", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["HEIGHT", "TIMESTAMP", "HASH", "AGG_STATE"], "model": "{{ get_where_subquery(ref('silver__block_log')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__send_messages_AMOUNT_E8.104c5a7c7e": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__send_messages_AMOUNT_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__send_messages_AMOUNT_E8.sql", "original_file_path": "models/silver/silver__send_messages.yml", "unique_id": "test.maya_models.not_null_silver__send_messages_AMOUNT_E8.104c5a7c7e", "fqn": ["maya_models", "silver", "not_null_silver__send_messages_AMOUNT_E8"], "alias": "send_messages_AMOUNT_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.7951202, "relation_name": "MAYA.not_null_silver.send_messages_AMOUNT_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__send_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__send_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_E8", "file_key_name": "models.silver__send_messages", "attached_node": "model.maya_models.silver__send_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_E8", "model": "{{ get_where_subquery(ref('silver__send_messages')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__send_messages_ASSET.94814200c0": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__send_messages_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__send_messages_ASSET.sql", "original_file_path": "models/silver/silver__send_messages.yml", "unique_id": "test.maya_models.not_null_silver__send_messages_ASSET.94814200c0", "fqn": ["maya_models", "silver", "not_null_silver__send_messages_ASSET"], "alias": "send_messages_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.7966368, "relation_name": "MAYA.not_null_silver.send_messages_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__send_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__send_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET", "file_key_name": "models.silver__send_messages", "attached_node": "model.maya_models.silver__send_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__send_messages')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__send_messages_FROM_ADDRESS.cd61a44284": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__send_messages_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__send_messages_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__send_messages.yml", "unique_id": "test.maya_models.not_null_silver__send_messages_FROM_ADDRESS.cd61a44284", "fqn": ["maya_models", "silver", "not_null_silver__send_messages_FROM_ADDRESS"], "alias": "send_messages_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.797605, "relation_name": "MAYA.not_null_silver.send_messages_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__send_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__send_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__send_messages", "attached_node": "model.maya_models.silver__send_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__send_messages')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__send_messages_TO_ADDRESS.21baa8f940": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__send_messages_TO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__send_messages_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__send_messages.yml", "unique_id": "test.maya_models.not_null_silver__send_messages_TO_ADDRESS.21baa8f940", "fqn": ["maya_models", "silver", "not_null_silver__send_messages_TO_ADDRESS"], "alias": "send_messages_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.798462, "relation_name": "MAYA.not_null_silver.send_messages_TO_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__send_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__send_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ADDRESS", "file_key_name": "models.silver__send_messages", "attached_node": "model.maya_models.silver__send_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__send_messages')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__send_messages_TX_ID.4845b0765f": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__send_messages_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__send_messages_TX_ID.sql", "original_file_path": "models/silver/silver__send_messages.yml", "unique_id": "test.maya_models.not_null_silver__send_messages_TX_ID.4845b0765f", "fqn": ["maya_models", "silver", "not_null_silver__send_messages_TX_ID"], "alias": "send_messages_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.799289, "relation_name": "MAYA.not_null_silver.send_messages_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__send_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__send_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__send_messages", "attached_node": "model.maya_models.silver__send_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__send_messages')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__send_messages_EVENT_ID.32349d2e99": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__send_messages_EVENT_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__send_messages_EVENT_ID.sql", "original_file_path": "models/silver/silver__send_messages.yml", "unique_id": "test.maya_models.not_null_silver__send_messages_EVENT_ID.32349d2e99", "fqn": ["maya_models", "silver", "not_null_silver__send_messages_EVENT_ID"], "alias": "send_messages_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.800102, "relation_name": "MAYA.not_null_silver.send_messages_EVENT_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__send_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__send_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EVENT_ID", "file_key_name": "models.silver__send_messages", "attached_node": "model.maya_models.silver__send_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_ID", "model": "{{ get_where_subquery(ref('silver__send_messages')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__send_messages_BLOCK_TIMESTAMP.e97a44bf3a": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__send_messages_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__send_messages_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__send_messages.yml", "unique_id": "test.maya_models.not_null_silver__send_messages_BLOCK_TIMESTAMP.e97a44bf3a", "fqn": ["maya_models", "silver", "not_null_silver__send_messages_BLOCK_TIMESTAMP"], "alias": "send_messages_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.800916, "relation_name": "MAYA.not_null_silver.send_messages_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__send_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__send_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__send_messages", "attached_node": "model.maya_models.silver__send_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__send_messages')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__send_messages_EVENT_ID.cf7796cd5e": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__send_messages_EVENT_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_c40b4861ec602a17270cc7723b398ab2.sql", "original_file_path": "models/silver/silver__send_messages.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__send_messages_EVENT_ID.cf7796cd5e", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__send_messages_EVENT_ID"], "alias": "send_messages_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c40b4861ec602a17270cc7723b398ab2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_c40b4861ec602a17270cc7723b398ab2"}, "created_at": 1741278782.801729, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.send_messages_EVENT_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c40b4861ec602a17270cc7723b398ab2\") }}", "language": "sql", "refs": [{"name": "silver__send_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__send_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__send_messages", "attached_node": "model.maya_models.silver__send_messages", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["EVENT_ID"], "model": "{{ get_where_subquery(ref('silver__send_messages')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__stake_events_POOL_NAME.341d5d5927": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__stake_events_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__stake_events_POOL_NAME.sql", "original_file_path": "models/silver/silver__stake_events.yml", "unique_id": "test.maya_models.not_null_silver__stake_events_POOL_NAME.341d5d5927", "fqn": ["maya_models", "silver", "not_null_silver__stake_events_POOL_NAME"], "alias": "stake_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.805331, "relation_name": "MAYA.not_null_silver.stake_events_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.silver__stake_events", "attached_node": "model.maya_models.silver__stake_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__stake_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__stake_events_ASSET_E8.23fed0c3e9": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__stake_events_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__stake_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__stake_events.yml", "unique_id": "test.maya_models.not_null_silver__stake_events_ASSET_E8.23fed0c3e9", "fqn": ["maya_models", "silver", "not_null_silver__stake_events_ASSET_E8"], "alias": "stake_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.806207, "relation_name": "MAYA.not_null_silver.stake_events_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.silver__stake_events", "attached_node": "model.maya_models.silver__stake_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__stake_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__stake_events_STAKE_UNITS.71ce8d8f55": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__stake_events_STAKE_UNITS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__stake_events_STAKE_UNITS.sql", "original_file_path": "models/silver/silver__stake_events.yml", "unique_id": "test.maya_models.not_null_silver__stake_events_STAKE_UNITS.71ce8d8f55", "fqn": ["maya_models", "silver", "not_null_silver__stake_events_STAKE_UNITS"], "alias": "stake_events_STAKE_UNITS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.807509, "relation_name": "MAYA.not_null_silver.stake_events_STAKE_UNITS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STAKE_UNITS", "file_key_name": "models.silver__stake_events", "attached_node": "model.maya_models.silver__stake_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STAKE_UNITS", "model": "{{ get_where_subquery(ref('silver__stake_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__stake_events_CACAO_E8.3fb99bec11": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__stake_events_CACAO_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__stake_events_CACAO_E8.sql", "original_file_path": "models/silver/silver__stake_events.yml", "unique_id": "test.maya_models.not_null_silver__stake_events_CACAO_E8.3fb99bec11", "fqn": ["maya_models", "silver", "not_null_silver__stake_events_CACAO_E8"], "alias": "stake_events_CACAO_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.8085608, "relation_name": "MAYA.not_null_silver.stake_events_CACAO_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CACAO_E8", "file_key_name": "models.silver__stake_events", "attached_node": "model.maya_models.silver__stake_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CACAO_E8", "model": "{{ get_where_subquery(ref('silver__stake_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__stake_events__ASSET_IN_CACAO_E8.93d05d9743": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__stake_events__ASSET_IN_CACAO_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__stake_events__ASSET_IN_CACAO_E8.sql", "original_file_path": "models/silver/silver__stake_events.yml", "unique_id": "test.maya_models.not_null_silver__stake_events__ASSET_IN_CACAO_E8.93d05d9743", "fqn": ["maya_models", "silver", "not_null_silver__stake_events__ASSET_IN_CACAO_E8"], "alias": "stake_events", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.8095202, "relation_name": "MAYA.not_null_silver.stake_events", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "_ASSET_IN_CACAO_E8", "file_key_name": "models.silver__stake_events", "attached_node": "model.maya_models.silver__stake_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_ASSET_IN_CACAO_E8", "model": "{{ get_where_subquery(ref('silver__stake_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__stake_events_BLOCK_TIMESTAMP.99273b28bf": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__stake_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__stake_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__stake_events.yml", "unique_id": "test.maya_models.not_null_silver__stake_events_BLOCK_TIMESTAMP.99273b28bf", "fqn": ["maya_models", "silver", "not_null_silver__stake_events_BLOCK_TIMESTAMP"], "alias": "stake_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.8103611, "relation_name": "MAYA.not_null_silver.stake_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__stake_events", "attached_node": "model.maya_models.silver__stake_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__stake_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__stake_events_POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__STAKE_UNITS__CACAO_TX_ID__CACAO_ADDRESS__BLOCK_TIMESTAMP__EVENT_ID.e0af54f8ef": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__stake_events_POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__STAKE_UNITS__CACAO_TX_ID__CACAO_ADDRESS__BLOCK_TIMESTAMP__EVENT_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_f1daf0d27b06f7f4b9bc67def6f5af16.sql", "original_file_path": "models/silver/silver__stake_events.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__stake_events_POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__STAKE_UNITS__CACAO_TX_ID__CACAO_ADDRESS__BLOCK_TIMESTAMP__EVENT_ID.e0af54f8ef", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__stake_events_POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__STAKE_UNITS__CACAO_TX_ID__CACAO_ADDRESS__BLOCK_TIMESTAMP__EVENT_ID"], "alias": "stake_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f1daf0d27b06f7f4b9bc67def6f5af16", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_f1daf0d27b06f7f4b9bc67def6f5af16"}, "created_at": 1741278782.8112068, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.stake_events_POOL_NAME", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f1daf0d27b06f7f4b9bc67def6f5af16\") }}", "language": "sql", "refs": [{"name": "silver__stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__stake_events", "attached_node": "model.maya_models.silver__stake_events", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["POOL_NAME", "ASSET_TX_ID", "ASSET_BLOCKCHAIN", "ASSET_ADDRESS", "STAKE_UNITS", "CACAO_TX_ID", "CACAO_ADDRESS", "BLOCK_TIMESTAMP", "EVENT_ID"], "model": "{{ get_where_subquery(ref('silver__stake_events')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP.b2bee0a774": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__rewards_event_entries.yml", "unique_id": "test.maya_models.not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP.b2bee0a774", "fqn": ["maya_models", "silver", "not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP"], "alias": "rewards_event_entries_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.815168, "relation_name": "MAYA.not_null_silver.rewards_event_entries_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__rewards_event_entries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__rewards_event_entries"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__rewards_event_entries", "attached_node": "model.maya_models.silver__rewards_event_entries", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__rewards_event_entries')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__rewards_event_entries_CACAO_E8.cb93b74b1a": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__rewards_event_entries_CACAO_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__rewards_event_entries_CACAO_E8.sql", "original_file_path": "models/silver/silver__rewards_event_entries.yml", "unique_id": "test.maya_models.not_null_silver__rewards_event_entries_CACAO_E8.cb93b74b1a", "fqn": ["maya_models", "silver", "not_null_silver__rewards_event_entries_CACAO_E8"], "alias": "rewards_event_entries_CACAO_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.816015, "relation_name": "MAYA.not_null_silver.rewards_event_entries_CACAO_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__rewards_event_entries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__rewards_event_entries"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CACAO_E8", "file_key_name": "models.silver__rewards_event_entries", "attached_node": "model.maya_models.silver__rewards_event_entries", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CACAO_E8", "model": "{{ get_where_subquery(ref('silver__rewards_event_entries')) }}"}, "namespace": null}}, "test.maya_models.not_null_silver__rewards_event_entries_POOL_NAME.714768eae5": {"database": "MAYA", "schema": "not_null_silver", "name": "not_null_silver__rewards_event_entries_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_silver__rewards_event_entries_POOL_NAME.sql", "original_file_path": "models/silver/silver__rewards_event_entries.yml", "unique_id": "test.maya_models.not_null_silver__rewards_event_entries_POOL_NAME.714768eae5", "fqn": ["maya_models", "silver", "not_null_silver__rewards_event_entries_POOL_NAME"], "alias": "rewards_event_entries_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.817065, "relation_name": "MAYA.not_null_silver.rewards_event_entries_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__rewards_event_entries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.silver__rewards_event_entries"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.silver__rewards_event_entries", "attached_node": "model.maya_models.silver__rewards_event_entries", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__rewards_event_entries')) }}"}, "namespace": null}}, "test.maya_models.dbt_utils_unique_combination_of_columns_silver__rewards_event_entries_BLOCK_TIMESTAMP__POOL_NAME__EVENT_ID.08efcdc427": {"database": "MAYA", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__rewards_event_entries_BLOCK_TIMESTAMP__POOL_NAME__EVENT_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_utils_unique_combination_o_db7243a01532c9b95f9d0b7ed2bca59b.sql", "original_file_path": "models/silver/silver__rewards_event_entries.yml", "unique_id": "test.maya_models.dbt_utils_unique_combination_of_columns_silver__rewards_event_entries_BLOCK_TIMESTAMP__POOL_NAME__EVENT_ID.08efcdc427", "fqn": ["maya_models", "silver", "dbt_utils_unique_combination_of_columns_silver__rewards_event_entries_BLOCK_TIMESTAMP__POOL_NAME__EVENT_ID"], "alias": "rewards_event_entries_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_db7243a01532c9b95f9d0b7ed2bca59b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_db7243a01532c9b95f9d0b7ed2bca59b"}, "created_at": 1741278782.818229, "relation_name": "MAYA.dbt_utils_unique_combination_of_columns_silver.rewards_event_entries_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_db7243a01532c9b95f9d0b7ed2bca59b\") }}", "language": "sql", "refs": [{"name": "silver__rewards_event_entries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.silver__rewards_event_entries"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__rewards_event_entries", "attached_node": "model.maya_models.silver__rewards_event_entries", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_TIMESTAMP", "POOL_NAME", "EVENT_ID"], "model": "{{ get_where_subquery(ref('silver__rewards_event_entries')) }}"}, "namespace": "dbt_utils"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID.f1690ca9f9": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_ceaa802a683244c60b2f0fe34f0b324e.sql", "original_file_path": "models/gold/core/core__fact_mayaname_change_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID.f1690ca9f9", "fqn": ["maya_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID"], "alias": "fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ceaa802a683244c60b2f0fe34f0b324e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ceaa802a683244c60b2f0fe34f0b324e"}, "created_at": 1741278782.823104, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_core.fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ceaa802a683244c60b2f0fe34f0b324e\") }}", "language": "sql", "refs": [{"name": "core__fact_mayaname_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__fact_mayaname_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_MAYANAME_CHANGE_EVENTS_ID", "file_key_name": "models.core__fact_mayaname_change_events", "attached_node": "model.maya_models.core__fact_mayaname_change_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_MAYANAME_CHANGE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_mayaname_change_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID.9f4f6034c6": {"database": "MAYA", "schema": "unique_core", "name": "unique_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_core__fact_mayaname_cha_7e4deea9a85a4de7a24c1f33d8b4fea8.sql", "original_file_path": "models/gold/core/core__fact_mayaname_change_events.yml", "unique_id": "test.maya_models.unique_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID.9f4f6034c6", "fqn": ["maya_models", "gold", "core", "unique_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID"], "alias": "fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_core__fact_mayaname_cha_7e4deea9a85a4de7a24c1f33d8b4fea8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "unique_core__fact_mayaname_cha_7e4deea9a85a4de7a24c1f33d8b4fea8"}, "created_at": 1741278782.827879, "relation_name": "MAYA.unique_core.fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_core__fact_mayaname_cha_7e4deea9a85a4de7a24c1f33d8b4fea8\") }}", "language": "sql", "refs": [{"name": "core__fact_mayaname_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.core__fact_mayaname_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_MAYANAME_CHANGE_EVENTS_ID", "file_key_name": "models.core__fact_mayaname_change_events", "attached_node": "model.maya_models.core__fact_mayaname_change_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_MAYANAME_CHANGE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_mayaname_change_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__fact_mayaname_change_events_BLOCK_TIMESTAMP.9ce56f203c": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__fact_mayaname_change_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__fact_mayaname_change_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/core/core__fact_mayaname_change_events.yml", "unique_id": "test.maya_models.not_null_core__fact_mayaname_change_events_BLOCK_TIMESTAMP.9ce56f203c", "fqn": ["maya_models", "gold", "core", "not_null_core__fact_mayaname_change_events_BLOCK_TIMESTAMP"], "alias": "fact_mayaname_change_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278782.829, "relation_name": "MAYA.not_null_core.fact_mayaname_change_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "core__fact_mayaname_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__fact_mayaname_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_mayaname_change_events", "attached_node": "model.maya_models.core__fact_mayaname_change_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_mayaname_change_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_core__fact_mayaname_change_events_DIM_BLOCK_ID.b8b82e83de": {"database": "MAYA", "schema": "negative_one_core", "name": "negative_one_core__fact_mayaname_change_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_core__fact_mayaname_change_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/core/core__fact_mayaname_change_events.yml", "unique_id": "test.maya_models.negative_one_core__fact_mayaname_change_events_DIM_BLOCK_ID.b8b82e83de", "fqn": ["maya_models", "gold", "core", "negative_one_core__fact_mayaname_change_events_DIM_BLOCK_ID"], "alias": "fact_mayaname_change_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278782.83003, "relation_name": "MAYA.negative_one_core.fact_mayaname_change_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "core__fact_mayaname_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__fact_mayaname_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_mayaname_change_events", "attached_node": "model.maya_models.core__fact_mayaname_change_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_mayaname_change_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID.67404a158e": {"database": "MAYA", "schema": "dbt_constraints_primary_key_core", "name": "dbt_constraints_primary_key_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_co_d0dc4cd46f0db1f3619cde58d60495f3.sql", "original_file_path": "models/gold/core/core__fact_mayaname_change_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID.67404a158e", "fqn": ["maya_models", "gold", "core", "dbt_constraints_primary_key_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID"], "alias": "fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_d0dc4cd46f0db1f3619cde58d60495f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_d0dc4cd46f0db1f3619cde58d60495f3"}, "created_at": 1741278782.83282, "relation_name": "MAYA.dbt_constraints_primary_key_core.fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_d0dc4cd46f0db1f3619cde58d60495f3\") }}", "language": "sql", "refs": [{"name": "core__fact_mayaname_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__fact_mayaname_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_mayaname_change_events", "attached_node": "model.maya_models.core__fact_mayaname_change_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_MAYANAME_CHANGE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_mayaname_change_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_core__fact_mayaname_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cc1edff2ff": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_core", "name": "dbt_constraints_foreign_key_core__fact_mayaname_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_co_d2726108aae03859cd6459ca653d8829.sql", "original_file_path": "models/gold/core/core__fact_mayaname_change_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_core__fact_mayaname_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cc1edff2ff", "fqn": ["maya_models", "gold", "core", "dbt_constraints_foreign_key_core__fact_mayaname_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_mayaname_change_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_d2726108aae03859cd6459ca653d8829", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_d2726108aae03859cd6459ca653d8829"}, "created_at": 1741278782.841697, "relation_name": "MAYA.dbt_constraints_foreign_key_core.fact_mayaname_change_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_d2726108aae03859cd6459ca653d8829\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "core__fact_mayaname_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.core__fact_mayaname_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_mayaname_change_events", "attached_node": "model.maya_models.core__fact_mayaname_change_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_mayaname_change_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID.3b69086dc7": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_309d406d76df03445d3583ba220c4a82.sql", "original_file_path": "models/gold/core/core__dim_block.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID.3b69086dc7", "fqn": ["maya_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID"], "alias": "dim_block_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_309d406d76df03445d3583ba220c4a82", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_309d406d76df03445d3583ba220c4a82"}, "created_at": 1741278782.854377, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_core.dim_block_DIM_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_309d406d76df03445d3583ba220c4a82\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__dim_block", "attached_node": "model.maya_models.core__dim_block", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.not_null_core__dim_block_BLOCK_ID.4093a445bc": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__dim_block_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__dim_block_BLOCK_ID.sql", "original_file_path": "models/gold/core/core__dim_block.yml", "unique_id": "test.maya_models.not_null_core__dim_block_BLOCK_ID.4093a445bc", "fqn": ["maya_models", "gold", "core", "not_null_core__dim_block_BLOCK_ID"], "alias": "dim_block_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278782.856988, "relation_name": "MAYA.not_null_core.dim_block_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.core__dim_block", "attached_node": "model.maya_models.core__dim_block", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__dim_block_BLOCK_TIMESTAMP.0e822266b8": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__dim_block_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__dim_block_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/core/core__dim_block.yml", "unique_id": "test.maya_models.not_null_core__dim_block_BLOCK_TIMESTAMP.0e822266b8", "fqn": ["maya_models", "gold", "core", "not_null_core__dim_block_BLOCK_TIMESTAMP"], "alias": "dim_block_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278782.8579252, "relation_name": "MAYA.not_null_core.dim_block_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__dim_block", "attached_node": "model.maya_models.core__dim_block", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}}, "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1.412ac293c7": {"database": "MAYA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_row_va_6c239171eef91186fe7212448c07c99b.sql", "original_file_path": "models/gold/core/core__dim_block.yml", "unique_id": "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1.412ac293c7", "fqn": ["maya_models", "gold", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1"], "alias": "dim_block_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_6c239171eef91186fe7212448c07c99b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_6c239171eef91186fe7212448c07c99b"}, "created_at": 1741278782.8587599, "relation_name": "MAYA.dbt_expectations_expect_row_values_to_have_recent_data_core.dim_block_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_6c239171eef91186fe7212448c07c99b\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__dim_block", "attached_node": "model.maya_models.core__dim_block", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.not_null_core__dim_block_BLOCK_DATE.fcae0dfd62": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__dim_block_BLOCK_DATE", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__dim_block_BLOCK_DATE.sql", "original_file_path": "models/gold/core/core__dim_block.yml", "unique_id": "test.maya_models.not_null_core__dim_block_BLOCK_DATE.fcae0dfd62", "fqn": ["maya_models", "gold", "core", "not_null_core__dim_block_BLOCK_DATE"], "alias": "dim_block_BLOCK_DATE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278782.8626828, "relation_name": "MAYA.not_null_core.dim_block_BLOCK_DATE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_DATE", "file_key_name": "models.core__dim_block", "attached_node": "model.maya_models.core__dim_block", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_DATE", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__dim_block_BLOCK_HOUR.4bdf258b00": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__dim_block_BLOCK_HOUR", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__dim_block_BLOCK_HOUR.sql", "original_file_path": "models/gold/core/core__dim_block.yml", "unique_id": "test.maya_models.not_null_core__dim_block_BLOCK_HOUR.4bdf258b00", "fqn": ["maya_models", "gold", "core", "not_null_core__dim_block_BLOCK_HOUR"], "alias": "dim_block_BLOCK_HOUR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278782.8635788, "relation_name": "MAYA.not_null_core.dim_block_BLOCK_HOUR", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_HOUR", "file_key_name": "models.core__dim_block", "attached_node": "model.maya_models.core__dim_block", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HOUR", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__dim_block_BLOCK_WEEK.bd31abb003": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__dim_block_BLOCK_WEEK", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__dim_block_BLOCK_WEEK.sql", "original_file_path": "models/gold/core/core__dim_block.yml", "unique_id": "test.maya_models.not_null_core__dim_block_BLOCK_WEEK.bd31abb003", "fqn": ["maya_models", "gold", "core", "not_null_core__dim_block_BLOCK_WEEK"], "alias": "dim_block_BLOCK_WEEK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278782.8644679, "relation_name": "MAYA.not_null_core.dim_block_BLOCK_WEEK", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_WEEK", "file_key_name": "models.core__dim_block", "attached_node": "model.maya_models.core__dim_block", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_WEEK", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__dim_block_TIMESTAMP.2e8fff01ed": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__dim_block_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__dim_block_TIMESTAMP.sql", "original_file_path": "models/gold/core/core__dim_block.yml", "unique_id": "test.maya_models.not_null_core__dim_block_TIMESTAMP.2e8fff01ed", "fqn": ["maya_models", "gold", "core", "not_null_core__dim_block_TIMESTAMP"], "alias": "dim_block_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278782.865282, "relation_name": "MAYA.not_null_core.dim_block_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TIMESTAMP", "file_key_name": "models.core__dim_block", "attached_node": "model.maya_models.core__dim_block", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__dim_block_HASH.b08299a937": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__dim_block_HASH", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__dim_block_HASH.sql", "original_file_path": "models/gold/core/core__dim_block.yml", "unique_id": "test.maya_models.not_null_core__dim_block_HASH.b08299a937", "fqn": ["maya_models", "gold", "core", "not_null_core__dim_block_HASH"], "alias": "dim_block_HASH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278782.866078, "relation_name": "MAYA.not_null_core.dim_block_HASH", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "HASH", "file_key_name": "models.core__dim_block", "attached_node": "model.maya_models.core__dim_block", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HASH", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.6c2c5b98b3": {"database": "MAYA", "schema": "dbt_constraints_primary_key_core", "name": "dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/core/core__dim_block.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.6c2c5b98b3", "fqn": ["maya_models", "gold", "core", "dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID"], "alias": "dim_block_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.866878, "relation_name": "MAYA.dbt_constraints_primary_key_core.dim_block_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__dim_block", "attached_node": "model.maya_models.core__dim_block", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b834b16336": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_3f78b096af622f5460bee906bf38ec62.sql", "original_file_path": "models/gold/core/core__fact_transfer_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b834b16336", "fqn": ["maya_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID"], "alias": "fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3f78b096af622f5460bee906bf38ec62", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3f78b096af622f5460bee906bf38ec62"}, "created_at": 1741278782.870425, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_core.fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3f78b096af622f5460bee906bf38ec62\") }}", "language": "sql", "refs": [{"name": "core__fact_transfer_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__fact_transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_TRANSFER_EVENTS_ID", "file_key_name": "models.core__fact_transfer_events", "attached_node": "model.maya_models.core__fact_transfer_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_TRANSFER_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b97c8780e8": {"database": "MAYA", "schema": "unique_core", "name": "unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.sql", "original_file_path": "models/gold/core/core__fact_transfer_events.yml", "unique_id": "test.maya_models.unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b97c8780e8", "fqn": ["maya_models", "gold", "core", "unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID"], "alias": "fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.8728461, "relation_name": "MAYA.unique_core.fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transfer_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.core__fact_transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_TRANSFER_EVENTS_ID", "file_key_name": "models.core__fact_transfer_events", "attached_node": "model.maya_models.core__fact_transfer_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_TRANSFER_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__fact_transfer_events_BLOCK_TIMESTAMP.307906b318": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__fact_transfer_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__fact_transfer_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/core/core__fact_transfer_events.yml", "unique_id": "test.maya_models.not_null_core__fact_transfer_events_BLOCK_TIMESTAMP.307906b318", "fqn": ["maya_models", "gold", "core", "not_null_core__fact_transfer_events_BLOCK_TIMESTAMP"], "alias": "fact_transfer_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278782.873698, "relation_name": "MAYA.not_null_core.fact_transfer_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "core__fact_transfer_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__fact_transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transfer_events", "attached_node": "model.maya_models.core__fact_transfer_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_core__fact_transfer_events_DIM_BLOCK_ID.2e128858c5": {"database": "MAYA", "schema": "negative_one_core", "name": "negative_one_core__fact_transfer_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_core__fact_transfer_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/core/core__fact_transfer_events.yml", "unique_id": "test.maya_models.negative_one_core__fact_transfer_events_DIM_BLOCK_ID.2e128858c5", "fqn": ["maya_models", "gold", "core", "negative_one_core__fact_transfer_events_DIM_BLOCK_ID"], "alias": "fact_transfer_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278782.874596, "relation_name": "MAYA.negative_one_core.fact_transfer_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "core__fact_transfer_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__fact_transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_transfer_events", "attached_node": "model.maya_models.core__fact_transfer_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__fact_transfer_events_FROM_ADDRESS.2e1a952935": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__fact_transfer_events_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__fact_transfer_events_FROM_ADDRESS.sql", "original_file_path": "models/gold/core/core__fact_transfer_events.yml", "unique_id": "test.maya_models.not_null_core__fact_transfer_events_FROM_ADDRESS.2e1a952935", "fqn": ["maya_models", "gold", "core", "not_null_core__fact_transfer_events_FROM_ADDRESS"], "alias": "fact_transfer_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.877444, "relation_name": "MAYA.not_null_core.fact_transfer_events_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transfer_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__fact_transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.core__fact_transfer_events", "attached_node": "model.maya_models.core__fact_transfer_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__fact_transfer_events_TO_ADDRESS.14f29de988": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__fact_transfer_events_TO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__fact_transfer_events_TO_ADDRESS.sql", "original_file_path": "models/gold/core/core__fact_transfer_events.yml", "unique_id": "test.maya_models.not_null_core__fact_transfer_events_TO_ADDRESS.14f29de988", "fqn": ["maya_models", "gold", "core", "not_null_core__fact_transfer_events_TO_ADDRESS"], "alias": "fact_transfer_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.878409, "relation_name": "MAYA.not_null_core.fact_transfer_events_TO_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transfer_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__fact_transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ADDRESS", "file_key_name": "models.core__fact_transfer_events", "attached_node": "model.maya_models.core__fact_transfer_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__fact_transfer_events_ASSET.bacb47e2e3": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__fact_transfer_events_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__fact_transfer_events_ASSET.sql", "original_file_path": "models/gold/core/core__fact_transfer_events.yml", "unique_id": "test.maya_models.not_null_core__fact_transfer_events_ASSET.bacb47e2e3", "fqn": ["maya_models", "gold", "core", "not_null_core__fact_transfer_events_ASSET"], "alias": "fact_transfer_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.87922, "relation_name": "MAYA.not_null_core.fact_transfer_events_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transfer_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__fact_transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET", "file_key_name": "models.core__fact_transfer_events", "attached_node": "model.maya_models.core__fact_transfer_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__fact_transfer_events_AMOUNT_E8.4fe1565b1c": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__fact_transfer_events_AMOUNT_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__fact_transfer_events_AMOUNT_E8.sql", "original_file_path": "models/gold/core/core__fact_transfer_events.yml", "unique_id": "test.maya_models.not_null_core__fact_transfer_events_AMOUNT_E8.4fe1565b1c", "fqn": ["maya_models", "gold", "core", "not_null_core__fact_transfer_events_AMOUNT_E8"], "alias": "fact_transfer_events_AMOUNT_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.880021, "relation_name": "MAYA.not_null_core.fact_transfer_events_AMOUNT_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transfer_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__fact_transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_E8", "file_key_name": "models.core__fact_transfer_events", "attached_node": "model.maya_models.core__fact_transfer_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_E8", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.2d391ee070": {"database": "MAYA", "schema": "dbt_constraints_primary_key_core", "name": "dbt_constraints_primary_key_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_co_f0b3f2440defbbd4fb9d4a0788c734c7.sql", "original_file_path": "models/gold/core/core__fact_transfer_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.2d391ee070", "fqn": ["maya_models", "gold", "core", "dbt_constraints_primary_key_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID"], "alias": "fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_f0b3f2440defbbd4fb9d4a0788c734c7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_f0b3f2440defbbd4fb9d4a0788c734c7"}, "created_at": 1741278782.880828, "relation_name": "MAYA.dbt_constraints_primary_key_core.fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_f0b3f2440defbbd4fb9d4a0788c734c7\") }}", "language": "sql", "refs": [{"name": "core__fact_transfer_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__fact_transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_transfer_events", "attached_node": "model.maya_models.core__fact_transfer_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_TRANSFER_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_core__fact_transfer_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.3478d94d61": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_core", "name": "dbt_constraints_foreign_key_core__fact_transfer_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_co_3bc56d9ad76543581ca71391b151908e.sql", "original_file_path": "models/gold/core/core__fact_transfer_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_core__fact_transfer_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.3478d94d61", "fqn": ["maya_models", "gold", "core", "dbt_constraints_foreign_key_core__fact_transfer_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_transfer_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_3bc56d9ad76543581ca71391b151908e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_3bc56d9ad76543581ca71391b151908e"}, "created_at": 1741278782.88346, "relation_name": "MAYA.dbt_constraints_foreign_key_core.fact_transfer_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_3bc56d9ad76543581ca71391b151908e\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "core__fact_transfer_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.core__fact_transfer_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_transfer_events", "attached_node": "model.maya_models.core__fact_transfer_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.ae85001246": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_c18dd502ec242a553432f5af802239eb.sql", "original_file_path": "models/gold/core/core__fact_set_mimir_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.ae85001246", "fqn": ["maya_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID"], "alias": "fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c18dd502ec242a553432f5af802239eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c18dd502ec242a553432f5af802239eb"}, "created_at": 1741278782.887434, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_core.fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c18dd502ec242a553432f5af802239eb\") }}", "language": "sql", "refs": [{"name": "core__fact_set_mimir_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__fact_set_mimir_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SET_MIMIR_EVENTS_ID", "file_key_name": "models.core__fact_set_mimir_events", "attached_node": "model.maya_models.core__fact_set_mimir_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SET_MIMIR_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_set_mimir_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.449f05e794": {"database": "MAYA", "schema": "unique_core", "name": "unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.sql", "original_file_path": "models/gold/core/core__fact_set_mimir_events.yml", "unique_id": "test.maya_models.unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.449f05e794", "fqn": ["maya_models", "gold", "core", "unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID"], "alias": "fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.889956, "relation_name": "MAYA.unique_core.fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_set_mimir_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.core__fact_set_mimir_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SET_MIMIR_EVENTS_ID", "file_key_name": "models.core__fact_set_mimir_events", "attached_node": "model.maya_models.core__fact_set_mimir_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SET_MIMIR_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_set_mimir_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP.5ba3385f5b": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/core/core__fact_set_mimir_events.yml", "unique_id": "test.maya_models.not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP.5ba3385f5b", "fqn": ["maya_models", "gold", "core", "not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP"], "alias": "fact_set_mimir_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278782.89086, "relation_name": "MAYA.not_null_core.fact_set_mimir_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "core__fact_set_mimir_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__fact_set_mimir_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_set_mimir_events", "attached_node": "model.maya_models.core__fact_set_mimir_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_set_mimir_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID.f97f1b5336": {"database": "MAYA", "schema": "negative_one_core", "name": "negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/core/core__fact_set_mimir_events.yml", "unique_id": "test.maya_models.negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID.f97f1b5336", "fqn": ["maya_models", "gold", "core", "negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID"], "alias": "fact_set_mimir_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278782.891735, "relation_name": "MAYA.negative_one_core.fact_set_mimir_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "core__fact_set_mimir_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__fact_set_mimir_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_set_mimir_events", "attached_node": "model.maya_models.core__fact_set_mimir_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_set_mimir_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.9f1768474c": {"database": "MAYA", "schema": "dbt_constraints_primary_key_core", "name": "dbt_constraints_primary_key_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_co_29c36f43ef79e9701fcfa30f70faee60.sql", "original_file_path": "models/gold/core/core__fact_set_mimir_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.9f1768474c", "fqn": ["maya_models", "gold", "core", "dbt_constraints_primary_key_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID"], "alias": "fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_29c36f43ef79e9701fcfa30f70faee60", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_29c36f43ef79e9701fcfa30f70faee60"}, "created_at": 1741278782.894262, "relation_name": "MAYA.dbt_constraints_primary_key_core.fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_29c36f43ef79e9701fcfa30f70faee60\") }}", "language": "sql", "refs": [{"name": "core__fact_set_mimir_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__fact_set_mimir_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_set_mimir_events", "attached_node": "model.maya_models.core__fact_set_mimir_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SET_MIMIR_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_set_mimir_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_core__fact_set_mimir_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f0eb017ef2": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_core", "name": "dbt_constraints_foreign_key_core__fact_set_mimir_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_co_ceea5bbfc0bb0f67adac2e7893c0f657.sql", "original_file_path": "models/gold/core/core__fact_set_mimir_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_core__fact_set_mimir_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f0eb017ef2", "fqn": ["maya_models", "gold", "core", "dbt_constraints_foreign_key_core__fact_set_mimir_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_set_mimir_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_ceea5bbfc0bb0f67adac2e7893c0f657", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_ceea5bbfc0bb0f67adac2e7893c0f657"}, "created_at": 1741278782.897343, "relation_name": "MAYA.dbt_constraints_foreign_key_core.fact_set_mimir_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_ceea5bbfc0bb0f67adac2e7893c0f657\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "core__fact_set_mimir_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.core__fact_set_mimir_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_set_mimir_events", "attached_node": "model.maya_models.core__fact_set_mimir_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_set_mimir_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID.7e9e26b3be": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_f33033eedca544790d34a7e1504c10b5.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID.7e9e26b3be", "fqn": ["maya_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID"], "alias": "fact_transfers_FACT_TRANSFERS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f33033eedca544790d34a7e1504c10b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f33033eedca544790d34a7e1504c10b5"}, "created_at": 1741278782.901311, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_core.fact_transfers_FACT_TRANSFERS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f33033eedca544790d34a7e1504c10b5\") }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_TRANSFERS_ID", "file_key_name": "models.core__fact_transfers", "attached_node": "model.maya_models.core__fact_transfers", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_TRANSFERS_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_core__fact_transfers_FACT_TRANSFERS_ID.385cd38e6c": {"database": "MAYA", "schema": "unique_core", "name": "unique_core__fact_transfers_FACT_TRANSFERS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_core__fact_transfers_FACT_TRANSFERS_ID.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.maya_models.unique_core__fact_transfers_FACT_TRANSFERS_ID.385cd38e6c", "fqn": ["maya_models", "gold", "core", "unique_core__fact_transfers_FACT_TRANSFERS_ID"], "alias": "fact_transfers_FACT_TRANSFERS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.90388, "relation_name": "MAYA.unique_core.fact_transfers_FACT_TRANSFERS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_TRANSFERS_ID", "file_key_name": "models.core__fact_transfers", "attached_node": "model.maya_models.core__fact_transfers", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_TRANSFERS_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__fact_transfers_BLOCK_TIMESTAMP.bdf9b015dd": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__fact_transfers_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__fact_transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.maya_models.not_null_core__fact_transfers_BLOCK_TIMESTAMP.bdf9b015dd", "fqn": ["maya_models", "gold", "core", "not_null_core__fact_transfers_BLOCK_TIMESTAMP"], "alias": "fact_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278782.904725, "relation_name": "MAYA.not_null_core.fact_transfers_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transfers", "attached_node": "model.maya_models.core__fact_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}}, "test.maya_models.negative_one_core__fact_transfers_DIM_BLOCK_ID.09484decc3": {"database": "MAYA", "schema": "negative_one_core", "name": "negative_one_core__fact_transfers_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_core__fact_transfers_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.maya_models.negative_one_core__fact_transfers_DIM_BLOCK_ID.09484decc3", "fqn": ["maya_models", "gold", "core", "negative_one_core__fact_transfers_DIM_BLOCK_ID"], "alias": "fact_transfers_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278782.906107, "relation_name": "MAYA.negative_one_core.fact_transfers_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_transfers", "attached_node": "model.maya_models.core__fact_transfers", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__fact_transfers_FROM_ADDRESS.b75e3a345a": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__fact_transfers_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__fact_transfers_FROM_ADDRESS.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.maya_models.not_null_core__fact_transfers_FROM_ADDRESS.b75e3a345a", "fqn": ["maya_models", "gold", "core", "not_null_core__fact_transfers_FROM_ADDRESS"], "alias": "fact_transfers_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.908604, "relation_name": "MAYA.not_null_core.fact_transfers_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.core__fact_transfers", "attached_node": "model.maya_models.core__fact_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__fact_transfers_TO_ADDRESS.b8db4a5a70": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__fact_transfers_TO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__fact_transfers_TO_ADDRESS.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.maya_models.not_null_core__fact_transfers_TO_ADDRESS.b8db4a5a70", "fqn": ["maya_models", "gold", "core", "not_null_core__fact_transfers_TO_ADDRESS"], "alias": "fact_transfers_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.909431, "relation_name": "MAYA.not_null_core.fact_transfers_TO_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ADDRESS", "file_key_name": "models.core__fact_transfers", "attached_node": "model.maya_models.core__fact_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__fact_transfers_ASSET.77d44cdd84": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__fact_transfers_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__fact_transfers_ASSET.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.maya_models.not_null_core__fact_transfers_ASSET.77d44cdd84", "fqn": ["maya_models", "gold", "core", "not_null_core__fact_transfers_ASSET"], "alias": "fact_transfers_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.910227, "relation_name": "MAYA.not_null_core.fact_transfers_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET", "file_key_name": "models.core__fact_transfers", "attached_node": "model.maya_models.core__fact_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__fact_transfers_cacao_AMOUNT.37b422cd3d": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__fact_transfers_cacao_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__fact_transfers_cacao_AMOUNT.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.maya_models.not_null_core__fact_transfers_cacao_AMOUNT.37b422cd3d", "fqn": ["maya_models", "gold", "core", "not_null_core__fact_transfers_cacao_AMOUNT"], "alias": "fact_transfers_cacao_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.911027, "relation_name": "MAYA.not_null_core.fact_transfers_cacao_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_AMOUNT", "file_key_name": "models.core__fact_transfers", "attached_node": "model.maya_models.core__fact_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}}, "test.maya_models.not_null_core__fact_transfers_cacao_AMOUNT_USD.ebd0803995": {"database": "MAYA", "schema": "not_null_core", "name": "not_null_core__fact_transfers_cacao_AMOUNT_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_core__fact_transfers_cacao_AMOUNT_USD.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.maya_models.not_null_core__fact_transfers_cacao_AMOUNT_USD.ebd0803995", "fqn": ["maya_models", "gold", "core", "not_null_core__fact_transfers_cacao_AMOUNT_USD"], "alias": "fact_transfers_cacao_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.91183, "relation_name": "MAYA.not_null_core.fact_transfers_cacao_AMOUNT_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_AMOUNT_USD", "file_key_name": "models.core__fact_transfers", "attached_node": "model.maya_models.core__fact_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_AMOUNT_USD", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_core__fact_transfers_FACT_TRANSFERS_ID.0e37c8cbc3": {"database": "MAYA", "schema": "dbt_constraints_primary_key_core", "name": "dbt_constraints_primary_key_core__fact_transfers_FACT_TRANSFERS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_co_bdc95aa817aa3fa7e2c463935132fed9.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_core__fact_transfers_FACT_TRANSFERS_ID.0e37c8cbc3", "fqn": ["maya_models", "gold", "core", "dbt_constraints_primary_key_core__fact_transfers_FACT_TRANSFERS_ID"], "alias": "fact_transfers_FACT_TRANSFERS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_bdc95aa817aa3fa7e2c463935132fed9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_bdc95aa817aa3fa7e2c463935132fed9"}, "created_at": 1741278782.913616, "relation_name": "MAYA.dbt_constraints_primary_key_core.fact_transfers_FACT_TRANSFERS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_bdc95aa817aa3fa7e2c463935132fed9\") }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_transfers", "attached_node": "model.maya_models.core__fact_transfers", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_TRANSFERS_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_core__fact_transfers_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e0e628ae42": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_core", "name": "dbt_constraints_foreign_key_core__fact_transfers_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_co_98f70b02867a216312d9911c211ad792.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_core__fact_transfers_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e0e628ae42", "fqn": ["maya_models", "gold", "core", "dbt_constraints_foreign_key_core__fact_transfers_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_transfers_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_98f70b02867a216312d9911c211ad792", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_98f70b02867a216312d9911c211ad792"}, "created_at": 1741278782.916372, "relation_name": "MAYA.dbt_constraints_foreign_key_core.fact_transfers_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_98f70b02867a216312d9911c211ad792\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_transfers", "attached_node": "model.maya_models.core__fact_transfers", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_price__fact_cacao_price_FACT_cacao_PRICE_ID.f9b7879357": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_price", "name": "dbt_expectations_expect_column_to_exist_price__fact_cacao_price_FACT_cacao_PRICE_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_8ea867d16c1dbb5f810f5c687a225b84.sql", "original_file_path": "models/gold/price/price__fact_cacao_price.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_price__fact_cacao_price_FACT_cacao_PRICE_ID.f9b7879357", "fqn": ["maya_models", "gold", "price", "dbt_expectations_expect_column_to_exist_price__fact_cacao_price_FACT_cacao_PRICE_ID"], "alias": "fact_cacao_price_FACT_cacao_PRICE_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8ea867d16c1dbb5f810f5c687a225b84", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8ea867d16c1dbb5f810f5c687a225b84"}, "created_at": 1741278782.920363, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_price.fact_cacao_price_FACT_cacao_PRICE_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8ea867d16c1dbb5f810f5c687a225b84\") }}", "language": "sql", "refs": [{"name": "price__fact_cacao_price", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.price__fact_cacao_price"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_cacao_PRICE_ID", "file_key_name": "models.price__fact_cacao_price", "attached_node": "model.maya_models.price__fact_cacao_price", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_cacao_PRICE_ID", "model": "{{ get_where_subquery(ref('price__fact_cacao_price')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_price__fact_cacao_price_FACT_cacao_PRICE_ID.0e01ec76f4": {"database": "MAYA", "schema": "unique_price", "name": "unique_price__fact_cacao_price_FACT_cacao_PRICE_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_price__fact_cacao_price_FACT_cacao_PRICE_ID.sql", "original_file_path": "models/gold/price/price__fact_cacao_price.yml", "unique_id": "test.maya_models.unique_price__fact_cacao_price_FACT_cacao_PRICE_ID.0e01ec76f4", "fqn": ["maya_models", "gold", "price", "unique_price__fact_cacao_price_FACT_cacao_PRICE_ID"], "alias": "fact_cacao_price_FACT_cacao_PRICE_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.922936, "relation_name": "MAYA.unique_price.fact_cacao_price_FACT_cacao_PRICE_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "price__fact_cacao_price", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.price__fact_cacao_price"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_cacao_PRICE_ID", "file_key_name": "models.price__fact_cacao_price", "attached_node": "model.maya_models.price__fact_cacao_price", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_cacao_PRICE_ID", "model": "{{ get_where_subquery(ref('price__fact_cacao_price')) }}"}, "namespace": null}}, "test.maya_models.not_null_price__fact_cacao_price_BLOCK_TIMESTAMP.bb1afdc573": {"database": "MAYA", "schema": "not_null_price", "name": "not_null_price__fact_cacao_price_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_price__fact_cacao_price_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/price/price__fact_cacao_price.yml", "unique_id": "test.maya_models.not_null_price__fact_cacao_price_BLOCK_TIMESTAMP.bb1afdc573", "fqn": ["maya_models", "gold", "price", "not_null_price__fact_cacao_price_BLOCK_TIMESTAMP"], "alias": "fact_cacao_price_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278782.92379, "relation_name": "MAYA.not_null_price.fact_cacao_price_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "price__fact_cacao_price", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.price__fact_cacao_price"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.price__fact_cacao_price", "attached_node": "model.maya_models.price__fact_cacao_price", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('price__fact_cacao_price')) }}"}, "namespace": null}}, "test.maya_models.negative_one_price__fact_cacao_price_DIM_BLOCK_ID.76c72bb6e6": {"database": "MAYA", "schema": "negative_one_price", "name": "negative_one_price__fact_cacao_price_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_price__fact_cacao_price_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/price/price__fact_cacao_price.yml", "unique_id": "test.maya_models.negative_one_price__fact_cacao_price_DIM_BLOCK_ID.76c72bb6e6", "fqn": ["maya_models", "gold", "price", "negative_one_price__fact_cacao_price_DIM_BLOCK_ID"], "alias": "fact_cacao_price_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "BLOCK_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278782.9248571, "relation_name": "MAYA.negative_one_price.fact_cacao_price_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "price__fact_cacao_price", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.price__fact_cacao_price"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.price__fact_cacao_price", "attached_node": "model.maya_models.price__fact_cacao_price", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('price__fact_cacao_price')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_price__fact_cacao_price_FACT_cacao_PRICE_ID.c5f3967993": {"database": "MAYA", "schema": "dbt_constraints_primary_key_price", "name": "dbt_constraints_primary_key_price__fact_cacao_price_FACT_cacao_PRICE_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_pr_c8b46407167bc0052561b98a2ce58c8f.sql", "original_file_path": "models/gold/price/price__fact_cacao_price.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_price__fact_cacao_price_FACT_cacao_PRICE_ID.c5f3967993", "fqn": ["maya_models", "gold", "price", "dbt_constraints_primary_key_price__fact_cacao_price_FACT_cacao_PRICE_ID"], "alias": "fact_cacao_price_FACT_cacao_PRICE_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_pr_c8b46407167bc0052561b98a2ce58c8f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_pr_c8b46407167bc0052561b98a2ce58c8f"}, "created_at": 1741278782.9272692, "relation_name": "MAYA.dbt_constraints_primary_key_price.fact_cacao_price_FACT_cacao_PRICE_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_pr_c8b46407167bc0052561b98a2ce58c8f\") }}", "language": "sql", "refs": [{"name": "price__fact_cacao_price", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.price__fact_cacao_price"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.price__fact_cacao_price", "attached_node": "model.maya_models.price__fact_cacao_price", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_cacao_PRICE_ID", "model": "{{ get_where_subquery(ref('price__fact_cacao_price')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_price__fact_cacao_price_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.86ae6c3419": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_price", "name": "dbt_constraints_foreign_key_price__fact_cacao_price_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_pr_f627a5916048f14666eb38ebe1dddb4e.sql", "original_file_path": "models/gold/price/price__fact_cacao_price.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_price__fact_cacao_price_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.86ae6c3419", "fqn": ["maya_models", "gold", "price", "dbt_constraints_foreign_key_price__fact_cacao_price_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_cacao_price_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_pr_f627a5916048f14666eb38ebe1dddb4e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_pr_f627a5916048f14666eb38ebe1dddb4e"}, "created_at": 1741278782.930295, "relation_name": "MAYA.dbt_constraints_foreign_key_price.fact_cacao_price_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_pr_f627a5916048f14666eb38ebe1dddb4e\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "price__fact_cacao_price", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.price__fact_cacao_price"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.price__fact_cacao_price", "attached_node": "model.maya_models.price__fact_cacao_price", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('price__fact_cacao_price')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID.50d38af79b": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_f9e4b3511676fdccd1996c1be1a38906.sql", "original_file_path": "models/gold/defi/defi__fact_streamling_swap_details_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID.50d38af79b", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID"], "alias": "fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f9e4b3511676fdccd1996c1be1a38906", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f9e4b3511676fdccd1996c1be1a38906"}, "created_at": 1741278782.93568, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f9e4b3511676fdccd1996c1be1a38906\") }}", "language": "sql", "refs": [{"name": "defi__fact_streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID", "file_key_name": "models.defi__fact_streamling_swap_details_events", "attached_node": "model.maya_models.defi__fact_streamling_swap_details_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_streamling_swap_details_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID.d77d5d9d53": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_streamling_s_4ef1a7d22a26ccc579b4e4caf9190bb3.sql", "original_file_path": "models/gold/defi/defi__fact_streamling_swap_details_events.yml", "unique_id": "test.maya_models.unique_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID.d77d5d9d53", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID"], "alias": "fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_defi__fact_streamling_s_4ef1a7d22a26ccc579b4e4caf9190bb3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "unique_defi__fact_streamling_s_4ef1a7d22a26ccc579b4e4caf9190bb3"}, "created_at": 1741278782.9380102, "relation_name": "MAYA.unique_defi.fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_defi__fact_streamling_s_4ef1a7d22a26ccc579b4e4caf9190bb3\") }}", "language": "sql", "refs": [{"name": "defi__fact_streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID", "file_key_name": "models.defi__fact_streamling_swap_details_events", "attached_node": "model.maya_models.defi__fact_streamling_swap_details_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_streamling_swap_details_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_streamling_swap_details_events_BLOCK_TIMESTAMP.5598932a8c": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_streamling_swap_details_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_streamling_694caf556d8075b80fc41c7e778d0ebb.sql", "original_file_path": "models/gold/defi/defi__fact_streamling_swap_details_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_streamling_swap_details_events_BLOCK_TIMESTAMP.5598932a8c", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_streamling_swap_details_events_BLOCK_TIMESTAMP"], "alias": "fact_streamling_swap_details_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_defi__fact_streamling_694caf556d8075b80fc41c7e778d0ebb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "not_null_defi__fact_streamling_694caf556d8075b80fc41c7e778d0ebb", "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278782.93893, "relation_name": "MAYA.not_null_defi.fact_streamling_swap_details_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\",alias=\"not_null_defi__fact_streamling_694caf556d8075b80fc41c7e778d0ebb\") }}", "language": "sql", "refs": [{"name": "defi__fact_streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_streamling_swap_details_events", "attached_node": "model.maya_models.defi__fact_streamling_swap_details_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_streamling_swap_details_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_streamling_swap_details_events_DIM_BLOCK_ID.51fbe7f43e": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_streamling_swap_details_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_stream_3253dd4dc398cf785618535e006bf4ac.sql", "original_file_path": "models/gold/defi/defi__fact_streamling_swap_details_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_streamling_swap_details_events_DIM_BLOCK_ID.51fbe7f43e", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_streamling_swap_details_events_DIM_BLOCK_ID"], "alias": "fact_streamling_swap_details_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "negative_one_defi__fact_stream_3253dd4dc398cf785618535e006bf4ac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "alias": "negative_one_defi__fact_stream_3253dd4dc398cf785618535e006bf4ac"}, "created_at": 1741278782.940044, "relation_name": "MAYA.negative_one_defi.fact_streamling_swap_details_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\",alias=\"negative_one_defi__fact_stream_3253dd4dc398cf785618535e006bf4ac\") }}", "language": "sql", "refs": [{"name": "defi__fact_streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_streamling_swap_details_events", "attached_node": "model.maya_models.defi__fact_streamling_swap_details_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_streamling_swap_details_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID.731c12e564": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_292e5d36105e0fc3f93e529ea6e6cf2a.sql", "original_file_path": "models/gold/defi/defi__fact_streamling_swap_details_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID.731c12e564", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID"], "alias": "fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_292e5d36105e0fc3f93e529ea6e6cf2a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_292e5d36105e0fc3f93e529ea6e6cf2a"}, "created_at": 1741278782.94376, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_292e5d36105e0fc3f93e529ea6e6cf2a\") }}", "language": "sql", "refs": [{"name": "defi__fact_streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_streamling_swap_details_events", "attached_node": "model.maya_models.defi__fact_streamling_swap_details_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_streamling_swap_details_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_streamling_swap_details_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1d5bc115b2": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_streamling_swap_details_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_bfa9305b10e881bfe89b08ba1e5e19f5.sql", "original_file_path": "models/gold/defi/defi__fact_streamling_swap_details_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_streamling_swap_details_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1d5bc115b2", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_streamling_swap_details_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_streamling_swap_details_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_bfa9305b10e881bfe89b08ba1e5e19f5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_bfa9305b10e881bfe89b08ba1e5e19f5"}, "created_at": 1741278782.946765, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_streamling_swap_details_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_bfa9305b10e881bfe89b08ba1e5e19f5\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_streamling_swap_details_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_streamling_swap_details_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_streamling_swap_details_events", "attached_node": "model.maya_models.defi__fact_streamling_swap_details_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_streamling_swap_details_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.16f98389c1": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_90c4f073ec0ba2ce9d1e019de9e3814f.sql", "original_file_path": "models/gold/defi/defi__fact_inactive_vault_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.16f98389c1", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID"], "alias": "fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_90c4f073ec0ba2ce9d1e019de9e3814f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_90c4f073ec0ba2ce9d1e019de9e3814f"}, "created_at": 1741278782.95056, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_90c4f073ec0ba2ce9d1e019de9e3814f\") }}", "language": "sql", "refs": [{"name": "defi__fact_inactive_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_inactive_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_INACTIVE_VAULT_EVENTS_ID", "file_key_name": "models.defi__fact_inactive_vault_events", "attached_node": "model.maya_models.defi__fact_inactive_vault_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_INACTIVE_VAULT_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_inactive_vault_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.d1b9a47336": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_inactive_vau_f762fb7f7641248ff6dd5a3f1af5f802.sql", "original_file_path": "models/gold/defi/defi__fact_inactive_vault_events.yml", "unique_id": "test.maya_models.unique_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.d1b9a47336", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID"], "alias": "fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_defi__fact_inactive_vau_f762fb7f7641248ff6dd5a3f1af5f802", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "unique_defi__fact_inactive_vau_f762fb7f7641248ff6dd5a3f1af5f802"}, "created_at": 1741278782.952941, "relation_name": "MAYA.unique_defi.fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_defi__fact_inactive_vau_f762fb7f7641248ff6dd5a3f1af5f802\") }}", "language": "sql", "refs": [{"name": "defi__fact_inactive_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_inactive_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_INACTIVE_VAULT_EVENTS_ID", "file_key_name": "models.defi__fact_inactive_vault_events", "attached_node": "model.maya_models.defi__fact_inactive_vault_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_INACTIVE_VAULT_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_inactive_vault_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_inactive_vault_events_BLOCK_TIMESTAMP.f697396e3b": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_inactive_vault_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_inactive_vault_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_inactive_vault_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_inactive_vault_events_BLOCK_TIMESTAMP.f697396e3b", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_inactive_vault_events_BLOCK_TIMESTAMP"], "alias": "fact_inactive_vault_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278782.954218, "relation_name": "MAYA.not_null_defi.fact_inactive_vault_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_inactive_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_inactive_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_inactive_vault_events", "attached_node": "model.maya_models.defi__fact_inactive_vault_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_inactive_vault_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_inactive_vault_events_DIM_BLOCK_ID.5429b32093": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_inactive_vault_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_inactive_vault_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_inactive_vault_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_inactive_vault_events_DIM_BLOCK_ID.5429b32093", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_inactive_vault_events_DIM_BLOCK_ID"], "alias": "fact_inactive_vault_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278782.955271, "relation_name": "MAYA.negative_one_defi.fact_inactive_vault_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_inactive_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_inactive_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_inactive_vault_events", "attached_node": "model.maya_models.defi__fact_inactive_vault_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_inactive_vault_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_inactive_vault_events_ADD_ASGARD_ADDRESS.76e93119e7": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_inactive_vault_events_ADD_ASGARD_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_inactive_vault_events_ADD_ASGARD_ADDRESS.sql", "original_file_path": "models/gold/defi/defi__fact_inactive_vault_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_inactive_vault_events_ADD_ASGARD_ADDRESS.76e93119e7", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_inactive_vault_events_ADD_ASGARD_ADDRESS"], "alias": "fact_inactive_vault_events_ADD_ASGARD_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.9577332, "relation_name": "MAYA.not_null_defi.fact_inactive_vault_events_ADD_ASGARD_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_inactive_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_inactive_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADD_ASGARD_ADDRESS", "file_key_name": "models.defi__fact_inactive_vault_events", "attached_node": "model.maya_models.defi__fact_inactive_vault_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_ASGARD_ADDRESS", "model": "{{ get_where_subquery(ref('defi__fact_inactive_vault_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.0d615f85a1": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_3d068a3054c3e3e157054e0026c983ed.sql", "original_file_path": "models/gold/defi/defi__fact_inactive_vault_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.0d615f85a1", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID"], "alias": "fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_3d068a3054c3e3e157054e0026c983ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_3d068a3054c3e3e157054e0026c983ed"}, "created_at": 1741278782.958563, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_3d068a3054c3e3e157054e0026c983ed\") }}", "language": "sql", "refs": [{"name": "defi__fact_inactive_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_inactive_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_inactive_vault_events", "attached_node": "model.maya_models.defi__fact_inactive_vault_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_INACTIVE_VAULT_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_inactive_vault_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_inactive_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.52206550a8": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_inactive_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_6987ab6a5486f2ebe0f8c4a4b17d02b5.sql", "original_file_path": "models/gold/defi/defi__fact_inactive_vault_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_inactive_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.52206550a8", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_inactive_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_inactive_vault_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_6987ab6a5486f2ebe0f8c4a4b17d02b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_6987ab6a5486f2ebe0f8c4a4b17d02b5"}, "created_at": 1741278782.961375, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_inactive_vault_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_6987ab6a5486f2ebe0f8c4a4b17d02b5\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_inactive_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_inactive_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_inactive_vault_events", "attached_node": "model.maya_models.defi__fact_inactive_vault_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_inactive_vault_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_bond_events_FACT_BOND_EVENTS_ID.a5f50df30f": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_bond_events_FACT_BOND_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_8e76ff44783268414dbf6166e0b1bfbd.sql", "original_file_path": "models/gold/defi/defi__fact_bond_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_bond_events_FACT_BOND_EVENTS_ID.a5f50df30f", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_bond_events_FACT_BOND_EVENTS_ID"], "alias": "fact_bond_events_FACT_BOND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8e76ff44783268414dbf6166e0b1bfbd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8e76ff44783268414dbf6166e0b1bfbd"}, "created_at": 1741278782.968883, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_bond_events_FACT_BOND_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8e76ff44783268414dbf6166e0b1bfbd\") }}", "language": "sql", "refs": [{"name": "defi__fact_bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_BOND_EVENTS_ID", "file_key_name": "models.defi__fact_bond_events", "attached_node": "model.maya_models.defi__fact_bond_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_BOND_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_bond_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_bond_events_FACT_BOND_EVENTS_ID.8280804d98": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_bond_events_FACT_BOND_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_bond_events_FACT_BOND_EVENTS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_bond_events.yml", "unique_id": "test.maya_models.unique_defi__fact_bond_events_FACT_BOND_EVENTS_ID.8280804d98", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_bond_events_FACT_BOND_EVENTS_ID"], "alias": "fact_bond_events_FACT_BOND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.9720829, "relation_name": "MAYA.unique_defi.fact_bond_events_FACT_BOND_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_BOND_EVENTS_ID", "file_key_name": "models.defi__fact_bond_events", "attached_node": "model.maya_models.defi__fact_bond_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_BOND_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_bond_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_events_BLOCK_TIMESTAMP.ca66b0639c": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_bond_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_events_BLOCK_TIMESTAMP.ca66b0639c", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_events_BLOCK_TIMESTAMP"], "alias": "fact_bond_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278782.973044, "relation_name": "MAYA.not_null_defi.fact_bond_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_bond_events", "attached_node": "model.maya_models.defi__fact_bond_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_bond_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__fact_bond_events_BLOCK_TIMESTAMP__day__4.a72035b010": {"database": "MAYA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_defi", "name": "dbt_expectations_expect_row_values_to_have_recent_data_defi__fact_bond_events_BLOCK_TIMESTAMP__day__4", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_row_va_f5dd048c926fbbbac198caffada90371.sql", "original_file_path": "models/gold/defi/defi__fact_bond_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__fact_bond_events_BLOCK_TIMESTAMP__day__4.a72035b010", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_row_values_to_have_recent_data_defi__fact_bond_events_BLOCK_TIMESTAMP__day__4"], "alias": "fact_bond_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_f5dd048c926fbbbac198caffada90371", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_f5dd048c926fbbbac198caffada90371"}, "created_at": 1741278782.9742332, "relation_name": "MAYA.dbt_expectations_expect_row_values_to_have_recent_data_defi.fact_bond_events_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_f5dd048c926fbbbac198caffada90371\") }}", "language": "sql", "refs": [{"name": "defi__fact_bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_bond_events", "attached_node": "model.maya_models.defi__fact_bond_events", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 4, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_bond_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.negative_one_defi__fact_bond_events_DIM_BLOCK_ID.b035c08edd": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_bond_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_bond_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_bond_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_bond_events_DIM_BLOCK_ID.b035c08edd", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_bond_events_DIM_BLOCK_ID"], "alias": "fact_bond_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278782.978316, "relation_name": "MAYA.negative_one_defi.fact_bond_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_bond_events", "attached_node": "model.maya_models.defi__fact_bond_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_bond_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_events_TX_ID.2f9aabd8d8": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_events_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_events_TX_ID.sql", "original_file_path": "models/gold/defi/defi__fact_bond_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_events_TX_ID.2f9aabd8d8", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_events_TX_ID"], "alias": "fact_bond_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.9837818, "relation_name": "MAYA.not_null_defi.fact_bond_events_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.defi__fact_bond_events", "attached_node": "model.maya_models.defi__fact_bond_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('defi__fact_bond_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_events_BLOCKCHAIN.cf9fb111ab": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_events_BLOCKCHAIN", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_events_BLOCKCHAIN.sql", "original_file_path": "models/gold/defi/defi__fact_bond_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_events_BLOCKCHAIN.cf9fb111ab", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_events_BLOCKCHAIN"], "alias": "fact_bond_events_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "tx_id <> '0000000000000000000000000000000000000000000000000000000000000000'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "tx_id <> '0000000000000000000000000000000000000000000000000000000000000000'"}, "created_at": 1741278782.985871, "relation_name": "MAYA.not_null_defi.fact_bond_events_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"tx_id <> '0000000000000000000000000000000000000000000000000000000000000000'\") }}", "language": "sql", "refs": [{"name": "defi__fact_bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.defi__fact_bond_events", "attached_node": "model.maya_models.defi__fact_bond_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('defi__fact_bond_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_events_FROM_ADDRESS.d44d5b061a": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_events_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_events_FROM_ADDRESS.sql", "original_file_path": "models/gold/defi/defi__fact_bond_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_events_FROM_ADDRESS.d44d5b061a", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_events_FROM_ADDRESS"], "alias": "fact_bond_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "tx_id <> '0000000000000000000000000000000000000000000000000000000000000000'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "tx_id <> '0000000000000000000000000000000000000000000000000000000000000000'"}, "created_at": 1741278782.98677, "relation_name": "MAYA.not_null_defi.fact_bond_events_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"tx_id <> '0000000000000000000000000000000000000000000000000000000000000000'\") }}", "language": "sql", "refs": [{"name": "defi__fact_bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.defi__fact_bond_events", "attached_node": "model.maya_models.defi__fact_bond_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('defi__fact_bond_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_events_TO_ADDRESS.fcaf91ad33": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_events_TO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_events_TO_ADDRESS.sql", "original_file_path": "models/gold/defi/defi__fact_bond_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_events_TO_ADDRESS.fcaf91ad33", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_events_TO_ADDRESS"], "alias": "fact_bond_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.987775, "relation_name": "MAYA.not_null_defi.fact_bond_events_TO_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ADDRESS", "file_key_name": "models.defi__fact_bond_events", "attached_node": "model.maya_models.defi__fact_bond_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('defi__fact_bond_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_events_ASSET_E8.2a4a2e8c40": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_events_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_events_ASSET_E8.sql", "original_file_path": "models/gold/defi/defi__fact_bond_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_events_ASSET_E8.2a4a2e8c40", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_events_ASSET_E8"], "alias": "fact_bond_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.989032, "relation_name": "MAYA.not_null_defi.fact_bond_events_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.defi__fact_bond_events", "attached_node": "model.maya_models.defi__fact_bond_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('defi__fact_bond_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_events_MEMO.bd8692f383": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_events_MEMO", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_events_MEMO.sql", "original_file_path": "models/gold/defi/defi__fact_bond_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_events_MEMO.bd8692f383", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_events_MEMO"], "alias": "fact_bond_events_MEMO", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "tx_id <> '0000000000000000000000000000000000000000000000000000000000000000'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "tx_id <> '0000000000000000000000000000000000000000000000000000000000000000'"}, "created_at": 1741278782.991277, "relation_name": "MAYA.not_null_defi.fact_bond_events_MEMO", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"tx_id <> '0000000000000000000000000000000000000000000000000000000000000000'\") }}", "language": "sql", "refs": [{"name": "defi__fact_bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MEMO", "file_key_name": "models.defi__fact_bond_events", "attached_node": "model.maya_models.defi__fact_bond_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MEMO", "model": "{{ get_where_subquery(ref('defi__fact_bond_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_events_bond_type.544f931184": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_events_bond_type", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_events_bond_type.sql", "original_file_path": "models/gold/defi/defi__fact_bond_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_events_bond_type.544f931184", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_events_bond_type"], "alias": "fact_bond_events_bond_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.992759, "relation_name": "MAYA.not_null_defi.fact_bond_events_bond_type", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bond_type", "file_key_name": "models.defi__fact_bond_events", "attached_node": "model.maya_models.defi__fact_bond_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "bond_type", "model": "{{ get_where_subquery(ref('defi__fact_bond_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_events_E8.7f6d200479": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_events_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_events_E8.sql", "original_file_path": "models/gold/defi/defi__fact_bond_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_events_E8.7f6d200479", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_events_E8"], "alias": "fact_bond_events_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278782.9941308, "relation_name": "MAYA.not_null_defi.fact_bond_events_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "E8", "file_key_name": "models.defi__fact_bond_events", "attached_node": "model.maya_models.defi__fact_bond_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "E8", "model": "{{ get_where_subquery(ref('defi__fact_bond_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_bond_events_FACT_BOND_EVENTS_ID.54da2fbbeb": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_bond_events_FACT_BOND_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_0b36a2161a798821e53a6ebd54706a3d.sql", "original_file_path": "models/gold/defi/defi__fact_bond_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_bond_events_FACT_BOND_EVENTS_ID.54da2fbbeb", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_bond_events_FACT_BOND_EVENTS_ID"], "alias": "fact_bond_events_FACT_BOND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_0b36a2161a798821e53a6ebd54706a3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_0b36a2161a798821e53a6ebd54706a3d"}, "created_at": 1741278782.995141, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_bond_events_FACT_BOND_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_0b36a2161a798821e53a6ebd54706a3d\") }}", "language": "sql", "refs": [{"name": "defi__fact_bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_bond_events", "attached_node": "model.maya_models.defi__fact_bond_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_BOND_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_bond_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_bond_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.54ca49d7f9": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_bond_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_75b27ad32b2c5e79e49843dfee994e03.sql", "original_file_path": "models/gold/defi/defi__fact_bond_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_bond_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.54ca49d7f9", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_bond_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_bond_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_75b27ad32b2c5e79e49843dfee994e03", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_75b27ad32b2c5e79e49843dfee994e03"}, "created_at": 1741278783.001215, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_bond_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_75b27ad32b2c5e79e49843dfee994e03\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_bond_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_bond_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_bond_events", "attached_node": "model.maya_models.defi__fact_bond_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_bond_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID.72b7656211": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_ba00b31f170f878f3f75c79f609da7e0.sql", "original_file_path": "models/gold/defi/defi__fact_rewards_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID.72b7656211", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID"], "alias": "fact_rewards_events_FACT_REWARDS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ba00b31f170f878f3f75c79f609da7e0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ba00b31f170f878f3f75c79f609da7e0"}, "created_at": 1741278783.0071318, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_rewards_events_FACT_REWARDS_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ba00b31f170f878f3f75c79f609da7e0\") }}", "language": "sql", "refs": [{"name": "defi__fact_rewards_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_rewards_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_REWARDS_EVENTS_ID", "file_key_name": "models.defi__fact_rewards_events", "attached_node": "model.maya_models.defi__fact_rewards_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_REWARDS_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_rewards_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID.1194862d02": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_rewards_events.yml", "unique_id": "test.maya_models.unique_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID.1194862d02", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID"], "alias": "fact_rewards_events_FACT_REWARDS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.010161, "relation_name": "MAYA.unique_defi.fact_rewards_events_FACT_REWARDS_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_rewards_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_rewards_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_REWARDS_EVENTS_ID", "file_key_name": "models.defi__fact_rewards_events", "attached_node": "model.maya_models.defi__fact_rewards_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_REWARDS_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_rewards_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_rewards_events_BLOCK_TIMESTAMP.60668786c2": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_rewards_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_rewards_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_rewards_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_rewards_events_BLOCK_TIMESTAMP.60668786c2", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_rewards_events_BLOCK_TIMESTAMP"], "alias": "fact_rewards_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.011123, "relation_name": "MAYA.not_null_defi.fact_rewards_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_rewards_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_rewards_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_rewards_events", "attached_node": "model.maya_models.defi__fact_rewards_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_rewards_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_rewards_events_DIM_BLOCK_ID.8645c1eaa1": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_rewards_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_rewards_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_rewards_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_rewards_events_DIM_BLOCK_ID.8645c1eaa1", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_rewards_events_DIM_BLOCK_ID"], "alias": "fact_rewards_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.012119, "relation_name": "MAYA.negative_one_defi.fact_rewards_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_rewards_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_rewards_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_rewards_events", "attached_node": "model.maya_models.defi__fact_rewards_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_rewards_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID.a30d4540ea": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_3480630163aa92ea19e7545c1b469990.sql", "original_file_path": "models/gold/defi/defi__fact_rewards_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID.a30d4540ea", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID"], "alias": "fact_rewards_events_FACT_REWARDS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_3480630163aa92ea19e7545c1b469990", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_3480630163aa92ea19e7545c1b469990"}, "created_at": 1741278783.014755, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_rewards_events_FACT_REWARDS_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_3480630163aa92ea19e7545c1b469990\") }}", "language": "sql", "refs": [{"name": "defi__fact_rewards_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_rewards_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_rewards_events", "attached_node": "model.maya_models.defi__fact_rewards_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_REWARDS_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_rewards_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_rewards_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e2e57eb147": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_rewards_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_f4ddac5bf7f258bc29b0ffd0cf182ad6.sql", "original_file_path": "models/gold/defi/defi__fact_rewards_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_rewards_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e2e57eb147", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_rewards_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_rewards_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_f4ddac5bf7f258bc29b0ffd0cf182ad6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_f4ddac5bf7f258bc29b0ffd0cf182ad6"}, "created_at": 1741278783.022403, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_rewards_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_f4ddac5bf7f258bc29b0ffd0cf182ad6\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_rewards_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_rewards_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_rewards_events", "attached_node": "model.maya_models.defi__fact_rewards_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_rewards_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.not_null_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID.98d9a7a40e": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_failed_dep_b22076a2b2f010798542666640f50ed9.sql", "original_file_path": "models/gold/defi/defi__fact_failed_deposit_messages.yml", "unique_id": "test.maya_models.not_null_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID.98d9a7a40e", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID"], "alias": "fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_defi__fact_failed_dep_b22076a2b2f010798542666640f50ed9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "not_null_defi__fact_failed_dep_b22076a2b2f010798542666640f50ed9"}, "created_at": 1741278783.027186, "relation_name": "MAYA.not_null_defi.fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_defi__fact_failed_dep_b22076a2b2f010798542666640f50ed9\") }}", "language": "sql", "refs": [{"name": "defi__fact_failed_deposit_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_FAILED_DEPOSIT_MESSAGES_ID", "file_key_name": "models.defi__fact_failed_deposit_messages", "attached_node": "model.maya_models.defi__fact_failed_deposit_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FACT_FAILED_DEPOSIT_MESSAGES_ID", "model": "{{ get_where_subquery(ref('defi__fact_failed_deposit_messages')) }}"}, "namespace": null}}, "test.maya_models.unique_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID.0695d1704a": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_failed_depos_2970236acbf252948903c65c31e314f6.sql", "original_file_path": "models/gold/defi/defi__fact_failed_deposit_messages.yml", "unique_id": "test.maya_models.unique_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID.0695d1704a", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID"], "alias": "fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_defi__fact_failed_depos_2970236acbf252948903c65c31e314f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "unique_defi__fact_failed_depos_2970236acbf252948903c65c31e314f6"}, "created_at": 1741278783.028926, "relation_name": "MAYA.unique_defi.fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_defi__fact_failed_depos_2970236acbf252948903c65c31e314f6\") }}", "language": "sql", "refs": [{"name": "defi__fact_failed_deposit_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_FAILED_DEPOSIT_MESSAGES_ID", "file_key_name": "models.defi__fact_failed_deposit_messages", "attached_node": "model.maya_models.defi__fact_failed_deposit_messages", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_FAILED_DEPOSIT_MESSAGES_ID", "model": "{{ get_where_subquery(ref('defi__fact_failed_deposit_messages')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_failed_deposit_messages_BLOCK_TIMESTAMP.df465b93f7": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_failed_deposit_messages_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_failed_deposit_messages_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_failed_deposit_messages.yml", "unique_id": "test.maya_models.not_null_defi__fact_failed_deposit_messages_BLOCK_TIMESTAMP.df465b93f7", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_failed_deposit_messages_BLOCK_TIMESTAMP"], "alias": "fact_failed_deposit_messages_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.031273, "relation_name": "MAYA.not_null_defi.fact_failed_deposit_messages_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_failed_deposit_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_failed_deposit_messages", "attached_node": "model.maya_models.defi__fact_failed_deposit_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_failed_deposit_messages')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_failed_deposit_messages_DIM_BLOCK_ID.1a15b7f7ea": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_failed_deposit_messages_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_failed_deposit_messages_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_failed_deposit_messages.yml", "unique_id": "test.maya_models.negative_one_defi__fact_failed_deposit_messages_DIM_BLOCK_ID.1a15b7f7ea", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_failed_deposit_messages_DIM_BLOCK_ID"], "alias": "fact_failed_deposit_messages_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.032309, "relation_name": "MAYA.negative_one_defi.fact_failed_deposit_messages_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_failed_deposit_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_failed_deposit_messages", "attached_node": "model.maya_models.defi__fact_failed_deposit_messages", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_failed_deposit_messages')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_failed_deposit_messages_AMOUNT_E8.b99a38df0a": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_failed_deposit_messages_AMOUNT_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_failed_deposit_messages_AMOUNT_E8.sql", "original_file_path": "models/gold/defi/defi__fact_failed_deposit_messages.yml", "unique_id": "test.maya_models.not_null_defi__fact_failed_deposit_messages_AMOUNT_E8.b99a38df0a", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_failed_deposit_messages_AMOUNT_E8"], "alias": "fact_failed_deposit_messages_AMOUNT_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.035298, "relation_name": "MAYA.not_null_defi.fact_failed_deposit_messages_AMOUNT_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_failed_deposit_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_E8", "file_key_name": "models.defi__fact_failed_deposit_messages", "attached_node": "model.maya_models.defi__fact_failed_deposit_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_E8", "model": "{{ get_where_subquery(ref('defi__fact_failed_deposit_messages')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_failed_deposit_messages_ASSET.9698d44bd6": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_failed_deposit_messages_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_failed_deposit_messages_ASSET.sql", "original_file_path": "models/gold/defi/defi__fact_failed_deposit_messages.yml", "unique_id": "test.maya_models.not_null_defi__fact_failed_deposit_messages_ASSET.9698d44bd6", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_failed_deposit_messages_ASSET"], "alias": "fact_failed_deposit_messages_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.036279, "relation_name": "MAYA.not_null_defi.fact_failed_deposit_messages_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_failed_deposit_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET", "file_key_name": "models.defi__fact_failed_deposit_messages", "attached_node": "model.maya_models.defi__fact_failed_deposit_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('defi__fact_failed_deposit_messages')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID.5222579419": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_f7ecb9ffd108b9f3dc4908de2c2c4708.sql", "original_file_path": "models/gold/defi/defi__fact_failed_deposit_messages.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID.5222579419", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID"], "alias": "fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_f7ecb9ffd108b9f3dc4908de2c2c4708", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_f7ecb9ffd108b9f3dc4908de2c2c4708"}, "created_at": 1741278783.037239, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_f7ecb9ffd108b9f3dc4908de2c2c4708\") }}", "language": "sql", "refs": [{"name": "defi__fact_failed_deposit_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_failed_deposit_messages", "attached_node": "model.maya_models.defi__fact_failed_deposit_messages", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_FAILED_DEPOSIT_MESSAGES_ID", "model": "{{ get_where_subquery(ref('defi__fact_failed_deposit_messages')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_failed_deposit_messages_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ae79fc665a": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_failed_deposit_messages_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_d554250501447676ea2ca6d5db773a92.sql", "original_file_path": "models/gold/defi/defi__fact_failed_deposit_messages.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_failed_deposit_messages_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ae79fc665a", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_failed_deposit_messages_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_failed_deposit_messages_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_d554250501447676ea2ca6d5db773a92", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_d554250501447676ea2ca6d5db773a92"}, "created_at": 1741278783.0396621, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_failed_deposit_messages_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_d554250501447676ea2ca6d5db773a92\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_failed_deposit_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_failed_deposit_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_failed_deposit_messages", "attached_node": "model.maya_models.defi__fact_failed_deposit_messages", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_failed_deposit_messages')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.ea9e1f3b9b": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_ab3db1f7dc0556b93a9d4dc75e4a7484.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_statistics.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.ea9e1f3b9b", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID"], "alias": "fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ab3db1f7dc0556b93a9d4dc75e4a7484", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ab3db1f7dc0556b93a9d4dc75e4a7484"}, "created_at": 1741278783.044565, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ab3db1f7dc0556b93a9d4dc75e4a7484\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_POOL_BLOCK_STATISTICS_ID", "file_key_name": "models.defi__fact_pool_block_statistics", "attached_node": "model.maya_models.defi__fact_pool_block_statistics", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_POOL_BLOCK_STATISTICS_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_statistics')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.59e4ff0377": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_pool_block_s_6260a711bf209c832caf7159272825d4.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_statistics.yml", "unique_id": "test.maya_models.unique_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.59e4ff0377", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID"], "alias": "fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_defi__fact_pool_block_s_6260a711bf209c832caf7159272825d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "unique_defi__fact_pool_block_s_6260a711bf209c832caf7159272825d4"}, "created_at": 1741278783.047113, "relation_name": "MAYA.unique_defi.fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_defi__fact_pool_block_s_6260a711bf209c832caf7159272825d4\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_POOL_BLOCK_STATISTICS_ID", "file_key_name": "models.defi__fact_pool_block_statistics", "attached_node": "model.maya_models.defi__fact_pool_block_statistics", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_POOL_BLOCK_STATISTICS_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_statistics')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.a0f8192d8b": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_bf832944dea70aa4402daeedfb187718.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_statistics.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.a0f8192d8b", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID"], "alias": "fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_bf832944dea70aa4402daeedfb187718", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_bf832944dea70aa4402daeedfb187718"}, "created_at": 1741278783.0479832, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_bf832944dea70aa4402daeedfb187718\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_statistics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_pool_block_statistics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_pool_block_statistics", "attached_node": "model.maya_models.defi__fact_pool_block_statistics", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_POOL_BLOCK_STATISTICS_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_statistics')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.774a6e2a92": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_92fd4a9ef0ab8d1c7bd556475cc50770.sql", "original_file_path": "models/gold/defi/defi__fact_update_node_account_status_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.774a6e2a92", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID"], "alias": "fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_92fd4a9ef0ab8d1c7bd556475cc50770", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_92fd4a9ef0ab8d1c7bd556475cc50770"}, "created_at": 1741278783.051401, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_92fd4a9ef0ab8d1c7bd556475cc50770\") }}", "language": "sql", "refs": [{"name": "defi__fact_update_node_account_status_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_update_node_account_status_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "file_key_name": "models.defi__fact_update_node_account_status_events", "attached_node": "model.maya_models.defi__fact_update_node_account_status_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_update_node_account_status_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.955bf5f1be": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_update_node__2180294aace571ebf1faffac466b822a.sql", "original_file_path": "models/gold/defi/defi__fact_update_node_account_status_events.yml", "unique_id": "test.maya_models.unique_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.955bf5f1be", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID"], "alias": "fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_defi__fact_update_node__2180294aace571ebf1faffac466b822a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "unique_defi__fact_update_node__2180294aace571ebf1faffac466b822a"}, "created_at": 1741278783.054453, "relation_name": "MAYA.unique_defi.fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_defi__fact_update_node__2180294aace571ebf1faffac466b822a\") }}", "language": "sql", "refs": [{"name": "defi__fact_update_node_account_status_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_update_node_account_status_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "file_key_name": "models.defi__fact_update_node_account_status_events", "attached_node": "model.maya_models.defi__fact_update_node_account_status_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_update_node_account_status_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_update_node_account_status_events_BLOCK_TIMESTAMP.2e391b047b": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_update_node_account_status_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_update_nod_690758bc8c38544de9a68ecb6102d719.sql", "original_file_path": "models/gold/defi/defi__fact_update_node_account_status_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_update_node_account_status_events_BLOCK_TIMESTAMP.2e391b047b", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_update_node_account_status_events_BLOCK_TIMESTAMP"], "alias": "fact_update_node_account_status_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_defi__fact_update_nod_690758bc8c38544de9a68ecb6102d719", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "not_null_defi__fact_update_nod_690758bc8c38544de9a68ecb6102d719", "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.055318, "relation_name": "MAYA.not_null_defi.fact_update_node_account_status_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\",alias=\"not_null_defi__fact_update_nod_690758bc8c38544de9a68ecb6102d719\") }}", "language": "sql", "refs": [{"name": "defi__fact_update_node_account_status_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_update_node_account_status_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_update_node_account_status_events", "attached_node": "model.maya_models.defi__fact_update_node_account_status_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_update_node_account_status_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_update_node_account_status_events_DIM_BLOCK_ID.2668c31a3f": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_update_node_account_status_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_update_57ce9563ef170f2f80b24f94477516c3.sql", "original_file_path": "models/gold/defi/defi__fact_update_node_account_status_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_update_node_account_status_events_DIM_BLOCK_ID.2668c31a3f", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_update_node_account_status_events_DIM_BLOCK_ID"], "alias": "fact_update_node_account_status_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "negative_one_defi__fact_update_57ce9563ef170f2f80b24f94477516c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "alias": "negative_one_defi__fact_update_57ce9563ef170f2f80b24f94477516c3"}, "created_at": 1741278783.0563872, "relation_name": "MAYA.negative_one_defi.fact_update_node_account_status_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\",alias=\"negative_one_defi__fact_update_57ce9563ef170f2f80b24f94477516c3\") }}", "language": "sql", "refs": [{"name": "defi__fact_update_node_account_status_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_update_node_account_status_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_update_node_account_status_events", "attached_node": "model.maya_models.defi__fact_update_node_account_status_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_update_node_account_status_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_update_node_account_status_events_FORMER_STATUS.b4bb08ccb0": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_update_node_account_status_events_FORMER_STATUS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_update_nod_ef7862d2109e4fb482e5108e905a818c.sql", "original_file_path": "models/gold/defi/defi__fact_update_node_account_status_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_update_node_account_status_events_FORMER_STATUS.b4bb08ccb0", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_update_node_account_status_events_FORMER_STATUS"], "alias": "fact_update_node_account_status_events_FORMER_STATUS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_defi__fact_update_nod_ef7862d2109e4fb482e5108e905a818c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "not_null_defi__fact_update_nod_ef7862d2109e4fb482e5108e905a818c"}, "created_at": 1741278783.0597298, "relation_name": "MAYA.not_null_defi.fact_update_node_account_status_events_FORMER_STATUS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_defi__fact_update_nod_ef7862d2109e4fb482e5108e905a818c\") }}", "language": "sql", "refs": [{"name": "defi__fact_update_node_account_status_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_update_node_account_status_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FORMER_STATUS", "file_key_name": "models.defi__fact_update_node_account_status_events", "attached_node": "model.maya_models.defi__fact_update_node_account_status_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FORMER_STATUS", "model": "{{ get_where_subquery(ref('defi__fact_update_node_account_status_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_update_node_account_status_events_CURRENT_STATUS.d76b33c0c7": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_update_node_account_status_events_CURRENT_STATUS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_update_nod_b0820c7e65588e8dbe16059ab44367aa.sql", "original_file_path": "models/gold/defi/defi__fact_update_node_account_status_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_update_node_account_status_events_CURRENT_STATUS.d76b33c0c7", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_update_node_account_status_events_CURRENT_STATUS"], "alias": "fact_update_node_account_status_events_CURRENT_STATUS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_defi__fact_update_nod_b0820c7e65588e8dbe16059ab44367aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "not_null_defi__fact_update_nod_b0820c7e65588e8dbe16059ab44367aa"}, "created_at": 1741278783.060597, "relation_name": "MAYA.not_null_defi.fact_update_node_account_status_events_CURRENT_STATUS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_defi__fact_update_nod_b0820c7e65588e8dbe16059ab44367aa\") }}", "language": "sql", "refs": [{"name": "defi__fact_update_node_account_status_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_update_node_account_status_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CURRENT_STATUS", "file_key_name": "models.defi__fact_update_node_account_status_events", "attached_node": "model.maya_models.defi__fact_update_node_account_status_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CURRENT_STATUS", "model": "{{ get_where_subquery(ref('defi__fact_update_node_account_status_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_update_node_account_status_events_NODE_ADDRESS.13852b9c2e": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_update_node_account_status_events_NODE_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_update_nod_b21b5e008eb54dfd2af85d1a792ab233.sql", "original_file_path": "models/gold/defi/defi__fact_update_node_account_status_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_update_node_account_status_events_NODE_ADDRESS.13852b9c2e", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_update_node_account_status_events_NODE_ADDRESS"], "alias": "fact_update_node_account_status_events_NODE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_defi__fact_update_nod_b21b5e008eb54dfd2af85d1a792ab233", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "not_null_defi__fact_update_nod_b21b5e008eb54dfd2af85d1a792ab233"}, "created_at": 1741278783.061423, "relation_name": "MAYA.not_null_defi.fact_update_node_account_status_events_NODE_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_defi__fact_update_nod_b21b5e008eb54dfd2af85d1a792ab233\") }}", "language": "sql", "refs": [{"name": "defi__fact_update_node_account_status_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_update_node_account_status_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "NODE_ADDRESS", "file_key_name": "models.defi__fact_update_node_account_status_events", "attached_node": "model.maya_models.defi__fact_update_node_account_status_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NODE_ADDRESS", "model": "{{ get_where_subquery(ref('defi__fact_update_node_account_status_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.e4286d8c42": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_4df9b5cc1f2979944e58186c5ab4a1de.sql", "original_file_path": "models/gold/defi/defi__fact_update_node_account_status_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.e4286d8c42", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID"], "alias": "fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_4df9b5cc1f2979944e58186c5ab4a1de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_4df9b5cc1f2979944e58186c5ab4a1de"}, "created_at": 1741278783.062241, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_4df9b5cc1f2979944e58186c5ab4a1de\") }}", "language": "sql", "refs": [{"name": "defi__fact_update_node_account_status_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_update_node_account_status_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_update_node_account_status_events", "attached_node": "model.maya_models.defi__fact_update_node_account_status_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_update_node_account_status_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_update_node_account_status_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ff3ca4dfef": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_update_node_account_status_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_1fcc447a4f0b50cabaf2f638a4c9e907.sql", "original_file_path": "models/gold/defi/defi__fact_update_node_account_status_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_update_node_account_status_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ff3ca4dfef", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_update_node_account_status_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_update_node_account_status_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_1fcc447a4f0b50cabaf2f638a4c9e907", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_1fcc447a4f0b50cabaf2f638a4c9e907"}, "created_at": 1741278783.064957, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_update_node_account_status_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_1fcc447a4f0b50cabaf2f638a4c9e907\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_update_node_account_status_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_update_node_account_status_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_update_node_account_status_events", "attached_node": "model.maya_models.defi__fact_update_node_account_status_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_update_node_account_status_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.d2ddaebdfc": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_5efd347a08cd5c863e2fdd094511a01e.sql", "original_file_path": "models/gold/defi/defi__fact_pool_balance_change_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.d2ddaebdfc", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID"], "alias": "fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5efd347a08cd5c863e2fdd094511a01e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5efd347a08cd5c863e2fdd094511a01e"}, "created_at": 1741278783.0691252, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5efd347a08cd5c863e2fdd094511a01e\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_balance_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_pool_balance_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "file_key_name": "models.defi__fact_pool_balance_change_events", "attached_node": "model.maya_models.defi__fact_pool_balance_change_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_balance_change_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.a9f6a259b3": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_pool_balance_be12379b06247e22425bebc4a660d5b5.sql", "original_file_path": "models/gold/defi/defi__fact_pool_balance_change_events.yml", "unique_id": "test.maya_models.unique_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.a9f6a259b3", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID"], "alias": "fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_defi__fact_pool_balance_be12379b06247e22425bebc4a660d5b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "unique_defi__fact_pool_balance_be12379b06247e22425bebc4a660d5b5"}, "created_at": 1741278783.071528, "relation_name": "MAYA.unique_defi.fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_defi__fact_pool_balance_be12379b06247e22425bebc4a660d5b5\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_balance_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_pool_balance_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "file_key_name": "models.defi__fact_pool_balance_change_events", "attached_node": "model.maya_models.defi__fact_pool_balance_change_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_balance_change_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_pool_balance_change_events_BLOCK_TIMESTAMP.fd61518b64": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_pool_balance_change_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_pool_balance_change_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_pool_balance_change_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_pool_balance_change_events_BLOCK_TIMESTAMP.fd61518b64", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_pool_balance_change_events_BLOCK_TIMESTAMP"], "alias": "fact_pool_balance_change_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.072363, "relation_name": "MAYA.not_null_defi.fact_pool_balance_change_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_balance_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_pool_balance_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_pool_balance_change_events", "attached_node": "model.maya_models.defi__fact_pool_balance_change_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_pool_balance_change_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_pool_balance_change_events_DIM_BLOCK_ID.8cc70ad2c3": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_pool_balance_change_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_pool_balance_change_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_pool_balance_change_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_pool_balance_change_events_DIM_BLOCK_ID.8cc70ad2c3", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_pool_balance_change_events_DIM_BLOCK_ID"], "alias": "fact_pool_balance_change_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.0731661, "relation_name": "MAYA.negative_one_defi.fact_pool_balance_change_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_balance_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_pool_balance_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_pool_balance_change_events", "attached_node": "model.maya_models.defi__fact_pool_balance_change_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_balance_change_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.797e263c54": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_709995bd1bcb279cbc7a1a92b05470b0.sql", "original_file_path": "models/gold/defi/defi__fact_pool_balance_change_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.797e263c54", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID"], "alias": "fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_709995bd1bcb279cbc7a1a92b05470b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_709995bd1bcb279cbc7a1a92b05470b0"}, "created_at": 1741278783.075392, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_709995bd1bcb279cbc7a1a92b05470b0\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_balance_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_pool_balance_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_pool_balance_change_events", "attached_node": "model.maya_models.defi__fact_pool_balance_change_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_balance_change_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_balance_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1c20c73d64": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_pool_balance_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_fcc7d1ab4e8018821de3faa7a3a78ff3.sql", "original_file_path": "models/gold/defi/defi__fact_pool_balance_change_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_balance_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1c20c73d64", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_pool_balance_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_pool_balance_change_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_fcc7d1ab4e8018821de3faa7a3a78ff3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_fcc7d1ab4e8018821de3faa7a3a78ff3"}, "created_at": 1741278783.077655, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_pool_balance_change_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_fcc7d1ab4e8018821de3faa7a3a78ff3\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_pool_balance_change_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_pool_balance_change_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_pool_balance_change_events", "attached_node": "model.maya_models.defi__fact_pool_balance_change_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_balance_change_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.de667c6ed6": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_0f50d5101d6c9dce7ddf53a53debf2b2.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_fees.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.de667c6ed6", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID"], "alias": "fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0f50d5101d6c9dce7ddf53a53debf2b2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0f50d5101d6c9dce7ddf53a53debf2b2"}, "created_at": 1741278783.0812988, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0f50d5101d6c9dce7ddf53a53debf2b2\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_pool_block_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_POOL_BLOCK_FEES_ID", "file_key_name": "models.defi__fact_pool_block_fees", "attached_node": "model.maya_models.defi__fact_pool_block_fees", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_POOL_BLOCK_FEES_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_fees')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.ee55d40c08": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_fees.yml", "unique_id": "test.maya_models.unique_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.ee55d40c08", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID"], "alias": "fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.083837, "relation_name": "MAYA.unique_defi.fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_pool_block_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_POOL_BLOCK_FEES_ID", "file_key_name": "models.defi__fact_pool_block_fees", "attached_node": "model.maya_models.defi__fact_pool_block_fees", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_POOL_BLOCK_FEES_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_fees')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_pool_block_fees_DAY.5196d903a4": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_pool_block_fees_DAY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_pool_block_fees_DAY.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_fees.yml", "unique_id": "test.maya_models.not_null_defi__fact_pool_block_fees_DAY.5196d903a4", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_pool_block_fees_DAY"], "alias": "fact_pool_block_fees_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.084672, "relation_name": "MAYA.not_null_defi.fact_pool_block_fees_DAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_pool_block_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.defi__fact_pool_block_fees", "attached_node": "model.maya_models.defi__fact_pool_block_fees", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_fees')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.356350731a": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_d2cd787e4d06e12c980481fa08031fde.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_fees.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.356350731a", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID"], "alias": "fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_d2cd787e4d06e12c980481fa08031fde", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_d2cd787e4d06e12c980481fa08031fde"}, "created_at": 1741278783.085491, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_d2cd787e4d06e12c980481fa08031fde\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_fees", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_pool_block_fees"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_pool_block_fees", "attached_node": "model.maya_models.defi__fact_pool_block_fees", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_POOL_BLOCK_FEES_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_fees')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.4e969deb63": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_175554017e5ca6dfe5a4ac81c955962f.sql", "original_file_path": "models/gold/defi/defi__fact_daily_earnings.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.4e969deb63", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID"], "alias": "fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_175554017e5ca6dfe5a4ac81c955962f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_175554017e5ca6dfe5a4ac81c955962f"}, "created_at": 1741278783.089161, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_175554017e5ca6dfe5a4ac81c955962f\") }}", "language": "sql", "refs": [{"name": "defi__fact_daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_DAILY_EARNINGS_ID", "file_key_name": "models.defi__fact_daily_earnings", "attached_node": "model.maya_models.defi__fact_daily_earnings", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_DAILY_EARNINGS_ID", "model": "{{ get_where_subquery(ref('defi__fact_daily_earnings')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.1b0a6fbdd6": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_daily_earnings.yml", "unique_id": "test.maya_models.unique_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.1b0a6fbdd6", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID"], "alias": "fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.093121, "relation_name": "MAYA.unique_defi.fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_DAILY_EARNINGS_ID", "file_key_name": "models.defi__fact_daily_earnings", "attached_node": "model.maya_models.defi__fact_daily_earnings", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_DAILY_EARNINGS_ID", "model": "{{ get_where_subquery(ref('defi__fact_daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_daily_earnings_DAY.3ecfd9b0ee": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_daily_earnings_DAY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_daily_earnings_DAY.sql", "original_file_path": "models/gold/defi/defi__fact_daily_earnings.yml", "unique_id": "test.maya_models.not_null_defi__fact_daily_earnings_DAY.3ecfd9b0ee", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_daily_earnings_DAY"], "alias": "fact_daily_earnings_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.0939672, "relation_name": "MAYA.not_null_defi.fact_daily_earnings_DAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.defi__fact_daily_earnings", "attached_node": "model.maya_models.defi__fact_daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('defi__fact_daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.unique_defi__fact_daily_earnings_DAY.35299fa0f2": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_daily_earnings_DAY", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_daily_earnings_DAY.sql", "original_file_path": "models/gold/defi/defi__fact_daily_earnings.yml", "unique_id": "test.maya_models.unique_defi__fact_daily_earnings_DAY.35299fa0f2", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_daily_earnings_DAY"], "alias": "fact_daily_earnings_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.0947762, "relation_name": "MAYA.unique_defi.fact_daily_earnings_DAY", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.defi__fact_daily_earnings", "attached_node": "model.maya_models.defi__fact_daily_earnings", "test_metadata": {"name": "unique", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('defi__fact_daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_daily_earnings_LIQUIDITY_FEES.d5cf335416": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_daily_earnings_LIQUIDITY_FEES", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_daily_earnings_LIQUIDITY_FEES.sql", "original_file_path": "models/gold/defi/defi__fact_daily_earnings.yml", "unique_id": "test.maya_models.not_null_defi__fact_daily_earnings_LIQUIDITY_FEES.d5cf335416", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_daily_earnings_LIQUIDITY_FEES"], "alias": "fact_daily_earnings_LIQUIDITY_FEES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.095574, "relation_name": "MAYA.not_null_defi.fact_daily_earnings_LIQUIDITY_FEES", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQUIDITY_FEES", "file_key_name": "models.defi__fact_daily_earnings", "attached_node": "model.maya_models.defi__fact_daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_FEES", "model": "{{ get_where_subquery(ref('defi__fact_daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_daily_earnings_LIQUIDITY_FEES_USD.82b7149fd9": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_daily_earnings_LIQUIDITY_FEES_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_daily_earnings_LIQUIDITY_FEES_USD.sql", "original_file_path": "models/gold/defi/defi__fact_daily_earnings.yml", "unique_id": "test.maya_models.not_null_defi__fact_daily_earnings_LIQUIDITY_FEES_USD.82b7149fd9", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_daily_earnings_LIQUIDITY_FEES_USD"], "alias": "fact_daily_earnings_LIQUIDITY_FEES_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.096479, "relation_name": "MAYA.not_null_defi.fact_daily_earnings_LIQUIDITY_FEES_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQUIDITY_FEES_USD", "file_key_name": "models.defi__fact_daily_earnings", "attached_node": "model.maya_models.defi__fact_daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_FEES_USD", "model": "{{ get_where_subquery(ref('defi__fact_daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_daily_earnings_BLOCK_REWARDS.b126b4b314": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_daily_earnings_BLOCK_REWARDS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_daily_earnings_BLOCK_REWARDS.sql", "original_file_path": "models/gold/defi/defi__fact_daily_earnings.yml", "unique_id": "test.maya_models.not_null_defi__fact_daily_earnings_BLOCK_REWARDS.b126b4b314", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_daily_earnings_BLOCK_REWARDS"], "alias": "fact_daily_earnings_BLOCK_REWARDS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.0972748, "relation_name": "MAYA.not_null_defi.fact_daily_earnings_BLOCK_REWARDS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_REWARDS", "file_key_name": "models.defi__fact_daily_earnings", "attached_node": "model.maya_models.defi__fact_daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_REWARDS", "model": "{{ get_where_subquery(ref('defi__fact_daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_daily_earnings_BLOCK_REWARDS_USD.107e54d6bb": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_daily_earnings_BLOCK_REWARDS_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_daily_earnings_BLOCK_REWARDS_USD.sql", "original_file_path": "models/gold/defi/defi__fact_daily_earnings.yml", "unique_id": "test.maya_models.not_null_defi__fact_daily_earnings_BLOCK_REWARDS_USD.107e54d6bb", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_daily_earnings_BLOCK_REWARDS_USD"], "alias": "fact_daily_earnings_BLOCK_REWARDS_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.0980768, "relation_name": "MAYA.not_null_defi.fact_daily_earnings_BLOCK_REWARDS_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_REWARDS_USD", "file_key_name": "models.defi__fact_daily_earnings", "attached_node": "model.maya_models.defi__fact_daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_REWARDS_USD", "model": "{{ get_where_subquery(ref('defi__fact_daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_daily_earnings_TOTAL_EARNINGS.66fbf6afc0": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_daily_earnings_TOTAL_EARNINGS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_daily_earnings_TOTAL_EARNINGS.sql", "original_file_path": "models/gold/defi/defi__fact_daily_earnings.yml", "unique_id": "test.maya_models.not_null_defi__fact_daily_earnings_TOTAL_EARNINGS.66fbf6afc0", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_daily_earnings_TOTAL_EARNINGS"], "alias": "fact_daily_earnings_TOTAL_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.0988731, "relation_name": "MAYA.not_null_defi.fact_daily_earnings_TOTAL_EARNINGS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_EARNINGS", "file_key_name": "models.defi__fact_daily_earnings", "attached_node": "model.maya_models.defi__fact_daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_EARNINGS", "model": "{{ get_where_subquery(ref('defi__fact_daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_daily_earnings_TOTAL_EARNINGS_USD.efaf0622ac": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_daily_earnings_TOTAL_EARNINGS_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_daily_earnings_TOTAL_EARNINGS_USD.sql", "original_file_path": "models/gold/defi/defi__fact_daily_earnings.yml", "unique_id": "test.maya_models.not_null_defi__fact_daily_earnings_TOTAL_EARNINGS_USD.efaf0622ac", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_daily_earnings_TOTAL_EARNINGS_USD"], "alias": "fact_daily_earnings_TOTAL_EARNINGS_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.099672, "relation_name": "MAYA.not_null_defi.fact_daily_earnings_TOTAL_EARNINGS_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_EARNINGS_USD", "file_key_name": "models.defi__fact_daily_earnings", "attached_node": "model.maya_models.defi__fact_daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_EARNINGS_USD", "model": "{{ get_where_subquery(ref('defi__fact_daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_NODES.147efdb208": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_daily_earnings_EARNINGS_TO_NODES", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_daily_earnings_EARNINGS_TO_NODES.sql", "original_file_path": "models/gold/defi/defi__fact_daily_earnings.yml", "unique_id": "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_NODES.147efdb208", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_daily_earnings_EARNINGS_TO_NODES"], "alias": "fact_daily_earnings_EARNINGS_TO_NODES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.100478, "relation_name": "MAYA.not_null_defi.fact_daily_earnings_EARNINGS_TO_NODES", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EARNINGS_TO_NODES", "file_key_name": "models.defi__fact_daily_earnings", "attached_node": "model.maya_models.defi__fact_daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS_TO_NODES", "model": "{{ get_where_subquery(ref('defi__fact_daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_NODES_USD.05d14a2dcd": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_daily_earnings_EARNINGS_TO_NODES_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_daily_earnings_EARNINGS_TO_NODES_USD.sql", "original_file_path": "models/gold/defi/defi__fact_daily_earnings.yml", "unique_id": "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_NODES_USD.05d14a2dcd", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_daily_earnings_EARNINGS_TO_NODES_USD"], "alias": "fact_daily_earnings_EARNINGS_TO_NODES_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.101335, "relation_name": "MAYA.not_null_defi.fact_daily_earnings_EARNINGS_TO_NODES_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EARNINGS_TO_NODES_USD", "file_key_name": "models.defi__fact_daily_earnings", "attached_node": "model.maya_models.defi__fact_daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS_TO_NODES_USD", "model": "{{ get_where_subquery(ref('defi__fact_daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_POOLS.fbeff5d134": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_daily_earnings_EARNINGS_TO_POOLS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_daily_earnings_EARNINGS_TO_POOLS.sql", "original_file_path": "models/gold/defi/defi__fact_daily_earnings.yml", "unique_id": "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_POOLS.fbeff5d134", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_daily_earnings_EARNINGS_TO_POOLS"], "alias": "fact_daily_earnings_EARNINGS_TO_POOLS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.102203, "relation_name": "MAYA.not_null_defi.fact_daily_earnings_EARNINGS_TO_POOLS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EARNINGS_TO_POOLS", "file_key_name": "models.defi__fact_daily_earnings", "attached_node": "model.maya_models.defi__fact_daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS_TO_POOLS", "model": "{{ get_where_subquery(ref('defi__fact_daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_POOLS_USD.39dea1c2bb": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_daily_earnings_EARNINGS_TO_POOLS_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_daily_earnings_EARNINGS_TO_POOLS_USD.sql", "original_file_path": "models/gold/defi/defi__fact_daily_earnings.yml", "unique_id": "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_POOLS_USD.39dea1c2bb", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_daily_earnings_EARNINGS_TO_POOLS_USD"], "alias": "fact_daily_earnings_EARNINGS_TO_POOLS_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.103095, "relation_name": "MAYA.not_null_defi.fact_daily_earnings_EARNINGS_TO_POOLS_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EARNINGS_TO_POOLS_USD", "file_key_name": "models.defi__fact_daily_earnings", "attached_node": "model.maya_models.defi__fact_daily_earnings", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS_TO_POOLS_USD", "model": "{{ get_where_subquery(ref('defi__fact_daily_earnings')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.405108b886": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_f42dbc31cca4f44cb977d9e659ade044.sql", "original_file_path": "models/gold/defi/defi__fact_daily_earnings.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.405108b886", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID"], "alias": "fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_f42dbc31cca4f44cb977d9e659ade044", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_f42dbc31cca4f44cb977d9e659ade044"}, "created_at": 1741278783.1039512, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_f42dbc31cca4f44cb977d9e659ade044\") }}", "language": "sql", "refs": [{"name": "defi__fact_daily_earnings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_daily_earnings"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_daily_earnings", "attached_node": "model.maya_models.defi__fact_daily_earnings", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_DAILY_EARNINGS_ID", "model": "{{ get_where_subquery(ref('defi__fact_daily_earnings')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID.1f26ff2cfb": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_83a7334021f2f773a35929eca1cdcdf0.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID.1f26ff2cfb", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID"], "alias": "fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_83a7334021f2f773a35929eca1cdcdf0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_83a7334021f2f773a35929eca1cdcdf0"}, "created_at": 1741278783.1079848, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_83a7334021f2f773a35929eca1cdcdf0\") }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_WITHDRAW_EVENTS_ID", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_WITHDRAW_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID.651eb6dfe4": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.unique_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID.651eb6dfe4", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID"], "alias": "fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.110434, "relation_name": "MAYA.unique_defi.fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_WITHDRAW_EVENTS_ID", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_WITHDRAW_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_withdraw_events_BLOCK_TIMESTAMP.e2e54ceae9": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_withdraw_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_withdraw_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_withdraw_events_BLOCK_TIMESTAMP.e2e54ceae9", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_withdraw_events_BLOCK_TIMESTAMP"], "alias": "fact_withdraw_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.1112618, "relation_name": "MAYA.not_null_defi.fact_withdraw_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_withdraw_events_DIM_BLOCK_ID.5b55c401d8": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_withdraw_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_withdraw_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_withdraw_events_DIM_BLOCK_ID.5b55c401d8", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_withdraw_events_DIM_BLOCK_ID"], "alias": "fact_withdraw_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.112075, "relation_name": "MAYA.negative_one_defi.fact_withdraw_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_withdraw_events_TX_ID.e7d3e3beef": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_withdraw_events_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_withdraw_events_TX_ID.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_withdraw_events_TX_ID.e7d3e3beef", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_withdraw_events_TX_ID"], "alias": "fact_withdraw_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.11442, "relation_name": "MAYA.not_null_defi.fact_withdraw_events_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_withdraw_events_BLOCKCHAIN.5f12fcea5a": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_withdraw_events_BLOCKCHAIN", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_withdraw_events_BLOCKCHAIN.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_withdraw_events_BLOCKCHAIN.5f12fcea5a", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_withdraw_events_BLOCKCHAIN"], "alias": "fact_withdraw_events_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.115242, "relation_name": "MAYA.not_null_defi.fact_withdraw_events_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_withdraw_events_FROM_ADDRESS.fb0510a262": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_withdraw_events_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_withdraw_events_FROM_ADDRESS.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_withdraw_events_FROM_ADDRESS.fb0510a262", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_withdraw_events_FROM_ADDRESS"], "alias": "fact_withdraw_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.116239, "relation_name": "MAYA.not_null_defi.fact_withdraw_events_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_withdraw_events_TO_ADDRESS.f4aadfb9bb": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_withdraw_events_TO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_withdraw_events_TO_ADDRESS.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_withdraw_events_TO_ADDRESS.f4aadfb9bb", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_withdraw_events_TO_ADDRESS"], "alias": "fact_withdraw_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.1172879, "relation_name": "MAYA.not_null_defi.fact_withdraw_events_TO_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ADDRESS", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_withdraw_events_ASSET_E8.d0be5ed1a4": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_withdraw_events_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_withdraw_events_ASSET_E8.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_withdraw_events_ASSET_E8.d0be5ed1a4", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_withdraw_events_ASSET_E8"], "alias": "fact_withdraw_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.118141, "relation_name": "MAYA.not_null_defi.fact_withdraw_events_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_withdraw_events_EMIT_ASSET_E8.5c62cbff98": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_withdraw_events_EMIT_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_withdraw_events_EMIT_ASSET_E8.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_withdraw_events_EMIT_ASSET_E8.5c62cbff98", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_withdraw_events_EMIT_ASSET_E8"], "alias": "fact_withdraw_events_EMIT_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.119056, "relation_name": "MAYA.not_null_defi.fact_withdraw_events_EMIT_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EMIT_ASSET_E8", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EMIT_ASSET_E8", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_withdraw_events_EMIT_cacao_E8.4ce153e62c": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_withdraw_events_EMIT_cacao_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_withdraw_events_EMIT_cacao_E8.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_withdraw_events_EMIT_cacao_E8.4ce153e62c", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_withdraw_events_EMIT_cacao_E8"], "alias": "fact_withdraw_events_EMIT_cacao_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.119871, "relation_name": "MAYA.not_null_defi.fact_withdraw_events_EMIT_cacao_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EMIT_cacao_E8", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EMIT_cacao_E8", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_withdraw_events_MEMO.670b33bd28": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_withdraw_events_MEMO", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_withdraw_events_MEMO.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_withdraw_events_MEMO.670b33bd28", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_withdraw_events_MEMO"], "alias": "fact_withdraw_events_MEMO", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.1206698, "relation_name": "MAYA.not_null_defi.fact_withdraw_events_MEMO", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MEMO", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MEMO", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_withdraw_events_POOL_NAME.7816baa3be": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_withdraw_events_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_withdraw_events_POOL_NAME.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_withdraw_events_POOL_NAME.7816baa3be", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_withdraw_events_POOL_NAME"], "alias": "fact_withdraw_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.1215181, "relation_name": "MAYA.not_null_defi.fact_withdraw_events_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_withdraw_events_STAKE_UNITS.4940151023": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_withdraw_events_STAKE_UNITS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_withdraw_events_STAKE_UNITS.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_withdraw_events_STAKE_UNITS.4940151023", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_withdraw_events_STAKE_UNITS"], "alias": "fact_withdraw_events_STAKE_UNITS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.12238, "relation_name": "MAYA.not_null_defi.fact_withdraw_events_STAKE_UNITS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STAKE_UNITS", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STAKE_UNITS", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_withdraw_events_BASIS_POINTS.a01b4d3168": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_withdraw_events_BASIS_POINTS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_withdraw_events_BASIS_POINTS.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_withdraw_events_BASIS_POINTS.a01b4d3168", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_withdraw_events_BASIS_POINTS"], "alias": "fact_withdraw_events_BASIS_POINTS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.1232011, "relation_name": "MAYA.not_null_defi.fact_withdraw_events_BASIS_POINTS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BASIS_POINTS", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BASIS_POINTS", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_withdraw_events_ASYMMETRY.27f7ecb3e2": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_withdraw_events_ASYMMETRY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_withdraw_events_ASYMMETRY.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_withdraw_events_ASYMMETRY.27f7ecb3e2", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_withdraw_events_ASYMMETRY"], "alias": "fact_withdraw_events_ASYMMETRY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.124005, "relation_name": "MAYA.not_null_defi.fact_withdraw_events_ASYMMETRY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASYMMETRY", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASYMMETRY", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_withdraw_events_IMP_LOSS_PROTECTION_E8.b061882c2b": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_withdraw_events_IMP_LOSS_PROTECTION_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_withdraw_events_IMP_LOSS_PROTECTION_E8.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_withdraw_events_IMP_LOSS_PROTECTION_E8.b061882c2b", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_withdraw_events_IMP_LOSS_PROTECTION_E8"], "alias": "fact_withdraw_events_IMP_LOSS_PROTECTION_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.125105, "relation_name": "MAYA.not_null_defi.fact_withdraw_events_IMP_LOSS_PROTECTION_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "IMP_LOSS_PROTECTION_E8", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMP_LOSS_PROTECTION_E8", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_withdraw_events__EMIT_ASSET_IN_cacao_E8.75c9544a1e": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_withdraw_events__EMIT_ASSET_IN_cacao_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_withdraw_events__EMIT_ASSET_IN_cacao_E8.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_withdraw_events__EMIT_ASSET_IN_cacao_E8.75c9544a1e", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_withdraw_events__EMIT_ASSET_IN_cacao_E8"], "alias": "fact_withdraw_events", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.125918, "relation_name": "MAYA.not_null_defi.fact_withdraw_events", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "_EMIT_ASSET_IN_cacao_E8", "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_EMIT_ASSET_IN_cacao_E8", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID.2abb09d2d0": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_2e0ca5da4c91f30c653fe312f9a0535c.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID.2abb09d2d0", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID"], "alias": "fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_2e0ca5da4c91f30c653fe312f9a0535c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_2e0ca5da4c91f30c653fe312f9a0535c"}, "created_at": 1741278783.126814, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_2e0ca5da4c91f30c653fe312f9a0535c\") }}", "language": "sql", "refs": [{"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_WITHDRAW_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_withdraw_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c30b39b2dd": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_withdraw_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_b0ea3d65530bfe196904db3f08437362.sql", "original_file_path": "models/gold/defi/defi__fact_withdraw_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_withdraw_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c30b39b2dd", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_withdraw_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_withdraw_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_b0ea3d65530bfe196904db3f08437362", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_b0ea3d65530bfe196904db3f08437362"}, "created_at": 1741278783.129777, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_withdraw_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_b0ea3d65530bfe196904db3f08437362\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_withdraw_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_withdraw_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_withdraw_events", "attached_node": "model.maya_models.defi__fact_withdraw_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_withdraw_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID.e8a3be544e": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_9f259b2f5ad88cb1ee51b78601a04b61.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID.e8a3be544e", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID"], "alias": "fact_swaps_events_FACT_SWAP_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9f259b2f5ad88cb1ee51b78601a04b61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9f259b2f5ad88cb1ee51b78601a04b61"}, "created_at": 1741278783.1374521, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_swaps_events_FACT_SWAP_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9f259b2f5ad88cb1ee51b78601a04b61\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SWAP_EVENTS_ID", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SWAP_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID.275b663f75": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.unique_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID.275b663f75", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID"], "alias": "fact_swaps_events_FACT_SWAP_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.14026, "relation_name": "MAYA.unique_defi.fact_swaps_events_FACT_SWAP_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SWAP_EVENTS_ID", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SWAP_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_events_BLOCK_TIMESTAMP.152a60ae05": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_events_BLOCK_TIMESTAMP.152a60ae05", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_events_BLOCK_TIMESTAMP"], "alias": "fact_swaps_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.141092, "relation_name": "MAYA.not_null_defi.fact_swaps_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_swaps_events_DIM_BLOCK_ID.32d0060a7d": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_swaps_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_swaps_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_swaps_events_DIM_BLOCK_ID.32d0060a7d", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_swaps_events_DIM_BLOCK_ID"], "alias": "fact_swaps_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.141883, "relation_name": "MAYA.negative_one_defi.fact_swaps_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_events_TX_ID.769f694135": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_events_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_events_TX_ID.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_events_TX_ID.769f694135", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_events_TX_ID"], "alias": "fact_swaps_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.144078, "relation_name": "MAYA.not_null_defi.fact_swaps_events_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_events_BLOCKCHAIN.a7bfef9416": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_events_BLOCKCHAIN", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_events_BLOCKCHAIN.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_events_BLOCKCHAIN.a7bfef9416", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_events_BLOCKCHAIN"], "alias": "fact_swaps_events_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.1448681, "relation_name": "MAYA.not_null_defi.fact_swaps_events_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_events_FROM_ADDRESS.f438dceaed": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_events_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_events_FROM_ADDRESS.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_events_FROM_ADDRESS.f438dceaed", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_events_FROM_ADDRESS"], "alias": "fact_swaps_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.145637, "relation_name": "MAYA.not_null_defi.fact_swaps_events_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_events_TO_ADDRESS.0fab10cf01": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_events_TO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_events_TO_ADDRESS.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_events_TO_ADDRESS.0fab10cf01", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_events_TO_ADDRESS"], "alias": "fact_swaps_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.146389, "relation_name": "MAYA.not_null_defi.fact_swaps_events_TO_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ADDRESS", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_events_FROM_ASSET.d1bd099314": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_events_FROM_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_events_FROM_ASSET.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_events_FROM_ASSET.d1bd099314", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_events_FROM_ASSET"], "alias": "fact_swaps_events_FROM_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.147143, "relation_name": "MAYA.not_null_defi.fact_swaps_events_FROM_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ASSET", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ASSET", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_events_FROM_E8.e5316aeab9": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_events_FROM_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_events_FROM_E8.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_events_FROM_E8.e5316aeab9", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_events_FROM_E8"], "alias": "fact_swaps_events_FROM_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.1484768, "relation_name": "MAYA.not_null_defi.fact_swaps_events_FROM_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_E8", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_E8", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_events_TO_ASSET.d10e7cab75": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_events_TO_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_events_TO_ASSET.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_events_TO_ASSET.d10e7cab75", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_events_TO_ASSET"], "alias": "fact_swaps_events_TO_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.1492422, "relation_name": "MAYA.not_null_defi.fact_swaps_events_TO_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ASSET", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_events_TO_E8.ba0a8505a0": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_events_TO_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_events_TO_E8.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_events_TO_E8.ba0a8505a0", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_events_TO_E8"], "alias": "fact_swaps_events_TO_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.1499991, "relation_name": "MAYA.not_null_defi.fact_swaps_events_TO_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_E8", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_E8", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_events_MEMO.e737d61e21": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_events_MEMO", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_events_MEMO.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_events_MEMO.e737d61e21", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_events_MEMO"], "alias": "fact_swaps_events_MEMO", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.1507258, "relation_name": "MAYA.not_null_defi.fact_swaps_events_MEMO", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MEMO", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MEMO", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_events_POOL_NAME.47817b05e7": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_events_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_events_POOL_NAME.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_events_POOL_NAME.47817b05e7", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_events_POOL_NAME"], "alias": "fact_swaps_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.151457, "relation_name": "MAYA.not_null_defi.fact_swaps_events_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_events_TO_E8_MIN.f257749398": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_events_TO_E8_MIN", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_events_TO_E8_MIN.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_events_TO_E8_MIN.f257749398", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_events_TO_E8_MIN"], "alias": "fact_swaps_events_TO_E8_MIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.152181, "relation_name": "MAYA.not_null_defi.fact_swaps_events_TO_E8_MIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_E8_MIN", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_E8_MIN", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_events_SWAP_SLIP_BP.83363ed081": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_events_SWAP_SLIP_BP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_events_SWAP_SLIP_BP.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_events_SWAP_SLIP_BP.83363ed081", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_events_SWAP_SLIP_BP"], "alias": "fact_swaps_events_SWAP_SLIP_BP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.152965, "relation_name": "MAYA.not_null_defi.fact_swaps_events_SWAP_SLIP_BP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SWAP_SLIP_BP", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_SLIP_BP", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_events_LIQ_FEE_E8.8ab774160b": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_events_LIQ_FEE_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_events_LIQ_FEE_E8.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_events_LIQ_FEE_E8.8ab774160b", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_events_LIQ_FEE_E8"], "alias": "fact_swaps_events_LIQ_FEE_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.1537018, "relation_name": "MAYA.not_null_defi.fact_swaps_events_LIQ_FEE_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQ_FEE_E8", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQ_FEE_E8", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_events_LIQ_FEE_IN_cacao_E8.c9dad22e6c": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_events_LIQ_FEE_IN_cacao_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_events_LIQ_FEE_IN_cacao_E8.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_events_LIQ_FEE_IN_cacao_E8.c9dad22e6c", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_events_LIQ_FEE_IN_cacao_E8"], "alias": "fact_swaps_events_LIQ_FEE_IN_cacao_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.154422, "relation_name": "MAYA.not_null_defi.fact_swaps_events_LIQ_FEE_IN_cacao_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQ_FEE_IN_cacao_E8", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQ_FEE_IN_cacao_E8", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_events__DIRECTION.6ab3030ca2": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_events__DIRECTION", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_events__DIRECTION.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_events__DIRECTION.6ab3030ca2", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_events__DIRECTION"], "alias": "fact_swaps_events", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.155143, "relation_name": "MAYA.not_null_defi.fact_swaps_events", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "_DIRECTION", "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_DIRECTION", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID.bd110e1762": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_c8c8016a0955391a8a6b65b3e5d5d437.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID.bd110e1762", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID"], "alias": "fact_swaps_events_FACT_SWAP_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_c8c8016a0955391a8a6b65b3e5d5d437", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_c8c8016a0955391a8a6b65b3e5d5d437"}, "created_at": 1741278783.155881, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_swaps_events_FACT_SWAP_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_c8c8016a0955391a8a6b65b3e5d5d437\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SWAP_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_swaps_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.6efb37c54a": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_swaps_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_4df28a10585d3cbe9536e3d8fd75826b.sql", "original_file_path": "models/gold/defi/defi__fact_swaps_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_swaps_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.6efb37c54a", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_swaps_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_swaps_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_4df28a10585d3cbe9536e3d8fd75826b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_4df28a10585d3cbe9536e3d8fd75826b"}, "created_at": 1741278783.1583629, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_swaps_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_4df28a10585d3cbe9536e3d8fd75826b\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_swaps_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_swaps_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_swaps_events", "attached_node": "model.maya_models.defi__fact_swaps_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID.f26dd135e0": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_b3caa34f557daea358952e806085f93e.sql", "original_file_path": "models/gold/defi/defi__fact_block_rewards.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID.f26dd135e0", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID"], "alias": "fact_block_rewards_FACT_BLOCK_REWARDS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b3caa34f557daea358952e806085f93e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b3caa34f557daea358952e806085f93e"}, "created_at": 1741278783.162742, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_block_rewards_FACT_BLOCK_REWARDS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b3caa34f557daea358952e806085f93e\") }}", "language": "sql", "refs": [{"name": "defi__fact_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_BLOCK_REWARDS_ID", "file_key_name": "models.defi__fact_block_rewards", "attached_node": "model.maya_models.defi__fact_block_rewards", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_BLOCK_REWARDS_ID", "model": "{{ get_where_subquery(ref('defi__fact_block_rewards')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID.d5d72bba07": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_block_rewards.yml", "unique_id": "test.maya_models.unique_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID.d5d72bba07", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID"], "alias": "fact_block_rewards_FACT_BLOCK_REWARDS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.165766, "relation_name": "MAYA.unique_defi.fact_block_rewards_FACT_BLOCK_REWARDS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_BLOCK_REWARDS_ID", "file_key_name": "models.defi__fact_block_rewards", "attached_node": "model.maya_models.defi__fact_block_rewards", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_BLOCK_REWARDS_ID", "model": "{{ get_where_subquery(ref('defi__fact_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_block_rewards_DAY.7fa63155fc": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_block_rewards_DAY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_block_rewards_DAY.sql", "original_file_path": "models/gold/defi/defi__fact_block_rewards.yml", "unique_id": "test.maya_models.not_null_defi__fact_block_rewards_DAY.7fa63155fc", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_block_rewards_DAY"], "alias": "fact_block_rewards_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.166636, "relation_name": "MAYA.not_null_defi.fact_block_rewards_DAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.defi__fact_block_rewards", "attached_node": "model.maya_models.defi__fact_block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('defi__fact_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.unique_defi__fact_block_rewards_DAY.6963e728a5": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_block_rewards_DAY", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_block_rewards_DAY.sql", "original_file_path": "models/gold/defi/defi__fact_block_rewards.yml", "unique_id": "test.maya_models.unique_defi__fact_block_rewards_DAY.6963e728a5", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_block_rewards_DAY"], "alias": "fact_block_rewards_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.1674829, "relation_name": "MAYA.unique_defi.fact_block_rewards_DAY", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.defi__fact_block_rewards", "attached_node": "model.maya_models.defi__fact_block_rewards", "test_metadata": {"name": "unique", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('defi__fact_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_block_rewards_LIQUIDITY_FEE.dbbf334ba1": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_block_rewards_LIQUIDITY_FEE", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_block_rewards_LIQUIDITY_FEE.sql", "original_file_path": "models/gold/defi/defi__fact_block_rewards.yml", "unique_id": "test.maya_models.not_null_defi__fact_block_rewards_LIQUIDITY_FEE.dbbf334ba1", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_block_rewards_LIQUIDITY_FEE"], "alias": "fact_block_rewards_LIQUIDITY_FEE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.16832, "relation_name": "MAYA.not_null_defi.fact_block_rewards_LIQUIDITY_FEE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQUIDITY_FEE", "file_key_name": "models.defi__fact_block_rewards", "attached_node": "model.maya_models.defi__fact_block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_FEE", "model": "{{ get_where_subquery(ref('defi__fact_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_block_rewards_BLOCK_REWARDS.a92137996e": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_block_rewards_BLOCK_REWARDS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_block_rewards_BLOCK_REWARDS.sql", "original_file_path": "models/gold/defi/defi__fact_block_rewards.yml", "unique_id": "test.maya_models.not_null_defi__fact_block_rewards_BLOCK_REWARDS.a92137996e", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_block_rewards_BLOCK_REWARDS"], "alias": "fact_block_rewards_BLOCK_REWARDS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.16917, "relation_name": "MAYA.not_null_defi.fact_block_rewards_BLOCK_REWARDS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_REWARDS", "file_key_name": "models.defi__fact_block_rewards", "attached_node": "model.maya_models.defi__fact_block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_REWARDS", "model": "{{ get_where_subquery(ref('defi__fact_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_block_rewards_EARNINGS.6734c56332": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_block_rewards_EARNINGS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_block_rewards_EARNINGS.sql", "original_file_path": "models/gold/defi/defi__fact_block_rewards.yml", "unique_id": "test.maya_models.not_null_defi__fact_block_rewards_EARNINGS.6734c56332", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_block_rewards_EARNINGS"], "alias": "fact_block_rewards_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.169992, "relation_name": "MAYA.not_null_defi.fact_block_rewards_EARNINGS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EARNINGS", "file_key_name": "models.defi__fact_block_rewards", "attached_node": "model.maya_models.defi__fact_block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS", "model": "{{ get_where_subquery(ref('defi__fact_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_block_rewards_BONDING_EARNINGS.21f4a2d782": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_block_rewards_BONDING_EARNINGS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_block_rewards_BONDING_EARNINGS.sql", "original_file_path": "models/gold/defi/defi__fact_block_rewards.yml", "unique_id": "test.maya_models.not_null_defi__fact_block_rewards_BONDING_EARNINGS.21f4a2d782", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_block_rewards_BONDING_EARNINGS"], "alias": "fact_block_rewards_BONDING_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.170905, "relation_name": "MAYA.not_null_defi.fact_block_rewards_BONDING_EARNINGS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BONDING_EARNINGS", "file_key_name": "models.defi__fact_block_rewards", "attached_node": "model.maya_models.defi__fact_block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BONDING_EARNINGS", "model": "{{ get_where_subquery(ref('defi__fact_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_block_rewards_LIQUIDITY_EARNINGS.6e711b1025": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_block_rewards_LIQUIDITY_EARNINGS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_block_rewards_LIQUIDITY_EARNINGS.sql", "original_file_path": "models/gold/defi/defi__fact_block_rewards.yml", "unique_id": "test.maya_models.not_null_defi__fact_block_rewards_LIQUIDITY_EARNINGS.6e711b1025", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_block_rewards_LIQUIDITY_EARNINGS"], "alias": "fact_block_rewards_LIQUIDITY_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.171904, "relation_name": "MAYA.not_null_defi.fact_block_rewards_LIQUIDITY_EARNINGS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQUIDITY_EARNINGS", "file_key_name": "models.defi__fact_block_rewards", "attached_node": "model.maya_models.defi__fact_block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_EARNINGS", "model": "{{ get_where_subquery(ref('defi__fact_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID.6fb653e543": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_5e1df165e0f7218499f81ff48eb8a170.sql", "original_file_path": "models/gold/defi/defi__fact_block_rewards.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID.6fb653e543", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID"], "alias": "fact_block_rewards_FACT_BLOCK_REWARDS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_5e1df165e0f7218499f81ff48eb8a170", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_5e1df165e0f7218499f81ff48eb8a170"}, "created_at": 1741278783.172734, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_block_rewards_FACT_BLOCK_REWARDS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_5e1df165e0f7218499f81ff48eb8a170\") }}", "language": "sql", "refs": [{"name": "defi__fact_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_block_rewards", "attached_node": "model.maya_models.defi__fact_block_rewards", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_BLOCK_REWARDS_ID", "model": "{{ get_where_subquery(ref('defi__fact_block_rewards')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.c429e7e114": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_0e62ae9678c1d808c7524f0a002c6e3d.sql", "original_file_path": "models/gold/defi/defi__fact_outbound_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.c429e7e114", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID"], "alias": "fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0e62ae9678c1d808c7524f0a002c6e3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0e62ae9678c1d808c7524f0a002c6e3d"}, "created_at": 1741278783.176627, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0e62ae9678c1d808c7524f0a002c6e3d\") }}", "language": "sql", "refs": [{"name": "defi__fact_outbound_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_OUTBOUND_EVENTS_ID", "file_key_name": "models.defi__fact_outbound_events", "attached_node": "model.maya_models.defi__fact_outbound_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_OUTBOUND_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_outbound_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.7ce8b4da38": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_outbound_events.yml", "unique_id": "test.maya_models.unique_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.7ce8b4da38", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID"], "alias": "fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.17921, "relation_name": "MAYA.unique_defi.fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_outbound_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_OUTBOUND_EVENTS_ID", "file_key_name": "models.defi__fact_outbound_events", "attached_node": "model.maya_models.defi__fact_outbound_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_OUTBOUND_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_outbound_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_outbound_events_BLOCK_TIMESTAMP.ba5c7a7372": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_outbound_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_outbound_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_outbound_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_outbound_events_BLOCK_TIMESTAMP.ba5c7a7372", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_outbound_events_BLOCK_TIMESTAMP"], "alias": "fact_outbound_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.1800718, "relation_name": "MAYA.not_null_defi.fact_outbound_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_outbound_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_outbound_events", "attached_node": "model.maya_models.defi__fact_outbound_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_outbound_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_outbound_events_DIM_BLOCK_ID.c4dc4c2e5b": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_outbound_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_outbound_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_outbound_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_outbound_events_DIM_BLOCK_ID.c4dc4c2e5b", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_outbound_events_DIM_BLOCK_ID"], "alias": "fact_outbound_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.1809769, "relation_name": "MAYA.negative_one_defi.fact_outbound_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_outbound_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_outbound_events", "attached_node": "model.maya_models.defi__fact_outbound_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_outbound_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.56a7c40cd9": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_ba5f3798cf21edab7b25878a459d1a16.sql", "original_file_path": "models/gold/defi/defi__fact_outbound_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.56a7c40cd9", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID"], "alias": "fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_ba5f3798cf21edab7b25878a459d1a16", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_ba5f3798cf21edab7b25878a459d1a16"}, "created_at": 1741278783.1838331, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_ba5f3798cf21edab7b25878a459d1a16\") }}", "language": "sql", "refs": [{"name": "defi__fact_outbound_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_outbound_events", "attached_node": "model.maya_models.defi__fact_outbound_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_OUTBOUND_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_outbound_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_outbound_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2aa6dc45d7": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_outbound_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_5eba8eeb033d8e8383d28c388cced761.sql", "original_file_path": "models/gold/defi/defi__fact_outbound_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_outbound_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2aa6dc45d7", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_outbound_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_outbound_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_5eba8eeb033d8e8383d28c388cced761", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_5eba8eeb033d8e8383d28c388cced761"}, "created_at": 1741278783.1863291, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_outbound_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_5eba8eeb033d8e8383d28c388cced761\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_outbound_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_outbound_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_outbound_events", "attached_node": "model.maya_models.defi__fact_outbound_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_outbound_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.baab1e87b2": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_c9fce979cbbc8b90d46b3e3b7c2e4b3e.sql", "original_file_path": "models/gold/defi/defi__fact_pending_liquidity_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.baab1e87b2", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID"], "alias": "fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c9fce979cbbc8b90d46b3e3b7c2e4b3e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c9fce979cbbc8b90d46b3e3b7c2e4b3e"}, "created_at": 1741278783.190797, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c9fce979cbbc8b90d46b3e3b7c2e4b3e\") }}", "language": "sql", "refs": [{"name": "defi__fact_pending_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_pending_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_PENDING_LIQUIDITY_EVENTS_ID", "file_key_name": "models.defi__fact_pending_liquidity_events", "attached_node": "model.maya_models.defi__fact_pending_liquidity_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_PENDING_LIQUIDITY_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_pending_liquidity_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.6793a43b6b": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_pending_liqu_8d8933e53353868d8944c462e7bfae79.sql", "original_file_path": "models/gold/defi/defi__fact_pending_liquidity_events.yml", "unique_id": "test.maya_models.unique_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.6793a43b6b", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID"], "alias": "fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_defi__fact_pending_liqu_8d8933e53353868d8944c462e7bfae79", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "unique_defi__fact_pending_liqu_8d8933e53353868d8944c462e7bfae79"}, "created_at": 1741278783.194947, "relation_name": "MAYA.unique_defi.fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_defi__fact_pending_liqu_8d8933e53353868d8944c462e7bfae79\") }}", "language": "sql", "refs": [{"name": "defi__fact_pending_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_pending_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_PENDING_LIQUIDITY_EVENTS_ID", "file_key_name": "models.defi__fact_pending_liquidity_events", "attached_node": "model.maya_models.defi__fact_pending_liquidity_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_PENDING_LIQUIDITY_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_pending_liquidity_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_pending_liquidity_events_BLOCK_TIMESTAMP.c703e15c52": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_pending_liquidity_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_pending_liquidity_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_pending_liquidity_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_pending_liquidity_events_BLOCK_TIMESTAMP.c703e15c52", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_pending_liquidity_events_BLOCK_TIMESTAMP"], "alias": "fact_pending_liquidity_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.195817, "relation_name": "MAYA.not_null_defi.fact_pending_liquidity_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_pending_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_pending_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_pending_liquidity_events", "attached_node": "model.maya_models.defi__fact_pending_liquidity_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_pending_liquidity_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_pending_liquidity_events_DIM_BLOCK_ID.ab0617b986": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_pending_liquidity_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_pending_liquidity_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_pending_liquidity_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_pending_liquidity_events_DIM_BLOCK_ID.ab0617b986", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_pending_liquidity_events_DIM_BLOCK_ID"], "alias": "fact_pending_liquidity_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.1966321, "relation_name": "MAYA.negative_one_defi.fact_pending_liquidity_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_pending_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_pending_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_pending_liquidity_events", "attached_node": "model.maya_models.defi__fact_pending_liquidity_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_pending_liquidity_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.6a659e8b12": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_12b8be34d6b0b88e6c8dd8a9c1f7fd2e.sql", "original_file_path": "models/gold/defi/defi__fact_pending_liquidity_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.6a659e8b12", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID"], "alias": "fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_12b8be34d6b0b88e6c8dd8a9c1f7fd2e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_12b8be34d6b0b88e6c8dd8a9c1f7fd2e"}, "created_at": 1741278783.199101, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_12b8be34d6b0b88e6c8dd8a9c1f7fd2e\") }}", "language": "sql", "refs": [{"name": "defi__fact_pending_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_pending_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_pending_liquidity_events", "attached_node": "model.maya_models.defi__fact_pending_liquidity_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_PENDING_LIQUIDITY_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_pending_liquidity_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_pending_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ca2e4eee90": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_pending_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_672e1b8557f5b3f0ff934cbde1c4d217.sql", "original_file_path": "models/gold/defi/defi__fact_pending_liquidity_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_pending_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ca2e4eee90", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_pending_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_pending_liquidity_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_672e1b8557f5b3f0ff934cbde1c4d217", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_672e1b8557f5b3f0ff934cbde1c4d217"}, "created_at": 1741278783.201808, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_pending_liquidity_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_672e1b8557f5b3f0ff934cbde1c4d217\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_pending_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_pending_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_pending_liquidity_events", "attached_node": "model.maya_models.defi__fact_pending_liquidity_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_pending_liquidity_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_gas_events_FACT_GAS_EVENTS_ID.bb047375bf": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_gas_events_FACT_GAS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_b20050107d5ab458af2ef9aebd9c0d82.sql", "original_file_path": "models/gold/defi/defi__fact_gas_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_gas_events_FACT_GAS_EVENTS_ID.bb047375bf", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_gas_events_FACT_GAS_EVENTS_ID"], "alias": "fact_gas_events_FACT_GAS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b20050107d5ab458af2ef9aebd9c0d82", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b20050107d5ab458af2ef9aebd9c0d82"}, "created_at": 1741278783.205476, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_gas_events_FACT_GAS_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b20050107d5ab458af2ef9aebd9c0d82\") }}", "language": "sql", "refs": [{"name": "defi__fact_gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_GAS_EVENTS_ID", "file_key_name": "models.defi__fact_gas_events", "attached_node": "model.maya_models.defi__fact_gas_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_GAS_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_gas_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_gas_events_FACT_GAS_EVENTS_ID.7c04247747": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_gas_events_FACT_GAS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_gas_events_FACT_GAS_EVENTS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_gas_events.yml", "unique_id": "test.maya_models.unique_defi__fact_gas_events_FACT_GAS_EVENTS_ID.7c04247747", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_gas_events_FACT_GAS_EVENTS_ID"], "alias": "fact_gas_events_FACT_GAS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.207532, "relation_name": "MAYA.unique_defi.fact_gas_events_FACT_GAS_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_GAS_EVENTS_ID", "file_key_name": "models.defi__fact_gas_events", "attached_node": "model.maya_models.defi__fact_gas_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_GAS_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_gas_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_gas_events_BLOCK_TIMESTAMP.18a33f6f4d": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_gas_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_gas_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_gas_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_gas_events_BLOCK_TIMESTAMP.18a33f6f4d", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_gas_events_BLOCK_TIMESTAMP"], "alias": "fact_gas_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.208311, "relation_name": "MAYA.not_null_defi.fact_gas_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_gas_events", "attached_node": "model.maya_models.defi__fact_gas_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_gas_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_gas_events_DIM_BLOCK_ID.2593523927": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_gas_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_gas_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_gas_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_gas_events_DIM_BLOCK_ID.2593523927", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_gas_events_DIM_BLOCK_ID"], "alias": "fact_gas_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.209058, "relation_name": "MAYA.negative_one_defi.fact_gas_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_gas_events", "attached_node": "model.maya_models.defi__fact_gas_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_gas_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_gas_events_ASSET.29cdba3bea": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_gas_events_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_gas_events_ASSET.sql", "original_file_path": "models/gold/defi/defi__fact_gas_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_gas_events_ASSET.29cdba3bea", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_gas_events_ASSET"], "alias": "fact_gas_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.2109282, "relation_name": "MAYA.not_null_defi.fact_gas_events_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET", "file_key_name": "models.defi__fact_gas_events", "attached_node": "model.maya_models.defi__fact_gas_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('defi__fact_gas_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_gas_events_ASSET_E8.07160f6bba": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_gas_events_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_gas_events_ASSET_E8.sql", "original_file_path": "models/gold/defi/defi__fact_gas_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_gas_events_ASSET_E8.07160f6bba", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_gas_events_ASSET_E8"], "alias": "fact_gas_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.2117708, "relation_name": "MAYA.not_null_defi.fact_gas_events_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.defi__fact_gas_events", "attached_node": "model.maya_models.defi__fact_gas_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('defi__fact_gas_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_gas_events_cacao_E8.fcef1e99c1": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_gas_events_cacao_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_gas_events_cacao_E8.sql", "original_file_path": "models/gold/defi/defi__fact_gas_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_gas_events_cacao_E8.fcef1e99c1", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_gas_events_cacao_E8"], "alias": "fact_gas_events_cacao_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.2130592, "relation_name": "MAYA.not_null_defi.fact_gas_events_cacao_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_E8", "file_key_name": "models.defi__fact_gas_events", "attached_node": "model.maya_models.defi__fact_gas_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_E8", "model": "{{ get_where_subquery(ref('defi__fact_gas_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_gas_events_TX_COUNT.b58d3dfec7": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_gas_events_TX_COUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_gas_events_TX_COUNT.sql", "original_file_path": "models/gold/defi/defi__fact_gas_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_gas_events_TX_COUNT.b58d3dfec7", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_gas_events_TX_COUNT"], "alias": "fact_gas_events_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.213964, "relation_name": "MAYA.not_null_defi.fact_gas_events_TX_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_COUNT", "file_key_name": "models.defi__fact_gas_events", "attached_node": "model.maya_models.defi__fact_gas_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('defi__fact_gas_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_gas_events_FACT_GAS_EVENTS_ID.c0ced5df45": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_gas_events_FACT_GAS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_5c6c92325ac16c2ec22bee4d5acc4f30.sql", "original_file_path": "models/gold/defi/defi__fact_gas_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_gas_events_FACT_GAS_EVENTS_ID.c0ced5df45", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_gas_events_FACT_GAS_EVENTS_ID"], "alias": "fact_gas_events_FACT_GAS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_5c6c92325ac16c2ec22bee4d5acc4f30", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_5c6c92325ac16c2ec22bee4d5acc4f30"}, "created_at": 1741278783.2148821, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_gas_events_FACT_GAS_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_5c6c92325ac16c2ec22bee4d5acc4f30\") }}", "language": "sql", "refs": [{"name": "defi__fact_gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_gas_events", "attached_node": "model.maya_models.defi__fact_gas_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_GAS_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_gas_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_gas_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.d2b43cd8e7": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_gas_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_dc728c6db5491437712505e071674b7c.sql", "original_file_path": "models/gold/defi/defi__fact_gas_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_gas_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.d2b43cd8e7", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_gas_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_gas_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_dc728c6db5491437712505e071674b7c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_dc728c6db5491437712505e071674b7c"}, "created_at": 1741278783.217369, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_gas_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_dc728c6db5491437712505e071674b7c\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_gas_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_gas_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_gas_events", "attached_node": "model.maya_models.defi__fact_gas_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_gas_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_refund_events_FACT_REFUND_EVENTS_ID.e60a9cc49f": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_refund_events_FACT_REFUND_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_9d4b71f944a7b35ccb3115bfb8e2e36c.sql", "original_file_path": "models/gold/defi/defi__fact_refund_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_refund_events_FACT_REFUND_EVENTS_ID.e60a9cc49f", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_refund_events_FACT_REFUND_EVENTS_ID"], "alias": "fact_refund_events_FACT_REFUND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9d4b71f944a7b35ccb3115bfb8e2e36c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9d4b71f944a7b35ccb3115bfb8e2e36c"}, "created_at": 1741278783.2207649, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_refund_events_FACT_REFUND_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9d4b71f944a7b35ccb3115bfb8e2e36c\") }}", "language": "sql", "refs": [{"name": "defi__fact_refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_REFUND_EVENTS_ID", "file_key_name": "models.defi__fact_refund_events", "attached_node": "model.maya_models.defi__fact_refund_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_REFUND_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_refund_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_refund_events_FACT_REFUND_EVENTS_ID.a016111425": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_refund_events_FACT_REFUND_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_refund_events_FACT_REFUND_EVENTS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_refund_events.yml", "unique_id": "test.maya_models.unique_defi__fact_refund_events_FACT_REFUND_EVENTS_ID.a016111425", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_refund_events_FACT_REFUND_EVENTS_ID"], "alias": "fact_refund_events_FACT_REFUND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.223274, "relation_name": "MAYA.unique_defi.fact_refund_events_FACT_REFUND_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_REFUND_EVENTS_ID", "file_key_name": "models.defi__fact_refund_events", "attached_node": "model.maya_models.defi__fact_refund_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_REFUND_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_refund_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_refund_events_BLOCK_TIMESTAMP.34d8aabf5a": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_refund_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_refund_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_refund_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_refund_events_BLOCK_TIMESTAMP.34d8aabf5a", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_refund_events_BLOCK_TIMESTAMP"], "alias": "fact_refund_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.224254, "relation_name": "MAYA.not_null_defi.fact_refund_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_refund_events", "attached_node": "model.maya_models.defi__fact_refund_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_refund_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_refund_events_DIM_BLOCK_ID.3c1c234ab9": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_refund_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_refund_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_refund_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_refund_events_DIM_BLOCK_ID.3c1c234ab9", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_refund_events_DIM_BLOCK_ID"], "alias": "fact_refund_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.225166, "relation_name": "MAYA.negative_one_defi.fact_refund_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_refund_events", "attached_node": "model.maya_models.defi__fact_refund_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_refund_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_refund_events_FACT_REFUND_EVENTS_ID.c03b0b240a": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_refund_events_FACT_REFUND_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_40aae2678899347c7835664bc12e1574.sql", "original_file_path": "models/gold/defi/defi__fact_refund_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_refund_events_FACT_REFUND_EVENTS_ID.c03b0b240a", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_refund_events_FACT_REFUND_EVENTS_ID"], "alias": "fact_refund_events_FACT_REFUND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_40aae2678899347c7835664bc12e1574", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_40aae2678899347c7835664bc12e1574"}, "created_at": 1741278783.2273998, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_refund_events_FACT_REFUND_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_40aae2678899347c7835664bc12e1574\") }}", "language": "sql", "refs": [{"name": "defi__fact_refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_refund_events", "attached_node": "model.maya_models.defi__fact_refund_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_REFUND_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_refund_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_refund_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.46380231ed": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_refund_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_e5318980290f4579a999506e17a1aaf4.sql", "original_file_path": "models/gold/defi/defi__fact_refund_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_refund_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.46380231ed", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_refund_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_refund_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_e5318980290f4579a999506e17a1aaf4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_e5318980290f4579a999506e17a1aaf4"}, "created_at": 1741278783.22945, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_refund_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_e5318980290f4579a999506e17a1aaf4\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_refund_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_refund_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_refund_events", "attached_node": "model.maya_models.defi__fact_refund_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_refund_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID.f75bda8238": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_9af40c7d190fda9664941a8df09b72fa.sql", "original_file_path": "models/gold/defi/defi__fact_bond_actions.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID.f75bda8238", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID"], "alias": "fact_bond_actions_FACT_BOND_ACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9af40c7d190fda9664941a8df09b72fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9af40c7d190fda9664941a8df09b72fa"}, "created_at": 1741278783.232911, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_bond_actions_FACT_BOND_ACTIONS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9af40c7d190fda9664941a8df09b72fa\") }}", "language": "sql", "refs": [{"name": "defi__fact_bond_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_bond_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_BOND_ACTIONS_ID", "file_key_name": "models.defi__fact_bond_actions", "attached_node": "model.maya_models.defi__fact_bond_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_BOND_ACTIONS_ID", "model": "{{ get_where_subquery(ref('defi__fact_bond_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID.750a1a0be6": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_bond_actions.yml", "unique_id": "test.maya_models.unique_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID.750a1a0be6", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID"], "alias": "fact_bond_actions_FACT_BOND_ACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.234933, "relation_name": "MAYA.unique_defi.fact_bond_actions_FACT_BOND_ACTIONS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_bond_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_bond_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_BOND_ACTIONS_ID", "file_key_name": "models.defi__fact_bond_actions", "attached_node": "model.maya_models.defi__fact_bond_actions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_BOND_ACTIONS_ID", "model": "{{ get_where_subquery(ref('defi__fact_bond_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_actions_BLOCK_TIMESTAMP.7a24d4f258": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_actions_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_actions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_bond_actions.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_actions_BLOCK_TIMESTAMP.7a24d4f258", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_actions_BLOCK_TIMESTAMP"], "alias": "fact_bond_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.235702, "relation_name": "MAYA.not_null_defi.fact_bond_actions_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_bond_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_bond_actions", "attached_node": "model.maya_models.defi__fact_bond_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_bond_actions')) }}"}, "namespace": null}}, "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__fact_bond_actions_BLOCK_TIMESTAMP__day__4.fe7e158561": {"database": "MAYA", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_defi", "name": "dbt_expectations_expect_row_values_to_have_recent_data_defi__fact_bond_actions_BLOCK_TIMESTAMP__day__4", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_row_va_0af96575eb4fb46e3712b28b1335ac77.sql", "original_file_path": "models/gold/defi/defi__fact_bond_actions.yml", "unique_id": "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__fact_bond_actions_BLOCK_TIMESTAMP__day__4.fe7e158561", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_row_values_to_have_recent_data_defi__fact_bond_actions_BLOCK_TIMESTAMP__day__4"], "alias": "fact_bond_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_0af96575eb4fb46e3712b28b1335ac77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_0af96575eb4fb46e3712b28b1335ac77"}, "created_at": 1741278783.2364879, "relation_name": "MAYA.dbt_expectations_expect_row_values_to_have_recent_data_defi.fact_bond_actions_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_0af96575eb4fb46e3712b28b1335ac77\") }}", "language": "sql", "refs": [{"name": "defi__fact_bond_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_bond_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_bond_actions", "attached_node": "model.maya_models.defi__fact_bond_actions", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 4, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_bond_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.negative_one_defi__fact_bond_actions_DIM_BLOCK_ID.615245fbb3": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_bond_actions_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_bond_actions_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_bond_actions.yml", "unique_id": "test.maya_models.negative_one_defi__fact_bond_actions_DIM_BLOCK_ID.615245fbb3", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_bond_actions_DIM_BLOCK_ID"], "alias": "fact_bond_actions_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.239351, "relation_name": "MAYA.negative_one_defi.fact_bond_actions_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_bond_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_bond_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_bond_actions", "attached_node": "model.maya_models.defi__fact_bond_actions", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_bond_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_actions_TX_ID.5e9f18d02d": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_actions_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_actions_TX_ID.sql", "original_file_path": "models/gold/defi/defi__fact_bond_actions.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_actions_TX_ID.5e9f18d02d", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_actions_TX_ID"], "alias": "fact_bond_actions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.241334, "relation_name": "MAYA.not_null_defi.fact_bond_actions_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_bond_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.defi__fact_bond_actions", "attached_node": "model.maya_models.defi__fact_bond_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('defi__fact_bond_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_actions_BLOCKCHAIN.96b4414efb": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_actions_BLOCKCHAIN", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_actions_BLOCKCHAIN.sql", "original_file_path": "models/gold/defi/defi__fact_bond_actions.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_actions_BLOCKCHAIN.96b4414efb", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_actions_BLOCKCHAIN"], "alias": "fact_bond_actions_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "tx_id <> '0000000000000000000000000000000000000000000000000000000000000000'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "tx_id <> '0000000000000000000000000000000000000000000000000000000000000000'"}, "created_at": 1741278783.2420979, "relation_name": "MAYA.not_null_defi.fact_bond_actions_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"tx_id <> '0000000000000000000000000000000000000000000000000000000000000000'\") }}", "language": "sql", "refs": [{"name": "defi__fact_bond_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.defi__fact_bond_actions", "attached_node": "model.maya_models.defi__fact_bond_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('defi__fact_bond_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_actions_FROM_ADDRESS.d62d81333f": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_actions_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_actions_FROM_ADDRESS.sql", "original_file_path": "models/gold/defi/defi__fact_bond_actions.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_actions_FROM_ADDRESS.d62d81333f", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_actions_FROM_ADDRESS"], "alias": "fact_bond_actions_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "tx_id <> '0000000000000000000000000000000000000000000000000000000000000000'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "tx_id <> '0000000000000000000000000000000000000000000000000000000000000000'"}, "created_at": 1741278783.243437, "relation_name": "MAYA.not_null_defi.fact_bond_actions_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"tx_id <> '0000000000000000000000000000000000000000000000000000000000000000'\") }}", "language": "sql", "refs": [{"name": "defi__fact_bond_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.defi__fact_bond_actions", "attached_node": "model.maya_models.defi__fact_bond_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('defi__fact_bond_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_actions_TO_ADDRESS.03e2a4ee17": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_actions_TO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_actions_TO_ADDRESS.sql", "original_file_path": "models/gold/defi/defi__fact_bond_actions.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_actions_TO_ADDRESS.03e2a4ee17", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_actions_TO_ADDRESS"], "alias": "fact_bond_actions_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.24418, "relation_name": "MAYA.not_null_defi.fact_bond_actions_TO_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_bond_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ADDRESS", "file_key_name": "models.defi__fact_bond_actions", "attached_node": "model.maya_models.defi__fact_bond_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('defi__fact_bond_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_actions_bond_type.22b01f3b86": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_actions_bond_type", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_actions_bond_type.sql", "original_file_path": "models/gold/defi/defi__fact_bond_actions.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_actions_bond_type.22b01f3b86", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_actions_bond_type"], "alias": "fact_bond_actions_bond_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.2449121, "relation_name": "MAYA.not_null_defi.fact_bond_actions_bond_type", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_bond_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bond_type", "file_key_name": "models.defi__fact_bond_actions", "attached_node": "model.maya_models.defi__fact_bond_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "bond_type", "model": "{{ get_where_subquery(ref('defi__fact_bond_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_actions_ASSET_AMOUNT.8de4adaec4": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_actions_ASSET_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_actions_ASSET_AMOUNT.sql", "original_file_path": "models/gold/defi/defi__fact_bond_actions.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_actions_ASSET_AMOUNT.8de4adaec4", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_actions_ASSET_AMOUNT"], "alias": "fact_bond_actions_ASSET_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.245642, "relation_name": "MAYA.not_null_defi.fact_bond_actions_ASSET_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_bond_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_AMOUNT", "file_key_name": "models.defi__fact_bond_actions", "attached_node": "model.maya_models.defi__fact_bond_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_AMOUNT", "model": "{{ get_where_subquery(ref('defi__fact_bond_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_bond_actions_ASSET_USD.4eb112cfa0": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_bond_actions_ASSET_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_bond_actions_ASSET_USD.sql", "original_file_path": "models/gold/defi/defi__fact_bond_actions.yml", "unique_id": "test.maya_models.not_null_defi__fact_bond_actions_ASSET_USD.4eb112cfa0", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_bond_actions_ASSET_USD"], "alias": "fact_bond_actions_ASSET_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.246359, "relation_name": "MAYA.not_null_defi.fact_bond_actions_ASSET_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_bond_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_bond_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_USD", "file_key_name": "models.defi__fact_bond_actions", "attached_node": "model.maya_models.defi__fact_bond_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_USD", "model": "{{ get_where_subquery(ref('defi__fact_bond_actions')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID.b04f02a38c": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_cec51d510c9aa2400140bcdd80149bfa.sql", "original_file_path": "models/gold/defi/defi__fact_bond_actions.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID.b04f02a38c", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID"], "alias": "fact_bond_actions_FACT_BOND_ACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_cec51d510c9aa2400140bcdd80149bfa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_cec51d510c9aa2400140bcdd80149bfa"}, "created_at": 1741278783.2470841, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_bond_actions_FACT_BOND_ACTIONS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_cec51d510c9aa2400140bcdd80149bfa\") }}", "language": "sql", "refs": [{"name": "defi__fact_bond_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_bond_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_bond_actions", "attached_node": "model.maya_models.defi__fact_bond_actions", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_BOND_ACTIONS_ID", "model": "{{ get_where_subquery(ref('defi__fact_bond_actions')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_bond_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f00f5c0230": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_bond_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_899de646f8b569f8af48899ebe43363a.sql", "original_file_path": "models/gold/defi/defi__fact_bond_actions.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_bond_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f00f5c0230", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_bond_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_bond_actions_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_899de646f8b569f8af48899ebe43363a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_899de646f8b569f8af48899ebe43363a"}, "created_at": 1741278783.2493289, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_bond_actions_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_899de646f8b569f8af48899ebe43363a\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_bond_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_bond_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_bond_actions", "attached_node": "model.maya_models.defi__fact_bond_actions", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_bond_actions')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.not_null_defi__fact_send_messages_FACT_SEND_MESSAGES_ID.da36ef8cad": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_send_messages_FACT_SEND_MESSAGES_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_send_messages_FACT_SEND_MESSAGES_ID.sql", "original_file_path": "models/gold/defi/defi__fact_send_messages.yml", "unique_id": "test.maya_models.not_null_defi__fact_send_messages_FACT_SEND_MESSAGES_ID.da36ef8cad", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_send_messages_FACT_SEND_MESSAGES_ID"], "alias": "fact_send_messages_FACT_SEND_MESSAGES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.252588, "relation_name": "MAYA.not_null_defi.fact_send_messages_FACT_SEND_MESSAGES_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_send_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_send_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SEND_MESSAGES_ID", "file_key_name": "models.defi__fact_send_messages", "attached_node": "model.maya_models.defi__fact_send_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FACT_SEND_MESSAGES_ID", "model": "{{ get_where_subquery(ref('defi__fact_send_messages')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_send_messages_BLOCK_TIMESTAMP.aa6c02bd54": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_send_messages_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_send_messages_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_send_messages.yml", "unique_id": "test.maya_models.not_null_defi__fact_send_messages_BLOCK_TIMESTAMP.aa6c02bd54", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_send_messages_BLOCK_TIMESTAMP"], "alias": "fact_send_messages_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.2533581, "relation_name": "MAYA.not_null_defi.fact_send_messages_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_send_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_send_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_send_messages", "attached_node": "model.maya_models.defi__fact_send_messages", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_send_messages')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_send_messages_DIM_BLOCK_ID.c58daf7759": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_send_messages_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_send_messages_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_send_messages.yml", "unique_id": "test.maya_models.negative_one_defi__fact_send_messages_DIM_BLOCK_ID.c58daf7759", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_send_messages_DIM_BLOCK_ID"], "alias": "fact_send_messages_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.2541, "relation_name": "MAYA.negative_one_defi.fact_send_messages_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_send_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_send_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_send_messages", "attached_node": "model.maya_models.defi__fact_send_messages", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_send_messages')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_send_messages_FACT_SEND_MESSAGES_ID.8741e5d595": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_send_messages_FACT_SEND_MESSAGES_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_6901012a0b8cab48924701f862a6b534.sql", "original_file_path": "models/gold/defi/defi__fact_send_messages.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_send_messages_FACT_SEND_MESSAGES_ID.8741e5d595", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_send_messages_FACT_SEND_MESSAGES_ID"], "alias": "fact_send_messages_FACT_SEND_MESSAGES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_6901012a0b8cab48924701f862a6b534", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_6901012a0b8cab48924701f862a6b534"}, "created_at": 1741278783.256074, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_send_messages_FACT_SEND_MESSAGES_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_6901012a0b8cab48924701f862a6b534\") }}", "language": "sql", "refs": [{"name": "defi__fact_send_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_send_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_send_messages", "attached_node": "model.maya_models.defi__fact_send_messages", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SEND_MESSAGES_ID", "model": "{{ get_where_subquery(ref('defi__fact_send_messages')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_send_messages_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1adb347953": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_send_messages_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_2a78a79cfd8efbcb279b793cd3b2a41b.sql", "original_file_path": "models/gold/defi/defi__fact_send_messages.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_send_messages_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1adb347953", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_send_messages_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_send_messages_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_2a78a79cfd8efbcb279b793cd3b2a41b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_2a78a79cfd8efbcb279b793cd3b2a41b"}, "created_at": 1741278783.258129, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_send_messages_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_2a78a79cfd8efbcb279b793cd3b2a41b\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_send_messages", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_send_messages"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_send_messages", "attached_node": "model.maya_models.defi__fact_send_messages", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_send_messages')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.1e8f9391c2": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_d47583349564973e2594eec1cd7430f8.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_actions.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.1e8f9391c2", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID"], "alias": "fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d47583349564973e2594eec1cd7430f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d47583349564973e2594eec1cd7430f8"}, "created_at": 1741278783.262536, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d47583349564973e2594eec1cd7430f8\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_LIQUIDITY_ACTIONS_ID", "file_key_name": "models.defi__fact_liquidity_actions", "attached_node": "model.maya_models.defi__fact_liquidity_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_LIQUIDITY_ACTIONS_ID", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.3c4c48acd9": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_actions.yml", "unique_id": "test.maya_models.unique_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.3c4c48acd9", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID"], "alias": "fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.264725, "relation_name": "MAYA.unique_defi.fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_LIQUIDITY_ACTIONS_ID", "file_key_name": "models.defi__fact_liquidity_actions", "attached_node": "model.maya_models.defi__fact_liquidity_actions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_LIQUIDITY_ACTIONS_ID", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_liquidity_actions_BLOCK_TIMESTAMP.9a65b82adc": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_actions_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_liquidity_actions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_actions.yml", "unique_id": "test.maya_models.not_null_defi__fact_liquidity_actions_BLOCK_TIMESTAMP.9a65b82adc", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_liquidity_actions_BLOCK_TIMESTAMP"], "alias": "fact_liquidity_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.265536, "relation_name": "MAYA.not_null_defi.fact_liquidity_actions_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_liquidity_actions", "attached_node": "model.maya_models.defi__fact_liquidity_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_liquidity_actions_DIM_BLOCK_ID.64fdcec13b": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_liquidity_actions_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_liquidity_actions_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_actions.yml", "unique_id": "test.maya_models.negative_one_defi__fact_liquidity_actions_DIM_BLOCK_ID.64fdcec13b", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_liquidity_actions_DIM_BLOCK_ID"], "alias": "fact_liquidity_actions_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.266337, "relation_name": "MAYA.negative_one_defi.fact_liquidity_actions_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_liquidity_actions", "attached_node": "model.maya_models.defi__fact_liquidity_actions", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_liquidity_actions_LP_ACTION.888ababa2b": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_actions_LP_ACTION", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_liquidity_actions_LP_ACTION.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_actions.yml", "unique_id": "test.maya_models.not_null_defi__fact_liquidity_actions_LP_ACTION.888ababa2b", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_liquidity_actions_LP_ACTION"], "alias": "fact_liquidity_actions_LP_ACTION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.268419, "relation_name": "MAYA.not_null_defi.fact_liquidity_actions_LP_ACTION", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LP_ACTION", "file_key_name": "models.defi__fact_liquidity_actions", "attached_node": "model.maya_models.defi__fact_liquidity_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LP_ACTION", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_liquidity_actions_POOL_NAME.798a435875": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_actions_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_liquidity_actions_POOL_NAME.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_actions.yml", "unique_id": "test.maya_models.not_null_defi__fact_liquidity_actions_POOL_NAME.798a435875", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_liquidity_actions_POOL_NAME"], "alias": "fact_liquidity_actions_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.269172, "relation_name": "MAYA.not_null_defi.fact_liquidity_actions_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.defi__fact_liquidity_actions", "attached_node": "model.maya_models.defi__fact_liquidity_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_liquidity_actions_cacao_AMOUNT.69b767546b": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_actions_cacao_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_liquidity_actions_cacao_AMOUNT.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_actions.yml", "unique_id": "test.maya_models.not_null_defi__fact_liquidity_actions_cacao_AMOUNT.69b767546b", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_liquidity_actions_cacao_AMOUNT"], "alias": "fact_liquidity_actions_cacao_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.2699342, "relation_name": "MAYA.not_null_defi.fact_liquidity_actions_cacao_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_AMOUNT", "file_key_name": "models.defi__fact_liquidity_actions", "attached_node": "model.maya_models.defi__fact_liquidity_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_AMOUNT", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_liquidity_actions_cacao_AMOUNT_USD.5b994381e1": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_actions_cacao_AMOUNT_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_liquidity_actions_cacao_AMOUNT_USD.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_actions.yml", "unique_id": "test.maya_models.not_null_defi__fact_liquidity_actions_cacao_AMOUNT_USD.5b994381e1", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_liquidity_actions_cacao_AMOUNT_USD"], "alias": "fact_liquidity_actions_cacao_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.270686, "relation_name": "MAYA.not_null_defi.fact_liquidity_actions_cacao_AMOUNT_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_AMOUNT_USD", "file_key_name": "models.defi__fact_liquidity_actions", "attached_node": "model.maya_models.defi__fact_liquidity_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_AMOUNT_USD", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_liquidity_actions_ASSET_AMOUNT.bcd1c6e65b": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_actions_ASSET_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_liquidity_actions_ASSET_AMOUNT.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_actions.yml", "unique_id": "test.maya_models.not_null_defi__fact_liquidity_actions_ASSET_AMOUNT.bcd1c6e65b", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_liquidity_actions_ASSET_AMOUNT"], "alias": "fact_liquidity_actions_ASSET_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.271489, "relation_name": "MAYA.not_null_defi.fact_liquidity_actions_ASSET_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_AMOUNT", "file_key_name": "models.defi__fact_liquidity_actions", "attached_node": "model.maya_models.defi__fact_liquidity_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_AMOUNT", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_liquidity_actions_STAKE_UNITS.407cd789d6": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_actions_STAKE_UNITS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_liquidity_actions_STAKE_UNITS.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_actions.yml", "unique_id": "test.maya_models.not_null_defi__fact_liquidity_actions_STAKE_UNITS.407cd789d6", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_liquidity_actions_STAKE_UNITS"], "alias": "fact_liquidity_actions_STAKE_UNITS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.272217, "relation_name": "MAYA.not_null_defi.fact_liquidity_actions_STAKE_UNITS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STAKE_UNITS", "file_key_name": "models.defi__fact_liquidity_actions", "attached_node": "model.maya_models.defi__fact_liquidity_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STAKE_UNITS", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_actions')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.127d2c721c": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_00b641bdc202b9b12001c1568cd2eb5f.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_actions.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.127d2c721c", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID"], "alias": "fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_00b641bdc202b9b12001c1568cd2eb5f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_00b641bdc202b9b12001c1568cd2eb5f"}, "created_at": 1741278783.272948, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_00b641bdc202b9b12001c1568cd2eb5f\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_liquidity_actions", "attached_node": "model.maya_models.defi__fact_liquidity_actions", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_LIQUIDITY_ACTIONS_ID", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_actions')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_liquidity_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.608597a4f4": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_liquidity_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_74f7cdae4cef5141324e4d19889a802b.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_actions.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_liquidity_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.608597a4f4", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_liquidity_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_liquidity_actions_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_74f7cdae4cef5141324e4d19889a802b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_74f7cdae4cef5141324e4d19889a802b"}, "created_at": 1741278783.275805, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_liquidity_actions_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_74f7cdae4cef5141324e4d19889a802b\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_liquidity_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_liquidity_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_liquidity_actions", "attached_node": "model.maya_models.defi__fact_liquidity_actions", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_actions')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.407d4f6cb6": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_2a638b60aa69d05e32a46f0dbd751b36.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_balances.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.407d4f6cb6", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID"], "alias": "fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2a638b60aa69d05e32a46f0dbd751b36", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2a638b60aa69d05e32a46f0dbd751b36"}, "created_at": 1741278783.279853, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2a638b60aa69d05e32a46f0dbd751b36\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_POOL_BLOCK_BALANCES_ID", "file_key_name": "models.defi__fact_pool_block_balances", "attached_node": "model.maya_models.defi__fact_pool_block_balances", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_POOL_BLOCK_BALANCES_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_balances')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.c9074e5b2a": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_pool_block_b_7f651c6f00c49457ff3f24a9dff3b77e.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_balances.yml", "unique_id": "test.maya_models.unique_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.c9074e5b2a", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID"], "alias": "fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_defi__fact_pool_block_b_7f651c6f00c49457ff3f24a9dff3b77e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "unique_defi__fact_pool_block_b_7f651c6f00c49457ff3f24a9dff3b77e"}, "created_at": 1741278783.2822819, "relation_name": "MAYA.unique_defi.fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_defi__fact_pool_block_b_7f651c6f00c49457ff3f24a9dff3b77e\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_POOL_BLOCK_BALANCES_ID", "file_key_name": "models.defi__fact_pool_block_balances", "attached_node": "model.maya_models.defi__fact_pool_block_balances", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_POOL_BLOCK_BALANCES_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_pool_block_balances_BLOCK_TIMESTAMP.57a565d05f": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_pool_block_balances_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_pool_block_balances_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_balances.yml", "unique_id": "test.maya_models.not_null_defi__fact_pool_block_balances_BLOCK_TIMESTAMP.57a565d05f", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_pool_block_balances_BLOCK_TIMESTAMP"], "alias": "fact_pool_block_balances_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.283094, "relation_name": "MAYA.not_null_defi.fact_pool_block_balances_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_pool_block_balances", "attached_node": "model.maya_models.defi__fact_pool_block_balances", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_pool_block_balances_DIM_BLOCK_ID.2418ce23a3": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_pool_block_balances_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_pool_block_balances_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_balances.yml", "unique_id": "test.maya_models.negative_one_defi__fact_pool_block_balances_DIM_BLOCK_ID.2418ce23a3", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_pool_block_balances_DIM_BLOCK_ID"], "alias": "fact_pool_block_balances_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.283893, "relation_name": "MAYA.negative_one_defi.fact_pool_block_balances_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_pool_block_balances", "attached_node": "model.maya_models.defi__fact_pool_block_balances", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_pool_block_balances_POOL_NAME.05a1892218": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_pool_block_balances_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_pool_block_balances_POOL_NAME.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_balances.yml", "unique_id": "test.maya_models.not_null_defi__fact_pool_block_balances_POOL_NAME.05a1892218", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_pool_block_balances_POOL_NAME"], "alias": "fact_pool_block_balances_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.286973, "relation_name": "MAYA.not_null_defi.fact_pool_block_balances_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.defi__fact_pool_block_balances", "attached_node": "model.maya_models.defi__fact_pool_block_balances", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_pool_block_balances_cacao_AMOUNT.cb25b0b071": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_pool_block_balances_cacao_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_pool_block_balances_cacao_AMOUNT.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_balances.yml", "unique_id": "test.maya_models.not_null_defi__fact_pool_block_balances_cacao_AMOUNT.cb25b0b071", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_pool_block_balances_cacao_AMOUNT"], "alias": "fact_pool_block_balances_cacao_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.2877681, "relation_name": "MAYA.not_null_defi.fact_pool_block_balances_cacao_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_AMOUNT", "file_key_name": "models.defi__fact_pool_block_balances", "attached_node": "model.maya_models.defi__fact_pool_block_balances", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_AMOUNT", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_pool_block_balances_cacao_AMOUNT_USD.5db52684f2": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_pool_block_balances_cacao_AMOUNT_USD", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_pool_block_balances_cacao_AMOUNT_USD.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_balances.yml", "unique_id": "test.maya_models.not_null_defi__fact_pool_block_balances_cacao_AMOUNT_USD.5db52684f2", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_pool_block_balances_cacao_AMOUNT_USD"], "alias": "fact_pool_block_balances_cacao_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.288535, "relation_name": "MAYA.not_null_defi.fact_pool_block_balances_cacao_AMOUNT_USD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_AMOUNT_USD", "file_key_name": "models.defi__fact_pool_block_balances", "attached_node": "model.maya_models.defi__fact_pool_block_balances", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_AMOUNT_USD", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_pool_block_balances_ASSET_AMOUNT.4c11b2c4dc": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_pool_block_balances_ASSET_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_pool_block_balances_ASSET_AMOUNT.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_balances.yml", "unique_id": "test.maya_models.not_null_defi__fact_pool_block_balances_ASSET_AMOUNT.4c11b2c4dc", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_pool_block_balances_ASSET_AMOUNT"], "alias": "fact_pool_block_balances_ASSET_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.289303, "relation_name": "MAYA.not_null_defi.fact_pool_block_balances_ASSET_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_AMOUNT", "file_key_name": "models.defi__fact_pool_block_balances", "attached_node": "model.maya_models.defi__fact_pool_block_balances", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_AMOUNT", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_pool_block_balances_SYNTH_AMOUNT.dd1d486159": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_pool_block_balances_SYNTH_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_pool_block_balances_SYNTH_AMOUNT.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_balances.yml", "unique_id": "test.maya_models.not_null_defi__fact_pool_block_balances_SYNTH_AMOUNT.dd1d486159", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_pool_block_balances_SYNTH_AMOUNT"], "alias": "fact_pool_block_balances_SYNTH_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.290049, "relation_name": "MAYA.not_null_defi.fact_pool_block_balances_SYNTH_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SYNTH_AMOUNT", "file_key_name": "models.defi__fact_pool_block_balances", "attached_node": "model.maya_models.defi__fact_pool_block_balances", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYNTH_AMOUNT", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_balances')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.24a399277f": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_3481346d170c535a3bc0faf9adc4a979.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_balances.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.24a399277f", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID"], "alias": "fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_3481346d170c535a3bc0faf9adc4a979", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_3481346d170c535a3bc0faf9adc4a979"}, "created_at": 1741278783.290814, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_3481346d170c535a3bc0faf9adc4a979\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_pool_block_balances", "attached_node": "model.maya_models.defi__fact_pool_block_balances", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_POOL_BLOCK_BALANCES_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_balances')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_block_balances_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.66031e6ec7": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_pool_block_balances_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_6bd17d0665db9660dc325f57f40303be.sql", "original_file_path": "models/gold/defi/defi__fact_pool_block_balances.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_block_balances_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.66031e6ec7", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_pool_block_balances_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_pool_block_balances_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_6bd17d0665db9660dc325f57f40303be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_6bd17d0665db9660dc325f57f40303be"}, "created_at": 1741278783.293042, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_pool_block_balances_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_6bd17d0665db9660dc325f57f40303be\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_pool_block_balances", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_pool_block_balances"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_pool_block_balances", "attached_node": "model.maya_models.defi__fact_pool_block_balances", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_block_balances')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.880e905612": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_c800e18d4d01e9fc0a55bfbebde8ddbc.sql", "original_file_path": "models/gold/defi/defi__fact_active_vault_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.880e905612", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID"], "alias": "fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c800e18d4d01e9fc0a55bfbebde8ddbc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c800e18d4d01e9fc0a55bfbebde8ddbc"}, "created_at": 1741278783.296521, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c800e18d4d01e9fc0a55bfbebde8ddbc\") }}", "language": "sql", "refs": [{"name": "defi__fact_active_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_active_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_ACTIVE_VAULT_EVENTS_ID", "file_key_name": "models.defi__fact_active_vault_events", "attached_node": "model.maya_models.defi__fact_active_vault_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_ACTIVE_VAULT_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_active_vault_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.3aaa103dd9": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_active_vault_9329f69ae89c8083268bdf02464ac0b6.sql", "original_file_path": "models/gold/defi/defi__fact_active_vault_events.yml", "unique_id": "test.maya_models.unique_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.3aaa103dd9", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID"], "alias": "fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_defi__fact_active_vault_9329f69ae89c8083268bdf02464ac0b6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "unique_defi__fact_active_vault_9329f69ae89c8083268bdf02464ac0b6"}, "created_at": 1741278783.298537, "relation_name": "MAYA.unique_defi.fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_defi__fact_active_vault_9329f69ae89c8083268bdf02464ac0b6\") }}", "language": "sql", "refs": [{"name": "defi__fact_active_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_active_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_ACTIVE_VAULT_EVENTS_ID", "file_key_name": "models.defi__fact_active_vault_events", "attached_node": "model.maya_models.defi__fact_active_vault_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_ACTIVE_VAULT_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_active_vault_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_active_vault_events_BLOCK_TIMESTAMP.4cc71715c7": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_active_vault_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_active_vault_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_active_vault_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_active_vault_events_BLOCK_TIMESTAMP.4cc71715c7", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_active_vault_events_BLOCK_TIMESTAMP"], "alias": "fact_active_vault_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.299288, "relation_name": "MAYA.not_null_defi.fact_active_vault_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_active_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_active_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_active_vault_events", "attached_node": "model.maya_models.defi__fact_active_vault_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_active_vault_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_active_vault_events_DIM_BLOCK_ID.4a790deb55": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_active_vault_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_active_vault_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_active_vault_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_active_vault_events_DIM_BLOCK_ID.4a790deb55", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_active_vault_events_DIM_BLOCK_ID"], "alias": "fact_active_vault_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.300023, "relation_name": "MAYA.negative_one_defi.fact_active_vault_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_active_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_active_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_active_vault_events", "attached_node": "model.maya_models.defi__fact_active_vault_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_active_vault_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_active_vault_events_ADD_ASGARD_ADDR.2b058b6553": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_active_vault_events_ADD_ASGARD_ADDR", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_active_vault_events_ADD_ASGARD_ADDR.sql", "original_file_path": "models/gold/defi/defi__fact_active_vault_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_active_vault_events_ADD_ASGARD_ADDR.2b058b6553", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_active_vault_events_ADD_ASGARD_ADDR"], "alias": "fact_active_vault_events_ADD_ASGARD_ADDR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.3020532, "relation_name": "MAYA.not_null_defi.fact_active_vault_events_ADD_ASGARD_ADDR", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_active_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_active_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADD_ASGARD_ADDR", "file_key_name": "models.defi__fact_active_vault_events", "attached_node": "model.maya_models.defi__fact_active_vault_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_ASGARD_ADDR", "model": "{{ get_where_subquery(ref('defi__fact_active_vault_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.8da304f0fc": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_123ff12dfd7fbf2df4ea742b039f3e63.sql", "original_file_path": "models/gold/defi/defi__fact_active_vault_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.8da304f0fc", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID"], "alias": "fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_123ff12dfd7fbf2df4ea742b039f3e63", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_123ff12dfd7fbf2df4ea742b039f3e63"}, "created_at": 1741278783.303454, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_123ff12dfd7fbf2df4ea742b039f3e63\") }}", "language": "sql", "refs": [{"name": "defi__fact_active_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_active_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_active_vault_events", "attached_node": "model.maya_models.defi__fact_active_vault_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_ACTIVE_VAULT_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_active_vault_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_active_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.dc9110e090": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_active_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_30fa7b0c416b6e0564dc583e1feabcf7.sql", "original_file_path": "models/gold/defi/defi__fact_active_vault_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_active_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.dc9110e090", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_active_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_active_vault_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_30fa7b0c416b6e0564dc583e1feabcf7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_30fa7b0c416b6e0564dc583e1feabcf7"}, "created_at": 1741278783.3066502, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_active_vault_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_30fa7b0c416b6e0564dc583e1feabcf7\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_active_vault_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_active_vault_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_active_vault_events", "attached_node": "model.maya_models.defi__fact_active_vault_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_active_vault_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_events_FACT_POOL_EVENTS_ID.9ebc09a3db": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_pool_events_FACT_POOL_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_e9d36220f753a2ea478fd7e212242db3.sql", "original_file_path": "models/gold/defi/defi__fact_pool_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_events_FACT_POOL_EVENTS_ID.9ebc09a3db", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_pool_events_FACT_POOL_EVENTS_ID"], "alias": "fact_pool_events_FACT_POOL_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e9d36220f753a2ea478fd7e212242db3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e9d36220f753a2ea478fd7e212242db3"}, "created_at": 1741278783.3102999, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_pool_events_FACT_POOL_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e9d36220f753a2ea478fd7e212242db3\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_pool_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_POOL_EVENTS_ID", "file_key_name": "models.defi__fact_pool_events", "attached_node": "model.maya_models.defi__fact_pool_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_POOL_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_pool_events_FACT_POOL_EVENTS_ID.a88bad6268": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_pool_events_FACT_POOL_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_pool_events_FACT_POOL_EVENTS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_pool_events.yml", "unique_id": "test.maya_models.unique_defi__fact_pool_events_FACT_POOL_EVENTS_ID.a88bad6268", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_pool_events_FACT_POOL_EVENTS_ID"], "alias": "fact_pool_events_FACT_POOL_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.312554, "relation_name": "MAYA.unique_defi.fact_pool_events_FACT_POOL_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_pool_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_pool_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_POOL_EVENTS_ID", "file_key_name": "models.defi__fact_pool_events", "attached_node": "model.maya_models.defi__fact_pool_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_POOL_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_pool_events_BLOCK_TIMESTAMP.22275a664b": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_pool_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_pool_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_pool_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_pool_events_BLOCK_TIMESTAMP.22275a664b", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_pool_events_BLOCK_TIMESTAMP"], "alias": "fact_pool_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.313355, "relation_name": "MAYA.not_null_defi.fact_pool_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_pool_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_pool_events", "attached_node": "model.maya_models.defi__fact_pool_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_pool_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_pool_events_DIM_BLOCK_ID.5c5bf65270": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_pool_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_pool_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_pool_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_pool_events_DIM_BLOCK_ID.5c5bf65270", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_pool_events_DIM_BLOCK_ID"], "alias": "fact_pool_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.314126, "relation_name": "MAYA.negative_one_defi.fact_pool_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_pool_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_pool_events", "attached_node": "model.maya_models.defi__fact_pool_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_events_FACT_POOL_EVENTS_ID.d9300b6771": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_pool_events_FACT_POOL_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_f55f30d4a19f39c35867a9f6b3fc0c03.sql", "original_file_path": "models/gold/defi/defi__fact_pool_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_events_FACT_POOL_EVENTS_ID.d9300b6771", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_pool_events_FACT_POOL_EVENTS_ID"], "alias": "fact_pool_events_FACT_POOL_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_f55f30d4a19f39c35867a9f6b3fc0c03", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_f55f30d4a19f39c35867a9f6b3fc0c03"}, "created_at": 1741278783.316203, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_pool_events_FACT_POOL_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_f55f30d4a19f39c35867a9f6b3fc0c03\") }}", "language": "sql", "refs": [{"name": "defi__fact_pool_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_pool_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_pool_events", "attached_node": "model.maya_models.defi__fact_pool_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_POOL_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.111d8db3ee": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_pool_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_59ef91872c3b5bd83e538771707b2cde.sql", "original_file_path": "models/gold/defi/defi__fact_pool_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.111d8db3ee", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_pool_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_pool_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_59ef91872c3b5bd83e538771707b2cde", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_59ef91872c3b5bd83e538771707b2cde"}, "created_at": 1741278783.3184772, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_pool_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_59ef91872c3b5bd83e538771707b2cde\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_pool_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_pool_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_pool_events", "attached_node": "model.maya_models.defi__fact_pool_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_pool_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.23e51de8c7": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_16f5286dbd929d6ee4227702a384f402.sql", "original_file_path": "models/gold/defi/defi__fact_total_value_locked.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.23e51de8c7", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID"], "alias": "fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_16f5286dbd929d6ee4227702a384f402", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_16f5286dbd929d6ee4227702a384f402"}, "created_at": 1741278783.321739, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_16f5286dbd929d6ee4227702a384f402\") }}", "language": "sql", "refs": [{"name": "defi__fact_total_value_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_total_value_locked"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_TOTAL_VALUE_LOCKED_ID", "file_key_name": "models.defi__fact_total_value_locked", "attached_node": "model.maya_models.defi__fact_total_value_locked", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_TOTAL_VALUE_LOCKED_ID", "model": "{{ get_where_subquery(ref('defi__fact_total_value_locked')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.7c08aabdf6": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.sql", "original_file_path": "models/gold/defi/defi__fact_total_value_locked.yml", "unique_id": "test.maya_models.unique_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.7c08aabdf6", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID"], "alias": "fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.323807, "relation_name": "MAYA.unique_defi.fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_total_value_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_total_value_locked"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_TOTAL_VALUE_LOCKED_ID", "file_key_name": "models.defi__fact_total_value_locked", "attached_node": "model.maya_models.defi__fact_total_value_locked", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_TOTAL_VALUE_LOCKED_ID", "model": "{{ get_where_subquery(ref('defi__fact_total_value_locked')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_total_value_locked_DAY.fe0da8741a": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_total_value_locked_DAY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_total_value_locked_DAY.sql", "original_file_path": "models/gold/defi/defi__fact_total_value_locked.yml", "unique_id": "test.maya_models.not_null_defi__fact_total_value_locked_DAY.fe0da8741a", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_total_value_locked_DAY"], "alias": "fact_total_value_locked_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.324573, "relation_name": "MAYA.not_null_defi.fact_total_value_locked_DAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_total_value_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_total_value_locked"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.defi__fact_total_value_locked", "attached_node": "model.maya_models.defi__fact_total_value_locked", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('defi__fact_total_value_locked')) }}"}, "namespace": null}}, "test.maya_models.unique_defi__fact_total_value_locked_DAY.54d8e130aa": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_total_value_locked_DAY", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_total_value_locked_DAY.sql", "original_file_path": "models/gold/defi/defi__fact_total_value_locked.yml", "unique_id": "test.maya_models.unique_defi__fact_total_value_locked_DAY.54d8e130aa", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_total_value_locked_DAY"], "alias": "fact_total_value_locked_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.325325, "relation_name": "MAYA.unique_defi.fact_total_value_locked_DAY", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_total_value_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_total_value_locked"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.defi__fact_total_value_locked", "attached_node": "model.maya_models.defi__fact_total_value_locked", "test_metadata": {"name": "unique", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('defi__fact_total_value_locked')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.ac35fbd215": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_c232a6e33d9cec418817701078e8dd23.sql", "original_file_path": "models/gold/defi/defi__fact_total_value_locked.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.ac35fbd215", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID"], "alias": "fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_c232a6e33d9cec418817701078e8dd23", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_c232a6e33d9cec418817701078e8dd23"}, "created_at": 1741278783.3265522, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_c232a6e33d9cec418817701078e8dd23\") }}", "language": "sql", "refs": [{"name": "defi__fact_total_value_locked", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_total_value_locked"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_total_value_locked", "attached_node": "model.maya_models.defi__fact_total_value_locked", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_TOTAL_VALUE_LOCKED_ID", "model": "{{ get_where_subquery(ref('defi__fact_total_value_locked')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.df35fa9fd3": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_d006cde59df6f7f36d080ae36bcbd787.sql", "original_file_path": "models/gold/defi/defi__fact_daily_pool_stats.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.df35fa9fd3", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID"], "alias": "fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d006cde59df6f7f36d080ae36bcbd787", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d006cde59df6f7f36d080ae36bcbd787"}, "created_at": 1741278783.331305, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d006cde59df6f7f36d080ae36bcbd787\") }}", "language": "sql", "refs": [{"name": "defi__fact_daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_DAILY_POOL_STATS_ID", "file_key_name": "models.defi__fact_daily_pool_stats", "attached_node": "model.maya_models.defi__fact_daily_pool_stats", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_DAILY_POOL_STATS_ID", "model": "{{ get_where_subquery(ref('defi__fact_daily_pool_stats')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.0e5e688f58": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_daily_pool_stats.yml", "unique_id": "test.maya_models.unique_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.0e5e688f58", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID"], "alias": "fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.333359, "relation_name": "MAYA.unique_defi.fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_DAILY_POOL_STATS_ID", "file_key_name": "models.defi__fact_daily_pool_stats", "attached_node": "model.maya_models.defi__fact_daily_pool_stats", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_DAILY_POOL_STATS_ID", "model": "{{ get_where_subquery(ref('defi__fact_daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_daily_pool_stats_DAY.134c4023bc": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_daily_pool_stats_DAY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_daily_pool_stats_DAY.sql", "original_file_path": "models/gold/defi/defi__fact_daily_pool_stats.yml", "unique_id": "test.maya_models.not_null_defi__fact_daily_pool_stats_DAY.134c4023bc", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_daily_pool_stats_DAY"], "alias": "fact_daily_pool_stats_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.334205, "relation_name": "MAYA.not_null_defi.fact_daily_pool_stats_DAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.defi__fact_daily_pool_stats", "attached_node": "model.maya_models.defi__fact_daily_pool_stats", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('defi__fact_daily_pool_stats')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.bd74e047c0": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_7c70d2d76d67dbbc76a0de5d26c90047.sql", "original_file_path": "models/gold/defi/defi__fact_daily_pool_stats.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.bd74e047c0", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID"], "alias": "fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_7c70d2d76d67dbbc76a0de5d26c90047", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_7c70d2d76d67dbbc76a0de5d26c90047"}, "created_at": 1741278783.334965, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_7c70d2d76d67dbbc76a0de5d26c90047\") }}", "language": "sql", "refs": [{"name": "defi__fact_daily_pool_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_daily_pool_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_daily_pool_stats", "attached_node": "model.maya_models.defi__fact_daily_pool_stats", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_DAILY_POOL_STATS_ID", "model": "{{ get_where_subquery(ref('defi__fact_daily_pool_stats')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_daily_tvl_FACT_DAILY_TVL_ID.1ae493b505": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_daily_tvl_FACT_DAILY_TVL_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_be51356020780d49c89027adc6d1ae81.sql", "original_file_path": "models/gold/defi/defi__fact_daily_tvl.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_daily_tvl_FACT_DAILY_TVL_ID.1ae493b505", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_daily_tvl_FACT_DAILY_TVL_ID"], "alias": "fact_daily_tvl_FACT_DAILY_TVL_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_be51356020780d49c89027adc6d1ae81", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_be51356020780d49c89027adc6d1ae81"}, "created_at": 1741278783.338593, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_daily_tvl_FACT_DAILY_TVL_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_be51356020780d49c89027adc6d1ae81\") }}", "language": "sql", "refs": [{"name": "defi__fact_daily_tvl", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_daily_tvl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_DAILY_TVL_ID", "file_key_name": "models.defi__fact_daily_tvl", "attached_node": "model.maya_models.defi__fact_daily_tvl", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_DAILY_TVL_ID", "model": "{{ get_where_subquery(ref('defi__fact_daily_tvl')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_daily_tvl_FACT_DAILY_TVL_ID.4720396096": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_daily_tvl_FACT_DAILY_TVL_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_daily_tvl_FACT_DAILY_TVL_ID.sql", "original_file_path": "models/gold/defi/defi__fact_daily_tvl.yml", "unique_id": "test.maya_models.unique_defi__fact_daily_tvl_FACT_DAILY_TVL_ID.4720396096", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_daily_tvl_FACT_DAILY_TVL_ID"], "alias": "fact_daily_tvl_FACT_DAILY_TVL_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.341065, "relation_name": "MAYA.unique_defi.fact_daily_tvl_FACT_DAILY_TVL_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_tvl", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_daily_tvl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_DAILY_TVL_ID", "file_key_name": "models.defi__fact_daily_tvl", "attached_node": "model.maya_models.defi__fact_daily_tvl", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_DAILY_TVL_ID", "model": "{{ get_where_subquery(ref('defi__fact_daily_tvl')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_daily_tvl_DAY.6793a4c86b": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_daily_tvl_DAY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_daily_tvl_DAY.sql", "original_file_path": "models/gold/defi/defi__fact_daily_tvl.yml", "unique_id": "test.maya_models.not_null_defi__fact_daily_tvl_DAY.6793a4c86b", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_daily_tvl_DAY"], "alias": "fact_daily_tvl_DAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.341897, "relation_name": "MAYA.not_null_defi.fact_daily_tvl_DAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_daily_tvl", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_daily_tvl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DAY", "file_key_name": "models.defi__fact_daily_tvl", "attached_node": "model.maya_models.defi__fact_daily_tvl", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('defi__fact_daily_tvl')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_daily_tvl_FACT_DAILY_TVL_ID.f657fdd70c": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_daily_tvl_FACT_DAILY_TVL_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_f28bff64af218c6a0f5d157838deb077.sql", "original_file_path": "models/gold/defi/defi__fact_daily_tvl.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_daily_tvl_FACT_DAILY_TVL_ID.f657fdd70c", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_daily_tvl_FACT_DAILY_TVL_ID"], "alias": "fact_daily_tvl_FACT_DAILY_TVL_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_f28bff64af218c6a0f5d157838deb077", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_f28bff64af218c6a0f5d157838deb077"}, "created_at": 1741278783.342697, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_daily_tvl_FACT_DAILY_TVL_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_f28bff64af218c6a0f5d157838deb077\") }}", "language": "sql", "refs": [{"name": "defi__fact_daily_tvl", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_daily_tvl"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_daily_tvl", "attached_node": "model.maya_models.defi__fact_daily_tvl", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_DAILY_TVL_ID", "model": "{{ get_where_subquery(ref('defi__fact_daily_tvl')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.60587db32e": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_ea6a66075c8f7f1c439d2d8f880c4f35.sql", "original_file_path": "models/gold/defi/defi__fact_rewards_event_entries.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.60587db32e", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID"], "alias": "fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ea6a66075c8f7f1c439d2d8f880c4f35", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ea6a66075c8f7f1c439d2d8f880c4f35"}, "created_at": 1741278783.346234, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ea6a66075c8f7f1c439d2d8f880c4f35\") }}", "language": "sql", "refs": [{"name": "defi__fact_rewards_event_entries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_rewards_event_entries"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_REWARDS_EVENT_ENTRIES_ID", "file_key_name": "models.defi__fact_rewards_event_entries", "attached_node": "model.maya_models.defi__fact_rewards_event_entries", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_REWARDS_EVENT_ENTRIES_ID", "model": "{{ get_where_subquery(ref('defi__fact_rewards_event_entries')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.c1c1880829": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_rewards_even_f57d86619a6948034aeab79dbc5d9368.sql", "original_file_path": "models/gold/defi/defi__fact_rewards_event_entries.yml", "unique_id": "test.maya_models.unique_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.c1c1880829", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID"], "alias": "fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_defi__fact_rewards_even_f57d86619a6948034aeab79dbc5d9368", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "unique_defi__fact_rewards_even_f57d86619a6948034aeab79dbc5d9368"}, "created_at": 1741278783.348572, "relation_name": "MAYA.unique_defi.fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_defi__fact_rewards_even_f57d86619a6948034aeab79dbc5d9368\") }}", "language": "sql", "refs": [{"name": "defi__fact_rewards_event_entries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_rewards_event_entries"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_REWARDS_EVENT_ENTRIES_ID", "file_key_name": "models.defi__fact_rewards_event_entries", "attached_node": "model.maya_models.defi__fact_rewards_event_entries", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_REWARDS_EVENT_ENTRIES_ID", "model": "{{ get_where_subquery(ref('defi__fact_rewards_event_entries')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_rewards_event_entries_BLOCK_TIMESTAMP.390c2d3861": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_rewards_event_entries_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_rewards_event_entries_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_rewards_event_entries.yml", "unique_id": "test.maya_models.not_null_defi__fact_rewards_event_entries_BLOCK_TIMESTAMP.390c2d3861", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_rewards_event_entries_BLOCK_TIMESTAMP"], "alias": "fact_rewards_event_entries_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.3494039, "relation_name": "MAYA.not_null_defi.fact_rewards_event_entries_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_rewards_event_entries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_rewards_event_entries"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_rewards_event_entries", "attached_node": "model.maya_models.defi__fact_rewards_event_entries", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_rewards_event_entries')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_rewards_event_entries_DIM_BLOCK_ID.ae74184dc0": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_rewards_event_entries_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_rewards_event_entries_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_rewards_event_entries.yml", "unique_id": "test.maya_models.negative_one_defi__fact_rewards_event_entries_DIM_BLOCK_ID.ae74184dc0", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_rewards_event_entries_DIM_BLOCK_ID"], "alias": "fact_rewards_event_entries_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.350195, "relation_name": "MAYA.negative_one_defi.fact_rewards_event_entries_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_rewards_event_entries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_rewards_event_entries"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_rewards_event_entries", "attached_node": "model.maya_models.defi__fact_rewards_event_entries", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_rewards_event_entries')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.797b705be0": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_e061ceaf2327f3bd60dda2dea2884907.sql", "original_file_path": "models/gold/defi/defi__fact_rewards_event_entries.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.797b705be0", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID"], "alias": "fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_e061ceaf2327f3bd60dda2dea2884907", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_e061ceaf2327f3bd60dda2dea2884907"}, "created_at": 1741278783.352461, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_e061ceaf2327f3bd60dda2dea2884907\") }}", "language": "sql", "refs": [{"name": "defi__fact_rewards_event_entries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_rewards_event_entries"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_rewards_event_entries", "attached_node": "model.maya_models.defi__fact_rewards_event_entries", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_REWARDS_EVENT_ENTRIES_ID", "model": "{{ get_where_subquery(ref('defi__fact_rewards_event_entries')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_rewards_event_entries_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f384372f38": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_rewards_event_entries_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_0331282a1e6327ae03f5aeafb628ebe9.sql", "original_file_path": "models/gold/defi/defi__fact_rewards_event_entries.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_rewards_event_entries_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f384372f38", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_rewards_event_entries_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_rewards_event_entries_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_0331282a1e6327ae03f5aeafb628ebe9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_0331282a1e6327ae03f5aeafb628ebe9"}, "created_at": 1741278783.354653, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_rewards_event_entries_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_0331282a1e6327ae03f5aeafb628ebe9\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_rewards_event_entries", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_rewards_event_entries"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_rewards_event_entries", "attached_node": "model.maya_models.defi__fact_rewards_event_entries", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_rewards_event_entries')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.908c6385f1": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_dadc1f59b9dffb4d9087322a9b254959.sql", "original_file_path": "models/gold/defi/defi__fact_total_block_rewards.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.908c6385f1", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID"], "alias": "fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dadc1f59b9dffb4d9087322a9b254959", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_dadc1f59b9dffb4d9087322a9b254959"}, "created_at": 1741278783.35823, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dadc1f59b9dffb4d9087322a9b254959\") }}", "language": "sql", "refs": [{"name": "defi__fact_total_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_total_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_TOTAL_BLOCK_REWARDS_ID", "file_key_name": "models.defi__fact_total_block_rewards", "attached_node": "model.maya_models.defi__fact_total_block_rewards", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_TOTAL_BLOCK_REWARDS_ID", "model": "{{ get_where_subquery(ref('defi__fact_total_block_rewards')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.97eb93b600": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_total_block__e3176eb13621e151f0d758721c73a7d1.sql", "original_file_path": "models/gold/defi/defi__fact_total_block_rewards.yml", "unique_id": "test.maya_models.unique_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.97eb93b600", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID"], "alias": "fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_defi__fact_total_block__e3176eb13621e151f0d758721c73a7d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "unique_defi__fact_total_block__e3176eb13621e151f0d758721c73a7d1"}, "created_at": 1741278783.360283, "relation_name": "MAYA.unique_defi.fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_defi__fact_total_block__e3176eb13621e151f0d758721c73a7d1\") }}", "language": "sql", "refs": [{"name": "defi__fact_total_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_total_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_TOTAL_BLOCK_REWARDS_ID", "file_key_name": "models.defi__fact_total_block_rewards", "attached_node": "model.maya_models.defi__fact_total_block_rewards", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_TOTAL_BLOCK_REWARDS_ID", "model": "{{ get_where_subquery(ref('defi__fact_total_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_total_block_rewards_BLOCK_TIMESTAMP.b82d9032fc": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_total_block_rewards_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_total_block_rewards_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_total_block_rewards.yml", "unique_id": "test.maya_models.not_null_defi__fact_total_block_rewards_BLOCK_TIMESTAMP.b82d9032fc", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_total_block_rewards_BLOCK_TIMESTAMP"], "alias": "fact_total_block_rewards_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.361035, "relation_name": "MAYA.not_null_defi.fact_total_block_rewards_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_total_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_total_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_total_block_rewards", "attached_node": "model.maya_models.defi__fact_total_block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_total_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_total_block_rewards_DIM_BLOCK_ID.875d3d7233": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_total_block_rewards_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_total_block_rewards_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_total_block_rewards.yml", "unique_id": "test.maya_models.negative_one_defi__fact_total_block_rewards_DIM_BLOCK_ID.875d3d7233", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_total_block_rewards_DIM_BLOCK_ID"], "alias": "fact_total_block_rewards_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.361771, "relation_name": "MAYA.negative_one_defi.fact_total_block_rewards_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_total_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_total_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_total_block_rewards", "attached_node": "model.maya_models.defi__fact_total_block_rewards", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_total_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_total_block_rewards_REWARD_ENTITY.3ee825413f": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_total_block_rewards_REWARD_ENTITY", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_total_block_rewards_REWARD_ENTITY.sql", "original_file_path": "models/gold/defi/defi__fact_total_block_rewards.yml", "unique_id": "test.maya_models.not_null_defi__fact_total_block_rewards_REWARD_ENTITY.3ee825413f", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_total_block_rewards_REWARD_ENTITY"], "alias": "fact_total_block_rewards_REWARD_ENTITY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.363708, "relation_name": "MAYA.not_null_defi.fact_total_block_rewards_REWARD_ENTITY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_total_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_total_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "REWARD_ENTITY", "file_key_name": "models.defi__fact_total_block_rewards", "attached_node": "model.maya_models.defi__fact_total_block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REWARD_ENTITY", "model": "{{ get_where_subquery(ref('defi__fact_total_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_total_block_rewards_cacao_AMOUNT.b50618c8d2": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_total_block_rewards_cacao_AMOUNT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_total_block_rewards_cacao_AMOUNT.sql", "original_file_path": "models/gold/defi/defi__fact_total_block_rewards.yml", "unique_id": "test.maya_models.not_null_defi__fact_total_block_rewards_cacao_AMOUNT.b50618c8d2", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_total_block_rewards_cacao_AMOUNT"], "alias": "fact_total_block_rewards_cacao_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.364455, "relation_name": "MAYA.not_null_defi.fact_total_block_rewards_cacao_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_total_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_total_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_AMOUNT", "file_key_name": "models.defi__fact_total_block_rewards", "attached_node": "model.maya_models.defi__fact_total_block_rewards", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_AMOUNT", "model": "{{ get_where_subquery(ref('defi__fact_total_block_rewards')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.1279348063": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_54b144d23a45e63eefa54cd120b88296.sql", "original_file_path": "models/gold/defi/defi__fact_total_block_rewards.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.1279348063", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID"], "alias": "fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_54b144d23a45e63eefa54cd120b88296", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_54b144d23a45e63eefa54cd120b88296"}, "created_at": 1741278783.3651981, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_54b144d23a45e63eefa54cd120b88296\") }}", "language": "sql", "refs": [{"name": "defi__fact_total_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_total_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_total_block_rewards", "attached_node": "model.maya_models.defi__fact_total_block_rewards", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_TOTAL_BLOCK_REWARDS_ID", "model": "{{ get_where_subquery(ref('defi__fact_total_block_rewards')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_total_block_rewards_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.10797bc02d": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_total_block_rewards_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_05d1e583b75ddd7090a403b5ab0e3cab.sql", "original_file_path": "models/gold/defi/defi__fact_total_block_rewards.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_total_block_rewards_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.10797bc02d", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_total_block_rewards_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_total_block_rewards_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_05d1e583b75ddd7090a403b5ab0e3cab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_05d1e583b75ddd7090a403b5ab0e3cab"}, "created_at": 1741278783.368093, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_total_block_rewards_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_05d1e583b75ddd7090a403b5ab0e3cab\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_total_block_rewards", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_total_block_rewards"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_total_block_rewards", "attached_node": "model.maya_models.defi__fact_total_block_rewards", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_total_block_rewards')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID.8a326356fc": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_585a9bf978f3ed5a0dac1a8f14a0a040.sql", "original_file_path": "models/gold/defi/defi__fact_reserve_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID.8a326356fc", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID"], "alias": "fact_reserve_events_FACT_RESERVE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_585a9bf978f3ed5a0dac1a8f14a0a040", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_585a9bf978f3ed5a0dac1a8f14a0a040"}, "created_at": 1741278783.371847, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_reserve_events_FACT_RESERVE_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_585a9bf978f3ed5a0dac1a8f14a0a040\") }}", "language": "sql", "refs": [{"name": "defi__fact_reserve_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_reserve_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_RESERVE_EVENTS_ID", "file_key_name": "models.defi__fact_reserve_events", "attached_node": "model.maya_models.defi__fact_reserve_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_RESERVE_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_reserve_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID.276156f1e1": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_reserve_events.yml", "unique_id": "test.maya_models.unique_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID.276156f1e1", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID"], "alias": "fact_reserve_events_FACT_RESERVE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.373896, "relation_name": "MAYA.unique_defi.fact_reserve_events_FACT_RESERVE_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_reserve_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_reserve_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_RESERVE_EVENTS_ID", "file_key_name": "models.defi__fact_reserve_events", "attached_node": "model.maya_models.defi__fact_reserve_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_RESERVE_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_reserve_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_reserve_events_BLOCK_TIMESTAMP.2034989c09": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_reserve_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_reserve_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_reserve_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_reserve_events_BLOCK_TIMESTAMP.2034989c09", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_reserve_events_BLOCK_TIMESTAMP"], "alias": "fact_reserve_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.374665, "relation_name": "MAYA.not_null_defi.fact_reserve_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_reserve_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_reserve_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_reserve_events", "attached_node": "model.maya_models.defi__fact_reserve_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_reserve_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_reserve_events_DIM_BLOCK_ID.f394603e35": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_reserve_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_reserve_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_reserve_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_reserve_events_DIM_BLOCK_ID.f394603e35", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_reserve_events_DIM_BLOCK_ID"], "alias": "fact_reserve_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.3754308, "relation_name": "MAYA.negative_one_defi.fact_reserve_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_reserve_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_reserve_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_reserve_events", "attached_node": "model.maya_models.defi__fact_reserve_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_reserve_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID.bc7c918b28": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_5ec6bd96d8a55be3fe26aee526240040.sql", "original_file_path": "models/gold/defi/defi__fact_reserve_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID.bc7c918b28", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID"], "alias": "fact_reserve_events_FACT_RESERVE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_5ec6bd96d8a55be3fe26aee526240040", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_5ec6bd96d8a55be3fe26aee526240040"}, "created_at": 1741278783.378027, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_reserve_events_FACT_RESERVE_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_5ec6bd96d8a55be3fe26aee526240040\") }}", "language": "sql", "refs": [{"name": "defi__fact_reserve_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_reserve_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_reserve_events", "attached_node": "model.maya_models.defi__fact_reserve_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_RESERVE_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_reserve_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_reserve_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.02187e1ac9": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_reserve_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_7f2c039e388bba55f070ed80e3f6c957.sql", "original_file_path": "models/gold/defi/defi__fact_reserve_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_reserve_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.02187e1ac9", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_reserve_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_reserve_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_7f2c039e388bba55f070ed80e3f6c957", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_7f2c039e388bba55f070ed80e3f6c957"}, "created_at": 1741278783.380137, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_reserve_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_7f2c039e388bba55f070ed80e3f6c957\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_reserve_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_reserve_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_reserve_events", "attached_node": "model.maya_models.defi__fact_reserve_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_reserve_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID.a45d16f999": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_0af295f5bc559cc250a608caae11f0ec.sql", "original_file_path": "models/gold/defi/defi__fact_slash_liquidity_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID.a45d16f999", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID"], "alias": "fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0af295f5bc559cc250a608caae11f0ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0af295f5bc559cc250a608caae11f0ec"}, "created_at": 1741278783.384087, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0af295f5bc559cc250a608caae11f0ec\") }}", "language": "sql", "refs": [{"name": "defi__fact_slash_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_slash_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SLASH_LIQUIDITY_EVENTS_ID", "file_key_name": "models.defi__fact_slash_liquidity_events", "attached_node": "model.maya_models.defi__fact_slash_liquidity_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SLASH_LIQUIDITY_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_slash_liquidity_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID.a983479ef3": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_slash_liquid_53eb7e8c16ff41a82501a7e5c4e670b6.sql", "original_file_path": "models/gold/defi/defi__fact_slash_liquidity_events.yml", "unique_id": "test.maya_models.unique_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID.a983479ef3", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID"], "alias": "fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_defi__fact_slash_liquid_53eb7e8c16ff41a82501a7e5c4e670b6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "unique_defi__fact_slash_liquid_53eb7e8c16ff41a82501a7e5c4e670b6"}, "created_at": 1741278783.386136, "relation_name": "MAYA.unique_defi.fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_defi__fact_slash_liquid_53eb7e8c16ff41a82501a7e5c4e670b6\") }}", "language": "sql", "refs": [{"name": "defi__fact_slash_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_slash_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SLASH_LIQUIDITY_EVENTS_ID", "file_key_name": "models.defi__fact_slash_liquidity_events", "attached_node": "model.maya_models.defi__fact_slash_liquidity_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SLASH_LIQUIDITY_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_slash_liquidity_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_slash_liquidity_events_BLOCK_TIMESTAMP.5b14c39cd8": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_slash_liquidity_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_slash_liquidity_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_slash_liquidity_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_slash_liquidity_events_BLOCK_TIMESTAMP.5b14c39cd8", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_slash_liquidity_events_BLOCK_TIMESTAMP"], "alias": "fact_slash_liquidity_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.38689, "relation_name": "MAYA.not_null_defi.fact_slash_liquidity_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_slash_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_slash_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_slash_liquidity_events", "attached_node": "model.maya_models.defi__fact_slash_liquidity_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_slash_liquidity_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_slash_liquidity_events_DIM_BLOCK_ID.0f21ab898d": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_slash_liquidity_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_slash_liquidity_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_slash_liquidity_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_slash_liquidity_events_DIM_BLOCK_ID.0f21ab898d", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_slash_liquidity_events_DIM_BLOCK_ID"], "alias": "fact_slash_liquidity_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.3876429, "relation_name": "MAYA.negative_one_defi.fact_slash_liquidity_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_slash_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_slash_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_slash_liquidity_events", "attached_node": "model.maya_models.defi__fact_slash_liquidity_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_slash_liquidity_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID.2b04027532": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_c661983c94bd3ffb3ac2f5b173c78b07.sql", "original_file_path": "models/gold/defi/defi__fact_slash_liquidity_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID.2b04027532", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID"], "alias": "fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_c661983c94bd3ffb3ac2f5b173c78b07", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_c661983c94bd3ffb3ac2f5b173c78b07"}, "created_at": 1741278783.3896399, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_c661983c94bd3ffb3ac2f5b173c78b07\") }}", "language": "sql", "refs": [{"name": "defi__fact_slash_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_slash_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_slash_liquidity_events", "attached_node": "model.maya_models.defi__fact_slash_liquidity_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SLASH_LIQUIDITY_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_slash_liquidity_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_slash_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0acbf7ba85": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_slash_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_517043e684c4f47485272d7484ad1a1f.sql", "original_file_path": "models/gold/defi/defi__fact_slash_liquidity_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_slash_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0acbf7ba85", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_slash_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_slash_liquidity_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_517043e684c4f47485272d7484ad1a1f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_517043e684c4f47485272d7484ad1a1f"}, "created_at": 1741278783.391628, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_slash_liquidity_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_517043e684c4f47485272d7484ad1a1f\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_slash_liquidity_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_slash_liquidity_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_slash_liquidity_events", "attached_node": "model.maya_models.defi__fact_slash_liquidity_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_slash_liquidity_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_stake_events_FACT_STAKE_EVENTS_ID.9b7786f345": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_stake_events_FACT_STAKE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_307ec53510d46d9b36a10cf37b715922.sql", "original_file_path": "models/gold/defi/defi__fact_stake_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_stake_events_FACT_STAKE_EVENTS_ID.9b7786f345", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_stake_events_FACT_STAKE_EVENTS_ID"], "alias": "fact_stake_events_FACT_STAKE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_307ec53510d46d9b36a10cf37b715922", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_307ec53510d46d9b36a10cf37b715922"}, "created_at": 1741278783.395154, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_stake_events_FACT_STAKE_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_307ec53510d46d9b36a10cf37b715922\") }}", "language": "sql", "refs": [{"name": "defi__fact_stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_STAKE_EVENTS_ID", "file_key_name": "models.defi__fact_stake_events", "attached_node": "model.maya_models.defi__fact_stake_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_STAKE_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_stake_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_stake_events_FACT_STAKE_EVENTS_ID.235ec51a23": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_stake_events_FACT_STAKE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_stake_events_FACT_STAKE_EVENTS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_stake_events.yml", "unique_id": "test.maya_models.unique_defi__fact_stake_events_FACT_STAKE_EVENTS_ID.235ec51a23", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_stake_events_FACT_STAKE_EVENTS_ID"], "alias": "fact_stake_events_FACT_STAKE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.397197, "relation_name": "MAYA.unique_defi.fact_stake_events_FACT_STAKE_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_STAKE_EVENTS_ID", "file_key_name": "models.defi__fact_stake_events", "attached_node": "model.maya_models.defi__fact_stake_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_STAKE_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_stake_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_stake_events_BLOCK_TIMESTAMP.efe6e00a44": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_stake_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_stake_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_stake_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_stake_events_BLOCK_TIMESTAMP.efe6e00a44", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_stake_events_BLOCK_TIMESTAMP"], "alias": "fact_stake_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.39801, "relation_name": "MAYA.not_null_defi.fact_stake_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_stake_events", "attached_node": "model.maya_models.defi__fact_stake_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_stake_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_stake_events_DIM_BLOCK_ID.7c0bfe48d7": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_stake_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_stake_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_stake_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_stake_events_DIM_BLOCK_ID.7c0bfe48d7", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_stake_events_DIM_BLOCK_ID"], "alias": "fact_stake_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.398775, "relation_name": "MAYA.negative_one_defi.fact_stake_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_stake_events", "attached_node": "model.maya_models.defi__fact_stake_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_stake_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_stake_events_POOL_NAME.efc87f2e2f": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_stake_events_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_stake_events_POOL_NAME.sql", "original_file_path": "models/gold/defi/defi__fact_stake_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_stake_events_POOL_NAME.efc87f2e2f", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_stake_events_POOL_NAME"], "alias": "fact_stake_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.400886, "relation_name": "MAYA.not_null_defi.fact_stake_events_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.defi__fact_stake_events", "attached_node": "model.maya_models.defi__fact_stake_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('defi__fact_stake_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_stake_events_ASSET_E8.3ef47d7e7f": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_stake_events_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_stake_events_ASSET_E8.sql", "original_file_path": "models/gold/defi/defi__fact_stake_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_stake_events_ASSET_E8.3ef47d7e7f", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_stake_events_ASSET_E8"], "alias": "fact_stake_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.401818, "relation_name": "MAYA.not_null_defi.fact_stake_events_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.defi__fact_stake_events", "attached_node": "model.maya_models.defi__fact_stake_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('defi__fact_stake_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_stake_events_STAKE_UNITS.7dd72be974": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_stake_events_STAKE_UNITS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_stake_events_STAKE_UNITS.sql", "original_file_path": "models/gold/defi/defi__fact_stake_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_stake_events_STAKE_UNITS.7dd72be974", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_stake_events_STAKE_UNITS"], "alias": "fact_stake_events_STAKE_UNITS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.402556, "relation_name": "MAYA.not_null_defi.fact_stake_events_STAKE_UNITS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STAKE_UNITS", "file_key_name": "models.defi__fact_stake_events", "attached_node": "model.maya_models.defi__fact_stake_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STAKE_UNITS", "model": "{{ get_where_subquery(ref('defi__fact_stake_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_stake_events_cacao_E8.1c41c93867": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_stake_events_cacao_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_stake_events_cacao_E8.sql", "original_file_path": "models/gold/defi/defi__fact_stake_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_stake_events_cacao_E8.1c41c93867", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_stake_events_cacao_E8"], "alias": "fact_stake_events_cacao_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.403286, "relation_name": "MAYA.not_null_defi.fact_stake_events_cacao_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_E8", "file_key_name": "models.defi__fact_stake_events", "attached_node": "model.maya_models.defi__fact_stake_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_E8", "model": "{{ get_where_subquery(ref('defi__fact_stake_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_stake_events__ASSET_IN_cacao_E8.4b8f2965f9": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_stake_events__ASSET_IN_cacao_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_stake_events__ASSET_IN_cacao_E8.sql", "original_file_path": "models/gold/defi/defi__fact_stake_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_stake_events__ASSET_IN_cacao_E8.4b8f2965f9", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_stake_events__ASSET_IN_cacao_E8"], "alias": "fact_stake_events", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.404091, "relation_name": "MAYA.not_null_defi.fact_stake_events", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "_ASSET_IN_cacao_E8", "file_key_name": "models.defi__fact_stake_events", "attached_node": "model.maya_models.defi__fact_stake_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_ASSET_IN_cacao_E8", "model": "{{ get_where_subquery(ref('defi__fact_stake_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_stake_events_FACT_STAKE_EVENTS_ID.aa005ffc15": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_stake_events_FACT_STAKE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_331c482b3588336d9ca0c679a7ebf02d.sql", "original_file_path": "models/gold/defi/defi__fact_stake_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_stake_events_FACT_STAKE_EVENTS_ID.aa005ffc15", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_stake_events_FACT_STAKE_EVENTS_ID"], "alias": "fact_stake_events_FACT_STAKE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_331c482b3588336d9ca0c679a7ebf02d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_331c482b3588336d9ca0c679a7ebf02d"}, "created_at": 1741278783.404823, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_stake_events_FACT_STAKE_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_331c482b3588336d9ca0c679a7ebf02d\") }}", "language": "sql", "refs": [{"name": "defi__fact_stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_stake_events", "attached_node": "model.maya_models.defi__fact_stake_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_STAKE_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_stake_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_stake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.59228e8edb": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_stake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_f51cc2ba1f6a81860b52f9a477f788df.sql", "original_file_path": "models/gold/defi/defi__fact_stake_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_stake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.59228e8edb", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_stake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_stake_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_f51cc2ba1f6a81860b52f9a477f788df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_f51cc2ba1f6a81860b52f9a477f788df"}, "created_at": 1741278783.4068842, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_stake_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_f51cc2ba1f6a81860b52f9a477f788df\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_stake_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_stake_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_stake_events", "attached_node": "model.maya_models.defi__fact_stake_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_stake_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FACT_SWAPS_ID.65b78c9b2b": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_FACT_SWAPS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_d9817b51cc533e772e076a7337174cc7.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FACT_SWAPS_ID.65b78c9b2b", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_FACT_SWAPS_ID"], "alias": "fact_swaps_FACT_SWAPS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d9817b51cc533e772e076a7337174cc7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d9817b51cc533e772e076a7337174cc7"}, "created_at": 1741278783.412042, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_swaps_FACT_SWAPS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d9817b51cc533e772e076a7337174cc7\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SWAPS_ID", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.maya_models.defi__fact_swaps", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SWAPS_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_swaps_FACT_SWAPS_ID.ef29d48647": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_swaps_FACT_SWAPS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_swaps_FACT_SWAPS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.maya_models.unique_defi__fact_swaps_FACT_SWAPS_ID.ef29d48647", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_swaps_FACT_SWAPS_ID"], "alias": "fact_swaps_FACT_SWAPS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.414345, "relation_name": "MAYA.unique_defi.fact_swaps_FACT_SWAPS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SWAPS_ID", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.maya_models.defi__fact_swaps", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SWAPS_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_swaps_BLOCK_TIMESTAMP.075d054d65": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_swaps_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.maya_models.not_null_defi__fact_swaps_BLOCK_TIMESTAMP.075d054d65", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_swaps_BLOCK_TIMESTAMP"], "alias": "fact_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.415234, "relation_name": "MAYA.not_null_defi.fact_swaps_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.maya_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_swaps_DIM_BLOCK_ID.a0b8b6777c": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_swaps_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_swaps_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.maya_models.negative_one_defi__fact_swaps_DIM_BLOCK_ID.a0b8b6777c", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_swaps_DIM_BLOCK_ID"], "alias": "fact_swaps_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.416117, "relation_name": "MAYA.negative_one_defi.fact_swaps_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.maya_models.defi__fact_swaps", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_swaps_FACT_SWAPS_ID.9c12307bcb": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_swaps_FACT_SWAPS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_defi__fact_swaps_FACT_SWAPS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_swaps_FACT_SWAPS_ID.9c12307bcb", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_swaps_FACT_SWAPS_ID"], "alias": "fact_swaps_FACT_SWAPS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.4186502, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_swaps_FACT_SWAPS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_swaps", "attached_node": "model.maya_models.defi__fact_swaps", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SWAPS_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_swaps_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.6b212551fd": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_swaps_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_576004d2b8d5b46b671e4e6b4be9fb1d.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_swaps_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.6b212551fd", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_swaps_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_swaps_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_576004d2b8d5b46b671e4e6b4be9fb1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_576004d2b8d5b46b671e4e6b4be9fb1d"}, "created_at": 1741278783.420725, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_swaps_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_576004d2b8d5b46b671e4e6b4be9fb1d\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_swaps", "attached_node": "model.maya_models.defi__fact_swaps", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_fee_events_FACT_FEE_EVENTS_ID.b1c98cbf26": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_fee_events_FACT_FEE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_aa917621d49b81fd575c081d7954145b.sql", "original_file_path": "models/gold/defi/defi__fact_fee_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_fee_events_FACT_FEE_EVENTS_ID.b1c98cbf26", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_fee_events_FACT_FEE_EVENTS_ID"], "alias": "fact_fee_events_FACT_FEE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aa917621d49b81fd575c081d7954145b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_aa917621d49b81fd575c081d7954145b"}, "created_at": 1741278783.424027, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_fee_events_FACT_FEE_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aa917621d49b81fd575c081d7954145b\") }}", "language": "sql", "refs": [{"name": "defi__fact_fee_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_FEE_EVENTS_ID", "file_key_name": "models.defi__fact_fee_events", "attached_node": "model.maya_models.defi__fact_fee_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_FEE_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_fee_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_fee_events_FACT_FEE_EVENTS_ID.cbb6dfce5c": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_fee_events_FACT_FEE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_fee_events_FACT_FEE_EVENTS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_fee_events.yml", "unique_id": "test.maya_models.unique_defi__fact_fee_events_FACT_FEE_EVENTS_ID.cbb6dfce5c", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_fee_events_FACT_FEE_EVENTS_ID"], "alias": "fact_fee_events_FACT_FEE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.426038, "relation_name": "MAYA.unique_defi.fact_fee_events_FACT_FEE_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_fee_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_FEE_EVENTS_ID", "file_key_name": "models.defi__fact_fee_events", "attached_node": "model.maya_models.defi__fact_fee_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_FEE_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_fee_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_fee_events_BLOCK_TIMESTAMP.70a94fec54": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_fee_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_fee_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_fee_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_fee_events_BLOCK_TIMESTAMP.70a94fec54", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_fee_events_BLOCK_TIMESTAMP"], "alias": "fact_fee_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.426788, "relation_name": "MAYA.not_null_defi.fact_fee_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_fee_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_fee_events", "attached_node": "model.maya_models.defi__fact_fee_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_fee_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_fee_events_DIM_BLOCK_ID.48e400d73b": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_fee_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_fee_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_fee_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_fee_events_DIM_BLOCK_ID.48e400d73b", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_fee_events_DIM_BLOCK_ID"], "alias": "fact_fee_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.4277802, "relation_name": "MAYA.negative_one_defi.fact_fee_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_fee_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_fee_events", "attached_node": "model.maya_models.defi__fact_fee_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_fee_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_fee_events_TX_ID.e74d21d77e": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_fee_events_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_fee_events_TX_ID.sql", "original_file_path": "models/gold/defi/defi__fact_fee_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_fee_events_TX_ID.e74d21d77e", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_fee_events_TX_ID"], "alias": "fact_fee_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.430399, "relation_name": "MAYA.not_null_defi.fact_fee_events_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_fee_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.defi__fact_fee_events", "attached_node": "model.maya_models.defi__fact_fee_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('defi__fact_fee_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_fee_events_ASSET.58dfc939f5": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_fee_events_ASSET", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_fee_events_ASSET.sql", "original_file_path": "models/gold/defi/defi__fact_fee_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_fee_events_ASSET.58dfc939f5", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_fee_events_ASSET"], "alias": "fact_fee_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.431309, "relation_name": "MAYA.not_null_defi.fact_fee_events_ASSET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_fee_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET", "file_key_name": "models.defi__fact_fee_events", "attached_node": "model.maya_models.defi__fact_fee_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('defi__fact_fee_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_fee_events_POOL_DEDUCT.75679a84a7": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_fee_events_POOL_DEDUCT", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_fee_events_POOL_DEDUCT.sql", "original_file_path": "models/gold/defi/defi__fact_fee_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_fee_events_POOL_DEDUCT.75679a84a7", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_fee_events_POOL_DEDUCT"], "alias": "fact_fee_events_POOL_DEDUCT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.4321039, "relation_name": "MAYA.not_null_defi.fact_fee_events_POOL_DEDUCT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_fee_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_DEDUCT", "file_key_name": "models.defi__fact_fee_events", "attached_node": "model.maya_models.defi__fact_fee_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_DEDUCT", "model": "{{ get_where_subquery(ref('defi__fact_fee_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_fee_events_ASSET_E8.ec1824433c": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_fee_events_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_fee_events_ASSET_E8.sql", "original_file_path": "models/gold/defi/defi__fact_fee_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_fee_events_ASSET_E8.ec1824433c", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_fee_events_ASSET_E8"], "alias": "fact_fee_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.432846, "relation_name": "MAYA.not_null_defi.fact_fee_events_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_fee_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.defi__fact_fee_events", "attached_node": "model.maya_models.defi__fact_fee_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('defi__fact_fee_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_fee_events_FACT_FEE_EVENTS_ID.4f9bb0aae9": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_fee_events_FACT_FEE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_a3f5afdb70bed4989d8e559a0860ccac.sql", "original_file_path": "models/gold/defi/defi__fact_fee_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_fee_events_FACT_FEE_EVENTS_ID.4f9bb0aae9", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_fee_events_FACT_FEE_EVENTS_ID"], "alias": "fact_fee_events_FACT_FEE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_a3f5afdb70bed4989d8e559a0860ccac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_a3f5afdb70bed4989d8e559a0860ccac"}, "created_at": 1741278783.433575, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_fee_events_FACT_FEE_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_a3f5afdb70bed4989d8e559a0860ccac\") }}", "language": "sql", "refs": [{"name": "defi__fact_fee_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_fee_events", "attached_node": "model.maya_models.defi__fact_fee_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_FEE_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_fee_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_fee_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7028a1c586": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_fee_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_7c4353cbd0f5cd38fb08e365e11e3b7d.sql", "original_file_path": "models/gold/defi/defi__fact_fee_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_fee_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7028a1c586", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_fee_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_fee_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_7c4353cbd0f5cd38fb08e365e11e3b7d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_7c4353cbd0f5cd38fb08e365e11e3b7d"}, "created_at": 1741278783.4357178, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_fee_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_7c4353cbd0f5cd38fb08e365e11e3b7d\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_fee_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_fee_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_fee_events", "attached_node": "model.maya_models.defi__fact_fee_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_fee_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_add_events_FACT_ADD_EVENTS_ID.dcfa45dc5c": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_add_events_FACT_ADD_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_96f424b21f77e93f98c31cf8d0455223.sql", "original_file_path": "models/gold/defi/defi__fact_add_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_add_events_FACT_ADD_EVENTS_ID.dcfa45dc5c", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_add_events_FACT_ADD_EVENTS_ID"], "alias": "fact_add_events_FACT_ADD_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_96f424b21f77e93f98c31cf8d0455223", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_96f424b21f77e93f98c31cf8d0455223"}, "created_at": 1741278783.439109, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_add_events_FACT_ADD_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_96f424b21f77e93f98c31cf8d0455223\") }}", "language": "sql", "refs": [{"name": "defi__fact_add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_ADD_EVENTS_ID", "file_key_name": "models.defi__fact_add_events", "attached_node": "model.maya_models.defi__fact_add_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_ADD_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_add_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_add_events_FACT_ADD_EVENTS_ID.f9bab79293": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_add_events_FACT_ADD_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_add_events_FACT_ADD_EVENTS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_add_events.yml", "unique_id": "test.maya_models.unique_defi__fact_add_events_FACT_ADD_EVENTS_ID.f9bab79293", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_add_events_FACT_ADD_EVENTS_ID"], "alias": "fact_add_events_FACT_ADD_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.441254, "relation_name": "MAYA.unique_defi.fact_add_events_FACT_ADD_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_ADD_EVENTS_ID", "file_key_name": "models.defi__fact_add_events", "attached_node": "model.maya_models.defi__fact_add_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_ADD_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_add_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_add_events_BLOCK_TIMESTAMP.06d09f2202": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_add_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_add_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_add_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_add_events_BLOCK_TIMESTAMP.06d09f2202", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_add_events_BLOCK_TIMESTAMP"], "alias": "fact_add_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.4420102, "relation_name": "MAYA.not_null_defi.fact_add_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_add_events", "attached_node": "model.maya_models.defi__fact_add_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_add_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_add_events_DIM_BLOCK_ID.b6ac5d06b5": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_add_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_add_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_add_events.yml", "unique_id": "test.maya_models.negative_one_defi__fact_add_events_DIM_BLOCK_ID.b6ac5d06b5", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_add_events_DIM_BLOCK_ID"], "alias": "fact_add_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.4427478, "relation_name": "MAYA.negative_one_defi.fact_add_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_add_events", "attached_node": "model.maya_models.defi__fact_add_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_add_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_add_events_cacao_E8.980c31d51a": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_add_events_cacao_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_add_events_cacao_E8.sql", "original_file_path": "models/gold/defi/defi__fact_add_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_add_events_cacao_E8.980c31d51a", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_add_events_cacao_E8"], "alias": "fact_add_events_cacao_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.444768, "relation_name": "MAYA.not_null_defi.fact_add_events_cacao_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_E8", "file_key_name": "models.defi__fact_add_events", "attached_node": "model.maya_models.defi__fact_add_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_E8", "model": "{{ get_where_subquery(ref('defi__fact_add_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_add_events_BLOCKCHAIN.00aaf6b4cf": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_add_events_BLOCKCHAIN", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_add_events_BLOCKCHAIN.sql", "original_file_path": "models/gold/defi/defi__fact_add_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_add_events_BLOCKCHAIN.00aaf6b4cf", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_add_events_BLOCKCHAIN"], "alias": "fact_add_events_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.445539, "relation_name": "MAYA.not_null_defi.fact_add_events_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.defi__fact_add_events", "attached_node": "model.maya_models.defi__fact_add_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('defi__fact_add_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_add_events_ASSET_E8.366017cb0d": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_add_events_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_add_events_ASSET_E8.sql", "original_file_path": "models/gold/defi/defi__fact_add_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_add_events_ASSET_E8.366017cb0d", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_add_events_ASSET_E8"], "alias": "fact_add_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.446272, "relation_name": "MAYA.not_null_defi.fact_add_events_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.defi__fact_add_events", "attached_node": "model.maya_models.defi__fact_add_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('defi__fact_add_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_add_events_POOL_NAME.e418ec498a": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_add_events_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_add_events_POOL_NAME.sql", "original_file_path": "models/gold/defi/defi__fact_add_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_add_events_POOL_NAME.e418ec498a", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_add_events_POOL_NAME"], "alias": "fact_add_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.446999, "relation_name": "MAYA.not_null_defi.fact_add_events_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.defi__fact_add_events", "attached_node": "model.maya_models.defi__fact_add_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('defi__fact_add_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_add_events_MEMO.10fc5a9c70": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_add_events_MEMO", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_add_events_MEMO.sql", "original_file_path": "models/gold/defi/defi__fact_add_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_add_events_MEMO.10fc5a9c70", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_add_events_MEMO"], "alias": "fact_add_events_MEMO", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.447722, "relation_name": "MAYA.not_null_defi.fact_add_events_MEMO", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MEMO", "file_key_name": "models.defi__fact_add_events", "attached_node": "model.maya_models.defi__fact_add_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MEMO", "model": "{{ get_where_subquery(ref('defi__fact_add_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_add_events_TO_ADDRESS.5249804a36": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_add_events_TO_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_add_events_TO_ADDRESS.sql", "original_file_path": "models/gold/defi/defi__fact_add_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_add_events_TO_ADDRESS.5249804a36", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_add_events_TO_ADDRESS"], "alias": "fact_add_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.448512, "relation_name": "MAYA.not_null_defi.fact_add_events_TO_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ADDRESS", "file_key_name": "models.defi__fact_add_events", "attached_node": "model.maya_models.defi__fact_add_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('defi__fact_add_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_add_events_FROM_ADDRESS.c69fd5096c": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_add_events_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_add_events_FROM_ADDRESS.sql", "original_file_path": "models/gold/defi/defi__fact_add_events.yml", "unique_id": "test.maya_models.not_null_defi__fact_add_events_FROM_ADDRESS.c69fd5096c", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_add_events_FROM_ADDRESS"], "alias": "fact_add_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.4492412, "relation_name": "MAYA.not_null_defi.fact_add_events_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.defi__fact_add_events", "attached_node": "model.maya_models.defi__fact_add_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('defi__fact_add_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_add_events_FACT_ADD_EVENTS_ID.e2c050e363": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_add_events_FACT_ADD_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_658f9c904322cb9eaa91114ed9934010.sql", "original_file_path": "models/gold/defi/defi__fact_add_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_add_events_FACT_ADD_EVENTS_ID.e2c050e363", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_add_events_FACT_ADD_EVENTS_ID"], "alias": "fact_add_events_FACT_ADD_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_658f9c904322cb9eaa91114ed9934010", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_658f9c904322cb9eaa91114ed9934010"}, "created_at": 1741278783.44997, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_add_events_FACT_ADD_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_658f9c904322cb9eaa91114ed9934010\") }}", "language": "sql", "refs": [{"name": "defi__fact_add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_add_events", "attached_node": "model.maya_models.defi__fact_add_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_ADD_EVENTS_ID", "model": "{{ get_where_subquery(ref('defi__fact_add_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_add_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.927064ee9c": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_add_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_eb067f34caf690485c58e298070d0cee.sql", "original_file_path": "models/gold/defi/defi__fact_add_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_add_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.927064ee9c", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_add_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_add_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_eb067f34caf690485c58e298070d0cee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_eb067f34caf690485c58e298070d0cee"}, "created_at": 1741278783.452069, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_add_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_eb067f34caf690485c58e298070d0cee\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_add_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_add_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_add_events", "attached_node": "model.maya_models.defi__fact_add_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_add_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.b5bb9290e5": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_06c23f612c057219255d1eb0934a1a5a.sql", "original_file_path": "models/gold/defi/defi__fact_block_pool_depths.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.b5bb9290e5", "fqn": ["maya_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID"], "alias": "fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_06c23f612c057219255d1eb0934a1a5a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_06c23f612c057219255d1eb0934a1a5a"}, "created_at": 1741278783.455276, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_defi.fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_06c23f612c057219255d1eb0934a1a5a\") }}", "language": "sql", "refs": [{"name": "defi__fact_block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_POOL_DEPTHS_ID", "file_key_name": "models.defi__fact_block_pool_depths", "attached_node": "model.maya_models.defi__fact_block_pool_depths", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_POOL_DEPTHS_ID", "model": "{{ get_where_subquery(ref('defi__fact_block_pool_depths')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.d893b0b8a0": {"database": "MAYA", "schema": "unique_defi", "name": "unique_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_block_pool_depths.yml", "unique_id": "test.maya_models.unique_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.d893b0b8a0", "fqn": ["maya_models", "gold", "defi", "unique_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID"], "alias": "fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.457296, "relation_name": "MAYA.unique_defi.fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.defi__fact_block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_POOL_DEPTHS_ID", "file_key_name": "models.defi__fact_block_pool_depths", "attached_node": "model.maya_models.defi__fact_block_pool_depths", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_POOL_DEPTHS_ID", "model": "{{ get_where_subquery(ref('defi__fact_block_pool_depths')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_block_pool_depths_BLOCK_TIMESTAMP.289de889f0": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_block_pool_depths_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_block_pool_depths_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_block_pool_depths.yml", "unique_id": "test.maya_models.not_null_defi__fact_block_pool_depths_BLOCK_TIMESTAMP.289de889f0", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_block_pool_depths_BLOCK_TIMESTAMP"], "alias": "fact_block_pool_depths_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.4580438, "relation_name": "MAYA.not_null_defi.fact_block_pool_depths_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "defi__fact_block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_block_pool_depths", "attached_node": "model.maya_models.defi__fact_block_pool_depths", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_block_pool_depths')) }}"}, "namespace": null}}, "test.maya_models.negative_one_defi__fact_block_pool_depths_DIM_BLOCK_ID.5c18572103": {"database": "MAYA", "schema": "negative_one_defi", "name": "negative_one_defi__fact_block_pool_depths_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_defi__fact_block_pool_depths_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_block_pool_depths.yml", "unique_id": "test.maya_models.negative_one_defi__fact_block_pool_depths_DIM_BLOCK_ID.5c18572103", "fqn": ["maya_models", "gold", "defi", "negative_one_defi__fact_block_pool_depths_DIM_BLOCK_ID"], "alias": "fact_block_pool_depths_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.458775, "relation_name": "MAYA.negative_one_defi.fact_block_pool_depths_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "defi__fact_block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.defi__fact_block_pool_depths", "attached_node": "model.maya_models.defi__fact_block_pool_depths", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_block_pool_depths')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_block_pool_depths_cacao_E8.940c4df3e3": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_block_pool_depths_cacao_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_block_pool_depths_cacao_E8.sql", "original_file_path": "models/gold/defi/defi__fact_block_pool_depths.yml", "unique_id": "test.maya_models.not_null_defi__fact_block_pool_depths_cacao_E8.940c4df3e3", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_block_pool_depths_cacao_E8"], "alias": "fact_block_pool_depths_cacao_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.461254, "relation_name": "MAYA.not_null_defi.fact_block_pool_depths_cacao_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cacao_E8", "file_key_name": "models.defi__fact_block_pool_depths", "attached_node": "model.maya_models.defi__fact_block_pool_depths", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cacao_E8", "model": "{{ get_where_subquery(ref('defi__fact_block_pool_depths')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_block_pool_depths_ASSET_E8.18864edf3b": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_block_pool_depths_ASSET_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_block_pool_depths_ASSET_E8.sql", "original_file_path": "models/gold/defi/defi__fact_block_pool_depths.yml", "unique_id": "test.maya_models.not_null_defi__fact_block_pool_depths_ASSET_E8.18864edf3b", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_block_pool_depths_ASSET_E8"], "alias": "fact_block_pool_depths_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.462028, "relation_name": "MAYA.not_null_defi.fact_block_pool_depths_ASSET_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_E8", "file_key_name": "models.defi__fact_block_pool_depths", "attached_node": "model.maya_models.defi__fact_block_pool_depths", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('defi__fact_block_pool_depths')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_block_pool_depths_SYNTH_E8.a148b6fdac": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_block_pool_depths_SYNTH_E8", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_block_pool_depths_SYNTH_E8.sql", "original_file_path": "models/gold/defi/defi__fact_block_pool_depths.yml", "unique_id": "test.maya_models.not_null_defi__fact_block_pool_depths_SYNTH_E8.a148b6fdac", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_block_pool_depths_SYNTH_E8"], "alias": "fact_block_pool_depths_SYNTH_E8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.462757, "relation_name": "MAYA.not_null_defi.fact_block_pool_depths_SYNTH_E8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SYNTH_E8", "file_key_name": "models.defi__fact_block_pool_depths", "attached_node": "model.maya_models.defi__fact_block_pool_depths", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYNTH_E8", "model": "{{ get_where_subquery(ref('defi__fact_block_pool_depths')) }}"}, "namespace": null}}, "test.maya_models.not_null_defi__fact_block_pool_depths_POOL_NAME.c9b3847f9a": {"database": "MAYA", "schema": "not_null_defi", "name": "not_null_defi__fact_block_pool_depths_POOL_NAME", "resource_type": "test", "package_name": "maya_models", "path": "not_null_defi__fact_block_pool_depths_POOL_NAME.sql", "original_file_path": "models/gold/defi/defi__fact_block_pool_depths.yml", "unique_id": "test.maya_models.not_null_defi__fact_block_pool_depths_POOL_NAME.c9b3847f9a", "fqn": ["maya_models", "gold", "defi", "not_null_defi__fact_block_pool_depths_POOL_NAME"], "alias": "fact_block_pool_depths_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.463485, "relation_name": "MAYA.not_null_defi.fact_block_pool_depths_POOL_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.defi__fact_block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "POOL_NAME", "file_key_name": "models.defi__fact_block_pool_depths", "attached_node": "model.maya_models.defi__fact_block_pool_depths", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('defi__fact_block_pool_depths')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.516d84511a": {"database": "MAYA", "schema": "dbt_constraints_primary_key_defi", "name": "dbt_constraints_primary_key_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_de_1538aa9000478753a780b1f3bf88d08d.sql", "original_file_path": "models/gold/defi/defi__fact_block_pool_depths.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.516d84511a", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_primary_key_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID"], "alias": "fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_de_1538aa9000478753a780b1f3bf88d08d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_de_1538aa9000478753a780b1f3bf88d08d"}, "created_at": 1741278783.4642198, "relation_name": "MAYA.dbt_constraints_primary_key_defi.fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_de_1538aa9000478753a780b1f3bf88d08d\") }}", "language": "sql", "refs": [{"name": "defi__fact_block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.defi__fact_block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_block_pool_depths", "attached_node": "model.maya_models.defi__fact_block_pool_depths", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_POOL_DEPTHS_ID", "model": "{{ get_where_subquery(ref('defi__fact_block_pool_depths')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_defi__fact_block_pool_depths_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b693e5d66c": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_defi", "name": "dbt_constraints_foreign_key_defi__fact_block_pool_depths_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_de_aa235ea663bb9e2aafe40ac5526bb26b.sql", "original_file_path": "models/gold/defi/defi__fact_block_pool_depths.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_defi__fact_block_pool_depths_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b693e5d66c", "fqn": ["maya_models", "gold", "defi", "dbt_constraints_foreign_key_defi__fact_block_pool_depths_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_block_pool_depths_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_de_aa235ea663bb9e2aafe40ac5526bb26b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_de_aa235ea663bb9e2aafe40ac5526bb26b"}, "created_at": 1741278783.466524, "relation_name": "MAYA.dbt_constraints_foreign_key_defi.fact_block_pool_depths_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_de_aa235ea663bb9e2aafe40ac5526bb26b\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "defi__fact_block_pool_depths", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_block_pool_depths"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__fact_block_pool_depths", "attached_node": "model.maya_models.defi__fact_block_pool_depths", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_block_pool_depths')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.5cc3f7cdc4": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_eb07521b2b37421c19372b98355210ad.sql", "original_file_path": "models/gold/gov/gov__fact_set_node_keys_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.5cc3f7cdc4", "fqn": ["maya_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID"], "alias": "fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_eb07521b2b37421c19372b98355210ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_eb07521b2b37421c19372b98355210ad"}, "created_at": 1741278783.470984, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_gov.fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_eb07521b2b37421c19372b98355210ad\") }}", "language": "sql", "refs": [{"name": "gov__fact_set_node_keys_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_set_node_keys_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SET_NODE_KEYS_EVENTS_ID", "file_key_name": "models.gov__fact_set_node_keys_events", "attached_node": "model.maya_models.gov__fact_set_node_keys_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SET_NODE_KEYS_EVENTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_set_node_keys_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.8880e9c1e4": {"database": "MAYA", "schema": "unique_gov", "name": "unique_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_gov__fact_set_node_keys_914a8b74515b5b926431e4d0d57d8ee4.sql", "original_file_path": "models/gold/gov/gov__fact_set_node_keys_events.yml", "unique_id": "test.maya_models.unique_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.8880e9c1e4", "fqn": ["maya_models", "gold", "gov", "unique_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID"], "alias": "fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_gov__fact_set_node_keys_914a8b74515b5b926431e4d0d57d8ee4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "unique_gov__fact_set_node_keys_914a8b74515b5b926431e4d0d57d8ee4"}, "created_at": 1741278783.4736152, "relation_name": "MAYA.unique_gov.fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_gov__fact_set_node_keys_914a8b74515b5b926431e4d0d57d8ee4\") }}", "language": "sql", "refs": [{"name": "gov__fact_set_node_keys_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.gov__fact_set_node_keys_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SET_NODE_KEYS_EVENTS_ID", "file_key_name": "models.gov__fact_set_node_keys_events", "attached_node": "model.maya_models.gov__fact_set_node_keys_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SET_NODE_KEYS_EVENTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_set_node_keys_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_gov__fact_set_node_keys_events_BLOCK_TIMESTAMP.ebec22d08a": {"database": "MAYA", "schema": "not_null_gov", "name": "not_null_gov__fact_set_node_keys_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_gov__fact_set_node_keys_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/gov/gov__fact_set_node_keys_events.yml", "unique_id": "test.maya_models.not_null_gov__fact_set_node_keys_events_BLOCK_TIMESTAMP.ebec22d08a", "fqn": ["maya_models", "gold", "gov", "not_null_gov__fact_set_node_keys_events_BLOCK_TIMESTAMP"], "alias": "fact_set_node_keys_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.475251, "relation_name": "MAYA.not_null_gov.fact_set_node_keys_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "gov__fact_set_node_keys_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.gov__fact_set_node_keys_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.gov__fact_set_node_keys_events", "attached_node": "model.maya_models.gov__fact_set_node_keys_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('gov__fact_set_node_keys_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_gov__fact_set_node_keys_events_DIM_BLOCK_ID.e78644b2d2": {"database": "MAYA", "schema": "negative_one_gov", "name": "negative_one_gov__fact_set_node_keys_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_gov__fact_set_node_keys_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/gov/gov__fact_set_node_keys_events.yml", "unique_id": "test.maya_models.negative_one_gov__fact_set_node_keys_events_DIM_BLOCK_ID.e78644b2d2", "fqn": ["maya_models", "gold", "gov", "negative_one_gov__fact_set_node_keys_events_DIM_BLOCK_ID"], "alias": "fact_set_node_keys_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.4761338, "relation_name": "MAYA.negative_one_gov.fact_set_node_keys_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "gov__fact_set_node_keys_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_set_node_keys_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.gov__fact_set_node_keys_events", "attached_node": "model.maya_models.gov__fact_set_node_keys_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('gov__fact_set_node_keys_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.8a3255067b": {"database": "MAYA", "schema": "dbt_constraints_primary_key_gov", "name": "dbt_constraints_primary_key_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_go_3a724af9df1d65d45ba0572458e64e88.sql", "original_file_path": "models/gold/gov/gov__fact_set_node_keys_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.8a3255067b", "fqn": ["maya_models", "gold", "gov", "dbt_constraints_primary_key_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID"], "alias": "fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_go_3a724af9df1d65d45ba0572458e64e88", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_go_3a724af9df1d65d45ba0572458e64e88"}, "created_at": 1741278783.478546, "relation_name": "MAYA.dbt_constraints_primary_key_gov.fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_go_3a724af9df1d65d45ba0572458e64e88\") }}", "language": "sql", "refs": [{"name": "gov__fact_set_node_keys_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_set_node_keys_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.gov__fact_set_node_keys_events", "attached_node": "model.maya_models.gov__fact_set_node_keys_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SET_NODE_KEYS_EVENTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_set_node_keys_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_gov__fact_set_node_keys_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b1e2dcf0f1": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_gov", "name": "dbt_constraints_foreign_key_gov__fact_set_node_keys_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_go_67434e9d31140fc21a8e92a4b14ceb0d.sql", "original_file_path": "models/gold/gov/gov__fact_set_node_keys_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_gov__fact_set_node_keys_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b1e2dcf0f1", "fqn": ["maya_models", "gold", "gov", "dbt_constraints_foreign_key_gov__fact_set_node_keys_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_set_node_keys_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_go_67434e9d31140fc21a8e92a4b14ceb0d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_go_67434e9d31140fc21a8e92a4b14ceb0d"}, "created_at": 1741278783.480691, "relation_name": "MAYA.dbt_constraints_foreign_key_gov.fact_set_node_keys_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_go_67434e9d31140fc21a8e92a4b14ceb0d\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "gov__fact_set_node_keys_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.gov__fact_set_node_keys_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.gov__fact_set_node_keys_events", "attached_node": "model.maya_models.gov__fact_set_node_keys_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('gov__fact_set_node_keys_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_slash_points_FACT_SLASH_POINTS_ID.8d109c0e13": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_slash_points_FACT_SLASH_POINTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_a455cf07a8b27c1cdb0b24c371d9d15a.sql", "original_file_path": "models/gold/gov/gov__fact_slash_points.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_slash_points_FACT_SLASH_POINTS_ID.8d109c0e13", "fqn": ["maya_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_slash_points_FACT_SLASH_POINTS_ID"], "alias": "fact_slash_points_FACT_SLASH_POINTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a455cf07a8b27c1cdb0b24c371d9d15a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a455cf07a8b27c1cdb0b24c371d9d15a"}, "created_at": 1741278783.485106, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_gov.fact_slash_points_FACT_SLASH_POINTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a455cf07a8b27c1cdb0b24c371d9d15a\") }}", "language": "sql", "refs": [{"name": "gov__fact_slash_points", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_slash_points"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SLASH_POINTS_ID", "file_key_name": "models.gov__fact_slash_points", "attached_node": "model.maya_models.gov__fact_slash_points", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SLASH_POINTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_slash_points')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_gov__fact_slash_points_FACT_SLASH_POINTS_ID.209781dbb5": {"database": "MAYA", "schema": "unique_gov", "name": "unique_gov__fact_slash_points_FACT_SLASH_POINTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_gov__fact_slash_points_FACT_SLASH_POINTS_ID.sql", "original_file_path": "models/gold/gov/gov__fact_slash_points.yml", "unique_id": "test.maya_models.unique_gov__fact_slash_points_FACT_SLASH_POINTS_ID.209781dbb5", "fqn": ["maya_models", "gold", "gov", "unique_gov__fact_slash_points_FACT_SLASH_POINTS_ID"], "alias": "fact_slash_points_FACT_SLASH_POINTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.487545, "relation_name": "MAYA.unique_gov.fact_slash_points_FACT_SLASH_POINTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "gov__fact_slash_points", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.gov__fact_slash_points"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SLASH_POINTS_ID", "file_key_name": "models.gov__fact_slash_points", "attached_node": "model.maya_models.gov__fact_slash_points", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SLASH_POINTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_slash_points')) }}"}, "namespace": null}}, "test.maya_models.not_null_gov__fact_slash_points_BLOCK_TIMESTAMP.2399b1a318": {"database": "MAYA", "schema": "not_null_gov", "name": "not_null_gov__fact_slash_points_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_gov__fact_slash_points_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/gov/gov__fact_slash_points.yml", "unique_id": "test.maya_models.not_null_gov__fact_slash_points_BLOCK_TIMESTAMP.2399b1a318", "fqn": ["maya_models", "gold", "gov", "not_null_gov__fact_slash_points_BLOCK_TIMESTAMP"], "alias": "fact_slash_points_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.488371, "relation_name": "MAYA.not_null_gov.fact_slash_points_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "gov__fact_slash_points", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.gov__fact_slash_points"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.gov__fact_slash_points", "attached_node": "model.maya_models.gov__fact_slash_points", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('gov__fact_slash_points')) }}"}, "namespace": null}}, "test.maya_models.negative_one_gov__fact_slash_points_DIM_BLOCK_ID.3e57f036d1": {"database": "MAYA", "schema": "negative_one_gov", "name": "negative_one_gov__fact_slash_points_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_gov__fact_slash_points_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/gov/gov__fact_slash_points.yml", "unique_id": "test.maya_models.negative_one_gov__fact_slash_points_DIM_BLOCK_ID.3e57f036d1", "fqn": ["maya_models", "gold", "gov", "negative_one_gov__fact_slash_points_DIM_BLOCK_ID"], "alias": "fact_slash_points_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.4891598, "relation_name": "MAYA.negative_one_gov.fact_slash_points_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "gov__fact_slash_points", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_slash_points"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.gov__fact_slash_points", "attached_node": "model.maya_models.gov__fact_slash_points", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('gov__fact_slash_points')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_gov__fact_slash_points_FACT_SLASH_POINTS_ID.dd103daf92": {"database": "MAYA", "schema": "dbt_constraints_primary_key_gov", "name": "dbt_constraints_primary_key_gov__fact_slash_points_FACT_SLASH_POINTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_go_53c056d1459961a9355a974632c47025.sql", "original_file_path": "models/gold/gov/gov__fact_slash_points.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_gov__fact_slash_points_FACT_SLASH_POINTS_ID.dd103daf92", "fqn": ["maya_models", "gold", "gov", "dbt_constraints_primary_key_gov__fact_slash_points_FACT_SLASH_POINTS_ID"], "alias": "fact_slash_points_FACT_SLASH_POINTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_go_53c056d1459961a9355a974632c47025", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_go_53c056d1459961a9355a974632c47025"}, "created_at": 1741278783.4914298, "relation_name": "MAYA.dbt_constraints_primary_key_gov.fact_slash_points_FACT_SLASH_POINTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_go_53c056d1459961a9355a974632c47025\") }}", "language": "sql", "refs": [{"name": "gov__fact_slash_points", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_slash_points"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.gov__fact_slash_points", "attached_node": "model.maya_models.gov__fact_slash_points", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SLASH_POINTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_slash_points')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_gov__fact_slash_points_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ee65c78e29": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_gov", "name": "dbt_constraints_foreign_key_gov__fact_slash_points_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_go_ee9192e8d66eb18cb038e891a6baf57e.sql", "original_file_path": "models/gold/gov/gov__fact_slash_points.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_gov__fact_slash_points_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ee65c78e29", "fqn": ["maya_models", "gold", "gov", "dbt_constraints_foreign_key_gov__fact_slash_points_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_slash_points_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_go_ee9192e8d66eb18cb038e891a6baf57e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_go_ee9192e8d66eb18cb038e891a6baf57e"}, "created_at": 1741278783.494339, "relation_name": "MAYA.dbt_constraints_foreign_key_gov.fact_slash_points_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_go_ee9192e8d66eb18cb038e891a6baf57e\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "gov__fact_slash_points", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.gov__fact_slash_points"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.gov__fact_slash_points", "attached_node": "model.maya_models.gov__fact_slash_points", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('gov__fact_slash_points')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.74e7f39f87": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_3df51918a38e3b230a72f19497d0ab14.sql", "original_file_path": "models/gold/gov/gov__fact_new_node_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.74e7f39f87", "fqn": ["maya_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID"], "alias": "fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3df51918a38e3b230a72f19497d0ab14", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3df51918a38e3b230a72f19497d0ab14"}, "created_at": 1741278783.4988742, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_gov.fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3df51918a38e3b230a72f19497d0ab14\") }}", "language": "sql", "refs": [{"name": "gov__fact_new_node_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_new_node_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_NEW_NODE_EVENTS_ID", "file_key_name": "models.gov__fact_new_node_events", "attached_node": "model.maya_models.gov__fact_new_node_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_NEW_NODE_EVENTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_new_node_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.5818fff587": {"database": "MAYA", "schema": "unique_gov", "name": "unique_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.sql", "original_file_path": "models/gold/gov/gov__fact_new_node_events.yml", "unique_id": "test.maya_models.unique_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.5818fff587", "fqn": ["maya_models", "gold", "gov", "unique_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID"], "alias": "fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.501326, "relation_name": "MAYA.unique_gov.fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "gov__fact_new_node_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.gov__fact_new_node_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_NEW_NODE_EVENTS_ID", "file_key_name": "models.gov__fact_new_node_events", "attached_node": "model.maya_models.gov__fact_new_node_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_NEW_NODE_EVENTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_new_node_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_gov__fact_new_node_events_BLOCK_TIMESTAMP.00db5f265e": {"database": "MAYA", "schema": "not_null_gov", "name": "not_null_gov__fact_new_node_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_gov__fact_new_node_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/gov/gov__fact_new_node_events.yml", "unique_id": "test.maya_models.not_null_gov__fact_new_node_events_BLOCK_TIMESTAMP.00db5f265e", "fqn": ["maya_models", "gold", "gov", "not_null_gov__fact_new_node_events_BLOCK_TIMESTAMP"], "alias": "fact_new_node_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.5023181, "relation_name": "MAYA.not_null_gov.fact_new_node_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "gov__fact_new_node_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.gov__fact_new_node_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.gov__fact_new_node_events", "attached_node": "model.maya_models.gov__fact_new_node_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('gov__fact_new_node_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_gov__fact_new_node_events_DIM_BLOCK_ID.7e9a4f4df8": {"database": "MAYA", "schema": "negative_one_gov", "name": "negative_one_gov__fact_new_node_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_gov__fact_new_node_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/gov/gov__fact_new_node_events.yml", "unique_id": "test.maya_models.negative_one_gov__fact_new_node_events_DIM_BLOCK_ID.7e9a4f4df8", "fqn": ["maya_models", "gold", "gov", "negative_one_gov__fact_new_node_events_DIM_BLOCK_ID"], "alias": "fact_new_node_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.503083, "relation_name": "MAYA.negative_one_gov.fact_new_node_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "gov__fact_new_node_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_new_node_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.gov__fact_new_node_events", "attached_node": "model.maya_models.gov__fact_new_node_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('gov__fact_new_node_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_gov__fact_new_node_events_NODE_ADDRESS.acfc5e9153": {"database": "MAYA", "schema": "not_null_gov", "name": "not_null_gov__fact_new_node_events_NODE_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_gov__fact_new_node_events_NODE_ADDRESS.sql", "original_file_path": "models/gold/gov/gov__fact_new_node_events.yml", "unique_id": "test.maya_models.not_null_gov__fact_new_node_events_NODE_ADDRESS.acfc5e9153", "fqn": ["maya_models", "gold", "gov", "not_null_gov__fact_new_node_events_NODE_ADDRESS"], "alias": "fact_new_node_events_NODE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.505342, "relation_name": "MAYA.not_null_gov.fact_new_node_events_NODE_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "gov__fact_new_node_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.gov__fact_new_node_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "NODE_ADDRESS", "file_key_name": "models.gov__fact_new_node_events", "attached_node": "model.maya_models.gov__fact_new_node_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NODE_ADDRESS", "model": "{{ get_where_subquery(ref('gov__fact_new_node_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.f1563548b6": {"database": "MAYA", "schema": "dbt_constraints_primary_key_gov", "name": "dbt_constraints_primary_key_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_go_357a38278e1bebb6c549ff1aa832f4f1.sql", "original_file_path": "models/gold/gov/gov__fact_new_node_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.f1563548b6", "fqn": ["maya_models", "gold", "gov", "dbt_constraints_primary_key_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID"], "alias": "fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_go_357a38278e1bebb6c549ff1aa832f4f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_go_357a38278e1bebb6c549ff1aa832f4f1"}, "created_at": 1741278783.506314, "relation_name": "MAYA.dbt_constraints_primary_key_gov.fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_go_357a38278e1bebb6c549ff1aa832f4f1\") }}", "language": "sql", "refs": [{"name": "gov__fact_new_node_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_new_node_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.gov__fact_new_node_events", "attached_node": "model.maya_models.gov__fact_new_node_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_NEW_NODE_EVENTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_new_node_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_gov__fact_new_node_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.db84a142ae": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_gov", "name": "dbt_constraints_foreign_key_gov__fact_new_node_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_go_a30e46f92ef16a1a4bdc03b686a13a24.sql", "original_file_path": "models/gold/gov/gov__fact_new_node_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_gov__fact_new_node_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.db84a142ae", "fqn": ["maya_models", "gold", "gov", "dbt_constraints_foreign_key_gov__fact_new_node_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_new_node_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_go_a30e46f92ef16a1a4bdc03b686a13a24", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_go_a30e46f92ef16a1a4bdc03b686a13a24"}, "created_at": 1741278783.5087209, "relation_name": "MAYA.dbt_constraints_foreign_key_gov.fact_new_node_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_go_a30e46f92ef16a1a4bdc03b686a13a24\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "gov__fact_new_node_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.gov__fact_new_node_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.gov__fact_new_node_events", "attached_node": "model.maya_models.gov__fact_new_node_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('gov__fact_new_node_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.d6b2eb9e82": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_1c5d20bc4dd0611b3eaaa481a92364e4.sql", "original_file_path": "models/gold/gov/gov__fact_slash_amounts.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.d6b2eb9e82", "fqn": ["maya_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID"], "alias": "fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1c5d20bc4dd0611b3eaaa481a92364e4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1c5d20bc4dd0611b3eaaa481a92364e4"}, "created_at": 1741278783.5133052, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_gov.fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1c5d20bc4dd0611b3eaaa481a92364e4\") }}", "language": "sql", "refs": [{"name": "gov__fact_slash_amounts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_slash_amounts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SLASH_AMOUNTS_ID", "file_key_name": "models.gov__fact_slash_amounts", "attached_node": "model.maya_models.gov__fact_slash_amounts", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SLASH_AMOUNTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_slash_amounts')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.cf41247be9": {"database": "MAYA", "schema": "unique_gov", "name": "unique_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.sql", "original_file_path": "models/gold/gov/gov__fact_slash_amounts.yml", "unique_id": "test.maya_models.unique_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.cf41247be9", "fqn": ["maya_models", "gold", "gov", "unique_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID"], "alias": "fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.5157518, "relation_name": "MAYA.unique_gov.fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "gov__fact_slash_amounts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.gov__fact_slash_amounts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SLASH_AMOUNTS_ID", "file_key_name": "models.gov__fact_slash_amounts", "attached_node": "model.maya_models.gov__fact_slash_amounts", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SLASH_AMOUNTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_slash_amounts')) }}"}, "namespace": null}}, "test.maya_models.not_null_gov__fact_slash_amounts_BLOCK_TIMESTAMP.df74c36c69": {"database": "MAYA", "schema": "not_null_gov", "name": "not_null_gov__fact_slash_amounts_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_gov__fact_slash_amounts_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/gov/gov__fact_slash_amounts.yml", "unique_id": "test.maya_models.not_null_gov__fact_slash_amounts_BLOCK_TIMESTAMP.df74c36c69", "fqn": ["maya_models", "gold", "gov", "not_null_gov__fact_slash_amounts_BLOCK_TIMESTAMP"], "alias": "fact_slash_amounts_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.51658, "relation_name": "MAYA.not_null_gov.fact_slash_amounts_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "gov__fact_slash_amounts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.gov__fact_slash_amounts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.gov__fact_slash_amounts", "attached_node": "model.maya_models.gov__fact_slash_amounts", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('gov__fact_slash_amounts')) }}"}, "namespace": null}}, "test.maya_models.negative_one_gov__fact_slash_amounts_DIM_BLOCK_ID.24c3e556a0": {"database": "MAYA", "schema": "negative_one_gov", "name": "negative_one_gov__fact_slash_amounts_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_gov__fact_slash_amounts_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/gov/gov__fact_slash_amounts.yml", "unique_id": "test.maya_models.negative_one_gov__fact_slash_amounts_DIM_BLOCK_ID.24c3e556a0", "fqn": ["maya_models", "gold", "gov", "negative_one_gov__fact_slash_amounts_DIM_BLOCK_ID"], "alias": "fact_slash_amounts_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.5173728, "relation_name": "MAYA.negative_one_gov.fact_slash_amounts_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "gov__fact_slash_amounts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_slash_amounts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.gov__fact_slash_amounts", "attached_node": "model.maya_models.gov__fact_slash_amounts", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('gov__fact_slash_amounts')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.11ef3a37b6": {"database": "MAYA", "schema": "dbt_constraints_primary_key_gov", "name": "dbt_constraints_primary_key_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_go_be013299e4b815e4506ec3c4d5bbaee3.sql", "original_file_path": "models/gold/gov/gov__fact_slash_amounts.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.11ef3a37b6", "fqn": ["maya_models", "gold", "gov", "dbt_constraints_primary_key_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID"], "alias": "fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_go_be013299e4b815e4506ec3c4d5bbaee3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_go_be013299e4b815e4506ec3c4d5bbaee3"}, "created_at": 1741278783.520957, "relation_name": "MAYA.dbt_constraints_primary_key_gov.fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_go_be013299e4b815e4506ec3c4d5bbaee3\") }}", "language": "sql", "refs": [{"name": "gov__fact_slash_amounts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_slash_amounts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.gov__fact_slash_amounts", "attached_node": "model.maya_models.gov__fact_slash_amounts", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SLASH_AMOUNTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_slash_amounts')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_gov__fact_slash_amounts_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8100e32bac": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_gov", "name": "dbt_constraints_foreign_key_gov__fact_slash_amounts_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_go_a398f50f84c6b70036b6b67b02e699ec.sql", "original_file_path": "models/gold/gov/gov__fact_slash_amounts.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_gov__fact_slash_amounts_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8100e32bac", "fqn": ["maya_models", "gold", "gov", "dbt_constraints_foreign_key_gov__fact_slash_amounts_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_slash_amounts_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_go_a398f50f84c6b70036b6b67b02e699ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_go_a398f50f84c6b70036b6b67b02e699ec"}, "created_at": 1741278783.5237498, "relation_name": "MAYA.dbt_constraints_foreign_key_gov.fact_slash_amounts_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_go_a398f50f84c6b70036b6b67b02e699ec\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "gov__fact_slash_amounts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.gov__fact_slash_amounts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.gov__fact_slash_amounts", "attached_node": "model.maya_models.gov__fact_slash_amounts", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('gov__fact_slash_amounts')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.a23f25ab20": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_53a7ce2846fbdb6b17d70dea3c655e8f.sql", "original_file_path": "models/gold/gov/gov__fact_set_version_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.a23f25ab20", "fqn": ["maya_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID"], "alias": "fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_53a7ce2846fbdb6b17d70dea3c655e8f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_53a7ce2846fbdb6b17d70dea3c655e8f"}, "created_at": 1741278783.530526, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_gov.fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_53a7ce2846fbdb6b17d70dea3c655e8f\") }}", "language": "sql", "refs": [{"name": "gov__fact_set_version_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_set_version_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SET_VERSION_EVENTS_ID", "file_key_name": "models.gov__fact_set_version_events", "attached_node": "model.maya_models.gov__fact_set_version_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SET_VERSION_EVENTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_set_version_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.b00d92c74c": {"database": "MAYA", "schema": "unique_gov", "name": "unique_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.sql", "original_file_path": "models/gold/gov/gov__fact_set_version_events.yml", "unique_id": "test.maya_models.unique_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.b00d92c74c", "fqn": ["maya_models", "gold", "gov", "unique_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID"], "alias": "fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.533519, "relation_name": "MAYA.unique_gov.fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "gov__fact_set_version_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.gov__fact_set_version_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SET_VERSION_EVENTS_ID", "file_key_name": "models.gov__fact_set_version_events", "attached_node": "model.maya_models.gov__fact_set_version_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SET_VERSION_EVENTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_set_version_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_gov__fact_set_version_events_BLOCK_TIMESTAMP.98b94bb2b0": {"database": "MAYA", "schema": "not_null_gov", "name": "not_null_gov__fact_set_version_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_gov__fact_set_version_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/gov/gov__fact_set_version_events.yml", "unique_id": "test.maya_models.not_null_gov__fact_set_version_events_BLOCK_TIMESTAMP.98b94bb2b0", "fqn": ["maya_models", "gold", "gov", "not_null_gov__fact_set_version_events_BLOCK_TIMESTAMP"], "alias": "fact_set_version_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.534421, "relation_name": "MAYA.not_null_gov.fact_set_version_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "gov__fact_set_version_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.gov__fact_set_version_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.gov__fact_set_version_events", "attached_node": "model.maya_models.gov__fact_set_version_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('gov__fact_set_version_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_gov__fact_set_version_events_DIM_BLOCK_ID.219f154265": {"database": "MAYA", "schema": "negative_one_gov", "name": "negative_one_gov__fact_set_version_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_gov__fact_set_version_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/gov/gov__fact_set_version_events.yml", "unique_id": "test.maya_models.negative_one_gov__fact_set_version_events_DIM_BLOCK_ID.219f154265", "fqn": ["maya_models", "gold", "gov", "negative_one_gov__fact_set_version_events_DIM_BLOCK_ID"], "alias": "fact_set_version_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.535389, "relation_name": "MAYA.negative_one_gov.fact_set_version_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "gov__fact_set_version_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_set_version_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.gov__fact_set_version_events", "attached_node": "model.maya_models.gov__fact_set_version_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('gov__fact_set_version_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.cd19861ffb": {"database": "MAYA", "schema": "dbt_constraints_primary_key_gov", "name": "dbt_constraints_primary_key_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_go_0787f9ca795c611f3b5a1775fe253f2b.sql", "original_file_path": "models/gold/gov/gov__fact_set_version_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.cd19861ffb", "fqn": ["maya_models", "gold", "gov", "dbt_constraints_primary_key_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID"], "alias": "fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_go_0787f9ca795c611f3b5a1775fe253f2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_go_0787f9ca795c611f3b5a1775fe253f2b"}, "created_at": 1741278783.537791, "relation_name": "MAYA.dbt_constraints_primary_key_gov.fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_go_0787f9ca795c611f3b5a1775fe253f2b\") }}", "language": "sql", "refs": [{"name": "gov__fact_set_version_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_set_version_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.gov__fact_set_version_events", "attached_node": "model.maya_models.gov__fact_set_version_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SET_VERSION_EVENTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_set_version_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_gov__fact_set_version_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f9e30bbb44": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_gov", "name": "dbt_constraints_foreign_key_gov__fact_set_version_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_go_0ef9753893833e5e7ee7bbbfb4a62ae6.sql", "original_file_path": "models/gold/gov/gov__fact_set_version_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_gov__fact_set_version_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f9e30bbb44", "fqn": ["maya_models", "gold", "gov", "dbt_constraints_foreign_key_gov__fact_set_version_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_set_version_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_go_0ef9753893833e5e7ee7bbbfb4a62ae6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_go_0ef9753893833e5e7ee7bbbfb4a62ae6"}, "created_at": 1741278783.5402281, "relation_name": "MAYA.dbt_constraints_foreign_key_gov.fact_set_version_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_go_0ef9753893833e5e7ee7bbbfb4a62ae6\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "gov__fact_set_version_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.gov__fact_set_version_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.gov__fact_set_version_events", "attached_node": "model.maya_models.gov__fact_set_version_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('gov__fact_set_version_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.ea06e8b3eb": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_54c6ba2f0f0cf36433f96f76e86279e2.sql", "original_file_path": "models/gold/gov/gov__fact_validator_request_leave_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.ea06e8b3eb", "fqn": ["maya_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID"], "alias": "fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_54c6ba2f0f0cf36433f96f76e86279e2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_54c6ba2f0f0cf36433f96f76e86279e2"}, "created_at": 1741278783.5439029, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_gov.fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_54c6ba2f0f0cf36433f96f76e86279e2\") }}", "language": "sql", "refs": [{"name": "gov__fact_validator_request_leave_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "file_key_name": "models.gov__fact_validator_request_leave_events", "attached_node": "model.maya_models.gov__fact_validator_request_leave_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_validator_request_leave_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.37fdb42c72": {"database": "MAYA", "schema": "unique_gov", "name": "unique_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_gov__fact_validator_req_b6f9a1a6c1b3eae4a4be83f4ab00e8d7.sql", "original_file_path": "models/gold/gov/gov__fact_validator_request_leave_events.yml", "unique_id": "test.maya_models.unique_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.37fdb42c72", "fqn": ["maya_models", "gold", "gov", "unique_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID"], "alias": "fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_gov__fact_validator_req_b6f9a1a6c1b3eae4a4be83f4ab00e8d7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "unique_gov__fact_validator_req_b6f9a1a6c1b3eae4a4be83f4ab00e8d7"}, "created_at": 1741278783.5463219, "relation_name": "MAYA.unique_gov.fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_gov__fact_validator_req_b6f9a1a6c1b3eae4a4be83f4ab00e8d7\") }}", "language": "sql", "refs": [{"name": "gov__fact_validator_request_leave_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.gov__fact_validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "file_key_name": "models.gov__fact_validator_request_leave_events", "attached_node": "model.maya_models.gov__fact_validator_request_leave_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_validator_request_leave_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_gov__fact_validator_request_leave_events_BLOCK_TIMESTAMP.28cd20e919": {"database": "MAYA", "schema": "not_null_gov", "name": "not_null_gov__fact_validator_request_leave_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_gov__fact_validator_r_e3bb6c3bba6fbcc0e8b40f187f05ed43.sql", "original_file_path": "models/gold/gov/gov__fact_validator_request_leave_events.yml", "unique_id": "test.maya_models.not_null_gov__fact_validator_request_leave_events_BLOCK_TIMESTAMP.28cd20e919", "fqn": ["maya_models", "gold", "gov", "not_null_gov__fact_validator_request_leave_events_BLOCK_TIMESTAMP"], "alias": "fact_validator_request_leave_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_gov__fact_validator_r_e3bb6c3bba6fbcc0e8b40f187f05ed43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "not_null_gov__fact_validator_r_e3bb6c3bba6fbcc0e8b40f187f05ed43", "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.547161, "relation_name": "MAYA.not_null_gov.fact_validator_request_leave_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\",alias=\"not_null_gov__fact_validator_r_e3bb6c3bba6fbcc0e8b40f187f05ed43\") }}", "language": "sql", "refs": [{"name": "gov__fact_validator_request_leave_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.gov__fact_validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.gov__fact_validator_request_leave_events", "attached_node": "model.maya_models.gov__fact_validator_request_leave_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('gov__fact_validator_request_leave_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_gov__fact_validator_request_leave_events_DIM_BLOCK_ID.68c2b3f504": {"database": "MAYA", "schema": "negative_one_gov", "name": "negative_one_gov__fact_validator_request_leave_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_gov__fact_validat_2df8a7dc8de064f89354ff804b3a6d5e.sql", "original_file_path": "models/gold/gov/gov__fact_validator_request_leave_events.yml", "unique_id": "test.maya_models.negative_one_gov__fact_validator_request_leave_events_DIM_BLOCK_ID.68c2b3f504", "fqn": ["maya_models", "gold", "gov", "negative_one_gov__fact_validator_request_leave_events_DIM_BLOCK_ID"], "alias": "fact_validator_request_leave_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "negative_one_gov__fact_validat_2df8a7dc8de064f89354ff804b3a6d5e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "alias": "negative_one_gov__fact_validat_2df8a7dc8de064f89354ff804b3a6d5e"}, "created_at": 1741278783.547988, "relation_name": "MAYA.negative_one_gov.fact_validator_request_leave_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\",alias=\"negative_one_gov__fact_validat_2df8a7dc8de064f89354ff804b3a6d5e\") }}", "language": "sql", "refs": [{"name": "gov__fact_validator_request_leave_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.gov__fact_validator_request_leave_events", "attached_node": "model.maya_models.gov__fact_validator_request_leave_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('gov__fact_validator_request_leave_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_gov__fact_validator_request_leave_events_TX_ID.44237f576e": {"database": "MAYA", "schema": "not_null_gov", "name": "not_null_gov__fact_validator_request_leave_events_TX_ID", "resource_type": "test", "package_name": "maya_models", "path": "not_null_gov__fact_validator_request_leave_events_TX_ID.sql", "original_file_path": "models/gold/gov/gov__fact_validator_request_leave_events.yml", "unique_id": "test.maya_models.not_null_gov__fact_validator_request_leave_events_TX_ID.44237f576e", "fqn": ["maya_models", "gold", "gov", "not_null_gov__fact_validator_request_leave_events_TX_ID"], "alias": "fact_validator_request_leave_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.550669, "relation_name": "MAYA.not_null_gov.fact_validator_request_leave_events_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "gov__fact_validator_request_leave_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.gov__fact_validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.gov__fact_validator_request_leave_events", "attached_node": "model.maya_models.gov__fact_validator_request_leave_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('gov__fact_validator_request_leave_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_gov__fact_validator_request_leave_events_FROM_ADDRESS.fc1459d259": {"database": "MAYA", "schema": "not_null_gov", "name": "not_null_gov__fact_validator_request_leave_events_FROM_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_gov__fact_validator_request_leave_events_FROM_ADDRESS.sql", "original_file_path": "models/gold/gov/gov__fact_validator_request_leave_events.yml", "unique_id": "test.maya_models.not_null_gov__fact_validator_request_leave_events_FROM_ADDRESS.fc1459d259", "fqn": ["maya_models", "gold", "gov", "not_null_gov__fact_validator_request_leave_events_FROM_ADDRESS"], "alias": "fact_validator_request_leave_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.551497, "relation_name": "MAYA.not_null_gov.fact_validator_request_leave_events_FROM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "gov__fact_validator_request_leave_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.gov__fact_validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ADDRESS", "file_key_name": "models.gov__fact_validator_request_leave_events", "attached_node": "model.maya_models.gov__fact_validator_request_leave_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('gov__fact_validator_request_leave_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_gov__fact_validator_request_leave_events_NODE_ADDRESS.85babe010a": {"database": "MAYA", "schema": "not_null_gov", "name": "not_null_gov__fact_validator_request_leave_events_NODE_ADDRESS", "resource_type": "test", "package_name": "maya_models", "path": "not_null_gov__fact_validator_request_leave_events_NODE_ADDRESS.sql", "original_file_path": "models/gold/gov/gov__fact_validator_request_leave_events.yml", "unique_id": "test.maya_models.not_null_gov__fact_validator_request_leave_events_NODE_ADDRESS.85babe010a", "fqn": ["maya_models", "gold", "gov", "not_null_gov__fact_validator_request_leave_events_NODE_ADDRESS"], "alias": "fact_validator_request_leave_events_NODE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1741278783.552303, "relation_name": "MAYA.not_null_gov.fact_validator_request_leave_events_NODE_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "gov__fact_validator_request_leave_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.gov__fact_validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "NODE_ADDRESS", "file_key_name": "models.gov__fact_validator_request_leave_events", "attached_node": "model.maya_models.gov__fact_validator_request_leave_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NODE_ADDRESS", "model": "{{ get_where_subquery(ref('gov__fact_validator_request_leave_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.0f41863c47": {"database": "MAYA", "schema": "dbt_constraints_primary_key_gov", "name": "dbt_constraints_primary_key_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_go_caa434378d20157de3cec71984a50958.sql", "original_file_path": "models/gold/gov/gov__fact_validator_request_leave_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.0f41863c47", "fqn": ["maya_models", "gold", "gov", "dbt_constraints_primary_key_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID"], "alias": "fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_go_caa434378d20157de3cec71984a50958", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_go_caa434378d20157de3cec71984a50958"}, "created_at": 1741278783.553247, "relation_name": "MAYA.dbt_constraints_primary_key_gov.fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_go_caa434378d20157de3cec71984a50958\") }}", "language": "sql", "refs": [{"name": "gov__fact_validator_request_leave_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.gov__fact_validator_request_leave_events", "attached_node": "model.maya_models.gov__fact_validator_request_leave_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_validator_request_leave_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_gov__fact_validator_request_leave_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7203fca5dd": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_gov", "name": "dbt_constraints_foreign_key_gov__fact_validator_request_leave_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_go_12de3063f7e78127a53005accb297bff.sql", "original_file_path": "models/gold/gov/gov__fact_validator_request_leave_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_gov__fact_validator_request_leave_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7203fca5dd", "fqn": ["maya_models", "gold", "gov", "dbt_constraints_foreign_key_gov__fact_validator_request_leave_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_validator_request_leave_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_go_12de3063f7e78127a53005accb297bff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_go_12de3063f7e78127a53005accb297bff"}, "created_at": 1741278783.556671, "relation_name": "MAYA.dbt_constraints_foreign_key_gov.fact_validator_request_leave_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_go_12de3063f7e78127a53005accb297bff\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "gov__fact_validator_request_leave_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.gov__fact_validator_request_leave_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.gov__fact_validator_request_leave_events", "attached_node": "model.maya_models.gov__fact_validator_request_leave_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('gov__fact_validator_request_leave_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.ba1a7910fd": {"database": "MAYA", "schema": "dbt_expectations_expect_column_to_exist_gov", "name": "dbt_expectations_expect_column_to_exist_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_expectations_expect_column_9352a1ea90c1e531fbcac501504ccf74.sql", "original_file_path": "models/gold/gov/gov__fact_set_ip_address_events.yml", "unique_id": "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.ba1a7910fd", "fqn": ["maya_models", "gold", "gov", "dbt_expectations_expect_column_to_exist_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID"], "alias": "fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9352a1ea90c1e531fbcac501504ccf74", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9352a1ea90c1e531fbcac501504ccf74"}, "created_at": 1741278783.561825, "relation_name": "MAYA.dbt_expectations_expect_column_to_exist_gov.fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9352a1ea90c1e531fbcac501504ccf74\") }}", "language": "sql", "refs": [{"name": "gov__fact_set_ip_address_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_set_ip_address_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SET_IP_ADDRESS_EVENTS_ID", "file_key_name": "models.gov__fact_set_ip_address_events", "attached_node": "model.maya_models.gov__fact_set_ip_address_events", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SET_IP_ADDRESS_EVENTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_set_ip_address_events')) }}"}, "namespace": "dbt_expectations"}}, "test.maya_models.unique_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.036066cad1": {"database": "MAYA", "schema": "unique_gov", "name": "unique_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "unique_gov__fact_set_ip_addres_638412c0e787384cb7b49e484d3a68de.sql", "original_file_path": "models/gold/gov/gov__fact_set_ip_address_events.yml", "unique_id": "test.maya_models.unique_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.036066cad1", "fqn": ["maya_models", "gold", "gov", "unique_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID"], "alias": "fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_gov__fact_set_ip_addres_638412c0e787384cb7b49e484d3a68de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "unique_gov__fact_set_ip_addres_638412c0e787384cb7b49e484d3a68de"}, "created_at": 1741278783.5647109, "relation_name": "MAYA.unique_gov.fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_gov__fact_set_ip_addres_638412c0e787384cb7b49e484d3a68de\") }}", "language": "sql", "refs": [{"name": "gov__fact_set_ip_address_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.maya_models.gov__fact_set_ip_address_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SET_IP_ADDRESS_EVENTS_ID", "file_key_name": "models.gov__fact_set_ip_address_events", "attached_node": "model.maya_models.gov__fact_set_ip_address_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SET_IP_ADDRESS_EVENTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_set_ip_address_events')) }}"}, "namespace": null}}, "test.maya_models.not_null_gov__fact_set_ip_address_events_BLOCK_TIMESTAMP.462fe32242": {"database": "MAYA", "schema": "not_null_gov", "name": "not_null_gov__fact_set_ip_address_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "maya_models", "path": "not_null_gov__fact_set_ip_address_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/gov/gov__fact_set_ip_address_events.yml", "unique_id": "test.maya_models.not_null_gov__fact_set_ip_address_events_BLOCK_TIMESTAMP.462fe32242", "fqn": ["maya_models", "gold", "gov", "not_null_gov__fact_set_ip_address_events_BLOCK_TIMESTAMP"], "alias": "fact_set_ip_address_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1741278783.565541, "relation_name": "MAYA.not_null_gov.fact_set_ip_address_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "language": "sql", "refs": [{"name": "gov__fact_set_ip_address_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.maya_models.gov__fact_set_ip_address_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.gov__fact_set_ip_address_events", "attached_node": "model.maya_models.gov__fact_set_ip_address_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('gov__fact_set_ip_address_events')) }}"}, "namespace": null}}, "test.maya_models.negative_one_gov__fact_set_ip_address_events_DIM_BLOCK_ID.f2d9a1d444": {"database": "MAYA", "schema": "negative_one_gov", "name": "negative_one_gov__fact_set_ip_address_events_DIM_BLOCK_ID", "resource_type": "test", "package_name": "maya_models", "path": "negative_one_gov__fact_set_ip_address_events_DIM_BLOCK_ID.sql", "original_file_path": "models/gold/gov/gov__fact_set_ip_address_events.yml", "unique_id": "test.maya_models.negative_one_gov__fact_set_ip_address_events_DIM_BLOCK_ID.f2d9a1d444", "fqn": ["maya_models", "gold", "gov", "negative_one_gov__fact_set_ip_address_events_DIM_BLOCK_ID"], "alias": "fact_set_ip_address_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1741278783.566345, "relation_name": "MAYA.negative_one_gov.fact_set_ip_address_events_DIM_BLOCK_ID", "raw_code": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "language": "sql", "refs": [{"name": "gov__fact_set_ip_address_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.maya_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_set_ip_address_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_BLOCK_ID", "file_key_name": "models.gov__fact_set_ip_address_events", "attached_node": "model.maya_models.gov__fact_set_ip_address_events", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('gov__fact_set_ip_address_events')) }}"}, "namespace": null}}, "test.maya_models.dbt_constraints_primary_key_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.2eb1ce9651": {"database": "MAYA", "schema": "dbt_constraints_primary_key_gov", "name": "dbt_constraints_primary_key_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_primary_key_go_0801cb1a1d4157cece704a8d0472330e.sql", "original_file_path": "models/gold/gov/gov__fact_set_ip_address_events.yml", "unique_id": "test.maya_models.dbt_constraints_primary_key_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.2eb1ce9651", "fqn": ["maya_models", "gold", "gov", "dbt_constraints_primary_key_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID"], "alias": "fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_go_0801cb1a1d4157cece704a8d0472330e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_go_0801cb1a1d4157cece704a8d0472330e"}, "created_at": 1741278783.570341, "relation_name": "MAYA.dbt_constraints_primary_key_gov.fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_go_0801cb1a1d4157cece704a8d0472330e\") }}", "language": "sql", "refs": [{"name": "gov__fact_set_ip_address_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.gov__fact_set_ip_address_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.gov__fact_set_ip_address_events", "attached_node": "model.maya_models.gov__fact_set_ip_address_events", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SET_IP_ADDRESS_EVENTS_ID", "model": "{{ get_where_subquery(ref('gov__fact_set_ip_address_events')) }}"}, "namespace": "dbt_constraints"}}, "test.maya_models.dbt_constraints_foreign_key_gov__fact_set_ip_address_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c760962472": {"database": "MAYA", "schema": "dbt_constraints_foreign_key_gov", "name": "dbt_constraints_foreign_key_gov__fact_set_ip_address_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "resource_type": "test", "package_name": "maya_models", "path": "dbt_constraints_foreign_key_go_a07e93f15dd92262ffb60423916efe6d.sql", "original_file_path": "models/gold/gov/gov__fact_set_ip_address_events.yml", "unique_id": "test.maya_models.dbt_constraints_foreign_key_gov__fact_set_ip_address_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c760962472", "fqn": ["maya_models", "gold", "gov", "dbt_constraints_foreign_key_gov__fact_set_ip_address_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "alias": "fact_set_ip_address_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_go_a07e93f15dd92262ffb60423916efe6d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_go_a07e93f15dd92262ffb60423916efe6d"}, "created_at": 1741278783.572874, "relation_name": "MAYA.dbt_constraints_foreign_key_gov.fact_set_ip_address_events_DIM_BLOCK_ID", "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_go_a07e93f15dd92262ffb60423916efe6d\") }}", "language": "sql", "refs": [{"name": "core__dim_block", "package": null, "version": null}, {"name": "gov__fact_set_ip_address_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.maya_models.core__dim_block", "model.maya_models.gov__fact_set_ip_address_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.gov__fact_set_ip_address_events", "attached_node": "model.maya_models.gov__fact_set_ip_address_events", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('gov__fact_set_ip_address_events')) }}"}, "namespace": "dbt_constraints"}}, "test.livequery_base.test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call.3395d64fdc": {"database": "MAYA", "schema": "test_udf_utils", "name": "test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call", "resource_type": "test", "package_name": "livequery_base", "path": "test_udf_utils_0a4722d2c768c0a081ecd140b43ca89f.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call.3395d64fdc", "fqn": ["livequery_base", "deploy", "core", "test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call"], "alias": "foo_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_udf_utils_0a4722d2c768c0a081ecd140b43ca89f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "test_udf_utils_0a4722d2c768c0a081ecd140b43ca89f"}, "created_at": 1741278783.67871, "relation_name": "MAYA.test_udf_utils.foo_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_udf_utils_0a4722d2c768c0a081ecd140b43ca89f\") }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_json_rpc_call", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'foo', [], 1", "assertions": ["result = {\n  'jsonrpc': '2.0',\n  'method': 'foo',\n  'params': [],\n  'id': '1'\n}\n"], "column_name": "udf_json_rpc_call", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_dict_true_1.fdf94a3552": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_true_1", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_dict_true_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_dict_true_1.fdf94a3552", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_dict_true_1"], "alias": "udf_urlencode_dict_true_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.694156, "relation_name": "MAYA.test_utils.udf_urlencode_dict_true_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b'}, TRUE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_dict_true_2.e6c560e798": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_true_2", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_dict_true_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_dict_true_2.e6c560e798", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_dict_true_2"], "alias": "udf_urlencode_dict_true_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.7045498, "relation_name": "MAYA.test_utils.udf_urlencode_dict_true_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'a', 'b':'b'}, TRUE\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_dict_true_space.cf1ebd5f66": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_true_space", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_dict_true_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_dict_true_space.cf1ebd5f66", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_dict_true_space"], "alias": "udf_urlencode_dict_true_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.7116969, "relation_name": "MAYA.test_utils.udf_urlencode_dict_true_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'space': 'abc 123'}, TRUE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_dict_true_special.2505297d48": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_true_special", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_dict_true_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_dict_true_special.2505297d48", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_dict_true_special"], "alias": "udf_urlencode_dict_true_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.715293, "relation_name": "MAYA.test_utils.udf_urlencode_dict_true_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'special!': ' !@#$,+\"'}, TRUE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_dict_true_array.12987dd02c": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_true_array", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_dict_true_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_dict_true_array.12987dd02c", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_dict_true_array"], "alias": "udf_urlencode_dict_true_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.719851, "relation_name": "MAYA.test_utils.udf_urlencode_dict_true_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'array': [0, 1, 2]}, TRUE\n", "assertions": ["result = 'array=0&array=1&array=2'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_dict_false_1.b361ab7392": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_false_1", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_dict_false_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_dict_false_1.b361ab7392", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_dict_false_1"], "alias": "udf_urlencode_dict_false_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.725167, "relation_name": "MAYA.test_utils.udf_urlencode_dict_false_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b'}, FALSE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_dict_false_2.dea792bb27": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_false_2", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_dict_false_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_dict_false_2.dea792bb27", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_dict_false_2"], "alias": "udf_urlencode_dict_false_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.7286458, "relation_name": "MAYA.test_utils.udf_urlencode_dict_false_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b', 'b':'b'}, FALSE\n", "assertions": ["result = 'a=b&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_dict_false_space.76c5107ff8": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_false_space", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_dict_false_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_dict_false_space.76c5107ff8", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_dict_false_space"], "alias": "udf_urlencode_dict_false_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.731574, "relation_name": "MAYA.test_utils.udf_urlencode_dict_false_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'space': 'abc 123'}, FALSE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_dict_false_special.03dea2520f": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_false_special", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_dict_false_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_dict_false_special.03dea2520f", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_dict_false_special"], "alias": "udf_urlencode_dict_false_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.734111, "relation_name": "MAYA.test_utils.udf_urlencode_dict_false_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'special!': ' !@#$,+\"'}, FALSE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_dict_false_array.4892af33ef": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_false_array", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_dict_false_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_dict_false_array.4892af33ef", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_dict_false_array"], "alias": "udf_urlencode_dict_false_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.737175, "relation_name": "MAYA.test_utils.udf_urlencode_dict_false_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'array': [0, 1, 2]}, FALSE\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_dict_1.4143f28231": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_1", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_dict_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_dict_1.4143f28231", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_dict_1"], "alias": "udf_urlencode_dict_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.740021, "relation_name": "MAYA.test_utils.udf_urlencode_dict_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b'}\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_dict_2.63c38fd132": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_2", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_dict_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_dict_2.63c38fd132", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_dict_2"], "alias": "udf_urlencode_dict_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.7425768, "relation_name": "MAYA.test_utils.udf_urlencode_dict_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b', 'b':'b'}\n", "assertions": ["result = 'a=b&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_dict_space.76152bfecc": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_space", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_dict_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_dict_space.76152bfecc", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_dict_space"], "alias": "udf_urlencode_dict_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.745051, "relation_name": "MAYA.test_utils.udf_urlencode_dict_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'space': 'abc 123'}\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_dict_special.0500e3683b": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_special", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_dict_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_dict_special.0500e3683b", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_dict_special"], "alias": "udf_urlencode_dict_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.748132, "relation_name": "MAYA.test_utils.udf_urlencode_dict_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'special!': ' !@#$,+\"'}\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_dict_array.8619cd1854": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_array", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_dict_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_dict_array.8619cd1854", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_dict_array"], "alias": "udf_urlencode_dict_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.750772, "relation_name": "MAYA.test_utils.udf_urlencode_dict_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'array': [0, 1, 2]}\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_array_true_1.4b277c2056": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_true_1", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_array_true_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_array_true_1.4b277c2056", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_array_true_1"], "alias": "udf_urlencode_array_true_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.7537239, "relation_name": "MAYA.test_utils.udf_urlencode_array_true_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'b']], TRUE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_array_true_2.2a5d911cd5": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_true_2", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_array_true_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_array_true_2.2a5d911cd5", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_array_true_2"], "alias": "udf_urlencode_array_true_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.756437, "relation_name": "MAYA.test_utils.udf_urlencode_array_true_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'a'], ['b', 'b']], TRUE\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_array_true_space.86721ff4c6": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_true_space", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_array_true_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_array_true_space.86721ff4c6", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_array_true_space"], "alias": "udf_urlencode_array_true_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.759742, "relation_name": "MAYA.test_utils.udf_urlencode_array_true_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['space', 'abc 123']], TRUE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_array_true_special.6bc759dae6": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_true_special", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_array_true_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_array_true_special.6bc759dae6", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_array_true_special"], "alias": "udf_urlencode_array_true_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.762381, "relation_name": "MAYA.test_utils.udf_urlencode_array_true_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['special!', ' !@#$,+\"']], TRUE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_array_true_array.d77b856f93": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_true_array", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_array_true_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_array_true_array.d77b856f93", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_array_true_array"], "alias": "udf_urlencode_array_true_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.7648919, "relation_name": "MAYA.test_utils.udf_urlencode_array_true_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['array', [0, 1, 2]]], TRUE\n", "assertions": ["result = 'array=0&array=1&array=2'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_array_false_1.99efd6dd89": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_false_1", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_array_false_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_array_false_1.99efd6dd89", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_array_false_1"], "alias": "udf_urlencode_array_false_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.7678668, "relation_name": "MAYA.test_utils.udf_urlencode_array_false_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'b']], FALSE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_array_false_2.ee64ed1c8f": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_false_2", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_array_false_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_array_false_2.ee64ed1c8f", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_array_false_2"], "alias": "udf_urlencode_array_false_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.770803, "relation_name": "MAYA.test_utils.udf_urlencode_array_false_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'a'], ['b', 'b']], FALSE\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_array_false_space.3b0c76787c": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_false_space", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_array_false_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_array_false_space.3b0c76787c", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_array_false_space"], "alias": "udf_urlencode_array_false_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.773433, "relation_name": "MAYA.test_utils.udf_urlencode_array_false_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['space', 'abc 123']], FALSE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_array_false_special.a99ce4744f": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_false_special", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_array_false_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_array_false_special.a99ce4744f", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_array_false_special"], "alias": "udf_urlencode_array_false_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.775981, "relation_name": "MAYA.test_utils.udf_urlencode_array_false_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['special!', ' !@#$,+\"']], FALSE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_array_false_array.40ad1041f0": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_false_array", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_array_false_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_array_false_array.40ad1041f0", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_array_false_array"], "alias": "udf_urlencode_array_false_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.778649, "relation_name": "MAYA.test_utils.udf_urlencode_array_false_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['array', [0, 1, 2]]], FALSE\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_array_1.7986cadf5c": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_1", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_array_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_array_1.7986cadf5c", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_array_1"], "alias": "udf_urlencode_array_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.781284, "relation_name": "MAYA.test_utils.udf_urlencode_array_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'b']]\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_array_2.38e8c0c341": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_2", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_array_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_array_2.38e8c0c341", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_array_2"], "alias": "udf_urlencode_array_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.783933, "relation_name": "MAYA.test_utils.udf_urlencode_array_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'a'], ['b', 'b']]\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_array_space.36db5e9d03": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_space", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_array_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_array_space.36db5e9d03", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_array_space"], "alias": "udf_urlencode_array_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.7864351, "relation_name": "MAYA.test_utils.udf_urlencode_array_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['space', 'abc 123']]\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_array_special.1e95f13cf6": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_special", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_array_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_array_special.1e95f13cf6", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_array_special"], "alias": "udf_urlencode_array_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.789044, "relation_name": "MAYA.test_utils.udf_urlencode_array_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['special!', ' !@#$,+\"']]\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_urlencode_array_array.9cb7c99c99": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_array", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_urlencode_array_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_urlencode_array_array.9cb7c99c99", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_urlencode_array_array"], "alias": "udf_urlencode_array_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.7919161, "relation_name": "MAYA.test_utils.udf_urlencode_array_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['array', [0, 1, 2]]]\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_int_to_binary.d833da9e2e": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_int_to_binary", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_int_to_binary.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_int_to_binary.d833da9e2e", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_int_to_binary"], "alias": "udf_int_to_binary", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.794513, "relation_name": "MAYA.test_utils.udf_int_to_binary", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_int_to_binary", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": 123456789, "assertions": ["result = '111010110111100110100010101'"], "column_name": "udf_int_to_binary", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_int_to_binary_large_number.5d7360105e": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_int_to_binary_large_number", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_int_to_binary_large_number.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_int_to_binary_large_number.5d7360105e", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_int_to_binary_large_number"], "alias": "udf_int_to_binary_large_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.797305, "relation_name": "MAYA.test_utils.udf_int_to_binary_large_number", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_int_to_binary", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'123456789123456789123456789123456789123456789'", "assertions": ["result = '101100010010011011011100101001111010001001110011010111111101111101010111011001001101000001111110001010100001011011010000100000001000101111100010101'"], "column_name": "udf_int_to_binary", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_binary_to_int.ffcc7fc010": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_binary_to_int", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_binary_to_int.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_binary_to_int.ffcc7fc010", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_binary_to_int"], "alias": "udf_binary_to_int", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.8008351, "relation_name": "MAYA.test_utils.udf_binary_to_int", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_binary_to_int", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "111010110111100110100010101", "assertions": ["result = '123456789'"], "column_name": "udf_binary_to_int", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_binary_to_int_large_number.493e3262c4": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_binary_to_int_large_number", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_binary_to_int_large_number.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_binary_to_int_large_number.493e3262c4", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_binary_to_int_large_number"], "alias": "udf_binary_to_int_large_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.803904, "relation_name": "MAYA.test_utils.udf_binary_to_int_large_number", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_binary_to_int", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'110110110100110110100101110101100110100000101111100010101'", "assertions": ["result = '123456789123456789'"], "column_name": "udf_binary_to_int", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_utils__udf_evm_decode_log.84691b80d2": {"database": "MAYA", "schema": "test_utils", "name": "test_utils__udf_evm_decode_log", "resource_type": "test", "package_name": "livequery_base", "path": "test_utils__udf_evm_decode_log.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_base.test_utils__udf_evm_decode_log.84691b80d2", "fqn": ["livequery_base", "deploy", "core", "test_utils__udf_evm_decode_log"], "alias": "udf_evm_decode_log", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.8073568, "relation_name": "MAYA.test_utils.udf_evm_decode_log", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_evm_decode_log", "file_key_name": "models.utils", "attached_node": "model.livequery_base.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'anonymous': false,\n  'inputs': [\n    {\n      'indexed': false,\n      'name': 'nonce',\n      'type': 'uint256'\n    }\n  ],\n  'name': 'NonceChanged',\n  'type': 'event'\n}::variant, {\n  'address': '0x55032650b14df07b85bf18a3a3ec8e0af2e028d5',\n  'data': '0x000000000000000000000000000000000000000000000000000000000000279c',\n  'topics': [\n    '0x7220970e1f1f12864ecccd8942690a837c7a8dd45d158cb891eb45a8a69134aa'\n  ]\n}::variant\n", "assertions": ["result = [\n  {\n    'address': '0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5',\n    'data': [\n      {\n        'decoded': true,\n        'name': 'nonce',\n        'type': 'uint256',\n        'value': 10140\n      }\n    ],\n    'decoded': true,\n    'name': 'NonceChanged'\n  }\n]"], "column_name": "udf_evm_decode_log", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_base.test_secrets__udf_register_secret.85444b4425": {"database": "MAYA", "schema": "test_secrets", "name": "test_secrets__udf_register_secret", "resource_type": "test", "package_name": "livequery_base", "path": "test_secrets__udf_register_secret.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_base.test_secrets__udf_register_secret.85444b4425", "fqn": ["livequery_base", "deploy", "core", "test_secrets__udf_register_secret"], "alias": "udf_register_secret", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.811691, "relation_name": "MAYA.test_secrets.udf_register_secret", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_register_secret", "file_key_name": "models.secrets", "attached_node": "model.livequery_base.secrets", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'test', 'test'\n", "assertions": ["result = {'request_id':'test','success':false}"], "column_name": "udf_register_secret", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}}, "test.livequery_base.test_secrets__udf_get_secret.1762e1eb69": {"database": "MAYA", "schema": "test_secrets", "name": "test_secrets__udf_get_secret", "resource_type": "test", "package_name": "livequery_base", "path": "test_secrets__udf_get_secret.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_base.test_secrets__udf_get_secret.1762e1eb69", "fqn": ["livequery_base", "deploy", "core", "test_secrets__udf_get_secret"], "alias": "udf_get_secret", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.8147311, "relation_name": "MAYA.test_secrets.udf_get_secret", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_get_secret", "file_key_name": "models.secrets", "attached_node": "model.livequery_base.secrets", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'test'\n", "assertions": ["result::OBJECT = {'key': 'value'}\n"], "column_name": "udf_get_secret", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}}, "test.livequery_base.test_secrets__udf_get_secrets.898812e6e2": {"database": "MAYA", "schema": "test_secrets", "name": "test_secrets__udf_get_secrets", "resource_type": "test", "package_name": "livequery_base", "path": "test_secrets__udf_get_secrets.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_base.test_secrets__udf_get_secrets.898812e6e2", "fqn": ["livequery_base", "deploy", "core", "test_secrets__udf_get_secrets"], "alias": "udf_get_secrets", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.818227, "relation_name": "MAYA.test_secrets.udf_get_secrets", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_get_secrets", "file_key_name": "models.secrets", "attached_node": "model.livequery_base.secrets", "test_metadata": {"name": "test_udf", "kwargs": {"args": "", "assertions": ["result = {'test': {'key': 'value'}}\n"], "column_name": "udf_get_secrets", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}}, "test.livequery_base.test_secrets__udf_create_secret.d42bc02506": {"database": "MAYA", "schema": "test_secrets", "name": "test_secrets__udf_create_secret", "resource_type": "test", "package_name": "livequery_base", "path": "test_secrets__udf_create_secret.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_base.test_secrets__udf_create_secret.d42bc02506", "fqn": ["livequery_base", "deploy", "core", "test_secrets__udf_create_secret"], "alias": "udf_create_secret", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.821103, "relation_name": "MAYA.test_secrets.udf_create_secret", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_create_secret", "file_key_name": "models.secrets", "attached_node": "model.livequery_base.secrets", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'test', {'key': 'value'}\n", "assertions": ["result = 200"], "column_name": "udf_create_secret", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}}, "test.livequery_base.test_secrets__udf_delete_secret.9f28745276": {"database": "MAYA", "schema": "test_secrets", "name": "test_secrets__udf_delete_secret", "resource_type": "test", "package_name": "livequery_base", "path": "test_secrets__udf_delete_secret.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_base.test_secrets__udf_delete_secret.9f28745276", "fqn": ["livequery_base", "deploy", "core", "test_secrets__udf_delete_secret"], "alias": "udf_delete_secret", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.823903, "relation_name": "MAYA.test_secrets.udf_delete_secret", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_delete_secret", "file_key_name": "models.secrets", "attached_node": "model.livequery_base.secrets", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'test_delete'\n", "assertions": ["result = 200"], "column_name": "udf_delete_secret", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}}, "test.livequery_base.test__live_udf_api_post_data_object.208f9d5456": {"database": "MAYA", "schema": "test", "name": "test__live_udf_api_post_data_object", "resource_type": "test", "package_name": "livequery_base", "path": "test__live_udf_api_post_data_object.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_base.test__live_udf_api_post_data_object.208f9d5456", "fqn": ["livequery_base", "deploy", "core", "test__live_udf_api_post_data_object"], "alias": "live_udf_api_post_data_object", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.826992, "relation_name": "MAYA.test.live_udf_api_post_data_object", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_base.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/post', {'foo': 'bar'}\n", "assertions": ["result:data.json is not null", "result:data.json = OBJECT_CONSTRUCT('foo', 'bar')"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_base.test__live_udf_api_post_data_array.f30e6de8c8": {"database": "MAYA", "schema": "test", "name": "test__live_udf_api_post_data_array", "resource_type": "test", "package_name": "livequery_base", "path": "test__live_udf_api_post_data_array.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_base.test__live_udf_api_post_data_array.f30e6de8c8", "fqn": ["livequery_base", "deploy", "core", "test__live_udf_api_post_data_array"], "alias": "live_udf_api_post_data_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.830517, "relation_name": "MAYA.test.live_udf_api_post_data_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_base.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/post', ['foo', 'bar']\n", "assertions": ["result:data.json is not null", "result:data.json = ARRAY_CONSTRUCT('foo', 'bar')"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_base.test__live_udf_api_post_data_string.e2159319bb": {"database": "MAYA", "schema": "test", "name": "test__live_udf_api_post_data_string", "resource_type": "test", "package_name": "livequery_base", "path": "test__live_udf_api_post_data_string.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_base.test__live_udf_api_post_data_string.e2159319bb", "fqn": ["livequery_base", "deploy", "core", "test__live_udf_api_post_data_string"], "alias": "live_udf_api_post_data_string", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.833933, "relation_name": "MAYA.test.live_udf_api_post_data_string", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_base.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/post', 'foo'::VARIANT\n", "assertions": ["result:data.json is not null", "result:data.json = 'foo'"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_base.test___utils_udf_introspect.79bd27a18b": {"database": "MAYA", "schema": "test", "name": "test___utils_udf_introspect", "resource_type": "test", "package_name": "livequery_base", "path": "test___utils_udf_introspect.sql", "original_file_path": "models/deploy/core/_utils.yml", "unique_id": "test.livequery_base.test___utils_udf_introspect.79bd27a18b", "fqn": ["livequery_base", "deploy", "core", "test___utils_udf_introspect"], "alias": "_utils_udf_introspect", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1741278783.8377512, "relation_name": "MAYA.test._utils_udf_introspect", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_base._utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_introspect", "file_key_name": "models._utils", "attached_node": "model.livequery_base._utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'hello'", "assertions": ["result = 'hello'"], "column_name": "udf_introspect", "model": "{{ get_where_subquery(ref('_utils')) }}"}, "namespace": null}}}, "sources": {"source.maya_models.maya_midgard.midgard_active_vault_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_active_vault_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_active_vault_events", "fqn": ["maya_models", "maya_midgard", "midgard_active_vault_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_active_vault_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_active_vault_events", "created_at": 1741278783.874421}, "source.maya_models.maya_midgard.midgard_add_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_add_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_add_events", "fqn": ["maya_models", "maya_midgard", "midgard_add_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_add_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_add_events", "created_at": 1741278783.8751118}, "source.maya_models.maya_midgard.midgard_block_log": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_block_log", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_block_log", "fqn": ["maya_models", "maya_midgard", "midgard_block_log"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_block_log", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_block_log", "created_at": 1741278783.875196}, "source.maya_models.maya_midgard.midgard_block_pool_depths": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_block_pool_depths", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_block_pool_depths", "fqn": ["maya_models", "maya_midgard", "midgard_block_pool_depths"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_block_pool_depths", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_block_pool_depths", "created_at": 1741278783.875275}, "source.maya_models.maya_midgard.midgard_bond_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_bond_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_bond_events", "fqn": ["maya_models", "maya_midgard", "midgard_bond_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_bond_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_bond_events", "created_at": 1741278783.8753479}, "source.maya_models.maya_midgard.midgard_cacao_price": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_cacao_price", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_cacao_price", "fqn": ["maya_models", "maya_midgard", "midgard_cacao_price"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_cacao_price", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_cacao_price", "created_at": 1741278783.8754182}, "source.maya_models.maya_midgard.midgard_constants": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_constants", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_constants", "fqn": ["maya_models", "maya_midgard", "midgard_constants"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_constants", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_constants", "created_at": 1741278783.875493}, "source.maya_models.maya_midgard.midgard_failed_deposit_messages": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_failed_deposit_messages", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_failed_deposit_messages", "fqn": ["maya_models", "maya_midgard", "midgard_failed_deposit_messages"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_failed_deposit_messages", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_failed_deposit_messages", "created_at": 1741278783.875565}, "source.maya_models.maya_midgard.midgard_fee_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_fee_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_fee_events", "fqn": ["maya_models", "maya_midgard", "midgard_fee_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_fee_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_fee_events", "created_at": 1741278783.875635}, "source.maya_models.maya_midgard.midgard_gas_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_gas_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_gas_events", "fqn": ["maya_models", "maya_midgard", "midgard_gas_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_gas_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_gas_events", "created_at": 1741278783.875703}, "source.maya_models.maya_midgard.midgard_inactive_vault_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_inactive_vault_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_inactive_vault_events", "fqn": ["maya_models", "maya_midgard", "midgard_inactive_vault_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_inactive_vault_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_inactive_vault_events", "created_at": 1741278783.8757749}, "source.maya_models.maya_midgard.midgard_mayaname_change_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_mayaname_change_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_mayaname_change_events", "fqn": ["maya_models", "maya_midgard", "midgard_mayaname_change_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_mayaname_change_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_mayaname_change_events", "created_at": 1741278783.8758469}, "source.maya_models.maya_midgard.midgard_new_node_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_new_node_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_new_node_events", "fqn": ["maya_models", "maya_midgard", "midgard_new_node_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_new_node_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_new_node_events", "created_at": 1741278783.875915}, "source.maya_models.maya_midgard.midgard_outbound_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_outbound_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_outbound_events", "fqn": ["maya_models", "maya_midgard", "midgard_outbound_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_outbound_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_outbound_events", "created_at": 1741278783.875984}, "source.maya_models.maya_midgard.midgard_pending_liquidity_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_pending_liquidity_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_pending_liquidity_events", "fqn": ["maya_models", "maya_midgard", "midgard_pending_liquidity_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_pending_liquidity_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_pending_liquidity_events", "created_at": 1741278783.876055}, "source.maya_models.maya_midgard.midgard_pool_balance_change_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_pool_balance_change_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_pool_balance_change_events", "fqn": ["maya_models", "maya_midgard", "midgard_pool_balance_change_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_pool_balance_change_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_pool_balance_change_events", "created_at": 1741278783.87612}, "source.maya_models.maya_midgard.midgard_pool_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_pool_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_pool_events", "fqn": ["maya_models", "maya_midgard", "midgard_pool_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_pool_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_pool_events", "created_at": 1741278783.8761861}, "source.maya_models.maya_midgard.midgard_refund_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_refund_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_refund_events", "fqn": ["maya_models", "maya_midgard", "midgard_refund_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_refund_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_refund_events", "created_at": 1741278783.87625}, "source.maya_models.maya_midgard.midgard_reserve_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_reserve_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_reserve_events", "fqn": ["maya_models", "maya_midgard", "midgard_reserve_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_reserve_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_reserve_events", "created_at": 1741278783.8763142}, "source.maya_models.maya_midgard.midgard_rewards_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_rewards_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_rewards_events", "fqn": ["maya_models", "maya_midgard", "midgard_rewards_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_rewards_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_rewards_events", "created_at": 1741278783.876377}, "source.maya_models.maya_midgard.midgard_rewards_event_entries": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_rewards_event_entries", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_rewards_event_entries", "fqn": ["maya_models", "maya_midgard", "midgard_rewards_event_entries"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_rewards_event_entries", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_rewards_event_entries", "created_at": 1741278783.876441}, "source.maya_models.maya_midgard.midgard_send_messages": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_send_messages", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_send_messages", "fqn": ["maya_models", "maya_midgard", "midgard_send_messages"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_send_messages", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_send_messages", "created_at": 1741278783.8765068}, "source.maya_models.maya_midgard.midgard_set_ip_address_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_set_ip_address_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_set_ip_address_events", "fqn": ["maya_models", "maya_midgard", "midgard_set_ip_address_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_set_ip_address_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_set_ip_address_events", "created_at": 1741278783.8765771}, "source.maya_models.maya_midgard.midgard_set_mimir_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_set_mimir_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_set_mimir_events", "fqn": ["maya_models", "maya_midgard", "midgard_set_mimir_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_set_mimir_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_set_mimir_events", "created_at": 1741278783.8766458}, "source.maya_models.maya_midgard.midgard_set_node_keys_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_set_node_keys_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_set_node_keys_events", "fqn": ["maya_models", "maya_midgard", "midgard_set_node_keys_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_set_node_keys_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_set_node_keys_events", "created_at": 1741278783.876713}, "source.maya_models.maya_midgard.midgard_set_node_mimir_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_set_node_mimir_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_set_node_mimir_events", "fqn": ["maya_models", "maya_midgard", "midgard_set_node_mimir_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_set_node_mimir_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_set_node_mimir_events", "created_at": 1741278783.876779}, "source.maya_models.maya_midgard.midgard_set_version_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_set_version_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_set_version_events", "fqn": ["maya_models", "maya_midgard", "midgard_set_version_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_set_version_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_set_version_events", "created_at": 1741278783.8768451}, "source.maya_models.maya_midgard.midgard_slash_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_slash_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_slash_events", "fqn": ["maya_models", "maya_midgard", "midgard_slash_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_slash_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_slash_events", "created_at": 1741278783.876909}, "source.maya_models.maya_midgard.midgard_slash_liquidity_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_slash_liquidity_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_slash_liquidity_events", "fqn": ["maya_models", "maya_midgard", "midgard_slash_liquidity_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_slash_liquidity_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_slash_liquidity_events", "created_at": 1741278783.876976}, "source.maya_models.maya_midgard.midgard_slash_points_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_slash_points_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_slash_points_events", "fqn": ["maya_models", "maya_midgard", "midgard_slash_points_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_slash_points_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_slash_points_events", "created_at": 1741278783.8770401}, "source.maya_models.maya_midgard.midgard_stake_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_stake_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_stake_events", "fqn": ["maya_models", "maya_midgard", "midgard_stake_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_stake_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_stake_events", "created_at": 1741278783.877116}, "source.maya_models.maya_midgard.midgard_streaming_swap_details_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_streaming_swap_details_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_streaming_swap_details_events", "fqn": ["maya_models", "maya_midgard", "midgard_streaming_swap_details_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_streaming_swap_details_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_streaming_swap_details_events", "created_at": 1741278783.8771799}, "source.maya_models.maya_midgard.midgard_swap_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_swap_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_swap_events", "fqn": ["maya_models", "maya_midgard", "midgard_swap_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_swap_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_swap_events", "created_at": 1741278783.877242}, "source.maya_models.maya_midgard.midgard_transfer_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_transfer_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_transfer_events", "fqn": ["maya_models", "maya_midgard", "midgard_transfer_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_transfer_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_transfer_events", "created_at": 1741278783.877305}, "source.maya_models.maya_midgard.midgard_update_node_account_status_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_update_node_account_status_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_update_node_account_status_events", "fqn": ["maya_models", "maya_midgard", "midgard_update_node_account_status_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_update_node_account_status_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_update_node_account_status_events", "created_at": 1741278783.877368}, "source.maya_models.maya_midgard.midgard_validator_request_leave_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_validator_request_leave_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_validator_request_leave_events", "fqn": ["maya_models", "maya_midgard", "midgard_validator_request_leave_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_validator_request_leave_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_validator_request_leave_events", "created_at": 1741278783.877433}, "source.maya_models.maya_midgard.midgard_withdraw_events": {"database": "HEVO", "schema": "MAYA_MIDGARD_2", "name": "midgard_withdraw_events", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.maya_midgard.midgard_withdraw_events", "fqn": ["maya_models", "maya_midgard", "midgard_withdraw_events"], "source_name": "maya_midgard", "source_description": "", "loader": "", "identifier": "midgard_withdraw_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "HEVO.MAYA_MIDGARD_2.midgard_withdraw_events", "created_at": 1741278783.877506}, "source.maya_models.crosschain.address_tags": {"database": "crosschain", "schema": "core", "name": "address_tags", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.crosschain.address_tags", "fqn": ["maya_models", "crosschain", "address_tags"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "address_tags", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.core.address_tags", "created_at": 1741278783.877575}, "source.maya_models.crosschain.dim_dates": {"database": "crosschain", "schema": "core", "name": "dim_dates", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.crosschain.dim_dates", "fqn": ["maya_models", "crosschain", "dim_dates"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_dates", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.core.dim_dates", "created_at": 1741278783.8776371}, "source.maya_models.crosschain_silver.number_sequence": {"database": "crosschain", "schema": "silver", "name": "number_sequence", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.crosschain_silver.number_sequence", "fqn": ["maya_models", "crosschain_silver", "number_sequence"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "number_sequence", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.number_sequence", "created_at": 1741278783.877703}, "source.maya_models.crosschain_silver.complete_native_prices": {"database": "crosschain", "schema": "silver", "name": "complete_native_prices", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.crosschain_silver.complete_native_prices", "fqn": ["maya_models", "crosschain_silver", "complete_native_prices"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "complete_native_prices", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.complete_native_prices", "created_at": 1741278783.877768}, "source.maya_models.crosschain_silver.labels_combined": {"database": "crosschain", "schema": "silver", "name": "labels_combined", "resource_type": "source", "package_name": "maya_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.maya_models.crosschain_silver.labels_combined", "fqn": ["maya_models", "crosschain_silver", "labels_combined"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "labels_combined", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.labels_combined", "created_at": 1741278783.877832}, "source.livequery_base.crosschain.dim_date_hours": {"database": "crosschain_dev", "schema": "core", "name": "dim_date_hours", "resource_type": "source", "package_name": "livequery_base", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_base.crosschain.dim_date_hours", "fqn": ["livequery_base", "crosschain", "dim_date_hours"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_date_hours", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_date_hours", "created_at": 1741278783.877932}, "source.livequery_base.crosschain.dim_contracts": {"database": "crosschain_dev", "schema": "core", "name": "dim_contracts", "resource_type": "source", "package_name": "livequery_base", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_base.crosschain.dim_contracts", "fqn": ["livequery_base", "crosschain", "dim_contracts"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_contracts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_contracts", "created_at": 1741278783.87801}, "source.livequery_base.crosschain.dim_evm_event_abis": {"database": "crosschain_dev", "schema": "core", "name": "dim_evm_event_abis", "resource_type": "source", "package_name": "livequery_base", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_base.crosschain.dim_evm_event_abis", "fqn": ["livequery_base", "crosschain", "dim_evm_event_abis"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_evm_event_abis", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_evm_event_abis", "created_at": 1741278783.8780868}, "source.livequery_base.ethereum_core.fact_event_logs": {"database": "ethereum_dev", "schema": "core", "name": "fact_event_logs", "resource_type": "source", "package_name": "livequery_base", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_base.ethereum_core.fact_event_logs", "fqn": ["livequery_base", "ethereum_core", "fact_event_logs"], "source_name": "ethereum_core", "source_description": "", "loader": "", "identifier": "fact_event_logs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum_dev.core.fact_event_logs", "created_at": 1741278783.878158}, "source.livequery_base.ethereum_core.ez_decoded_event_logs": {"database": "ethereum_dev", "schema": "core", "name": "ez_decoded_event_logs", "resource_type": "source", "package_name": "livequery_base", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_base.ethereum_core.ez_decoded_event_logs", "fqn": ["livequery_base", "ethereum_core", "ez_decoded_event_logs"], "source_name": "ethereum_core", "source_description": "", "loader": "", "identifier": "ez_decoded_event_logs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum_dev.core.ez_decoded_event_logs", "created_at": 1741278783.87823}}, "macros": {"macro.maya_models.create_sps": {"name": "create_sps", "resource_type": "macro", "package_name": "maya_models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "unique_id": "macro.maya_models.create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if target.database == 'MAYA' %}\n        CREATE schema IF NOT EXISTS _internal;\n{{ sp_create_prod_clone('_internal') }};\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.maya_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.865162, "supported_languages": null}, "macro.maya_models.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "maya_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.maya_models.generate_schema_name", "macro_sql": "{% macro generate_schema_name(\n        custom_schema_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.8658612, "supported_languages": null}, "macro.maya_models.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "maya_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.maya_models.generate_alias_name", "macro_sql": "{% macro generate_alias_name(\n        custom_alias_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {% if split_name | length < 2 %}\n        {{ split_name [0] | trim }}\n    {% else %}\n        {{ split_name [1] | trim }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.86624, "supported_languages": null}, "macro.maya_models.generate_tmp_view_name": {"name": "generate_tmp_view_name", "resource_type": "macro", "package_name": "maya_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.maya_models.generate_tmp_view_name", "macro_sql": "{% macro generate_tmp_view_name(model_name) -%}\n    {% set node_name = model_name.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ target.database ~ '.' ~ split_name[0] ~ '.' ~ split_name [1] ~ '__dbt_tmp' | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.866582, "supported_languages": null}, "macro.maya_models.generate_view_name": {"name": "generate_view_name", "resource_type": "macro", "package_name": "maya_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.maya_models.generate_view_name", "macro_sql": "{% macro generate_view_name(model_name) -%}\n    {% set node_name = model_name.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ target.database ~ '.' ~ split_name[0] ~ '.' ~ split_name [1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.86686, "supported_languages": null}, "macro.maya_models.run_sp_create_prod_clone": {"name": "run_sp_create_prod_clone", "resource_type": "macro", "package_name": "maya_models", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "unique_id": "macro.maya_models.run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n    {% set clone_query %}\n    call maya._internal.create_prod_clone(\n        'maya',\n        'maya_dev',\n        'internal_dev'\n    );\n{% endset %}\n    {% do run_query(clone_query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.8670778, "supported_languages": null}, "macro.maya_models.create_udfs": {"name": "create_udfs", "resource_type": "macro", "package_name": "maya_models", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.maya_models.create_udfs", "macro_sql": "{% macro create_udfs() %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.8671649, "supported_languages": null}, "macro.maya_models.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "maya_models", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.maya_models.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n {% set new_json = {\"repo\":project_name, \"object\":this.table, \"profile\":target.profile_name, \"env\":target.name, \"existing_tag\":get_current_query_tag()  } %}\n{% set new_query_tag = tojson(new_json) | as_text %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.8679218, "supported_languages": null}, "macro.maya_models.sp_create_prod_clone": {"name": "sp_create_prod_clone", "resource_type": "macro", "package_name": "maya_models", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "unique_id": "macro.maya_models.sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `CREATE OR REPLACE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA IF EXISTS ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL SCHEMAS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_MAYA;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_MAYA;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_MAYA;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_MAYA;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_MAYA;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`})\n\n        var existing_tags = snowflake.execute({sqlText: `SHOW TAGS IN DATABASE ${DESTINATION_DB_NAME};`});\n        while (existing_tags.next()) {\n            var schema = existing_tags.getColumnValue(4);\n            var tag_name = existing_tags.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TAG ${DESTINATION_DB_NAME}.${schema}.${tag_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n\n    return true\n$$\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.868591, "supported_languages": null}, "macro.maya_models.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "maya_models", "path": "macros/dbt/get_tmp_relation_type.sql", "original_file_path": "macros/dbt/get_tmp_relation_type.sql", "unique_id": "macro.maya_models.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n    -- always table\n    {{ return('table') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.8687491, "supported_languages": null}, "macro.maya_models.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "maya_models", "path": "macros/dbt/get_merge.sql", "original_file_path": "macros/dbt/get_merge.sql", "unique_id": "macro.maya_models.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n    {% set merge_sql = fsc_utils.get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {{ return(merge_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.869548, "supported_languages": null}, "macro.maya_models.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "maya_models", "path": "macros/dbt/get_merge.sql", "original_file_path": "macros/dbt/get_merge.sql", "unique_id": "macro.maya_models.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n    {% set predicate_override = \"\" %}\n    -- get the min value of column\n    {% if incremental_predicates[0] == \"min_value_predicate\" %}\n        {% set min_column_name = incremental_predicates[1] %}\n        {% set query %}\n            select min({{ min_column_name }}) from {{ source }}\n        {% endset %}\n        {% set min_block = run_query(query).columns[0][0] %}\n\n        {% if min_block is not none %}\n            {% set predicate_override %}\n                round({{ target }}.{{ min_column_name }},-5) >= round({{ min_block }},-5)\n            {% endset %}\n        {% else %}\n            {% set predicate_override = \"1=1\" %}\n        {% endif %}\n    {% endif %}\n    {% set predicates = [predicate_override] + incremental_predicates[2:] if predicate_override else incremental_predicates %}\n    -- standard delete+insert from here\n    {% set merge_sql = dbt.get_delete_insert_merge_sql(target, source, unique_key, dest_columns, predicates) %}\n    {{ return(merge_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.870403, "supported_languages": null}, "macro.maya_models.sequence_distinct_gaps_dim_block_id": {"name": "sequence_distinct_gaps_dim_block_id", "resource_type": "macro", "package_name": "maya_models", "path": "macros/tests/sequence_distinct_gaps_dim_block_id.sql", "original_file_path": "macros/tests/sequence_distinct_gaps_dim_block_id.sql", "unique_id": "macro.maya_models.sequence_distinct_gaps_dim_block_id", "macro_sql": "{% macro sequence_distinct_gaps_dim_block_id(\n        table,\n        column\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }}\n        FROM\n            (\n                SELECT\n                    DISTINCT {{ column }}\n                FROM\n                    {{ table }} A\n                    JOIN {{ ref('core__dim_block') }}\n                    b\n                    ON A.dim_block_id = b.dim_block_id\n                WHERE\n                    A.dim_block_id <> '-1'\n                    AND b.block_timestamp :: DATE < CURRENT_DATE\n            )\n    )\nSELECT\n    {{ previous_column }},\n    {{ column }},\n    {{ column }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.871584, "supported_languages": null}, "macro.maya_models.sequence_gaps_buffered_look_back": {"name": "sequence_gaps_buffered_look_back", "resource_type": "macro", "package_name": "maya_models", "path": "macros/tests/sequence_gaps_buffered_look_back.sql", "original_file_path": "macros/tests/sequence_gaps_buffered_look_back.sql", "unique_id": "macro.maya_models.sequence_gaps_buffered_look_back", "macro_sql": "{% macro sequence_gaps_buffered_look_back(\n        table,\n        partition_by,\n        column,\n        delayed_column,\n        delayed_period\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }},\n            LAG(\n                {{ delayed_column }},\n                1\n            ) over (\n                {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ delayed_column }}\n        FROM\n            {{ table }}\n    )\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column }},\n    {{ column }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column }} - {{ previous_column }} <> 1\nAND \n    {{ delayed_column }} < (\n        SELECT\n            MAX(\n                {{ delayed_column }}\n            )\n        FROM\n            {{ this }}\n    ) - INTERVAL '{{ delayed_period }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.8732421, "supported_languages": null}, "macro.maya_models.sequence_gaps": {"name": "sequence_gaps", "resource_type": "macro", "package_name": "maya_models", "path": "macros/tests/sequence_gaps.sql", "original_file_path": "macros/tests/sequence_gaps.sql", "unique_id": "macro.maya_models.sequence_gaps", "macro_sql": "{% macro sequence_gaps(\n        table,\n        partition_by,\n        column\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }}\n        FROM\n            {{ table }}\n        WHERE\n            block_timestamp::date <= current_date - 1\n    )\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column }},\n    {{ column }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.874184, "supported_languages": null}, "macro.maya_models.test_negative_one": {"name": "test_negative_one", "resource_type": "macro", "package_name": "maya_models", "path": "macros/tests/negative_one.sql", "original_file_path": "macros/tests/negative_one.sql", "unique_id": "macro.maya_models.test_negative_one", "macro_sql": "{% test negative_one(\n    model,\n    column_name\n) %}\nSELECT\n    *\nFROM\n    {{ model }}\nWHERE\n    {{ column_name }} = '-1' {% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.874341, "supported_languages": null}, "macro.maya_models.test_compare_model_subset": {"name": "test_compare_model_subset", "resource_type": "macro", "package_name": "maya_models", "path": "macros/tests/compare_model_subset.sql", "original_file_path": "macros/tests/compare_model_subset.sql", "unique_id": "macro.maya_models.test_compare_model_subset", "macro_sql": "{% test compare_model_subset(model, compare_model, compare_columns, model_condition) %}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n    select {{compare_cols_csv}} from {{ model }}\n    {{ model_condition }}\n),\nb as (\n    select {{compare_cols_csv}} from {{ compare_model }}\n),\na_minus_b as (\n    select * from a\n    except\n    select * from b\n),\nb_minus_a as (\n    select * from b\n    except\n    select * from a\n),\nunioned as (\n    select 'in_actual_not_in_expected' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'in_expected_not_in_actual' as which_diff, b_minus_a.* from b_minus_a\n)\nselect * from unioned\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.874767, "supported_languages": null}, "macro.maya_models.sequence_distinct_gaps": {"name": "sequence_distinct_gaps", "resource_type": "macro", "package_name": "maya_models", "path": "macros/tests/sequence_distinct_gaps.sql", "original_file_path": "macros/tests/sequence_distinct_gaps.sql", "unique_id": "macro.maya_models.sequence_distinct_gaps", "macro_sql": "{% macro sequence_distinct_gaps(\n        table,\n        column\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }}\n        FROM (\n            SELECT DISTINCT {{ column }} FROM {{ table }}\n        )\n           \n    )\nSELECT\n    {{ previous_column }},\n    {{ column }},\n    {{ column }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.87556, "supported_languages": null}, "macro.maya_models.date_gaps": {"name": "date_gaps", "resource_type": "macro", "package_name": "maya_models", "path": "macros/tests/date_gaps.sql", "original_file_path": "macros/tests/date_gaps.sql", "unique_id": "macro.maya_models.date_gaps", "macro_sql": "{% macro date_gaps(\n        table,\n        partition_by,\n        column\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }}\n        FROM\n            {{ table }}\n    )\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column }},\n    DATEDIFF(\n        days,\n        {{ previous_column }},\n        {{ column }}\n    ) - 1 AS gap\nFROM\n    source\n    {% if varargs -%}\nLEFT JOIN (\n        {% for x in varargs %}\n            (\n            {{ dbt_utils.date_spine(\n                datepart = \"day\",\n                start_date = x.start_date,\n                end_date = x.end_date\n            ) }}\n            )\n            {{- \"UNION ALL\" if not loop.last -}}\n        {% endfor %}\n) exclude\n    ON source.day = exclude.date_day\n    {%- endif %}\nWHERE\n    DATEDIFF(\n        days,\n        {{ previous_column }},\n        {{ column }}\n    ) > 1 \n    {{ \"AND source.day != exclude.date_day\" if varargs }}\nORDER BY\n    gap DESC\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.8772779, "supported_languages": null}, "macro.maya_models.add_database_or_schema_tags": {"name": "add_database_or_schema_tags", "resource_type": "macro", "package_name": "maya_models", "path": "macros/tags/add_database_or_schema_tags.sql", "original_file_path": "macros/tags/add_database_or_schema_tags.sql", "unique_id": "macro.maya_models.add_database_or_schema_tags", "macro_sql": "{% macro add_database_or_schema_tags() %}\n    {{ set_database_tag_value(\n        'BLOCKCHAIN_NAME',\n        'MAYA'\n    ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.maya_models.set_database_tag_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.8774421, "supported_languages": null}, "macro.maya_models.apply_meta_as_tags": {"name": "apply_meta_as_tags", "resource_type": "macro", "package_name": "maya_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.maya_models.apply_meta_as_tags", "macro_sql": "{% macro apply_meta_as_tags(results) %}\n    {% if var(\"UPDATE_SNOWFLAKE_TAGS\") %}\n        {{ log('apply_meta_as_tags', info=False) }}\n        {{ log(results, info=False) }}\n        {% if execute %}\n\n            {%- set tags_by_schema = {} -%}\n            {% for res in results -%}\n                {% if res.node.meta.database_tags %}\n\n                    {%- set model_database = res.node.database -%}\n                    {%- set model_schema = res.node.schema -%}\n                    {%- set model_schema_full = model_database+'.'+model_schema -%}\n                    {%- set model_alias = res.node.alias -%}\n\n                    {% if model_schema_full not in tags_by_schema.keys() %}\n                        {{ log('need to fetch tags for schema '+model_schema_full, info=False) }}\n                        {%- call statement('main', fetch_result=True) -%}\n                            show tags in {{model_database}}.{{model_schema}}\n                        {%- endcall -%}\n                        {%- set _ = tags_by_schema.update({model_schema_full: load_result('main')['table'].columns.get('name').values()|list}) -%}\n                        {{ log('Added tags to cache', info=False) }}\n                    {% else %}\n                        {{ log('already have tag info for schema', info=False) }}\n                    {% endif %}\n\n                    {%- set current_tags_in_schema = tags_by_schema[model_schema_full] -%}\n                    {{ log('current_tags_in_schema:', info=False) }}\n                    {{ log(current_tags_in_schema, info=False) }}\n                    {{ log(\"========== Processing tags for \"+model_schema_full+\".\"+model_alias+\" ==========\", info=False) }}\n\n                    {% set line -%}\n                        node: {{ res.node.unique_id }}; status: {{ res.status }} (message: {{ res.message }})\n                        node full: {{ res.node}}\n                        meta: {{ res.node.meta}}\n                        materialized: {{ res.node.config.materialized }}\n                    {%- endset %}\n                    {{ log(line, info=False) }}\n\n                    {%- call statement('main', fetch_result=True) -%}\n                        select LEVEL,UPPER(TAG_NAME) as TAG_NAME,TAG_VALUE from table(information_schema.tag_references_all_columns('{{model_schema}}.{{model_alias}}', 'table'))\n                    {%- endcall -%}\n                    {%- set existing_tags_for_table = load_result('main')['data'] -%}\n                    {{ log('Existing tags for table:', info=False) }}\n                    {{ log(existing_tags_for_table, info=False) }}\n\n                    {{ log('--', info=False) }}\n                    {% for table_tag in res.node.meta.database_tags.table %}\n\n                        {{ create_tag_if_missing(current_tags_in_schema,table_tag|upper) }}\n                        {% set desired_tag_value = res.node.meta.database_tags.table[table_tag] %}\n\n                        {{set_table_tag_value_if_different(model_schema,model_alias,table_tag,desired_tag_value,existing_tags_for_table)}}\n                    {% endfor %}\n                    {{ log(\"========== Finished processing tags for \"+model_alias+\" ==========\", info=False) }}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.maya_models.create_tag_if_missing", "macro.maya_models.set_table_tag_value_if_different"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.888729, "supported_languages": null}, "macro.maya_models.create_tag_if_missing": {"name": "create_tag_if_missing", "resource_type": "macro", "package_name": "maya_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.maya_models.create_tag_if_missing", "macro_sql": "{% macro create_tag_if_missing(all_tag_names,table_tag) %}\n\t{% if table_tag not in all_tag_names %}\n\t\t{{ log('Creating missing tag '+table_tag, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            create tag if not exists silver.{{table_tag}}\n        {%- endcall -%}\n\t\t{{ log(load_result('main').data, info=False) }}\n\t{% else %}\n\t\t{{ log('Tag already exists: '+table_tag, info=False) }}\n\t{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.889222, "supported_languages": null}, "macro.maya_models.set_table_tag_value_if_different": {"name": "set_table_tag_value_if_different", "resource_type": "macro", "package_name": "maya_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.maya_models.set_table_tag_value_if_different", "macro_sql": "{% macro set_table_tag_value_if_different(model_schema,table_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at table level', info=False) }}\n    {%- set existing_tag_for_table = existing_tags|selectattr('0','equalto','TABLE')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for table:', info=False) }}\n    {{ log(existing_tag_for_table[0], info=False) }}\n    {% if existing_tag_for_table|length > 0 and existing_tag_for_table[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{model_schema}}.{{table_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.8900921, "supported_languages": null}, "macro.maya_models.set_column_tag_value_if_different": {"name": "set_column_tag_value_if_different", "resource_type": "macro", "package_name": "maya_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.maya_models.set_column_tag_value_if_different", "macro_sql": "{% macro set_column_tag_value_if_different(table_name,column_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at column level', info=False) }}\n    {%- set existing_tag_for_column = existing_tags|selectattr('0','equalto','COLUMN')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for column:', info=False) }}\n    {{ log(existing_tag_for_column[0], info=False) }}\n    {% if existing_tag_for_column|length > 0 and existing_tag_for_column[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{table_name}} modify column {{column_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.890959, "supported_languages": null}, "macro.maya_models.set_database_tag_value": {"name": "set_database_tag_value", "resource_type": "macro", "package_name": "maya_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.maya_models.set_database_tag_value", "macro_sql": "{% macro set_database_tag_value(tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter database {{target.database}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.89128, "supported_languages": null}, "macro.maya_models.set_schema_tag_value": {"name": "set_schema_tag_value", "resource_type": "macro", "package_name": "maya_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.maya_models.set_schema_tag_value", "macro_sql": "{% macro set_schema_tag_value(target_schema,tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter schema {{target.database}}.{{target_schema}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.891615, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.894624, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations": {"name": "snowflake__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations", "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.89494, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {"name": "snowflake__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        case\n            when is_dynamic = 'YES' and table_type = 'BASE TABLE' THEN 'DYNAMIC TABLE'\n            else table_type\n        end as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.895117, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {"name": "snowflake__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.895217, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {"name": "snowflake__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.895288, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {"name": "snowflake__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.895466, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {"name": "snowflake__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    upper(\"table_schema\") = upper('{{ relation.schema }}')\n                    and upper(\"table_name\") = upper('{{ relation.identifier }}')\n                )\n            {% elif relation.schema %}\n                (\n                    upper(\"table_schema\") = upper('{{ relation.schema }}')\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.8958561, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9050071, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.905236, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.905849, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9062982, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_paginated_relations_array": {"name": "snowflake__get_paginated_relations_array", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_paginated_relations_array", "macro_sql": "{% macro snowflake__get_paginated_relations_array(max_iter, max_results_per_iter, max_total_results, schema_relation, watermark) %}\n\n  {% set paginated_relations = [] %}\n\n  {% for _ in range(0, max_iter) %}\n\n      {%- set paginated_sql -%}\n         show terse objects in {{ schema_relation.database }}.{{ schema_relation.schema }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n      {%- endset -%}\n\n      {%- set paginated_result = run_query(paginated_sql) %}\n      {%- set paginated_n = (paginated_result | length) -%}\n\n      {#\n        terminating condition: if there are 0 records in the result we reached\n        the end exactly on the previous iteration\n      #}\n      {%- if paginated_n == 0 -%}\n        {%- break -%}\n      {%- endif -%}\n\n      {#\n        terminating condition: At some point the user needs to be reasonable with how\n        many objects are contained in their schemas. Since there was already\n        one iteration before attempting pagination, loop.index == max_iter means\n        the limit has been surpassed.\n      #}\n\n      {%- if loop.index == max_iter -%}\n        {%- set msg -%}\n           dbt will list a maximum of {{ max_total_results }} objects in schema {{ schema_relation.database }}.{{ schema_relation.schema }}.\n           Your schema exceeds this limit. Please contact support@getdbt.com for troubleshooting tips,\n           or review and reduce the number of objects contained.\n        {%- endset -%}\n\n        {% do exceptions.raise_compiler_error(msg) %}\n      {%- endif -%}\n\n      {%- do paginated_relations.append(paginated_result) -%}\n      {% set watermark.table_name = paginated_result.columns[1].values()[-1] %}\n\n      {#\n        terminating condition: paginated_n < max_results_per_iter means we reached the end\n      #}\n      {%- if paginated_n < max_results_per_iter -%}\n         {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n\n  {{ return(paginated_relations) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.907309, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10, max_results_per_iter=10000) %}\n\n  {%- set max_total_results = max_results_per_iter * max_iter -%}\n\n  {%- set sql -%}\n    show terse objects in {{ schema_relation.database }}.{{ schema_relation.schema }} limit {{ max_results_per_iter }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n\n  {%- set n = (result | length) -%}\n  {%- set watermark = namespace(table_name=result.columns[1].values()[-1]) -%}\n  {%- set paginated = namespace(result=[]) -%}\n\n  {% if n >= max_results_per_iter %}\n\n    {% set paginated.result = snowflake__get_paginated_relations_array(\n         max_iter,\n         max_results_per_iter,\n         max_total_results,\n         schema_relation,\n         watermark\n       )\n    %}\n\n  {% endif %}\n\n  {%- set all_results_array = [result] + paginated.result -%}\n  {%- set result = result.merge(all_results_array) -%}\n  {%- do return(result) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake.snowflake__get_paginated_relations_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9080791, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.90835, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9085598, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.908837, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation_type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.909385, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.909537, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9096708, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.910055, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9102101, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9106078, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation_type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation_type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9113228, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.911503, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.911701, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.911942, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9120371, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_relation_last_modified": {"name": "snowflake__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata.sql", "original_file_path": "macros/metadata.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified", "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.912601, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.912897, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.914113, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.914419, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.914664, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {"name": "snowflake__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql", "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.914847, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9167821, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.917032, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.917494, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9193642, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False, table_type=none) %}\n{#- The following logic is only for backwards-compatiblity with deprecated `temporary` parameter -#}\n{% if table_type is not none %}\n    {#- Just use the table_type as-is -#}\n{% elif temporary -%}\n    {#- Case 1 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {%- set table_type = \"temporary\" -%}\n{% else %}\n    {#- Case 2 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {#- Snowflake treats \"\" as meaning \"permanent\" -#}\n    {%- set table_type = \"\" -%}\n{%- endif %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.91979, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.919887, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.922061, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.924812, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.924957, "supported_languages": null}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.92526, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.928276, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_sql", "macro.dbt.get_replace_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.929342, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.929536, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.929932, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.930176, "supported_languages": null}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9303901, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.930633, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_sql": {"name": "snowflake__get_drop_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql", "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.930895, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_sql": {"name": "snowflake__get_replace_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql", "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.93123, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.931442, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_sql": {"name": "snowflake__get_create_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql", "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.931731, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_table_sql": {"name": "snowflake__get_drop_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_table_sql", "macro_sql": "{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.931849, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_table_sql": {"name": "snowflake__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql", "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9320152, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_table_sql": {"name": "snowflake__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql", "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9321668, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- set transient = config.get('transient', default=true) -%}\n\n  {% if temporary -%}\n    {%- set table_type = \"temporary\" -%}\n  {%- elif transient -%}\n    {%- set table_type = \"transient\" -%}\n  {%- else -%}\n    {%- set table_type = \"\" -%}\n  {%- endif %}\n\n  {%- if language == 'sql' -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {{ table_type }} table {{ relation }}\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, table_type=table_type) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9355469, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_view_sql": {"name": "snowflake__get_drop_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql", "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9356759, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_view_sql": {"name": "snowflake__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql", "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.935824, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_view_sql": {"name": "snowflake__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql", "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9359732, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9374762, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9376059, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_view": {"name": "snowflake__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.938517, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/drop.sql", "original_file_path": "macros/relations/dynamic_table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.938643, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {"name": "snowflake__get_replace_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) %}\n\n    create or replace dynamic table {{ relation }}\n        target_lag = '{{ config.get(\"target_lag\") }}'\n        warehouse = {{ config.get(\"snowflake_warehouse\") }}\n        as (\n            {{ sql }}\n        )\n    ;\n    {{ snowflake__refresh_dynamic_table(relation) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__refresh_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9389608, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/describe.sql", "original_file_path": "macros/relations/dynamic_table/describe.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n    {%- set _dynamic_table_sql -%}\n        show dynamic tables\n            like '{{ relation.identifier }}'\n            in schema {{ relation.database }}.{{ relation.schema }}\n        ;\n        select\n            \"name\",\n            \"schema_name\",\n            \"database_name\",\n            \"text\",\n            \"target_lag\",\n            \"warehouse\"\n        from table(result_scan(last_query_id()))\n    {%- endset %}\n    {% set _dynamic_table = run_query(_dynamic_table_sql) %}\n\n    {% do return({'dynamic_table': _dynamic_table}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.939421, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/refresh.sql", "original_file_path": "macros/relations/dynamic_table/refresh.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.939593, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/alter.sql", "original_file_path": "macros/relations/dynamic_table/alter.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9404852, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n\n    create dynamic table {{ relation }}\n        target_lag = '{{ config.get(\"target_lag\") }}'\n        warehouse = {{ config.get(\"snowflake_warehouse\") }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.940756, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.94101, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.941161, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.941252, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9413388, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.941449, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.941608, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.941804, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    {% if type|upper == \"GEOMETRY\" -%}\n        try_to_geometry({{field}})\n    {% elif type|upper == \"GEOGRAPHY\" -%}\n        try_to_geography({{field}})\n    {% elif type|upper != \"VARIANT\" -%}\n        {#-- Snowflake try_cast does not support casting to variant, and expects the field as a string --#}\n        {% set field_as_string =  dbt.string_literal(field) if field is number else field %}\n        try_cast({{field_as_string}} as {{type}})\n    {% else -%}\n        {{ adapter.dispatch('cast', 'dbt')(field, type) }}\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.cast", "macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.942452, "supported_languages": null}, "macro.dbt_snowflake.snowflake__cast": {"name": "snowflake__cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__cast", "macro_sql": "{% macro snowflake__cast(field, type) %}\n    {% if (type|upper == \"GEOGRAPHY\") -%}\n        to_geography({{field}})\n    {% elif (type|upper == \"GEOMETRY\") -%}\n        to_geometry({{field}})\n    {% else -%}\n        cast({{field}} as {{type}})\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9428039, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9429219, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9430652, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.943988, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.944153, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.944279, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.944396, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.944514, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.944841, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.945087, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9453351, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.945697, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.945944, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9490209, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.949161, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.949344, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.949939, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.95008, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.950224, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9513679, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.952481, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9559171, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.956161, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.956301, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.956376, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.956497, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.956595, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.956764, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.957491, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.957654, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9578629, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9582112, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.963291, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.966586, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.967606, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.96787, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9680488, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.968574, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.968908, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.969228, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.970763, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.975229, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.97558, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.975797, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9769769, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.977181, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.977739, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.980164, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.982668, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.984134, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9846, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.985155, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9853618, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.985964, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.991508, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.992904, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.993133, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.993943, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.994169, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.994702, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.995224, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.995994, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9961941, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.996351, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.996597, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.996759, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.997014, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.997323, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.99758, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.9977448, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.997874, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278779.998115, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.002787, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.007786, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.008868, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.009967, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.010804, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.011033, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0111308, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.011383, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0115268, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.014674, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0178702, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.023231, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0241659, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.024401, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.024949, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.025202, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.025381, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.02553, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0256362, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0257769, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.025884, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.026295, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.026454, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0275369, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.028105, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.028478, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.028981, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.029227, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.029483, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0298932, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.030133, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.030795, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.03114, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.031302, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0314748, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.031648, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.032374, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.03345, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0337842, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.034011, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.034241, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.034422, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.034699, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.034873, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.035497, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.035862, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.036038, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.036287, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.036586, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.036814, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.037218, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.037591, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.037979, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0381792, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.038409, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.038569, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.038835, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.039037, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.039296, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0394099, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.039649, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0397692, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0402932, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0404491, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.040687, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.040813, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.041046, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.041167, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.04209, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0421948, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.042644, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.042793, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0429099, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.04403, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.044352, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0446389, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.044852, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.044953, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0451798, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.045312, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.045544, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.045665, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.046413, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.046568, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.046924, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.047488, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.047991, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0482008, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.048366, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.048629, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.048739, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0495281, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.049655, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.050742, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.050909, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.051112, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.051353, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.05148, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.051851, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.051991, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.052147, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.052531, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.052853, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.053111, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.053323, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.053973, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.055285, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0558562, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.056118, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.057759, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.05894, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0595891, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.059791, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.060003, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.060073, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0607228, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.061229, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.061429, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0617542, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.062046, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.062284, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.062562, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0627022, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.062909, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.063013, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.063744, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.064171, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.064373, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.064835, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0650702, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.065165, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.06546, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0656052, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.065801, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.065866, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.066095, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.066224, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.066475, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0665941, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0671391, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.067473, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.067762, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0679018, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0681422, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.068266, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.068489, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.06862, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0689, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.069036, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.069271, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.06938, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.069588, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.069682, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0699258, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.070051, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.070264, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0703518, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.071139, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.071264, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.071403, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.071533, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.071668, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0717921, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.071934, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.072099, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0722408, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.072442, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.072581, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.072704, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.072835, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0729542, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.073191, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.073302, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.073508, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.073594, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.073882, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.074107, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.074238, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0747, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0748448, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0750349, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0752661, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.075375, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0756931, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.075899, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.076143, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.076322, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0766442, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0767949, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.076926, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0770738, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.077497, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.077625, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.077748, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.077844, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.077984, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0780532, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0781922, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0783339, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.079078, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0791948, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0793269, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.079654, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0800471, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.080172, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.080302, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.080406, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.082133, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0822778, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.082464, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.082711, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.082912, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0831842, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.08334, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.083491, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0837, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.08417, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0843709, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.084492, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.084856, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0851982, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.08544, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.085691, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.087222, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.087322, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.087467, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.087567, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.087856, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.088012, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.088117, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0883079, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.088484, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.08868, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.088851, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0890398, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.089598, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.089764, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.089969, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0901608, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.09118, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.09153, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.091695, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ compiled_code }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.091862, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.092463, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.092604, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0927749, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.092913, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0931342, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.093529, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.09647, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.096684, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.096852, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.097064, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.097216, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0973492, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.097502, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.097715, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.09795, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.098201, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.09836, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.098494, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.098645, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.098778, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.098915, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.099046, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.0992188, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.099364, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.101353, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1014872, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.101749, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.101936, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1021068, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1022599, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.103318, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.103613, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.103768, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.104054, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.104246, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1047869, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.105006, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1056619, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1086879, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1091452, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.110073, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1102562, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.110338, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.11175, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.111885, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.112555, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1129, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.113376, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.113844, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.113909, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.114364, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1145742, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1148338, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.115083, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.115394, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1158001, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.116204, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.116748, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1170208, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.117292, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1182358, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.119076, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.119824, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.120773, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.121336, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1216252, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1222541, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1229389, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.123326, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1237068, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.124224, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.12463, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.125094, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1254232, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1258109, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.126192, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.126726, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.127258, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.127778, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1280699, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.12841, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.128769, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.129326, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.129992, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.130773, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.131522, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.13214, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.132868, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1333098, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.133557, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.136405, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1377192, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.137953, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.138089, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.138453, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.138688, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.138848, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1390662, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.139207, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.139723, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.14044, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.14104, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1415381, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.141732, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1420412, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.14231, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.142598, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.143185, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.143944, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.144684, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.14502, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.145173, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.14559, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.146165, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1468632, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.147207, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.147446, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.148538, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.14976, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.150941, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.152236, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1524868, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1526, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.155461, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.158319, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.158584, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.158794, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.159453, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1596391, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.159807, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1599638, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.160102, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.160251, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.160577, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1607838, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1611211, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.161566, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.161872, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.162148, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1636312, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.163933, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.164696, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1651032, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.166085, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1673112, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1682181, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.168909, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.169315, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.169914, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.171205, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1715882, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.171965, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.172124, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.172457, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.17294, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1733341, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1738722, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.174199, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.174321, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1744351, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1748831, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.175545, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1764941, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.176726, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.177195, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.177858, "supported_languages": null}, "macro.fsc_utils.create_streamline_udfs": {"name": "create_streamline_udfs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/create_streamline_udfs.sql", "original_file_path": "macros/create_streamline_udfs.sql", "unique_id": "macro.fsc_utils.create_streamline_udfs", "macro_sql": "{% macro create_streamline_udfs() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% do run_query(\"CREATE SCHEMA IF NOT EXISTS streamline\") %}\n        \n        {{ create_udf_bulk_rest_api_v2() }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.fsc_utils.create_udf_bulk_rest_api_v2"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.178257, "supported_languages": null}, "macro.fsc_utils.create_evm_streamline_udfs": {"name": "create_evm_streamline_udfs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/create_streamline_udfs.sql", "original_file_path": "macros/create_streamline_udfs.sql", "unique_id": "macro.fsc_utils.create_evm_streamline_udfs", "macro_sql": "{% macro create_evm_streamline_udfs() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% do run_query(\"CREATE SCHEMA IF NOT EXISTS streamline\") %}\n        \n        {{ create_udf_bulk_rest_api_v2() }}\n        {{ create_udf_bulk_decode_logs() }}\n        {{ create_udf_bulk_decode_traces() }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.fsc_utils.create_udf_bulk_rest_api_v2", "macro.fsc_utils.create_udf_bulk_decode_logs", "macro.fsc_utils.create_udf_bulk_decode_traces"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.178496, "supported_languages": null}, "macro.fsc_utils.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.fsc_utils.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.178829, "supported_languages": null}, "macro.fsc_utils.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.fsc_utils.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.179063, "supported_languages": null}, "macro.fsc_utils.create_gha_tasks": {"name": "create_gha_tasks", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.create_gha_tasks", "macro_sql": "{% macro create_gha_tasks() %}\n    {% set query %}\nSELECT\n    task_name,\n    workflow_name,\n    workflow_schedule\nFROM\n    {{ ref('github_actions__tasks') }}\n\n    {% endset %}\n    {% set results = run_query(query) %}\n    {% if execute and results is not none %}\n        {% set results_list = results.rows %}\n    {% else %}\n        {% set results_list = [] %}\n    {% endif %}\n\n    {% set prod_db = target.database.lower().replace(\n        '_dev',\n        ''\n    ) %}\n    {% for result in results_list %}\n        {% set task_name = result [0] %}\n        {% set workflow_name = result [1] %}\n        {% set workflow_schedule = result [2] %}\n        {% set sql %}\n        EXECUTE IMMEDIATE 'CREATE OR REPLACE TASK github_actions.{{ task_name }} WAREHOUSE = DBT_CLOUD SCHEDULE = \\'USING CRON {{ workflow_schedule }} UTC\\' COMMENT = \\'Task to trigger {{ workflow_name }}.yml workflow according to {{ workflow_schedule }}\\' AS DECLARE rs resultset; output string; BEGIN rs := (SELECT github_actions.workflow_dispatches(\\'FlipsideCrypto\\', \\'{{ prod_db }}-models\\', \\'{{ workflow_name }}.yml\\', NULL):status_code::int AS status_code); SELECT LISTAGG($1, \\';\\') INTO :output FROM TABLE(result_scan(LAST_QUERY_ID())) LIMIT 1; CALL SYSTEM$SET_RETURN_VALUE(:output); END;' {% endset %}\n        {% do run_query(sql) %}\n        {% if var(\"START_GHA_TASKS\") %}\n            {% if target.database.lower() == prod_db %}\n                {% set sql %}\n                ALTER task github_actions.{{ task_name }}\n                resume;\n{% endset %}\n                {% do run_query(sql) %}\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.185554, "supported_languages": null}, "macro.fsc_utils.gha_tasks_view": {"name": "gha_tasks_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_tasks_view", "macro_sql": "{% macro gha_tasks_view() %}\nSELECT\n    workflow_name,\n    concat_ws(\n        '_',\n        'TRIGGER',\n        UPPER(workflow_name)\n    ) AS task_name,\n    workflow_schedule\nFROM\n    {{ source(\n        'github_actions',\n        'workflows'\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1856902, "supported_languages": null}, "macro.fsc_utils.gha_task_history_view": {"name": "gha_task_history_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_history_view", "macro_sql": "{% macro gha_task_history_view() %}\n    {% set query %}\nSELECT\n    DISTINCT task_name\nFROM\n    {{ ref('github_actions__tasks') }}\n\n    {% endset %}\n    {% set results = run_query(query) %}\n    {% if execute and results is not none %}\n        {% set results_list = results.rows %}\n    {% else %}\n        {% set results_list = [] %}\n    {% endif %}\n\n    WITH task_history_data AS (\n        SELECT\n            *\n        FROM\n            ({% for result in results_list %}\n            SELECT\n                NAME AS task_name, completed_time, return_value, state, database_name, schema_name, scheduled_time, query_start_time\n            FROM\n                TABLE(information_schema.task_history(scheduled_time_range_start => DATEADD('hour', -24, CURRENT_TIMESTAMP()), task_name => '{{ result[0]}}')) {% if not loop.last %}\n                UNION ALL\n                {% endif %}\n            {% endfor %}) AS subquery\n        WHERE\n            database_name = '{{ target.database }}'\n            AND schema_name = 'GITHUB_ACTIONS')\n        SELECT\n            *\n        FROM\n            task_history_data\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.186204, "supported_languages": null}, "macro.fsc_utils.gha_task_schedule_view": {"name": "gha_task_schedule_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_schedule_view", "macro_sql": "{% macro gha_task_schedule_view() %}\n    WITH base AS (\n        SELECT\n            w.workflow_name AS workflow_name,\n            w.workflow_schedule AS workflow_schedule,\n            w.task_name AS task_name,\n            t.timestamp AS scheduled_time\n        FROM\n            {{ ref('github_actions__tasks') }} AS w\n            CROSS JOIN TABLE(\n                utils.udf_cron_to_prior_timestamps(\n                    w.workflow_name,\n                    w.workflow_schedule\n                )\n            ) AS t\n    )\nSELECT\n    task_name,\n    workflow_name,\n    workflow_schedule,\n    scheduled_time\nFROM\n    base\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.18634, "supported_languages": null}, "macro.fsc_utils.gha_task_performance_view": {"name": "gha_task_performance_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_performance_view", "macro_sql": "{% macro gha_task_performance_view() %}\nSELECT\n    s.task_name,\n    s.workflow_name,\n    s.scheduled_time,\n    h.return_value\nFROM\n    {{ ref('github_actions__task_schedule') }}\n    s\n    LEFT JOIN {{ ref('github_actions__task_history') }}\n    h\n    ON s.task_name = h.task_name\n    AND TO_TIMESTAMP_NTZ(\n        s.scheduled_time\n    ) BETWEEN TO_TIMESTAMP_NTZ(DATEADD(MINUTE, -1, h.scheduled_time))\n    AND TO_TIMESTAMP_NTZ(DATEADD(MINUTE, 1, h.scheduled_time))\n    AND TRY_TO_NUMBER(\n        h.return_value\n    ) BETWEEN 200\n    AND 299\n    AND h.state = 'SUCCEEDED'\nORDER BY\n    task_name,\n    scheduled_time\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.186507, "supported_languages": null}, "macro.fsc_utils.gha_task_current_status_view": {"name": "gha_task_current_status_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_current_status_view", "macro_sql": "{% macro gha_task_current_status_view() %}\n    WITH base AS (\n        SELECT\n            task_name,\n            workflow_name,\n            scheduled_time,\n            return_value,\n            return_value IS NOT NULL AS was_successful\n        FROM\n            {{ ref('github_actions__task_performance') }}\n            qualify ROW_NUMBER() over (\n                PARTITION BY task_name\n                ORDER BY\n                    scheduled_time DESC\n            ) <= 2\n    )\nSELECT\n    task_name,\n    workflow_name,\n    MAX(scheduled_time) AS recent_scheduled_time,\n    MIN(scheduled_time) AS prior_scheduled_time,\n    SUM(IFF(return_value = 204, 1, 0)) AS successes,\n    successes > 0 AS pipeline_active\nFROM\n    base\nGROUP BY\n    task_name,\n    workflow_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.186644, "supported_languages": null}, "macro.fsc_utils.alter_gha_task": {"name": "alter_gha_task", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.alter_gha_task", "macro_sql": "{% macro alter_gha_task(\n        task_name,\n        task_action\n    ) %}\n    {% set sql %}\n    EXECUTE IMMEDIATE 'ALTER TASK IF EXISTS github_actions.{{ task_name }} {{ task_action }};' {% endset %}\n    {% do run_query(sql) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1868339, "supported_languages": null}, "macro.fsc_utils.create_udfs": {"name": "create_udfs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.fsc_utils.create_udfs", "macro_sql": "{% macro create_udfs(drop_=False,schema=\"utils\") %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% set name %}\n        {{- fsc_utils.udf_configs(schema) -}}\n        {% endset %}\n        {%  set udfs = fromyaml(name) %}\n        {% set sql %}\n        CREATE schema if NOT EXISTS {{ schema }};\n        {%- for udf in udfs -%}\n        {{- fsc_utils.create_or_drop_function_from_config(udf, drop_=drop_) -}}\n        {% endfor %}\n        {% endset %}\n        {% do run_query(sql) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.udf_configs", "macro.fsc_utils.create_or_drop_function_from_config", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.187555, "supported_languages": null}, "macro.fsc_utils.get_ancestors": {"name": "get_ancestors", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.get_ancestors", "macro_sql": "{%- macro get_ancestors(node, include_depth=false, exclude_source=false) -%}\n{#\n    Return a list of ancestors for a node in a DAG.\n #}\n    {%- for dep in node.depends_on.nodes | unique | list  recursive %}\n        {% if dep.startswith(\"model.\") and \"bronze__\" not in dep %}\n            \"{{- loop.depth0 ~ '-'if include_depth else '' }}{{node.config.materialized }}-{{ dep -}}\",\n            {{- loop(graph.nodes[dep].depends_on.nodes) -}}\n        {% elif not exclude_source %}\n            \"{{- loop.depth0 ~ '-'if include_depth else '' }}{{node.config.materialized }}-{{ dep -}}\",\n        {%- endif -%}\n    {%- endfor %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.190423, "supported_languages": null}, "macro.fsc_utils.get_view_ddl": {"name": "get_view_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.get_view_ddl", "macro_sql": "{% macro get_view_ddl() %}\n{#\n    Return a dictionary of view names and their DDL statements.\n    The DDL statements are escaped to be used in a Snowflake query.\n    The dictionary is converted to JSON to be used in a dbt macro..\n #}\n    {% if execute %}\n        {% set query %}\n            SELECT\n            CONCAT_WS('.', TABLE_SCHEMA, TABLE_NAME) as VIEW_NAME,\n            VIEW_DEFINITION\n            FROM {{target.database}}.INFORMATION_SCHEMA.VIEWS\n            WHERE TABLE_SCHEMA NOT IN ('INFORMATION_SCHEMA', 'STREAMLINE')\n            AND TABLE_SCHEMA NOT LIKE 'TEST_%'\n        {%- endset -%}\n        {%- set results = run_query(query) -%}\n        {% set ddl = {} %}\n        {% for key, value in results.rows %}\n          {%- do ddl.update({key: value|replace(\"$$\", \"\\$\\$\")}) -%}\n        {%- endfor -%}\n        {{- tojson(ddl) -}}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.190901, "supported_languages": null}, "macro.fsc_utils.replace_database_references": {"name": "replace_database_references", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.replace_database_references", "macro_sql": "{% macro replace_database_references(references_to_replace, ddl) %}\n{#\n    Return the DDL statement for a view with the references replaced.\n    All items in references_to_replace are replaced with __NEW__,\n    while all remaining references to the database are replaced with __SOURCE__.\n\n    references_to_replace: a list of references to replace with __NEW__\n    ddl: the DDL statement to be replaced\n\n#}\n    {% set re = modules.re %}\n    {% set outer = namespace(replaced=ddl) %}\n    {% for key in references_to_replace %}\n        {%- set original = re.compile(\"\\\\b\" ~ target.database ~ \".\" ~ key ~ \"\\\\b\", re.IGNORECASE) -%}\n        {%- set replacement  =  \"__NEW__\" ~ \".\" ~ key -%}\n        {% set outer.replaced = original.sub(replacement, outer.replaced) %}\n    {%- endfor -%}\n    {%- set original = re.compile(\"\\\\b\" ~ target.database ~ \".\" ~ \"\\\\b\", re.IGNORECASE) -%}\n    {% set outer.replaced = original.sub(\"__SOURCE__.\", outer.replaced) %}\n    {{- outer.replaced -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.191565, "supported_languages": null}, "macro.fsc_utils.generate_view_ddl": {"name": "generate_view_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_view_ddl", "macro_sql": "{% macro generate_view_ddl(dag, schema) %}\n{#\n    Return a list of DDL statements for views in a DAG.\n\n    dag: a DAG of views\n    schema: schemas to create schema DDL for\n #}\n    {%- set ddl =  fromjson(fsc_utils.get_view_ddl())  -%}\n    {%- set created = {} -%}\n    {%- set final_text = [] -%}\n    {%- for view, deps in dag.items() -%}\n        {%- for d in deps -%}\n            {%- set table_name = d.split(\".\")[-1].replace(\"__\", \".\").upper() -%}\n            {%- if ddl.get(table_name) and table_name not in created -%}\n                {%- set replaced = fsc_utils.replace_database_references(ddl.keys(), ddl[table_name]) -%}\n                {%- do final_text.append(replaced) -%}\n                {%- do created.update({table_name:true}) -%}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endfor -%}\n    {%- set schema_ddl = [] -%}\n    {%- for s in schema -%}\n        {%- do schema_ddl.append(\"CREATE SCHEMA IF NOT EXISTS __NEW__.\" ~ s ~ \";\") -%}\n    {%- endfor -%}\n    {{- toyaml(schema_ddl + final_text) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.get_view_ddl", "macro.fsc_utils.replace_database_references"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.192449, "supported_languages": null}, "macro.fsc_utils.generate_dag_and_schemas": {"name": "generate_dag_and_schemas", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_dag_and_schemas", "macro_sql": "{% macro generate_dag_and_schemas(node_paths, materializations) %}\n{#\n    Return a DAG of views and a list of schemas to create.\n\n    node_paths: a list of node paths to include in the DAG\n    materializations: a list of materializations to include in the DAG\n #}\n    {%- set dag = {} -%}\n    {%- set schema = [] -%}\n    {%- for key, value in graph.nodes.items() -%}\n        {%\n        if value.refs\n        and set(value.fqn).intersection(node_paths)\n        and value.config.materialized in materializations\n        and value.config.enabled\n        and not value.sources\n        and not key.endswith(\"_create_gold\")\n        -%}\n        {%- set name = value.schema + \".\" + value.alias -%}\n        {%- set _result = fromyaml(\"[\" ~ fsc_utils.get_ancestors(value, exclude_source=true)[:-1] ~ \"]\") -%}\n            {% if _result -%}\n                {%- do _result.insert(0, key) -%}\n                {%- do dag.update({name.upper() : _result | reverse|list})  -%}\n                {% for d in _result -%}\n                    {%- if d.split(\".\")[-1].split(\"__\")[0] not in schema -%}\n                        {%- do schema.append(d.split(\".\")[-1].split(\"__\")[0]) -%}\n                    {%- endif -%}\n                {%- endfor -%}\n            {%- else -%}\n                {%- do dag.update({name.upper() : [key] }) -%}\n                {%- if value.schema not in schema -%}\n                    {%- do schema.append(value.schema) -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {%- set final = {\"dag\": dag, \"schema\": schema} -%}\n    {{- tojson(final) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.get_ancestors"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.193891, "supported_languages": null}, "macro.fsc_utils.generate_table_views_ddl": {"name": "generate_table_views_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_table_views_ddl", "macro_sql": "{% macro generate_table_views_ddl(tables, schema) %}\n{#\n    Return a list of DDL statements for views of tables from a list.\n\n    tables: a list of tables to create views for\n    schema: schemas to create schema DDL for\n #}\n    {%- set schema_ddl = [] -%}\n    {%- set view_ddl = [] -%}\n    {% for s in schema %}\n        {%- do schema_ddl.append(\"CREATE SCHEMA IF NOT EXISTS __NEW__.\" ~ s ~ \";\") -%}\n    {%- endfor -%}\n    {% for table in tables %}\n        {%- do view_ddl.append(\"CREATE OR REPLACE VIEW __NEW__.\" ~ table ~ \" copy grants AS SELECT * FROM \" ~ \"__SOURCE__.\" ~ table ~\";\") -%}\n    {%- endfor -%}\n    {{- toyaml(schema_ddl + view_ddl) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.194329, "supported_languages": null}, "macro.fsc_utils.generate_datashare_ddl": {"name": "generate_datashare_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_datashare_ddl", "macro_sql": "{% macro generate_datashare_ddl() %}\n{#\n    generate DDL for datashare\n\n    Return: DDL for datashare\n #}\n    {%- set gold_views = fromjson(fsc_utils.generate_dag_and_schemas([\"gold\"], [\"view\"])) -%}\n    {%- set gold_views_ddl = fromyaml(fsc_utils.generate_view_ddl(gold_views[\"dag\"], gold_views[\"schema\"])) -%}\n    {%- set gold_tables = fromjson(fsc_utils.generate_dag_and_schemas([\"gold\"], [\"incremental\", \"table\"])) -%}\n    {%- set gold_tables_ddl = fromyaml(fsc_utils.generate_table_views_ddl(gold_tables[\"dag\"].keys(), gold_tables[\"schema\"])) -%}\n    {%- set combined_ddl = gold_views_ddl + gold_tables_ddl -%}\n    {%- do combined_ddl.insert(0, \"CREATE DATABASE IF NOT EXISTS __NEW__;\") -%}\n    {{- \"BEGIN\\n\" ~ (combined_ddl | join(\"\\n\")) ~ \"\\nEND\" -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.generate_dag_and_schemas", "macro.fsc_utils.generate_view_ddl", "macro.fsc_utils.generate_table_views_ddl"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.195002, "supported_languages": null}, "macro.fsc_utils.generate_datashare_udf_ddl": {"name": "generate_datashare_udf_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_datashare_udf_ddl", "macro_sql": "{% macro generate_datashare_udf_ddl() %}\n{#\n    generate UDF DDL for datashare\n\n    Return: UDF DDL for datashare\n #}\n    {%- set schema = \"UTILS\" -%}\n    {%- set udfs = fromyaml(fsc_utils.udf_configs(schema)) -%}\n    {%- set combined_ddl = [] -%}\n    {%- for udf in udfs -%}\n        {% set name_ = udf [\"name\"] %}\n        {% set signature = udf [\"signature\"] %}\n        {% set return_type = udf [\"return_type\"] %}\n        {% set sql_ = udf [\"sql\"] %}\n        {% set options = udf [\"options\"] %}\n        {% set api_integration = udf [\"api_integration\"] %}\n        {% set func_type = udf [\"func_type\"] %}\n        {% set exclude_from_datashare = udf.get(\"exclude_from_datashare\",False) %}\n        {% if not exclude_from_datashare %}\n            {%- set udf_ddl = fsc_utils.create_sql_function(\n                name_ = name_,\n                signature = signature,\n                return_type = return_type,\n                sql_ = sql_,\n                options = options,\n                api_integration = api_integration,\n                func_type = func_type\n            ).replace(\"\\\\\",\"\\\\\\\\\").replace(\"'\",\"\\\\'\") -%}\n            {%- do combined_ddl.append(udf_ddl) -%}       \n        {% endif %} \n    {% endfor %}\n    {%- do combined_ddl.insert(0, \"CREATE DATABASE IF NOT EXISTS __NEW__;\") -%}\n    {%- do combined_ddl.insert(1, \"USE DATABASE __NEW__;\") -%}\n    {%- do combined_ddl.insert(2, \"CREATE SCHEMA IF NOT EXISTS \"~schema~\";\") -%}\n    {{- \"'BEGIN','\" ~ (combined_ddl | join(\"','\")) ~ \"','END'\" -}}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fsc_utils.udf_configs", "macro.fsc_utils.create_sql_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1962082, "supported_languages": null}, "macro.fsc_utils.get_query_tag": {"name": "get_query_tag", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.fsc_utils.get_query_tag", "macro_sql": "{% macro get_query_tag() %}\n    {# Get the full path of the model #}\n    {% set model_path = model.path | string %}\n    {% set folder_path = '/'.join(model_path.split('/')[:-1]) %}\n    \n    {# Get core folders from vars #}\n    {% set core_folders = var('core_folders') %}\n    \n    {# Initialize is_core and check each path pattern #}\n    {% set ns = namespace(is_core=false) %}\n    \n    {% for folder in core_folders %}\n        {% if folder in folder_path %}\n            {% set ns.is_core = true %}\n        {% endif %}\n    {% endfor %}\n    \n    {# Build the JSON query tag #}\n    {% set tag_dict = {\n        \"project\": project_name,\n        \"model\": model.name,\n        \"model_type\": \"core\" if ns.is_core else \"non_core\",\n        \"invocation_id\": invocation_id,\n        \"dbt_tags\": config.get('tags', [])\n    } %}\n    \n    {% set query_tag = tojson(tag_dict) %}\n    \n    {# Return the properly escaped string #}\n    {{ return(\"'\" ~ query_tag ~ \"'\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.197261, "supported_languages": null}, "macro.fsc_utils.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.fsc_utils.set_query_tag", "macro_sql": "{% macro set_query_tag() %}\n    {% set tag = fsc_utils.get_query_tag() %}\n    {% do run_query(\"alter session set query_tag = \" ~ tag) %}\n    {{ return(\"\") }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.get_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.1974678, "supported_languages": null}, "macro.fsc_utils.dynamic_range_predicate": {"name": "dynamic_range_predicate", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/dynamic_range_predicate.sql", "original_file_path": "macros/dynamic_range_predicate.sql", "unique_id": "macro.fsc_utils.dynamic_range_predicate", "macro_sql": "{% macro dynamic_range_predicate(source, predicate_column, output_alias=\"\") -%}\n    {% set supported_data_types = [\"INTEGER\",\"DATE\"] %}\n    {% set predicate_column_data_type_query %}\n        SELECT typeof({{predicate_column}}::variant)\n        FROM {{ source }}\n        WHERE {{predicate_column}} IS NOT NULL\n        LIMIT 1;\n    {% endset %}\n    {% set predicate_column_data_type_result = run_query(predicate_column_data_type_query) %}\n    {% if predicate_column_data_type_result.rows|length == 0 %}\n        {{ return('1=1') }}\n    {% endif %}\n    {% set predicate_column_data_type = predicate_column_data_type_result.columns[0].values()[0] %}\n    \n\n    {% if predicate_column_data_type not in supported_data_types %}\n        {{ exceptions.raise_compiler_error(\"Data type of \"~ predicate_column_data_type ~\" is not supported, use one of \"~ supported_data_types ~\" column instead\") }}\n    {% endif %}\n\n    {% set get_start_end_query %}\n        SELECT\n            MIN(\n                {{ predicate_column }}\n            ) AS full_range_start,\n            MAX(\n                {{ predicate_column }}\n            ) AS full_range_end\n        FROM\n            {{ source }}\n    {% endset %}\n    {% set start_end_results = run_query(get_start_end_query).columns %}\n    {% set start_preciate_value = start_end_results[0].values()[0] %}\n    {% set end_predicate_value = start_end_results[1].values()[0] %}\n\n    {% set get_limits_query %}\n        WITH block_range AS (\n            {% if predicate_column_data_type == \"INTEGER\" %}\n                SELECT \n                    SEQ4() + {{ start_preciate_value }} as predicate_value\n                FROM \n                    TABLE(GENERATOR(rowcount => {{ end_predicate_value - start_preciate_value }}+1))\n            {% else %}\n                SELECT\n                    date_day as predicate_value\n                FROM\n                    crosschain.core.dim_dates\n                WHERE\n                    date_day BETWEEN '{{ start_preciate_value }}' AND '{{ end_predicate_value }}'\n            {% endif %}\n        ),\n        partition_block_counts AS (\n            SELECT\n                b.predicate_value,\n                COUNT(r.{{ predicate_column }}) AS count_in_window\n            FROM\n                block_range b\n                LEFT OUTER JOIN {{ source }}\n                r\n                ON r.{{ predicate_column }} = b.predicate_value\n            GROUP BY\n                1\n        ),\n        range_groupings AS (\n            SELECT\n                predicate_value,\n                count_in_window,\n                conditional_change_event(\n                    count_in_window > 0\n                ) over (\n                    ORDER BY\n                        predicate_value\n                ) AS group_val\n            FROM\n                partition_block_counts\n        ),\n        contiguous_ranges AS (\n            SELECT\n                MIN(predicate_value) AS start_value,\n                MAX(predicate_value) AS end_value\n            FROM\n                range_groupings\n            WHERE\n                count_in_window > 0\n            GROUP BY\n                group_val\n        ),\n        between_stmts AS (\n            SELECT\n                CONCAT(\n                    '{{ output_alias~\".\" if output_alias else \"\" }}',\n                    '{{ predicate_column }} between \\'',\n                    start_value,\n                    '\\' and \\'',\n                    end_value,\n                    '\\''\n                ) AS b\n            FROM\n                contiguous_ranges\n        )\n        SELECT\n            CONCAT('(', LISTAGG(b, ' OR '), ')')\n        FROM\n            between_stmts \n    {% endset %}\n    \n    {% set between_stmts = run_query(get_limits_query).columns[0].values()[0] %}\n\n    {% if between_stmts != '()' %}\n        /* in case empty update array */\n        {% set predicate_override = between_stmts %}\n    {% else %}\n        {% set predicate_override = '1=1' %}\n        /* need to have something or it will error since it expects at least 1 predicate */\n    {% endif %}\n\n    {{ return(predicate_override) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2028391, "supported_languages": null}, "macro.fsc_utils.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/dbt/get_merge.sql", "original_file_path": "macros/dbt/get_merge.sql", "unique_id": "macro.fsc_utils.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n    {% set predicate_override = \"\" %}\n    {% if incremental_predicates[0] == \"dynamic_range_predicate\" %}\n        -- run some queries to dynamically determine the min + max of this 'date_column' in the new data\n        {% set predicate_override = fsc_utils.dynamic_range_predicate(source, incremental_predicates[1], \"DBT_INTERNAL_DEST\") %}\n    {% endif %}\n    {% set predicates = [predicate_override] if predicate_override else incremental_predicates %}\n    -- standard merge from here\n    {% set merge_sql = dbt.get_merge_sql(target, source, unique_key, dest_columns, predicates) %}\n    {{ return(merge_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.dynamic_range_predicate", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2034938, "supported_languages": null}, "macro.fsc_utils.udf_configs": {"name": "udf_configs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/configs.yaml.sql", "original_file_path": "macros/streamline/configs.yaml.sql", "unique_id": "macro.fsc_utils.udf_configs", "macro_sql": "{% macro udf_configs(schema) %}\n\n{#\n  UTILITY SCHEMA\n#}\n\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    STRICT IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ fsc_utils.python_hex_to_int() | indent(4) }}\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [encoding, STRING]\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    STRICT IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ fsc_utils.python_udf_hex_to_int_with_encoding() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_string\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    STRICT IMMUTABLE\n  sql: |\n    SELECT\n      LTRIM(regexp_replace(\n        try_hex_decode_string(hex),\n          '[\\x00-\\x1F\\x7F-\\x9F\\xAD]', '', 1))\n\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call() }}\n  exclude_from_datashare: true\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call() }}\n  exclude_from_datashare: true\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call(False) }}\n  exclude_from_datashare: true\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call(False) }}\n  exclude_from_datashare: true\n\n- name: {{ schema }}.udf_evm_text_signature\n  signature:\n    - [abi, VARIANT]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'get_simplified_signature'\n  sql: |\n    {{ fsc_utils.create_udf_evm_text_signature() | indent(4) }}\n\n- name: {{ schema }}.udf_keccak256\n  signature:\n    - [event_name, VARCHAR(255)]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    PACKAGES = ('pycryptodome==3.15.0')\n    HANDLER = 'udf_encode'\n  sql: |\n    {{ fsc_utils.create_udf_keccak256() | indent(4) }}\n\n- name: {{ schema }}.udf_decimal_adjust\n  signature:\n    - [input, string]\n    - [adjustment, int]\n  return_type: VARCHAR\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'custom_divide'\n  sql: |\n    {{ fsc_utils.create_udf_decimal_adjust() | indent(4) }}\n\n- name: {{ schema }}.udf_cron_to_prior_timestamps\n  signature:\n    - [workflow_name, STRING]\n    - [workflow_schedule, STRING]\n  return_type: TABLE(workflow_name STRING, workflow_schedule STRING, timestamp TIMESTAMP_NTZ)\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    PACKAGES = ('croniter')\n    HANDLER = 'TimestampGenerator'\n  sql: |\n    {{ fsc_utils.create_udf_cron_to_prior_timestamps() | indent(4) }}\n\n- name: {{ schema }}.udf_transform_logs\n  signature:\n    - [decoded, VARIANT]\n  return_type: VARIANT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform'\n  sql: |\n    {{ fsc_utils.create_udf_transform_logs() | indent(4) }}\n\n- name: {{ schema }}.udf_base58_to_hex\n  signature:\n    - [base58, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_base58_to_hex'\n  sql: |\n    {{ fsc_utils.create_udf_base58_to_hex() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_base58\n  signature:\n    - [input, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_base58'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_base58() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_bech32\n  signature:\n    - [input, STRING]\n    - [hrp, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_bech32'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_bech32() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_algorand\n  signature:\n    - [input, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_algorand'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_algorand() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_tezos\n  signature:\n    - [input, STRING]\n    - [prefix, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_tezos'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_tezos() | indent(4) }}\n\n- name: {{ schema }}.udf_detect_overflowed_responses\n  signature:\n    - [file_url, STRING]\n    - [index_cols, ARRAY]\n  return_type: ARRAY\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.11'\n    COMMENT = 'Detect overflowed responses larger than 16MB'\n    PACKAGES = ('snowflake-snowpark-python', 'pandas')\n    HANDLER = 'main'\n  sql: |\n    {{ fsc_utils.create_udf_detect_overflowed_responses() | indent(4) }}\n\n- name: {{ schema }}.udtf_flatten_overflowed_responses\n  signature:\n    - [file_url, STRING]\n    - [index_cols, ARRAY]\n    - [index_vals, ARRAY]\n  return_type: |\n    table(\n          index_vals ARRAY,\n          block_number NUMBER,\n          metadata OBJECT,\n          seq NUMBER,\n          key STRING,\n          path STRING,\n          index NUMBER,\n          value_ VARIANT\n        )\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.11'\n    COMMENT = 'Flatten rows from a JSON file with overflowed responses larger than 16MB'\n    PACKAGES = ('snowflake-snowpark-python', 'pandas', 'simplejson', 'numpy')\n    HANDLER = 'FlattenRows'\n  sql: |\n    {{ fsc_utils.create_udtf_flatten_overflowed_responses() | indent(4) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.python_hex_to_int", "macro.fsc_utils.python_udf_hex_to_int_with_encoding", "macro.fsc_utils.sql_udf_json_rpc_call", "macro.fsc_utils.create_udf_evm_text_signature", "macro.fsc_utils.create_udf_keccak256", "macro.fsc_utils.create_udf_decimal_adjust", "macro.fsc_utils.create_udf_cron_to_prior_timestamps", "macro.fsc_utils.create_udf_transform_logs", "macro.fsc_utils.create_udf_base58_to_hex", "macro.fsc_utils.create_udf_hex_to_base58", "macro.fsc_utils.create_udf_hex_to_bech32", "macro.fsc_utils.create_udf_hex_to_algorand", "macro.fsc_utils.create_udf_hex_to_tezos", "macro.fsc_utils.create_udf_detect_overflowed_responses", "macro.fsc_utils.create_udtf_flatten_overflowed_responses"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2102, "supported_languages": null}, "macro.fsc_utils.drop_function": {"name": "drop_function", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.drop_function", "macro_sql": "{% macro drop_function(\n        func_name,\n        signature\n    ) %}\n    DROP FUNCTION IF EXISTS {{ func_name }}({{ fsc_utils.compile_signature(signature, drop_ = True) }});\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.compile_signature"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.216449, "supported_languages": null}, "macro.fsc_utils.construct_api_route": {"name": "construct_api_route", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.construct_api_route", "macro_sql": "\n\n{%- macro construct_api_route(route) -%}\n    'https://{{ var(\"REST_API_ID_PROD\") if target.name == \"prod\" else var(\"REST_API_ID_DEV\") }}.execute-api.{{ var( aws_region, \"us-east-1\" ) }}.amazonaws.com/{{ target.name }}/{{ route }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.216724, "supported_languages": null}, "macro.fsc_utils.compile_signature": {"name": "compile_signature", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.compile_signature", "macro_sql": "{%- macro compile_signature(\n        params,\n        drop_ = False\n    ) -%}\n    {% for name,\n        data_type in params -%}\n        {% if drop_ %}\n            {{ data_type -}}\n        {% else %}\n            {{ name ~ \" \" ~ data_type -}}\n        {% endif -%}\n        {%-if not loop.last -%},\n        {%- endif -%}\n    {% endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.217034, "supported_languages": null}, "macro.fsc_utils.create_sql_function": {"name": "create_sql_function", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.create_sql_function", "macro_sql": "{% macro create_sql_function(\n        name_,\n        signature,\n        return_type,\n        sql_,\n        api_integration = none,\n        options = none,\n        func_type = none\n    ) %}\n    CREATE OR REPLACE {{ func_type }} FUNCTION {{ name_ }}(\n            {{- fsc_utils.compile_signature(signature) }}\n    )\n    COPY GRANTS\n    RETURNS {{ return_type }}\n    {% if options -%}\n        {{ options }}\n    {% endif %}\n    {%- if api_integration -%}\n    api_integration = {{ api_integration }}\n    AS {{ fsc_utils.construct_api_route(sql_) ~ \";\" }}\n    {% else -%}\n    AS\n    $$\n    {{ sql_ }}\n    $$;\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.compile_signature", "macro.fsc_utils.construct_api_route"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.217482, "supported_languages": null}, "macro.fsc_utils.create_or_drop_function_from_config": {"name": "create_or_drop_function_from_config", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.create_or_drop_function_from_config", "macro_sql": "{%- macro create_or_drop_function_from_config(\n        config,\n        drop_ = False\n    ) -%}\n    {% set name_ = config [\"name\"] %}\n    {% set signature = config [\"signature\"] %}\n    {% set return_type = config [\"return_type\"] %}\n    {% set sql_ = config [\"sql\"] %}\n    {% set options = config [\"options\"] %}\n    {% set api_integration = config [\"api_integration\"] %}\n    {% set func_type = config [\"func_type\"] %}\n\n    {% if not drop_ -%}\n        {{ fsc_utils.create_sql_function(\n            name_ = name_,\n            signature = signature,\n            return_type = return_type,\n            sql_ = sql_,\n            options = options,\n            api_integration = api_integration,\n            func_type = func_type\n        ) }}\n    {%- else -%}\n        {{ fsc_utils.drop_function(\n            name_,\n            signature = signature,\n        ) }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.create_sql_function", "macro.fsc_utils.drop_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.218207, "supported_languages": null}, "macro.fsc_utils.if_data_call_function_v2": {"name": "if_data_call_function_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.if_data_call_function_v2", "macro_sql": "{% macro if_data_call_function_v2(\n        func,\n        target,\n        params\n    ) %}\n    {% if var(\n            \"STREAMLINE_INVOKE_STREAMS\"\n        ) %}\n        {% if execute %}\n            {{ log(\n                \"Running macro `if_data_call_function`: Calling udf \" ~ func ~ \" with params: \\n\" ~ params | tojson(indent=2) ~  \"\\n on \" ~ target,\n                True\n            ) }}\n        {% endif %}\n    SELECT\n        {{ func }}( parse_json($${{ params | tojson }}$$) )\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{ target }}\n            LIMIT\n                1\n        )\n    {% else %}\n        {% if execute %}\n            {{ log(\n                \"Running macro `if_data_call_function`: NOOP\",\n                False\n            ) }}\n        {% endif %}\n    SELECT\n        NULL\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.218716, "supported_languages": null}, "macro.fsc_utils.if_data_call_wait": {"name": "if_data_call_wait", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.if_data_call_wait", "macro_sql": "{% macro if_data_call_wait() %}\n    {% if var(\n            \"STREAMLINE_INVOKE_STREAMS\"\n        ) %}\n        {% set query %}\n    SELECT\n        1\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{ model.schema ~ \".\" ~ model.alias }}\n            LIMIT\n                1\n        ) {% endset %}\n        {% if execute %}\n            {% set results = run_query(\n                query\n            ) %}\n            {% if results %}\n                {{ log(\n                    \"Waiting...\",\n                    info = True\n                ) }}\n\n                {% set wait_query %}\n            SELECT\n                system$wait(\n                    {{ var(\n                        \"WAIT\",\n                        400\n                    ) }}\n                ) {% endset %}\n                {% do run_query(wait_query) %}\n            {% else %}\n            SELECT\n                NULL;\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.219274, "supported_languages": null}, "macro.fsc_utils.sql_udf_json_rpc_call": {"name": "sql_udf_json_rpc_call", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.sql", "original_file_path": "macros/streamline/functions.sql", "unique_id": "macro.fsc_utils.sql_udf_json_rpc_call", "macro_sql": "{% macro sql_udf_json_rpc_call(use_default_id=True ) %}\n    SELECT IFF(method IS NULL or params IS NULL,\n              NULL,\n              {\n                'jsonrpc': '2.0',\n                'method': method,\n                'params': params\n                {% if use_default_id %}\n                  , 'id': hash(method, params)::string\n                {% else %}\n                  , 'id': id\n                {% endif %}\n              }\n              )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.219568, "supported_languages": null}, "macro.fsc_utils.decode_logs_history": {"name": "decode_logs_history", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.decode_logs_history", "macro_sql": "{% macro decode_logs_history(\n        start,\n        stop\n    ) %}\n    WITH look_back AS (\n        SELECT\n            block_number\n        FROM\n            {{ ref(\"_max_block_by_date\") }}\n            qualify ROW_NUMBER() over (\n                ORDER BY\n                    block_number DESC\n            ) = 1\n    )\nSELECT\n    l.block_number,\n    l._log_id,\n    A.abi AS abi,\n    OBJECT_CONSTRUCT(\n        'topics',\n        l.topics,\n        'data',\n        l.data,\n        'address',\n        l.contract_address\n    ) AS DATA\nFROM\n    {{ ref(\"silver__logs\") }}\n    l\n    INNER JOIN {{ ref(\"silver__complete_event_abis\") }} A\n    ON A.parent_contract_address = l.contract_address\n    AND A.event_signature = l.topics[0]:: STRING\n    AND l.block_number BETWEEN A.start_block\n    AND A.end_block\nWHERE\n    (\n        l.block_number BETWEEN {{ start }}\n        AND {{ stop }}\n    )\n    AND l.block_number <= (\n        SELECT\n            block_number\n        FROM\n            look_back\n    )\n    AND _log_id NOT IN (\n        SELECT\n            _log_id\n        FROM\n            {{ ref(\"streamline__complete_decode_logs\") }}\n        WHERE\n            (\n                block_number BETWEEN {{ start }}\n                AND {{ stop }}\n            )\n            AND block_number <= (\n                SELECT\n                    block_number\n                FROM\n                    look_back\n            )\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2221491, "supported_languages": null}, "macro.fsc_utils.block_reorg": {"name": "block_reorg", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.block_reorg", "macro_sql": "{% macro block_reorg(reorg_model_list, hours) %}\n  {% set models = reorg_model_list.split(\",\") %}\n  {% for model in models %}\n  {% set sql %}\n    DELETE FROM\n        {{ ref(model) }} t\n    WHERE\n        t._inserted_timestamp > DATEADD(\n            'hour',\n            -{{ hours }},\n            SYSDATE()\n        )\n        AND NOT EXISTS (\n            SELECT\n                1\n            FROM\n                {{ ref('silver__transactions') }}\n                s\n            WHERE s.block_number = t.block_number\n                AND s.tx_hash = t.tx_hash\n        );\n    {% endset %}\n    {% do run_query(sql) %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.222572, "supported_languages": null}, "macro.fsc_utils.streamline_external_table_query_v2": {"name": "streamline_external_table_query_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.streamline_external_table_query_v2", "macro_sql": "{% macro streamline_external_table_query_v2(\n        model,\n        partition_function\n    ) %}\n    WITH meta AS (\n        SELECT\n            job_created_time AS _inserted_timestamp,\n            file_name,\n            {{ partition_function }} AS partition_key\n        FROM\n            TABLE(\n                information_schema.external_table_file_registration_history(\n                    start_time => DATEADD('day', -3, CURRENT_TIMESTAMP()),\n                    table_name => '{{ source( \"bronze_streamline\", model) }}')\n                ) A\n            )\n        SELECT\n            s.*,\n            b.file_name,\n            _inserted_timestamp\n        FROM\n            {{ source(\n                \"bronze_streamline\",\n                model\n            ) }}\n            s\n            JOIN meta b\n            ON b.file_name = metadata$filename\n            AND b.partition_key = s.partition_key\n        WHERE\n            b.partition_key = s.partition_key\n            AND DATA :error IS NULL\n            AND DATA is not null\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2228212, "supported_languages": null}, "macro.fsc_utils.streamline_external_table_FR_query_v2": {"name": "streamline_external_table_FR_query_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.streamline_external_table_FR_query_v2", "macro_sql": "{% macro streamline_external_table_FR_query_v2(\n        model,\n        partition_function\n    ) %}\n    WITH meta AS (\n        SELECT\n            registered_on AS _inserted_timestamp,\n            file_name,\n            {{ partition_function }} AS partition_key\n        FROM\n            TABLE(\n                information_schema.external_table_files(\n                    table_name => '{{ source( \"bronze_streamline\", model) }}'\n                )\n            ) A\n    )\nSELECT\n    s.*,\n    b.file_name,\n    _inserted_timestamp\nFROM\n    {{ source(\n        \"bronze_streamline\",\n        model\n    ) }}\n    s\n    JOIN meta b\n    ON b.file_name = metadata$filename\n    AND b.partition_key = s.partition_key\nWHERE\n    b.partition_key = s.partition_key\n    AND DATA :error IS NULL\n    AND DATA is not null\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.223049, "supported_languages": null}, "macro.fsc_utils.python_hex_to_int": {"name": "python_hex_to_int", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.python_hex_to_int", "macro_sql": "{% macro python_hex_to_int() %}\ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    return (str(int(hex, 16)) if hex and hex != \"0x\" else None)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.231702, "supported_languages": null}, "macro.fsc_utils.python_udf_hex_to_int_with_encoding": {"name": "python_udf_hex_to_int_with_encoding", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.python_udf_hex_to_int_with_encoding", "macro_sql": "{% macro python_udf_hex_to_int_with_encoding() %}\ndef hex_to_int(encoding, hex) -> str:\n  \"\"\"\n  Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n  hex_to_int('hex', '200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  hex_to_int('hex', '0x200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  hex_to_int('hex', NULL);\n  >> NULL\n  hex_to_int('s2c', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf');\n  >> -440911153\n  \"\"\"\n  if not hex:\n    return None\n  if encoding.lower() == 's2c':\n    if hex[0:2].lower() != '0x':\n      hex = f'0x{hex}'\n\n    bits = len(hex[2:])*4\n    value = int(hex, 0)\n    if value & (1 << (bits-1)):\n        value -= 1 << bits\n    return str(value)\n  else:\n    return str(int(hex, 16))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2319272, "supported_languages": null}, "macro.fsc_utils.create_udf_keccak256": {"name": "create_udf_keccak256", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_keccak256", "macro_sql": "{% macro create_udf_keccak256() %}\nfrom Crypto.Hash import keccak\n\ndef udf_encode(event_name):\n    keccak_hash = keccak.new(digest_bits=256)\n    keccak_hash.update(event_name.encode('utf-8'))\n    return '0x' + keccak_hash.hexdigest()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.232002, "supported_languages": null}, "macro.fsc_utils.create_udf_evm_text_signature": {"name": "create_udf_evm_text_signature", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_evm_text_signature", "macro_sql": "{% macro create_udf_evm_text_signature() %}\n\ndef get_simplified_signature(abi):\n    def generate_signature(inputs):\n        signature_parts = []\n        for input_data in inputs:\n            if 'components' in input_data:\n                component_signature_parts = []\n                components = input_data['components']\n                component_signature_parts.extend(generate_signature(components))\n                component_signature_parts[-1] = component_signature_parts[-1].rstrip(\",\")\n                if input_data['type'].endswith('[]'):\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \")[],\")\n                else:\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \"),\")\n            else:\n                signature_parts.append(input_data['type'].replace('enum ', '').replace(' payable', '') + \",\")\n        return signature_parts\n\n    signature_parts = [abi['name'] + \"(\"]\n    signature_parts.extend(generate_signature(abi['inputs']))\n    signature_parts[-1] = signature_parts[-1].rstrip(\",\") + \")\"\n    return \"\".join(signature_parts)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.232121, "supported_languages": null}, "macro.fsc_utils.create_udf_decimal_adjust": {"name": "create_udf_decimal_adjust", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_decimal_adjust", "macro_sql": "{% macro create_udf_decimal_adjust() %}\n\nfrom decimal import Decimal, ROUND_DOWN\n\ndef custom_divide(input, adjustment):\n    try:\n        if adjustment is None or input is None:\n            return None\n\n        # Perform the division using Decimal type\n        result = Decimal(input) / pow(10, Decimal(adjustment))\n\n        # Determine the number of decimal places in the result\n        decimal_places = max(0, -result.as_tuple().exponent)\n\n        # Convert the result to a string representation without scientific notation and with dynamic decimal precision\n        result_str = \"{:.{prec}f}\".format(result, prec=decimal_places)\n\n        return result_str\n    except Exception as e:\n        return None\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.232223, "supported_languages": null}, "macro.fsc_utils.create_udf_cron_to_prior_timestamps": {"name": "create_udf_cron_to_prior_timestamps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_cron_to_prior_timestamps", "macro_sql": "{% macro create_udf_cron_to_prior_timestamps() %}\nimport croniter\nimport datetime\n\nclass TimestampGenerator:\n\n    def __init__(self):\n        pass\n\n    def process(self, workflow_name, workflow_schedule):\n        for timestamp in self.generate_timestamps(workflow_name, workflow_schedule):\n            yield (workflow_name, workflow_schedule, timestamp)\n\n    def generate_timestamps(self, workflow_name, workflow_schedule):\n        # Create a cron iterator object\n        cron = croniter.croniter(workflow_schedule)\n\n        # Generate timestamps for the prev 10 runs\n        timestamps = []\n        for i in range(10):\n            prev_run = cron.get_prev(datetime.datetime)\n            timestamps.append(prev_run)\n\n        return timestamps\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2323232, "supported_languages": null}, "macro.fsc_utils.create_udf_transform_logs": {"name": "create_udf_transform_logs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_transform_logs", "macro_sql": "{% macro create_udf_transform_logs() %}\n\nfrom copy import deepcopy\n\ndef transform_tuple(components: list, values: list):\n    transformed_values = []\n    for i, component in enumerate(components):\n        if i < len(values):\n            if component[\"type\"] == \"tuple\":\n                transformed_values.append({\"value\": transform_tuple(component[\"components\"], values[i]), **component})\n            elif component[\"type\"] == \"tuple[]\":\n                if not values[i]:\n                    transformed_values.append({\"value\": [], **component})\n                    continue\n                sub_values = [transform_tuple(component[\"components\"], v) for v in values[i]]\n                transformed_values.append({\"value\": sub_values, **component})\n            else:\n                transformed_values.append({\"value\": values[i], **component})\n    return {item[\"name\"]: item[\"value\"] for item in transformed_values}\n\ndef transform_event(event: dict):\n    new_event = deepcopy(event)\n    if new_event.get(\"components\"):\n        components = new_event.get(\"components\")\n\n        if not new_event[\"value\"]:\n            return new_event\n\n        if isinstance(new_event[\"value\"][0], list):\n            result_list = []\n            for value_set in new_event[\"value\"]:\n                result_list.append(transform_tuple(components, value_set))\n            new_event[\"value\"] = result_list\n\n        else:\n            new_event[\"value\"] = transform_tuple(components, new_event[\"value\"])\n\n        return new_event\n\n    else:\n        return event\n\ndef transform(events: dict):\n    try:\n        results = [\n            transform_event(event) if event.get(\"decoded\") else event\n            for event in events[\"data\"]\n        ]\n        events[\"data\"] = results\n        return events\n    except:\n        return events\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.232487, "supported_languages": null}, "macro.fsc_utils.create_udf_base58_to_hex": {"name": "create_udf_base58_to_hex", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_base58_to_hex", "macro_sql": "{% macro create_udf_base58_to_hex() %}\n\ndef transform_base58_to_hex(base58):\n    if base58 is None:\n        return 'Invalid input'\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    base_count = len(ALPHABET)\n\n    num = 0\n    leading_zeros = 0\n\n    for char in base58:\n        if char == '1':\n            leading_zeros += 1\n        else:\n            break\n\n    for char in base58:\n        num *= base_count\n        if char in ALPHABET:\n            num += ALPHABET.index(char)\n        else:\n            return 'Invalid character in input'\n\n    hex_string = hex(num)[2:]\n\n    if len(hex_string) % 2 != 0:\n        hex_string = '0' + hex_string\n\n    hex_leading_zeros = '00' * leading_zeros\n\n    return '0x' + hex_leading_zeros + hex_string\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.232595, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_base58": {"name": "create_udf_hex_to_base58", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_base58", "macro_sql": "{% macro create_udf_hex_to_base58() %}\n\ndef transform_hex_to_base58(input):\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(input)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.232696, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_bech32": {"name": "create_udf_hex_to_bech32", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_bech32", "macro_sql": "{% macro create_udf_hex_to_bech32() %}\n\ndef transform_hex_to_bech32(input, hrp=''):\n    CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n\n    def bech32_polymod(values):\n        generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n        checksum = 1\n        for value in values:\n            top = checksum >> 25\n            checksum = ((checksum & 0x1ffffff) << 5) ^ value\n            for i in range(5):\n                checksum ^= generator[i] if ((top >> i) & 1) else 0\n        return checksum\n\n    def bech32_hrp_expand(hrp):\n        return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n\n    def bech32_create_checksum(hrp, data):\n        values = bech32_hrp_expand(hrp) + data\n        polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n        return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n\n    def bech32_convertbits(data, from_bits, to_bits, pad=True):\n        acc = 0\n        bits = 0\n        ret = []\n        maxv = (1 << to_bits) - 1\n        max_acc = (1 << (from_bits + to_bits - 1)) - 1\n        for value in data:\n            acc = ((acc << from_bits) | value) & max_acc\n            bits += from_bits\n            while bits >= to_bits:\n                bits -= to_bits\n                ret.append((acc >> bits) & maxv)\n        if pad and bits:\n            ret.append((acc << (to_bits - bits)) & maxv)\n        return ret\n\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n\n    data = bytes.fromhex(input)\n    data5bit = bech32_convertbits(list(data), 8, 5)\n\n    if data5bit is None:\n        return 'Data conversion failed'\n\n    checksum = bech32_create_checksum(hrp, data5bit)\n\n    return hrp + '1' + ''.join([CHARSET[d] for d in data5bit + checksum])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.232856, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_algorand": {"name": "create_udf_hex_to_algorand", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_algorand", "macro_sql": "{% macro create_udf_hex_to_algorand() %}\n\nimport hashlib\nimport base64\n\ndef transform_hex_to_algorand(input):\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n    public_key_bytes = bytearray.fromhex(input)\n\n    sha512_256_hash = hashlib.new('sha512_256', public_key_bytes).digest()\n\n    checksum = sha512_256_hash[-4:]\n\n    algorand_address = base64.b32encode(public_key_bytes + checksum).decode('utf-8').rstrip('=')\n\n    return algorand_address\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2329469, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_tezos": {"name": "create_udf_hex_to_tezos", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_tezos", "macro_sql": "{% macro create_udf_hex_to_tezos() %}\n\nimport hashlib\n\ndef transform_hex_to_tezos(input, prefix):\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n\n    if len(input) != 40:\n        return 'Invalid length'\n\n    hash_bytes = bytes.fromhex(input)\n\n    prefixes = {\n        'tz1': '06a19f',  # Ed25519\n        'tz2': '06a1a1',  # Secp256k1\n        'tz3': '06a1a4'   # P-256\n    }\n\n    if prefix not in prefixes:\n        return 'Invalid prefix: Must be tz1, tz2, or tz3'\n\n    prefix_bytes = bytes.fromhex(prefixes[prefix])\n\n    prefixed_hash = prefix_bytes + hash_bytes\n\n    checksum = hashlib.sha256(hashlib.sha256(prefixed_hash).digest()).digest()[:4]\n\n    full_hash = prefixed_hash + checksum\n\n    tezos_address = transform_hex_to_base58(full_hash.hex())\n\n    return tezos_address\n\ndef transform_hex_to_base58(input):\n    if input is None:\n        return None\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(input)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.233087, "supported_languages": null}, "macro.fsc_utils.create_udf_detect_overflowed_responses": {"name": "create_udf_detect_overflowed_responses", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_detect_overflowed_responses", "macro_sql": "{% macro create_udf_detect_overflowed_responses() %}\n\nimport pandas as pd\nfrom snowflake.snowpark.files import SnowflakeFile\n\nVARCHAR_MAX = 16_777_216\ndef main(file_url, index_cols):\n    with SnowflakeFile.open(file_url, 'rb') as f:\n        df = pd.read_json(f, lines=True, compression='gzip')\n    data_length = df[\"data\"].astype(str).apply(len)\n    return df[data_length > VARCHAR_MAX][index_cols].values.tolist()\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.233175, "supported_languages": null}, "macro.fsc_utils.create_udtf_flatten_overflowed_responses": {"name": "create_udtf_flatten_overflowed_responses", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udtf_flatten_overflowed_responses", "macro_sql": "{% macro create_udtf_flatten_overflowed_responses() %}\n\nimport logging\nimport simplejson as json\n\nimport numpy as np\nimport pandas as pd\nfrom snowflake.snowpark.files import SnowflakeFile\n\nVARCHAR_MAX = 16_777_216\n\nlogger = logging.getLogger(\"udtf_flatten_overflowed_responses\")\n\nclass Flatten:\n    \"\"\"\n    Recursive function to flatten a nested JSON file\n    \"\"\"\n\n    def __init__(self, mode: str, exploded_key: list) -> None:\n        self.mode = mode\n        self.exploded_key = exploded_key\n\n    def _flatten_response(\n        self,\n        response_key: str,\n        responses: str,\n        block_number: int,\n        metadata: dict,\n        seq_index: int = 0,\n        path: str = \"\",\n    ):\n        \"\"\"\n        Example:\n\n        input: {\"a\":1, \"b\":[77,88], \"c\": {\"d\":\"X\"}}\n\n        output:\n        - SEQ: A unique sequence number associated with the input record; the sequence is not guaranteed to be gap-free or ordered in any particular way.\n        - KEY: For maps or objects, this column contains the key to the exploded value.\n        - PATH: The path to the element within a data structure which needs to be flattened.\n        - INDEX: The index of the element, if it is an array; otherwise NULL.\n        - VALUE_: The value of the element of the flattened array/object.\n\n        \"\"\"\n        exploded_data = []\n        if self.mode == \"array\":\n            check_mode = isinstance(responses, list)\n        elif self.mode == \"dict\":\n            check_mode = isinstance(responses, dict)\n        elif self.mode == \"both\":\n            check_mode = isinstance(responses, list) or isinstance(responses, dict)\n\n        if check_mode:\n            if isinstance(responses, dict):\n                looped_keys = responses.keys()\n                for key in looped_keys:\n                    next_path = f\"{path}.{key}\" if path else key\n                    index = None\n                    exploded_data.append(\n                        {\n                            \"block_number\": block_number,\n                            \"metadata\": metadata,\n                            \"seq\": seq_index,\n                            \"key\": key,\n                            \"path\": next_path,\n                            \"index\": index,\n                            \"value_\": responses[key],\n                        }\n                    )\n                    exploded_data.extend(\n                        self._flatten_response(\n                            key,\n                            responses[key],\n                            block_number,\n                            metadata,\n                            seq_index,\n                            next_path,\n                        )\n                    )\n\n            elif isinstance(responses, list):\n                looped_keys = range(len(responses))\n                if response_key in self.exploded_key or len(self.exploded_key) == 0:\n                    for item_i, item in enumerate(responses):\n                        if response_key == \"result\":\n                            seq_index += 1\n                        index = item_i\n                        exploded_data.append(\n                            {\n                                \"block_number\": block_number,\n                                \"metadata\": metadata,\n                                \"seq\": seq_index,\n                                \"key\": None,\n                                \"path\": f\"{path}[{item_i}]\",\n                                \"index\": index,\n                                \"value_\": item,\n                            }\n                        )\n                        exploded_data.extend(\n                            self._flatten_response(\n                                item_i,\n                                item,\n                                block_number,\n                                metadata,\n                                seq_index,\n                                f\"{path}[{item_i}]\",\n                            )\n                        )\n\n        return exploded_data\n\nclass FlattenRows:\n    \"\"\"\n    Recursive function to flatten a given JSON file from Snowflake stage\n    \"\"\"\n    def process(self, file_url: str, index_cols: list, index_vals: list):\n        with SnowflakeFile.open(file_url, 'rb') as f:\n            df = pd.read_json(f, lines=True, compression='gzip')\n\n        df.set_index(index_cols, inplace=True, drop=False)\n        df = df.loc[index_vals]\n\n        flattener = Flatten(mode=\"both\", exploded_key=[])\n\n        df[\"value_\"] = df.apply(\n                lambda x: flattener._flatten_response(\n                    block_number=x[\"block_number\"], metadata=x[\"metadata\"], responses=x[\"data\"], response_key=None\n                ),\n                axis=\"columns\",\n            )\n        df[\"value_\"] = df[\"value_\"].apply(pd.DataFrame.from_records)\n        df[\"index_cols\"] = df.index\n        df = df[[\"index_cols\", \"value_\"]]\n        flattened = pd.concat(\n            df[\"value_\"].values.tolist(), keys=df[\"index_cols\"].values.tolist()\n        ).droplevel(-1)\n\n        cleansed = flattened.replace({np.nan: None})\n\n        overflow = cleansed[\"value_\"].astype(str).apply(len) > VARCHAR_MAX\n\n        cleansed.loc[overflow, [\"value_\"]] = None\n        temp_index_cols = list(range(len(index_cols)))\n        cleansed = cleansed.reset_index(names=temp_index_cols, drop=False)\n        cleansed[\"index_cols\"] = cleansed[temp_index_cols].apply(list, axis=1)\n        cleansed.drop(columns=temp_index_cols, inplace=True, errors=\"ignore\")\n        return list(cleansed[np.roll(cleansed.columns.values, 1).tolist()].itertuples(index=False, name=None))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2335548, "supported_languages": null}, "macro.fsc_utils.create_udf_bulk_rest_api_v2": {"name": "create_udf_bulk_rest_api_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/udfs.sql", "original_file_path": "macros/streamline/udfs.sql", "unique_id": "macro.fsc_utils.create_udf_bulk_rest_api_v2", "macro_sql": "{% macro create_udf_bulk_rest_api_v2() %}    \n    {{ log(\"Creating udf udf_bulk_rest_api for target:\" ~ target.name ~ \", schema: \" ~ target.schema ~ \", DB: \" ~ target.database, info=True) }}\n    {{ log(\"role:\" ~ target.role ~ \", user:\" ~ target.user, info=True) }}\n\n    {% set sql %}\n    CREATE OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_rest_api_v2(json object) returns array api_integration = \n    {% if target.name == \"prod\" %} \n        {{ log(\"Creating prod udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}udf_bulk_rest_api'\n    {% elif target.name == \"dev\" %}\n        {{ log(\"Creating dev udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}udf_bulk_rest_api'\n    {% elif  target.name == \"sbx\" %}\n        {{ log(\"Creating stg udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}udf_bulk_rest_api'\n    {% else %}\n        {{ log(\"Creating default (dev) udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"config\")[\"dev\"][\"API_INTEGRATION\"] }} AS 'https://{{ var(\"config\")[\"dev\"][\"EXTERNAL_FUNCTION_URI\"] | lower }}udf_bulk_rest_api'\n    {% endif %};\n    {% endset %}\n    {{ log(sql, info=True) }}\n    {% do adapter.execute(sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.238136, "supported_languages": null}, "macro.fsc_utils.create_udf_bulk_decode_logs": {"name": "create_udf_bulk_decode_logs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/udfs.sql", "original_file_path": "macros/streamline/udfs.sql", "unique_id": "macro.fsc_utils.create_udf_bulk_decode_logs", "macro_sql": "{% macro create_udf_bulk_decode_logs() %}    \n    {{ log(\"Creating udf udf_bulk_decode_logs_v2 for target:\" ~ target.name ~ \", schema: \" ~ target.schema ~ \", DB: \" ~ target.database, info=True) }}\n    {{ log(\"role:\" ~ target.role ~ \", user:\" ~ target.user, info=True) }}\n\n    {% set sql %}\n    CREATE OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_decode_logs_v2(json object) returns array api_integration = \n    {% if target.name == \"prod\" %} \n        {{ log(\"Creating prod udf_bulk_decode_logs_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_logs'\n    {% elif target.name == \"dev\" %}\n        {{ log(\"Creating dev udf_bulk_decode_logs_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_logs'\n    {% elif  target.name == \"sbx\" %}\n        {{ log(\"Creating stg udf_bulk_decode_logs_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_logs'\n    {% else %}\n        {{ log(\"Creating default (dev) udf_bulk_decode_logs_v2\", info=True) }}\n        {{ var(\"config\")[\"dev\"][\"API_INTEGRATION\"] }} AS 'https://{{ var(\"config\")[\"dev\"][\"EXTERNAL_FUNCTION_URI\"] | lower }}bulk_decode_logs'\n    {% endif %};\n    {% endset %}\n    {{ log(sql, info=True) }}\n    {% do adapter.execute(sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2392561, "supported_languages": null}, "macro.fsc_utils.create_udf_bulk_decode_traces": {"name": "create_udf_bulk_decode_traces", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/udfs.sql", "original_file_path": "macros/streamline/udfs.sql", "unique_id": "macro.fsc_utils.create_udf_bulk_decode_traces", "macro_sql": "{% macro create_udf_bulk_decode_traces() %}    \n    {{ log(\"Creating udf udf_bulk_decode_traces_v2 for target:\" ~ target.name ~ \", schema: \" ~ target.schema ~ \", DB: \" ~ target.database, info=True) }}\n    {{ log(\"role:\" ~ target.role ~ \", user:\" ~ target.user, info=True) }}\n\n    {% set sql %}\n    CREATE OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_decode_traces_v2(json object) returns array api_integration = \n    {% if target.name == \"prod\" %} \n        {{ log(\"Creating prod udf_bulk_decode_traces_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_traces'\n    {% elif target.name == \"dev\" %}\n        {{ log(\"Creating dev udf_bulk_decode_traces_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_traces'\n    {% elif  target.name == \"sbx\" %}\n        {{ log(\"Creating stg udf_bulk_decode_traces_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_traces'\n    {% else %}\n        {{ log(\"Creating default (dev) udf_bulk_decode_traces_v2\", info=True) }}\n        {{ var(\"config\")[\"dev\"][\"API_INTEGRATION\"] }} AS 'https://{{ var(\"config\")[\"dev\"][\"EXTERNAL_FUNCTION_URI\"] | lower }}bulk_decode_traces'\n    {% endif %};\n    {% endset %}\n    {{ log(sql, info=True) }}\n    {% do adapter.execute(sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.240376, "supported_languages": null}, "macro.fsc_utils.test_sequence_gaps": {"name": "test_sequence_gaps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.test_sequence_gaps", "macro_sql": "{% test sequence_gaps(\n    model,\n    partition_by,\n    column_name\n) %}\n{%- set partition_sql = partition_by | join(\", \") -%}\n{%- set previous_column = \"prev_\" ~ column_name -%}\nWITH source AS (\n    SELECT\n        {{ partition_sql + \",\" if partition_sql }}\n        {{ column_name }},\n        LAG(\n            {{ column_name }},\n            1\n        ) over (\n            {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n            ORDER BY\n                {{ column_name }} ASC\n        ) AS {{ previous_column }}\n    FROM\n        {{ model }}\n)\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column_name }},\n    {{ column_name }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column_name }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC \n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.242955, "supported_languages": null}, "macro.fsc_utils.test_tx_block_count": {"name": "test_tx_block_count", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.test_tx_block_count", "macro_sql": "{% test tx_block_count(\n        model,\n        column_name\n) %}\n\nSELECT \n    {{ column_name }}, \n    COUNT(DISTINCT block_number) AS num_blocks\nFROM\n    {{ model }}\nGROUP BY {{ column_name }}\nHAVING num_blocks > 1\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.243093, "supported_languages": null}, "macro.fsc_utils.tx_gaps": {"name": "tx_gaps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.tx_gaps", "macro_sql": "{% macro tx_gaps(\n        model\n    ) %}\n    WITH block_base AS (\n        SELECT\n            block_number,\n            tx_count\n        FROM\n            {{ ref('test_silver__blocks_full') }}\n    ),\n    model_name AS (\n        SELECT\n            block_number,\n            COUNT(\n                DISTINCT tx_hash\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            block_number\n    )\nSELECT\n    block_base.block_number,\n    tx_count,\n    model_name.block_number AS model_block_number,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_number = model_name.block_number\nWHERE\n    (\n        tx_count <> model_tx_count\n    )\n    OR (\n        model_tx_count IS NULL\n        AND tx_count <> 0\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.243257, "supported_languages": null}, "macro.fsc_utils.recent_tx_gaps": {"name": "recent_tx_gaps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.recent_tx_gaps", "macro_sql": "{% macro recent_tx_gaps(\n        model\n    ) %}\n    WITH block_base AS (\n        SELECT\n            block_number,\n            tx_count\n        FROM\n            {{ ref('test_silver__blocks_recent') }}\n    ),\n    model_name AS (\n        SELECT\n            block_number,\n            COUNT(\n                DISTINCT tx_hash\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            block_number\n    )\nSELECT\n    block_base.block_number,\n    tx_count,\n    model_name.block_number AS model_block_number,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_number = model_name.block_number\nWHERE\n    (\n        tx_count <> model_tx_count\n    )\n    OR (\n        model_tx_count IS NULL\n        AND tx_count <> 0\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.243426, "supported_languages": null}, "macro.fsc_utils.test_recent_decoded_logs_match": {"name": "test_recent_decoded_logs_match", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.test_recent_decoded_logs_match", "macro_sql": "{% test recent_decoded_logs_match(\n    model\n) %}\nSELECT\n    block_number,\n    _log_id\nFROM\n    {{ model }}\n    d\nWHERE\n    NOT EXISTS (\n        SELECT\n            1\n        FROM\n            {{ ref('silver__logs') }}\n            l\n        WHERE\n            d.block_number = l.block_number\n            AND d.tx_hash = l.tx_hash\n            AND d.event_index = l.event_index\n            AND d.contract_address = l.contract_address\n            AND d.topics [0] :: STRING = l.topics [0] :: STRING\n    ) \n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.243575, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2508318, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.252751, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.254661, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2555552, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.256193, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.256763, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.257376, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2578812, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.258076, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2583911, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.259139, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.259493, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2596538, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2600808, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.261464, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2619772, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.262746, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2629309, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.263087, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.263291, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2634492, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.264045, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.264222, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.264398, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.264565, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.26474, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.265007, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2651289, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.26525, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.265337, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.265537, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2659378, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2660658, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.26631, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.26653, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.26695, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.267082, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.267199, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.267314, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2674408, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.267777, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.267935, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2681642, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.26838, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2685282, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2686799, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.268971, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.269253, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.269384, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.269537, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2697651, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.270848, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.271085, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2713149, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.27171, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2720351, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.272362, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2726269, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.272746, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.272856, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2731462, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.273338, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.273569, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.273752, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.275305, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2755551, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.275895, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.276145, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2764952, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2768, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.277195, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.277378, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.277493, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.277612, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.277913, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.278332, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.278506, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.278676, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.278846, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.279138, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.279427, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2799392, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.280107, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.280252, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.281087, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.281269, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.281405, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.281548, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.281749, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.281918, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.282223, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.28269, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2828622, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.282985, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.283112, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.283239, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.283637, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2837582, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2839308, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.284102, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2842848, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.28447, "supported_languages": null}, "macro.livequery_base.create_sps": {"name": "create_sps", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "unique_id": "macro.livequery_base.create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% if target.database == 'LIVEQUERY' %}\n            CREATE schema IF NOT EXISTS _internal;\n    {{ sp_create_prod_clone('_internal') }};\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_base.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.284844, "supported_languages": null}, "macro.livequery_base.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.livequery_base.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.285193, "supported_languages": null}, "macro.livequery_base.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.livequery_base.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.285436, "supported_languages": null}, "macro.livequery_base.run_sp_create_prod_clone": {"name": "run_sp_create_prod_clone", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "unique_id": "macro.livequery_base.run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n    {% set clone_query %}\n    call livequery._internal.create_prod_clone(\n        'livequery',\n        'livequery_dev',\n        'livequery_dev_owner'\n    );\n{% endset %}\n    {% do run_query(clone_query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.2856479, "supported_languages": null}, "macro.livequery_base.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.livequery_base.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n {% set new_json = {\"repo\":project_name, \"object\":this.table, \"profile\":target.profile_name, \"env\":target.name, \"existing_tag\":get_current_query_tag()  } %}\n{% set new_query_tag = tojson(new_json) | as_text %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.286358, "supported_languages": null}, "macro.livequery_base.sp_create_prod_clone": {"name": "sp_create_prod_clone", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "unique_id": "macro.livequery_base.sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `CREATE OR REPLACE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA IF EXISTS ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL SCHEMAS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`})\n\n        var existing_tags = snowflake.execute({sqlText: `SHOW TAGS IN DATABASE ${DESTINATION_DB_NAME};`});\n        while (existing_tags.next()) {\n            var schema = existing_tags.getColumnValue(4);\n            var tag_name = existing_tags.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TAG ${DESTINATION_DB_NAME}.${schema}.${tag_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n\n    return true\n$$\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.286928, "supported_languages": null}, "macro.livequery_base.apply_grants_by_schema": {"name": "apply_grants_by_schema", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/grants.sql", "original_file_path": "macros/grants.sql", "unique_id": "macro.livequery_base.apply_grants_by_schema", "macro_sql": "{% macro apply_grants_by_schema(schema) %}\n{#\n    Generates SQL to grant permissions to roles for a given schema.\n    This gets run automatically when a deployment is made to prod.\n\n    This can be manually run to grant permissions to a new schema:\n    `dbt run-operation apply_grants_by_schema --args '{\"schema\": \"my_schema\"}'`\n #}\n    {%- set outer = namespace(sql=\"\") -%}\n    {% for role in fromyaml(var(\"ROLES\")) %}\n            {% set sql -%}\n                {% if schema.startswith(\"_\") %}\n                    REVOKE USAGE ON SCHEMA {{ target.database }}.{{ schema }} FROM {{ role }};\n                    REVOKE USAGE ON ALL FUNCTIONS IN SCHEMA {{ target.database }}.{{ schema }} FROM {{ role }};\n                {%- else -%}\n                    GRANT USAGE ON SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n                    GRANT USAGE ON ALL FUNCTIONS IN SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n\n                    GRANT SELECT ON ALL TABLES IN SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n                    GRANT SELECT ON ALL VIEWS IN SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n                {%- endif -%}\n            {%- endset -%}\n            {%- set outer.sql = outer.sql ~ sql -%}\n    {%- endfor -%}\n    {{ outer.sql }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.288569, "supported_languages": null}, "macro.livequery_base.apply_grants_to_all_schema": {"name": "apply_grants_to_all_schema", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/grants.sql", "original_file_path": "macros/grants.sql", "unique_id": "macro.livequery_base.apply_grants_to_all_schema", "macro_sql": "{% macro apply_grants_to_all_schema() %}\n{#\n    Run SQL to grant permissions to roles for all schemas.\n    This is useful for when a new role is created and needs to be granted access to all schemas.\n    This is not used in the normal grant process.\n\n    `dbt run-operation apply_grants_to_all_schema`\n #}\n    {% if execute and target.name in (\"prod\", \"hosted\",) %}\n        {% set sql_get_schema %}\n            SELECT SCHEMA_NAME\n            FROM {{ target.database }}.INFORMATION_SCHEMA.SCHEMATA\n            WHERE SCHEMA_NAME NOT IN ('PUBLIC', 'INFORMATION_SCHEMA')\n        {%- endset -%}\n        {%- set results = run_query(sql_get_schema) -%}\n        {% set sql_apply_grants %}\n            {%- for schema in results.columns[0].values() -%}\n                {{ apply_grants_by_schema(schema) }}\n            {%- endfor -%}\n        {%- endset -%}\n        {% do log(sql_apply_grants, true) %}\n        {% do run_query(sql_apply_grants) %}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.livequery_base.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.289094, "supported_languages": null}, "macro.livequery_base.config_core_live": {"name": "config_core_live", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/live.yaml.sql", "original_file_path": "macros/core/live.yaml.sql", "unique_id": "macro.livequery_base.config_core_live", "macro_sql": "{% macro config_core_live(schema=\"live\") %}\n\n- name: {{ schema }}.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [data, VARIANT]\n    - [secret_name, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          method,\n          url,\n          headers,\n          data,\n          _utils.UDF_WHOAMI(),\n          secret_name\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [data, VARIANT]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          method,\n          url,\n          headers,\n          data,\n          _utils.UDF_WHOAMI(),\n          ''\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n    - [data, VARIANT]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'POST',\n          url,\n          {'Content-Type': 'application/json'},\n          data,\n          _utils.UDF_WHOAMI(),\n          ''\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n    - [data, VARIANT]\n    - [secret_name, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'POST',\n          url,\n          {'Content-Type': 'application/json'},\n          data,\n          _utils.UDF_WHOAMI(),\n          secret_name\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'GET',\n          url,\n          {},\n          NULL,\n          _utils.UDF_WHOAMI(),\n          ''\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n    - [secret_name, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'GET',\n          url,\n          {},\n          NULL,\n          _utils.UDF_WHOAMI(),\n          secret_name\n      )\n\n- name: {{ schema }}.udf_rpc\n  signature:\n    - [blockchain, STRING]\n    - [network, STRING]\n    - [method, STRING]\n    - [parameters, VARIANT]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n    COMMENT = $$Executes an JSON RPC call on a blockchain.$$\n  sql: |\n    {{ sql_live_rpc_call(\"method\", \"parameters\", \"blockchain\", \"network\") | indent(4) -}}\n\n- name: {{ schema }}.udf_allow_list\n  signature: []\n  return_type: ARRAY\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns a list of allowed domains.$$\n  sql: allowed\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_base.sql_live_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.290317, "supported_languages": null}, "macro.livequery_base.config_core__live": {"name": "config_core__live", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/_live.yaml.sql", "original_file_path": "macros/core/_live.yaml.sql", "unique_id": "macro.livequery_base.config_core__live", "macro_sql": "{% macro config_core__live(schema=\"_live\") %}\n\n- name: {{ schema }}.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [DATA, VARIANT]\n    - [user_id, STRING]\n    - [SECRET, STRING]\n  return_type: VARIANT\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n  sql: udf_api\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.290544, "supported_languages": null}, "macro.livequery_base.config_core_utils": {"name": "config_core_utils", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/utils.yaml.sql", "original_file_path": "macros/core/utils.yaml.sql", "unique_id": "macro.livequery_base.config_core_utils", "macro_sql": "{% macro config_core_utils(schema=\"utils\") %}\n\n\n- name: {{ schema }}.udf_register_secret\n  signature:\n    - [request_id, STRING]\n    - [key, STRING]\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT\n      _utils.UDF_REGISTER_SECRET(REQUEST_ID, _utils.UDF_WHOAMI(), KEY)\n\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ python_hex_to_int() | indent(4) }}\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [encoding, STRING]\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ python_udf_hex_to_int_with_encoding() | indent(4) }}\n- name: {{ schema }}.udf_evm_text_signature\n  signature:\n    - [abi, VARIANT]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'get_simplified_signature'\n  sql: |\n    {{ create_udf_evm_text_signature() | indent(4) }}\n- name: {{ schema }}.udf_keccak256\n  signature:\n    - [event_name, VARCHAR(255)]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    PACKAGES = ('pycryptodome==3.15.0')\n    HANDLER = 'udf_encode'\n  sql: |\n    {{ create_udf_keccak256() | indent(4) }}\n- name: {{ schema }}.udf_hex_to_string\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT\n      LTRIM(regexp_replace(\n        try_hex_decode_string(hex),\n          '[\\x00-\\x1F\\x7F-\\x9F\\xAD]', '', 1))\n- name: {{ schema }}.udf_int_to_hex\n  signature:\n    - [int, INTEGER]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    select CONCAT('0x', TRIM(TO_CHAR(int, 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')))\n\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call() }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call() }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call(False) }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call(False) }}\n\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, OBJECT]\n    - [doseq, BOOLEAN]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    COMMENT=$$Pthon (function)[https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode] to convert an object to a URL query string.$$\n    HANDLER = 'object_to_url_query_string'\n  sql: |\n    {{ python_object_to_url_query_string() | indent(4) }}\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, ARRAY]\n    - [doseq, BOOLEAN]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    COMMENT=$$Pthon (function)[https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode] to convert an array to a URL query string.$$\n    HANDLER = 'object_to_url_query_string'\n  sql: |\n    {{ python_object_to_url_query_string() | indent(4) }}\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, ARRAY]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT {{ schema }}.udf_urlencode(query, FALSE)\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, OBJECT]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT {{ schema }}.udf_urlencode(query, FALSE)\n- name: {{ schema }}.udf_object_to_url_query_string\n  signature:\n    - [object, OBJECT]\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: SELECT utils.udf_urlencode(object, FALSE)\n\n- name: {{ schema }}.udf_evm_transform_log\n  signature:\n    - [decoded, VARIANT]\n  return_type: VARIANT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform'\n  sql: |\n    {{ python_udf_evm_transform_log() | indent(4) }}\n\n- name: {{ schema }}.udf_evm_decode_log\n  signature:\n    - [abi, ARRAY]\n    - [data, OBJECT]\n  return_type: ARRAY\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n  sql: evm/decode/log\n- name: {{ schema }}.udf_evm_decode_log\n  signature:\n    - [abi, OBJECT]\n    - [data, OBJECT]\n  return_type: ARRAY\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n  sql: evm/decode/log\n\n- name: {{ schema }}.udf_base58_to_hex\n  signature:\n    - [base58, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_base58_to_hex'\n  sql: |\n    {{ create_udf_base58_to_hex() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_base58\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_base58'\n  sql: |\n    {{ create_udf_hex_to_base58() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_bech32\n  signature:\n    - [hex, STRING]\n    - [hrp, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_bech32'\n  sql: |\n    {{ create_udf_hex_to_bech32() | indent(4) }}\n\n- name: {{ schema }}.udf_int_to_binary\n  signature:\n    - [num, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'int_to_binary'\n  sql: |\n    {{ create_udf_int_to_binary() | indent(4) }}\n\n- name: {{ schema }}.udf_binary_to_int\n  signature:\n    - [binary, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'binary_to_int'\n  sql: |\n    {{ create_udf_binary_to_int() | indent(4) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_base.python_hex_to_int", "macro.livequery_base.python_udf_hex_to_int_with_encoding", "macro.livequery_base.create_udf_evm_text_signature", "macro.livequery_base.create_udf_keccak256", "macro.livequery_base.sql_udf_json_rpc_call", "macro.livequery_base.python_object_to_url_query_string", "macro.livequery_base.python_udf_evm_transform_log", "macro.livequery_base.create_udf_base58_to_hex", "macro.livequery_base.create_udf_hex_to_base58", "macro.livequery_base.create_udf_hex_to_bech32", "macro.livequery_base.create_udf_int_to_binary", "macro.livequery_base.create_udf_binary_to_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.297822, "supported_languages": null}, "macro.livequery_base.config_core__utils": {"name": "config_core__utils", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/_utils.yaml.sql", "original_file_path": "macros/core/_utils.yaml.sql", "unique_id": "macro.livequery_base.config_core__utils", "macro_sql": "{% macro config_core__utils(schema=\"_utils\") %}\n\n- name: {{ schema }}.udf_introspect\n  signature:\n    - [echo, STRING]\n  func_type: SECURE EXTERNAL\n  return_type: TEXT\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  sql: introspect\n\n- name: {{ schema }}.udf_user_tier\n  signature: []\n  func_type: SECURE\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT\n      COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):userTier::STRING, 'community')\n\n- name: {{ schema }}.udf_provider\n  signature: []\n  func_type: SECURE\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT\n      COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):provider::STRING, 'quicknode')\n\n- name: {{ schema }}.udf_whoami\n  signature: []\n  func_type: SECURE\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT\n      COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):userId::STRING, CURRENT_USER())\n\n- name: {{ schema }}.udf_register_secret\n  signature:\n    - [request_id, STRING]\n    - [user_id, STRING]\n    - [key, STRING]\n  return_type: OBJECT\n  func_type: SECURE EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n  sql: secret/register\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.298451, "supported_languages": null}, "macro.livequery_base.sql_udf_json_rpc_call": {"name": "sql_udf_json_rpc_call", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.sql", "original_file_path": "macros/core/functions.sql", "unique_id": "macro.livequery_base.sql_udf_json_rpc_call", "macro_sql": "{% macro sql_udf_json_rpc_call(use_default_id=True ) %}\n    SELECT IFF(method IS NULL or params IS NULL,\n              NULL,\n              {\n                'jsonrpc': '2.0',\n                'method': method,\n                'params': params\n                {% if use_default_id %}\n                  , 'id': hash(method, params)::string\n                {% else %}\n                  , 'id': id\n                {% endif %}\n              }\n              )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.298698, "supported_languages": null}, "macro.livequery_base.python_hex_to_int": {"name": "python_hex_to_int", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.python_hex_to_int", "macro_sql": "{% macro python_hex_to_int() %}\ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    try:\n        return str(int(hex, 16)) if hex and hex != \"0x\" else None\n    except:\n        return None\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3002071, "supported_languages": null}, "macro.livequery_base.python_udf_hex_to_int_with_encoding": {"name": "python_udf_hex_to_int_with_encoding", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.python_udf_hex_to_int_with_encoding", "macro_sql": "{% macro python_udf_hex_to_int_with_encoding() %}\ndef hex_to_int(encoding, hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('hex', '200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', '0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', NULL);\n    >> NULL\n    hex_to_int('s2c', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf');\n    >> -440911153\n    \"\"\"\n    try:\n        if not hex:\n            return None\n        if encoding.lower() == 's2c':\n            if hex[0:2].lower() != '0x':\n                hex = f'0x{hex}'\n\n            bits = len(hex[2:]) * 4\n            value = int(hex, 0)\n            if value & (1 << (bits - 1)):\n                value -= 1 << bits\n            return str(value)\n        else:\n            return str(int(hex, 16))\n    except:\n        return None\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.30033, "supported_languages": null}, "macro.livequery_base.create_udf_keccak256": {"name": "create_udf_keccak256", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.create_udf_keccak256", "macro_sql": "{% macro create_udf_keccak256() %}\nfrom Crypto.Hash import keccak\n\ndef udf_encode(event_name):\n    keccak_hash = keccak.new(digest_bits=256)\n    keccak_hash.update(event_name.encode('utf-8'))\n    return '0x' + keccak_hash.hexdigest()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3004081, "supported_languages": null}, "macro.livequery_base.create_udf_evm_text_signature": {"name": "create_udf_evm_text_signature", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.create_udf_evm_text_signature", "macro_sql": "{% macro create_udf_evm_text_signature() %}\n\ndef get_simplified_signature(abi):\n    def generate_signature(inputs):\n        signature_parts = []\n        for input_data in inputs:\n            if 'components' in input_data:\n                component_signature_parts = []\n                components = input_data['components']\n                component_signature_parts.extend(generate_signature(components))\n                component_signature_parts[-1] = component_signature_parts[-1].rstrip(\",\")\n                if input_data['type'].endswith('[]'):\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \")[],\")\n                else:\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \"),\")\n            else:\n                signature_parts.append(input_data['type'].replace('enum ', '').replace(' payable', '') + \",\")\n        return signature_parts\n\n    signature_parts = [abi['name'] + \"(\"]\n    signature_parts.extend(generate_signature(abi['inputs']))\n    signature_parts[-1] = signature_parts[-1].rstrip(\",\") + \")\"\n    return \"\".join(signature_parts)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.300525, "supported_languages": null}, "macro.livequery_base.python_object_to_url_query_string": {"name": "python_object_to_url_query_string", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.python_object_to_url_query_string", "macro_sql": "{% macro python_object_to_url_query_string() %}\nfrom urllib.parse import urlencode\n\ndef object_to_url_query_string(query, doseq=False):\n    {# return type(query) #}\n    if isinstance(query, dict):\n        return urlencode(query, doseq)\n    return urlencode([tuple(i) for i in query], doseq)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3006048, "supported_languages": null}, "macro.livequery_base.python_udf_evm_transform_log": {"name": "python_udf_evm_transform_log", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.python_udf_evm_transform_log", "macro_sql": "{% macro python_udf_evm_transform_log(schema) %}\nfrom copy import deepcopy\n\ndef transform_event(event: dict):\n    new_event = deepcopy(event)\n    if new_event.get(\"components\"):\n        components = new_event.get(\"components\")\n        for iy, y in enumerate(new_event[\"value\"]):\n            for i, c in enumerate(components):\n                y[i] = {\"value\": y[i], **c}\n            new_event[\"value\"][iy] = {z[\"name\"]: z[\"value\"] for z in y}\n        return new_event\n    else:\n        return event\n\n\ndef transform(events: list):\n    try:\n        results = [\n            transform_event(event) if event[\"decoded\"] else event\n            for event in events[\"data\"]\n        ]\n        events[\"data\"] = results\n        return events\n    except:\n        return events\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3009439, "supported_languages": null}, "macro.livequery_base.create_udf_base58_to_hex": {"name": "create_udf_base58_to_hex", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.create_udf_base58_to_hex", "macro_sql": "{% macro create_udf_base58_to_hex() %}\n\ndef transform_base58_to_hex(base58):\n    if base58 is None:\n        return 'Invalid input'\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    base_count = len(ALPHABET)\n\n    num = 0\n    leading_zeros = 0\n\n    for char in base58:\n        if char == '1':\n            leading_zeros += 1\n        else:\n            break\n\n    for char in base58:\n        num *= base_count\n        if char in ALPHABET:\n            num += ALPHABET.index(char)\n        else:\n            return 'Invalid character in input'\n\n    hex_string = hex(num)[2:]\n\n    if len(hex_string) % 2 != 0:\n        hex_string = '0' + hex_string\n\n    hex_leading_zeros = '00' * leading_zeros\n\n    return '0x' + hex_leading_zeros + hex_string\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3010519, "supported_languages": null}, "macro.livequery_base.create_udf_hex_to_base58": {"name": "create_udf_hex_to_base58", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.create_udf_hex_to_base58", "macro_sql": "{% macro create_udf_hex_to_base58() %}\n\ndef transform_hex_to_base58(hex):\n    if hex is None or not hex.startswith('0x'):\n        return 'Invalid input'\n\n    hex = hex[2:]\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(hex)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.301148, "supported_languages": null}, "macro.livequery_base.create_udf_hex_to_bech32": {"name": "create_udf_hex_to_bech32", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.create_udf_hex_to_bech32", "macro_sql": "{% macro create_udf_hex_to_bech32() %}\n\ndef transform_hex_to_bech32(hex, hrp=''):\n    CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n\n    def bech32_polymod(values):\n        generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n        checksum = 1\n        for value in values:\n            top = checksum >> 25\n            checksum = ((checksum & 0x1ffffff) << 5) ^ value\n            for i in range(5):\n                checksum ^= generator[i] if ((top >> i) & 1) else 0\n        return checksum\n\n    def bech32_hrp_expand(hrp):\n        return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n\n    def bech32_create_checksum(hrp, data):\n        values = bech32_hrp_expand(hrp) + data\n        polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n        return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n\n    def bech32_convertbits(data, from_bits, to_bits, pad=True):\n        acc = 0\n        bits = 0\n        ret = []\n        maxv = (1 << to_bits) - 1\n        max_acc = (1 << (from_bits + to_bits - 1)) - 1\n        for value in data:\n            acc = ((acc << from_bits) | value) & max_acc\n            bits += from_bits\n            while bits >= to_bits:\n                bits -= to_bits\n                ret.append((acc >> bits) & maxv)\n        if pad and bits:\n            ret.append((acc << (to_bits - bits)) & maxv)\n        return ret\n\n    if hex is None or not hex.startswith('0x'):\n        return 'Invalid input'\n\n    hex = hex[2:]\n\n    data = bytes.fromhex(hex)\n    data5bit = bech32_convertbits(list(data), 8, 5)\n\n    if data5bit is None:\n        return 'Data conversion failed'\n\n    checksum = bech32_create_checksum(hrp, data5bit)\n    \n    return hrp + '1' + ''.join([CHARSET[d] for d in data5bit + checksum])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3013031, "supported_languages": null}, "macro.livequery_base.create_udf_int_to_binary": {"name": "create_udf_int_to_binary", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.create_udf_int_to_binary", "macro_sql": "{% macro create_udf_int_to_binary() %}\n\ndef int_to_binary(num):\n    num = int(num)\n    is_negative = num < 0\n    if is_negative:\n        num = -num\n\n    binary_string = bin(num)[2:]\n\n    if is_negative:\n        inverted_string = \"\".join(\"1\" if bit == \"0\" else \"0\" for bit in binary_string)\n\n        carry = 1\n        result = \"\"\n        for i in range(len(inverted_string) - 1, -1, -1):\n            if inverted_string[i] == \"1\" and carry == 1:\n                result = \"0\" + result\n            elif inverted_string[i] == \"0\" and carry == 1:\n                result = \"1\" + result \n                carry = 0\n            else:\n                result = inverted_string[i] + result\n\n        binary_string = result \n\n    return binary_string \n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.301406, "supported_languages": null}, "macro.livequery_base.create_udf_binary_to_int": {"name": "create_udf_binary_to_int", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_base.create_udf_binary_to_int", "macro_sql": "{% macro create_udf_binary_to_int() %}\n\ndef binary_to_int(binary):\n\n  for char in binary:\n    if char not in \"01\":\n      raise ValueError(\"Input string must be a valid binary string.\")\n      \n  integer = 0\n\n  for i, digit in enumerate(binary[::-1]):\n    digit_int = int(digit)\n\n    integer += digit_int * 2**i\n\n  return str(integer)\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.301486, "supported_languages": null}, "macro.livequery_base.config_core_secrets": {"name": "config_core_secrets", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/core/secrets.yaml.sql", "original_file_path": "macros/core/secrets.yaml.sql", "unique_id": "macro.livequery_base.config_core_secrets", "macro_sql": "{% macro config_core_secrets(schema=\"secrets\") %}\n\n\n- name: {{ schema }}.udf_register_secret\n  signature:\n    - [request_id, STRING]\n    - [key, STRING]\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Registers a secret with the given request ID and key. $$\n  sql: |\n    SELECT\n      _utils.UDF_REGISTER_SECRET(REQUEST_ID, _utils.UDF_WHOAMI(), KEY)\n\n- name: {{ schema }}.udf_get_secret\n  signature:\n    - [name, STRING]\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Returns the secret value for the given secret name. $$\n  sql: |\n    SELECT\n      live.udf_api(\n        CONCAT_WS('/', {{ construct_api_route(\"secret\") }}, _utils.UDF_WHOAMI(), NAME)\n        ):data::OBJECT\n\n- name: {{ schema }}.udf_get_secrets\n  signature: []\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Returns all secrets for the current user. $$\n  sql: |\n    SELECT\n      {{ schema }}.udf_get_secret('')\n\n- name: {{ schema }}.udf_create_secret\n  signature:\n    - [name, STRING]\n    - [secret, OBJECT]\n  func_type: SECURE\n  return_type: [INTEGER, the HTTP status code - 200 indicates success]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Creates a new secret with the given name and value. $$\n  sql: |\n    SELECT\n      live.udf_api(\n        CONCAT_WS('/', {{ construct_api_route(\"secret\") }}, _utils.UDF_WHOAMI(), NAME),\n        SECRET\n        ):status_code::INTEGER\n\n- name: {{ schema }}.udf_delete_secret\n  signature:\n    - [name, STRING]\n  func_type: SECURE\n  return_type: [INTEGER, the HTTP status code - 200 indicates success]\n  options: |\n    NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Deletes the secret with the given name. $$\n  sql: |\n    SELECT\n      live.udf_api(\n        'DELETE',\n        CONCAT_WS('/', {{ construct_api_route(\"secret\") }}, _utils.UDF_WHOAMI(), NAME),\n        {},\n        {},\n        ''\n        ):status_code::INTEGER\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_base.construct_api_route"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3024461, "supported_languages": null}, "macro.livequery_base.base_test_udf": {"name": "base_test_udf", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/tests/udfs.sql", "original_file_path": "macros/tests/udfs.sql", "unique_id": "macro.livequery_base.base_test_udf", "macro_sql": "{% macro base_test_udf(model, udf, args, assertions) %}\n{#\n  Generates a test for a UDF.\n #}\n{% if execute %}\n    {%- set context -%}\n      SET LIVEQUERY_CONTEXT = '{\"userId\":\"{{ var(\"STUDIO_TEST_USER_ID\") }}\"}';\n    {%- endset -%}\n  {%- do run_query(context) -%}\n{%- endif -%}\n{%- set call -%}\n{{ target.database }}.{{ udf }}({{ args }})\n{%- endset -%}\n,\ntest AS\n(\n    SELECT\n        '{{ udf }}' AS test_name\n        ,[{{ args }}] as parameters\n        ,{{ call }} AS result\n)\n  {% for assertion in assertions %}\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $${{ assertion }}$$ AS assertion,\n    $${{ context ~ \"\\n\" }}SELECT {{ call ~ \"\\n\" }};$$ AS sql\n    FROM test\n    WHERE NOT {{ assertion }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif -%}\n  {%- endfor -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.303334, "supported_languages": null}, "macro.livequery_base.sql_live_rpc_call": {"name": "sql_live_rpc_call", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/utils.sql", "original_file_path": "macros/livequery/utils.sql", "unique_id": "macro.livequery_base.sql_live_rpc_call", "macro_sql": "{% macro sql_live_rpc_call(method, params, blockchain, network) %}\n{#\n    Helper macro to call a JSON RPC method on a live node.\n\n    Parameters:\n        method (string): The JSON RPC method to call.\n        params (string): The JSON RPC parameters to pass to the method.\n        blockchain (string): The blockchain to call the method on.\n        network (string): The network to call the method on.\n    Returns:\n        string: The SQL to call the method.\n #}\n    WITH result as (\n        SELECT\n            live.udf_api(\n                '{endpoint}'\n                ,utils.udf_json_rpc_call({{ method }}, {{ params }})\n                ,concat_ws('/', 'integration', _utils.udf_provider(), {{ blockchain }}, {{ network }})\n            )::VARIANT:data AS data\n    )\n    SELECT\n        COALESCE(data:result, {'error':data:error})\n    FROM result\n{% endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.303651, "supported_languages": null}, "macro.livequery_base.drop_function": {"name": "drop_function", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.drop_function", "macro_sql": "{% macro drop_function(\n        func_name,\n        signature\n    ) %}\n    DROP FUNCTION IF EXISTS {{ func_name }}({{ compile_signature(signature, drop_ = True) }});\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_base.compile_signature"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.30624, "supported_languages": null}, "macro.livequery_base.construct_api_route": {"name": "construct_api_route", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.construct_api_route", "macro_sql": "\n\n{%- macro construct_api_route(route) -%}\n    'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}{{ route }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.306376, "supported_languages": null}, "macro.livequery_base.compile_signature": {"name": "compile_signature", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.compile_signature", "macro_sql": "{%- macro compile_signature(\n        params,\n        drop_ = False\n    ) -%}\n    {% for p in params -%}\n        {%- set name = p.0 -%}\n        {%- set data_type = p.1 -%}\n        {% if drop_ %}\n            {{ data_type -}}\n        {% else %}\n            {{ name ~ \" \" ~ data_type -}}\n        {%- endif -%}\n        {%-if not loop.last -%},\n        {%- endif -%}\n    {% endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.306729, "supported_languages": null}, "macro.livequery_base.create_sql_function": {"name": "create_sql_function", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.create_sql_function", "macro_sql": "{% macro create_sql_function(\n        name_,\n        signature,\n        return_type,\n        sql_,\n        api_integration = none,\n        options = none,\n        func_type = none\n    ) %}\n    CREATE OR REPLACE {{ func_type }} FUNCTION {{ name_ }}(\n            {{- compile_signature(signature) }}\n    )\n    COPY GRANTS\n    RETURNS {{ return_type }}\n    {% if options -%}\n        {{ options }}\n    {% endif %}\n    {%- if api_integration -%}\n    api_integration = {{ api_integration }}\n    AS {{ construct_api_route(sql_) ~ \";\" }}\n    {% else -%}\n    AS\n    $$\n    {{ sql_ }}\n    $$;\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_base.compile_signature", "macro.livequery_base.construct_api_route"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.307153, "supported_languages": null}, "macro.livequery_base.create_or_drop_function_from_config": {"name": "create_or_drop_function_from_config", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.create_or_drop_function_from_config", "macro_sql": "{%- macro create_or_drop_function_from_config(\n        config,\n        drop_ = False\n    ) -%}\n    {% set name_ = config [\"name\"] %}\n    {% set signature = config [\"signature\"] %}\n    {% set return_type = config [\"return_type\"] if config [\"return_type\"] is string else config [\"return_type\"][0] %}\n    {% set sql_ = config [\"sql\"] %}\n    {% set options = config [\"options\"] %}\n    {% set api_integration = config [\"api_integration\"] %}\n    {% set func_type = config [\"func_type\"] %}\n\n    {% if not drop_ -%}\n        {{ create_sql_function(\n            name_ = name_,\n            signature = signature,\n            return_type = return_type,\n            sql_ = sql_,\n            options = options,\n            api_integration = api_integration,\n            func_type = func_type\n        ) }}\n    {%- else -%}\n        {{ drop_function(\n            name_,\n            signature = signature,\n        ) }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_base.create_sql_function", "macro.livequery_base.drop_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.308002, "supported_languages": null}, "macro.livequery_base.crud_udfs": {"name": "crud_udfs", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.crud_udfs", "macro_sql": "{% macro crud_udfs(config_func, schema, drop_) %}\n{#\n    Generate create or drop statements for a list of udf configs for a given schema\n\n    config_func: function that returns a list of udf configs\n    drop_: whether to drop or create the udfs\n #}\n    {% set udfs = fromyaml(config_func())%}\n    {%- for udf in udfs -%}\n        {% if udf[\"name\"].split(\".\") | first == schema %}\n            CREATE SCHEMA IF NOT EXISTS {{ schema }};\n            {{- create_or_drop_function_from_config(udf, drop_=drop_) -}}\n        {%- endif -%}\n    {%- endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_base.create_or_drop_function_from_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.308376, "supported_languages": null}, "macro.livequery_base.crud_udfs_by_chain": {"name": "crud_udfs_by_chain", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.crud_udfs_by_chain", "macro_sql": "{% macro crud_udfs_by_chain(config_func, blockchain, network, drop_) %}\n{#\n    Generate create or drop statements for a list of udf configs for a given blockchain and network\n\n    config_func: function that returns a list of udf configs\n    blockchain: blockchain name\n    network: network name\n    drop_: whether to drop or create the udfs\n #}\n  {% set schema = blockchain if not network else blockchain ~ \"_\" ~ network %}\n    CREATE SCHEMA IF NOT EXISTS {{ schema }};\n    {%-  set configs = fromyaml(config_func(blockchain, network)) if network else fromyaml(config_func(schema, blockchain)) -%}\n    {%- for udf in configs -%}\n        {{- create_or_drop_function_from_config(udf, drop_=drop_) -}}\n    {%- endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_base.create_or_drop_function_from_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3088121, "supported_languages": null}, "macro.livequery_base.ephemeral_deploy_core": {"name": "ephemeral_deploy_core", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.ephemeral_deploy_core", "macro_sql": "{% macro ephemeral_deploy_core(config) %}\n{#\n    This macro is used to deploy functions using ephemeral models.\n    It should only be used within an ephemeral model.\n #}\n    {% if execute and (var(\"UPDATE_UDFS_AND_SPS\") or var(\"DROP_UDFS_AND_SPS\")) and model.unique_id in selected_resources %}\n        {% set sql %}\n            {{- crud_udfs(config, this.schema, var(\"DROP_UDFS_AND_SPS\")) -}}\n        {%- endset -%}\n        {%- if var(\"DROP_UDFS_AND_SPS\") -%}\n            {%- do log(\"Drop core udfs: \" ~ this.database ~ \".\" ~ this.schema, true) -%}\n        {%- else -%}\n            {%- do log(\"Deploy core udfs: \" ~ this.database ~ \".\" ~ this.schema, true) -%}\n        {%- endif -%}\n        {%- do run_query(sql ~ apply_grants_by_schema(this.schema)) -%}\n    {%- endif -%}\n    SELECT '{{ model.schema }}' as schema_\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_base.crud_udfs", "macro.dbt.run_query", "macro.livequery_base.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.30947, "supported_languages": null}, "macro.livequery_base.ephemeral_deploy": {"name": "ephemeral_deploy", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_base.ephemeral_deploy", "macro_sql": "{% macro ephemeral_deploy(configs) %}\n{#\n    This macro is used to deploy functions using ephemeral models.\n    It should only be used within an ephemeral model.\n #}\n    {%- set blockchain = this.schema -%}\n    {%- set network = this.identifier -%}\n    {% set schema = blockchain ~ \"_\" ~ network %}\n    {% if execute and (var(\"UPDATE_UDFS_AND_SPS\") or var(\"DROP_UDFS_AND_SPS\")) and model.unique_id in selected_resources %}\n        {% set sql %}\n            {% for config in configs %}\n                {{- crud_udfs_by_chain(config, blockchain, network, var(\"DROP_UDFS_AND_SPS\")) -}}\n            {%- endfor -%}\n        {%- endset -%}\n        {%- if var(\"DROP_UDFS_AND_SPS\") -%}\n            {%- do log(\"Drop partner udfs: \" ~ this.database ~ \".\" ~ schema, true) -%}\n        {%- else -%}\n            {%- do log(\"Deploy partner udfs: \" ~ this.database ~ \".\" ~ schema, true) -%}\n        {%- endif -%}\n        {%- do run_query(sql ~ apply_grants_by_schema(schema)) -%}\n    {%- endif -%}\n    SELECT '{{ model.schema }}' as schema_\n{%- endmacro -%}", "depends_on": {"macros": ["macro.livequery_base.crud_udfs_by_chain", "macro.dbt.run_query", "macro.livequery_base.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.310271, "supported_languages": null}, "macro.livequery_base.create_udf_introspect": {"name": "create_udf_introspect", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/livequery/streamline_udfs.sql", "original_file_path": "macros/livequery/streamline_udfs.sql", "unique_id": "macro.livequery_base.create_udf_introspect", "macro_sql": "{% macro create_udf_introspect(\n        drop_ = False\n    ) %}\n    {% set name_ = 'silver.udf_introspect' %}\n    {% set signature = [('json', 'variant')] %}\n    {% set return_type = 'text' %}\n    {% set sql_ = construct_api_route(\"introspect\") %}\n    {% if not drop_ %}\n        {{ create_sql_function(\n            name_ = name_,\n            signature = signature,\n            return_type = return_type,\n            sql_ = sql_,\n            api_integration = var(\"API_INTEGRATION\")\n        ) }}\n    {% else %}\n        {{ drop_function(\n            name_,\n            signature = signature,\n        ) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_base.construct_api_route", "macro.livequery_base.create_sql_function", "macro.livequery_base.drop_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.310993, "supported_languages": null}, "macro.livequery_base.add_database_or_schema_tags": {"name": "add_database_or_schema_tags", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/tags/add_database_or_schema_tags.sql", "original_file_path": "macros/tags/add_database_or_schema_tags.sql", "unique_id": "macro.livequery_base.add_database_or_schema_tags", "macro_sql": "{% macro add_database_or_schema_tags() %}\n    {{ set_database_tag_value('BLOCKCHAIN_NAME','LIVEQUERY') }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_base.set_database_tag_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.311142, "supported_languages": null}, "macro.livequery_base.apply_meta_as_tags": {"name": "apply_meta_as_tags", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_base.apply_meta_as_tags", "macro_sql": "{% macro apply_meta_as_tags(results) %}\n    {% if var(\"UPDATE_SNOWFLAKE_TAGS\") %}\n        {{ log('apply_meta_as_tags', info=False) }}\n        {{ log(results, info=False) }}\n        {% if execute %}\n\n            {%- set tags_by_schema = {} -%}\n            {% for res in results -%}\n                {% if res.node.meta.database_tags %}\n\n                    {%- set model_database = res.node.database -%}\n                    {%- set model_schema = res.node.schema -%}\n                    {%- set model_schema_full = model_database+'.'+model_schema -%}\n                    {%- set model_alias = res.node.alias -%}\n\n                    {% if model_schema_full not in tags_by_schema.keys() %}\n                        {{ log('need to fetch tags for schema '+model_schema_full, info=False) }}\n                        {%- call statement('main', fetch_result=True) -%}\n                            show tags in {{model_database}}.{{model_schema}}\n                        {%- endcall -%}\n                        {%- set _ = tags_by_schema.update({model_schema_full: load_result('main')['table'].columns.get('name').values()|list}) -%}\n                        {{ log('Added tags to cache', info=False) }}\n                    {% else %}\n                        {{ log('already have tag info for schema', info=False) }}\n                    {% endif %}\n\n                    {%- set current_tags_in_schema = tags_by_schema[model_schema_full] -%}\n                    {{ log('current_tags_in_schema:', info=False) }}\n                    {{ log(current_tags_in_schema, info=False) }}\n                    {{ log(\"========== Processing tags for \"+model_schema_full+\".\"+model_alias+\" ==========\", info=False) }}\n\n                    {% set line -%}\n                        node: {{ res.node.unique_id }}; status: {{ res.status }} (message: {{ res.message }})\n                        node full: {{ res.node}}\n                        meta: {{ res.node.meta}}\n                        materialized: {{ res.node.config.materialized }}\n                    {%- endset %}\n                    {{ log(line, info=False) }}\n\n                    {%- call statement('main', fetch_result=True) -%}\n                        select LEVEL,UPPER(TAG_NAME) as TAG_NAME,TAG_VALUE from table(information_schema.tag_references_all_columns('{{model_schema}}.{{model_alias}}', 'table'))\n                    {%- endcall -%}\n                    {%- set existing_tags_for_table = load_result('main')['data'] -%}\n                    {{ log('Existing tags for table:', info=False) }}\n                    {{ log(existing_tags_for_table, info=False) }}\n\n                    {{ log('--', info=False) }}\n                    {% for table_tag in res.node.meta.database_tags.table %}\n\n                        {{ create_tag_if_missing(current_tags_in_schema,table_tag|upper) }}\n                        {% set desired_tag_value = res.node.meta.database_tags.table[table_tag] %}\n\n                        {{set_table_tag_value_if_different(model_schema,model_alias,table_tag,desired_tag_value,existing_tags_for_table)}}\n                    {% endfor %}\n                    {{ log(\"========== Finished processing tags for \"+model_alias+\" ==========\", info=False) }}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.livequery_base.create_tag_if_missing", "macro.livequery_base.set_table_tag_value_if_different"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3223429, "supported_languages": null}, "macro.livequery_base.create_tag_if_missing": {"name": "create_tag_if_missing", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_base.create_tag_if_missing", "macro_sql": "{% macro create_tag_if_missing(all_tag_names,table_tag) %}\n\t{% if table_tag not in all_tag_names %}\n\t\t{{ log('Creating missing tag '+table_tag, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            create tag if not exists silver.{{table_tag}}\n        {%- endcall -%}\n\t\t{{ log(load_result('main').data, info=False) }}\n\t{% else %}\n\t\t{{ log('Tag already exists: '+table_tag, info=False) }}\n\t{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3228438, "supported_languages": null}, "macro.livequery_base.set_table_tag_value_if_different": {"name": "set_table_tag_value_if_different", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_base.set_table_tag_value_if_different", "macro_sql": "{% macro set_table_tag_value_if_different(model_schema,table_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at table level', info=False) }}\n    {%- set existing_tag_for_table = existing_tags|selectattr('0','equalto','TABLE')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for table:', info=False) }}\n    {{ log(existing_tag_for_table[0], info=False) }}\n    {% if existing_tag_for_table|length > 0 and existing_tag_for_table[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{model_schema}}.{{table_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.323703, "supported_languages": null}, "macro.livequery_base.set_column_tag_value_if_different": {"name": "set_column_tag_value_if_different", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_base.set_column_tag_value_if_different", "macro_sql": "{% macro set_column_tag_value_if_different(table_name,column_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at column level', info=False) }}\n    {%- set existing_tag_for_column = existing_tags|selectattr('0','equalto','COLUMN')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for column:', info=False) }}\n    {{ log(existing_tag_for_column[0], info=False) }}\n    {% if existing_tag_for_column|length > 0 and existing_tag_for_column[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{table_name}} modify column {{column_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.324573, "supported_languages": null}, "macro.livequery_base.set_database_tag_value": {"name": "set_database_tag_value", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_base.set_database_tag_value", "macro_sql": "{% macro set_database_tag_value(tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter database {{target.database}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.324905, "supported_languages": null}, "macro.livequery_base.set_schema_tag_value": {"name": "set_schema_tag_value", "resource_type": "macro", "package_name": "livequery_base", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_base.set_schema_tag_value", "macro_sql": "{% macro set_schema_tag_value(target_schema,tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter schema {{target.database}}.{{target_schema}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3252459, "supported_languages": null}, "macro.livequery_base.test_test_udf": {"name": "test_test_udf", "resource_type": "macro", "package_name": "livequery_base", "path": "tests/generic/test_udf.sql", "original_file_path": "tests/generic/test_udf.sql", "unique_id": "macro.livequery_base.test_test_udf", "macro_sql": "{% test test_udf(model, column_name, args, assertions) %}\n    {#\n        This is a generic test for UDFs.\n        The udfs are deployed using ephemeral models, so we need to\n        use the ephemeral model name to get the udf name.\n     #}\n    {%- set schema = model | replace(\"__dbt__cte__\", \"\") -%}\n    {%- set schema = schema.split(\"__\") | first -%}\n    {%- set udf = schema ~ \".\" ~ column_name -%}\n\n    {{ base_test_udf(model, udf, args, assertions) }}\n{% endtest %}", "depends_on": {"macros": ["macro.livequery_base.base_test_udf"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.325709, "supported_languages": null}, "macro.dbt_constraints.postgres__create_primary_key": {"name": "postgres__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_primary_key", "macro_sql": "\n{%- macro postgres__create_primary_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_pk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.331189, "supported_languages": null}, "macro.dbt_constraints.postgres__create_unique_key": {"name": "postgres__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_unique_key", "macro_sql": "\n{%- macro postgres__create_unique_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_uk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.332293, "supported_languages": null}, "macro.dbt_constraints.postgres__create_not_null": {"name": "postgres__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_not_null", "macro_sql": "\n{%- macro postgres__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"ALTER COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- call statement('add_nn', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{table_relation}} {{ modify_statement_csv }};\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.333123, "supported_languages": null}, "macro.dbt_constraints.postgres__create_foreign_key": {"name": "postgres__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__create_foreign_key", "macro_sql": "\n{%- macro postgres__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- call statement('add_fk', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endcall -%}\n                {{ adapter.commit() }}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.334713, "supported_languages": null}, "macro.dbt_constraints.postgres__unique_constraint_exists": {"name": "postgres__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__unique_constraint_exists", "macro_sql": "\n{%- macro postgres__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    select c.oid as constraint_name\n        , upper(col.attname) as column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('p', 'u')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_expectations.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.33551, "supported_languages": null}, "macro.dbt_constraints.postgres__foreign_key_exists": {"name": "postgres__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__foreign_key_exists", "macro_sql": "\n{%- macro postgres__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    select c.oid as fk_name\n        , upper(col.attname) as fk_column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('f')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by fk_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_expectations.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.336291, "supported_languages": null}, "macro.dbt_constraints.postgres__have_references_priv": {"name": "postgres__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__have_references_priv", "macro_sql": "{%- macro postgres__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.336828, "supported_languages": null}, "macro.dbt_constraints.postgres__have_ownership_priv": {"name": "postgres__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__have_ownership_priv", "macro_sql": "{%- macro postgres__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.337354, "supported_languages": null}, "macro.dbt_constraints.postgres__drop_referential_constraints": {"name": "postgres__drop_referential_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__drop_referential_constraints", "macro_sql": "{% macro postgres__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- call statement('drop_constraint_cascade', fetch_result=False, auto_begin=True) -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT IF EXISTS \"{{constraint_name}}\" CASCADE\n        {%- endcall -%}\n        {{ adapter.commit() }}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.337871, "supported_languages": null}, "macro.dbt_constraints.postgres__truncate_relation": {"name": "postgres__truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__truncate_relation", "macro_sql": "{% macro postgres__truncate_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.postgres__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.338062, "supported_languages": null}, "macro.dbt_constraints.postgres__drop_relation": {"name": "postgres__drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "unique_id": "macro.dbt_constraints.postgres__drop_relation", "macro_sql": "{% macro postgres__drop_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.postgres__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.338241, "supported_languages": null}, "macro.dbt_constraints.default__test_primary_key": {"name": "default__test_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.default__test_primary_key", "macro_sql": "\n{%- macro default__test_primary_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"primary key\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns. In\n    addition, if the unique constraint was defined with PRIMARY KEY,\n    then it requires that none of the values in the specified column or\n    columns be the null value.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return for any duplicates and if any of the key columns is null -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}, count(*) as row_count\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n        {% for column in column_names -%}\n        or {{column}} is null\n        {% endfor %}\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.339498, "supported_languages": null}, "macro.dbt_constraints.default__test_unique_key": {"name": "default__test_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.default__test_unique_key", "macro_sql": "\n{%- macro default__test_unique_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"unique constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return any duplicates -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3397388, "supported_languages": null}, "macro.dbt_constraints.default__test_foreign_key": {"name": "default__test_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.default__test_foreign_key", "macro_sql": "\n{%- macro default__test_foreign_key(model, fk_column_names, pk_table_name, pk_column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"referential constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A referential constraint is satisfied if one of the following con-\n    ditions is true, depending on the <match option> specified in the\n    <referential constraint definition>:\n\n    -  If no <match type> was specified then, for each row R1 of the\n        referencing table, either at least one of the values of the\n        referencing columns in R1 shall be a null value, or the value of\n        each referencing column in R1 shall be equal to the value of the\n        corresponding referenced column in some row of the referenced\n        table.\"\n\nThe implications of this standard is that if one column is NULL in a compound foreign key, the other column\ndoes NOT need to match a row in a referenced unique key. This is implemented by first excluding any\nrows from the test that have a NULL value in any of the columns.\n#}\n\n{%- set fk_columns_list=dbt_constraints.get_quoted_column_list(fk_column_names, quote_columns) %}\n{%- set pk_columns_list=dbt_constraints.get_quoted_column_list(pk_column_names, quote_columns) %}\n{%- set fk_columns_csv=dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) %}\n{%- set pk_columns_csv=dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) %}\n{%- set join_conditions = [] -%}\n{%- for x in range(fk_columns_list|count) -%}\n    {%- set join_conditions = join_conditions.append( 'parent.' ~ pk_columns_list[x] ~ ' = child.' ~ fk_columns_list[x] ) -%}\n{%- endfor -%}\n\n{#- This test will return if all the columns are not null\n    and the values are not found in the referenced PK table #}\nwith child as (\n  select\n    {{fk_columns_csv}}\n  from {{model}}\n  where 1=1\n        {% for column in fk_columns_list -%}\n        and {{column}} is not null\n        {% endfor %}\n),\n\nparent as (\n    select\n        {{pk_columns_csv}}\n    from {{pk_table_name}}\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on {{join_conditions | join(' and ')}}\n\n    where parent.{{pk_columns_list | first}} is null\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3405418, "supported_languages": null}, "macro.dbt_constraints.get_quoted_column_list": {"name": "get_quoted_column_list", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.get_quoted_column_list", "macro_sql": "{%- macro get_quoted_column_list(column_array, quote_columns=false) -%}\n\n    {%- if not quote_columns -%}\n        {%- set column_list=column_array -%}\n    {%- elif quote_columns -%}\n        {%- set column_list=[] -%}\n        {%- for column in column_array -%}\n            {%- set column_list = column_list.append( adapter.quote(column) ) -%}\n        {%- endfor -%}\n    {%- else -%}\n        {{ exceptions.raise_compiler_error(\n            \"`quote_columns` argument must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n        ) }}\n    {%- endif -%}\n\n    {{ return(column_list) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3409688, "supported_languages": null}, "macro.dbt_constraints.get_quoted_column_csv": {"name": "get_quoted_column_csv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "unique_id": "macro.dbt_constraints.get_quoted_column_csv", "macro_sql": "{%- macro get_quoted_column_csv(column_array, quote_columns=false) -%}\n\n    {%- set column_list = dbt_constraints.get_quoted_column_list(column_array, quote_columns) -%}\n    {%- set columns_csv=column_list | join(', ') -%}\n    {{ return(columns_csv) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3412118, "supported_languages": null}, "macro.dbt_constraints.test_primary_key": {"name": "test_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.test_primary_key", "macro_sql": "\n\n{%- test primary_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_primary_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.default__test_primary_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.350333, "supported_languages": null}, "macro.dbt_constraints.test_unique_key": {"name": "test_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.test_unique_key", "macro_sql": "{%- test unique_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_unique_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.default__test_unique_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.350687, "supported_languages": null}, "macro.dbt_constraints.test_foreign_key": {"name": "test_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.test_foreign_key", "macro_sql": "{%- test foreign_key(model,\n        column_name=none, fk_column_name=none, fk_column_names=[],\n        pk_table_name=none, to=none,\n        pk_column_name=none, pk_column_names=[], field=none,\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if pk_column_names|count == 0 and (pk_column_name or field) -%}\n        {%- do pk_column_names.append( (pk_column_name or field) ) -%}\n    {%- endif -%}\n    {%- if fk_column_names|count == 0 and (fk_column_name or column_name) -%}\n        {%- do fk_column_names.append( (fk_column_name or column_name) ) -%}\n    {%- endif -%}\n    {%- set pk_table_name = pk_table_name or to -%}\n\n    {{ return(adapter.dispatch('test_foreign_key', 'dbt_constraints')(model, fk_column_names, pk_table_name, pk_column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.default__test_foreign_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.351381, "supported_languages": null}, "macro.dbt_constraints.create_primary_key": {"name": "create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_primary_key", "macro_sql": "\n\n{%- macro create_primary_key(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {{ return(adapter.dispatch('create_primary_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_primary_key"]}, "description": "Calls the adapter-specific version of the macro to create a primary key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1741278783.869747, "supported_languages": null}, "macro.dbt_constraints.create_unique_key": {"name": "create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_unique_key", "macro_sql": "{%- macro create_unique_key(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {{ return(adapter.dispatch('create_unique_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_unique_key"]}, "description": "Calls the adapter-specific version of the macro to create a unique key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1741278783.870065, "supported_languages": null}, "macro.dbt_constraints.create_foreign_key": {"name": "create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_foreign_key", "macro_sql": "{%- macro create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {{ return(adapter.dispatch('create_foreign_key', 'dbt_constraints')(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_foreign_key"]}, "description": "Calls the adapter-specific version of the macro to create a foreign key", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "test_model", "type": "results node", "description": "Accepts the result node of the test related to this constraint"}, {"name": "pk_model", "type": "graph node", "description": "Accepts the graph node of the parent table that has a PK or UK"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the FK reference"}, {"name": "fk_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "fk_column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}, {"name": "constraint_name", "type": "string", "description": "Name of the constraint.  If not specified, a constraint name will be generated."}], "created_at": 1741278783.8710148, "supported_languages": null}, "macro.dbt_constraints.create_not_null": {"name": "create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_not_null", "macro_sql": "{%- macro create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n    {{ return(adapter.dispatch('create_not_null', 'dbt_constraints')(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3524501, "supported_languages": null}, "macro.dbt_constraints.unique_constraint_exists": {"name": "unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.unique_constraint_exists", "macro_sql": "\n\n{%- macro unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {{ return(adapter.dispatch('unique_constraint_exists', 'dbt_constraints')(table_relation, column_names, lookup_cache) ) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__unique_constraint_exists"]}, "description": "Calls the adapter-specific version of the macro to check if a PK or UK already exists", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_relation", "type": "relation", "description": "Accepts the relation of the table to check"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names the constraint must contain"}], "created_at": 1741278783.871496, "supported_languages": null}, "macro.dbt_constraints.foreign_key_exists": {"name": "foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.foreign_key_exists", "macro_sql": "{%- macro foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {{ return(adapter.dispatch('foreign_key_exists', 'dbt_constraints')(table_relation, column_names, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__foreign_key_exists"]}, "description": "Calls the adapter-specific version of the macro to check if a foreign key already exists", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_relation", "type": "relation", "description": "Accepts the relation of the table to check"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names the constraint must contain"}], "created_at": 1741278783.871733, "supported_languages": null}, "macro.dbt_constraints.have_references_priv": {"name": "have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.have_references_priv", "macro_sql": "\n\n{%- macro have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(adapter.dispatch('have_references_priv', 'dbt_constraints')(table_relation, verify_permissions, lookup_cache) ) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.353017, "supported_languages": null}, "macro.dbt_constraints.have_ownership_priv": {"name": "have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.have_ownership_priv", "macro_sql": "{%- macro have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(adapter.dispatch('have_ownership_priv', 'dbt_constraints')(table_relation, verify_permissions, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.353204, "supported_languages": null}, "macro.dbt_constraints.adapter_supports_rely_norely": {"name": "adapter_supports_rely_norely", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.adapter_supports_rely_norely", "macro_sql": "\n\n{%- macro adapter_supports_rely_norely(test_name) -%}\n    {{ return(adapter.dispatch('adapter_supports_rely_norely', 'dbt_constraints')(test_name)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__adapter_supports_rely_norely"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.353354, "supported_languages": null}, "macro.dbt_constraints.default__adapter_supports_rely_norely": {"name": "default__adapter_supports_rely_norely", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.default__adapter_supports_rely_norely", "macro_sql": "\n{%- macro default__adapter_supports_rely_norely(test_name) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.353539, "supported_languages": null}, "macro.dbt_constraints.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.353676, "supported_languages": null}, "macro.dbt_constraints.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.353817, "supported_languages": null}, "macro.dbt_constraints.create_constraints": {"name": "create_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_constraints", "macro_sql": "\n{%- macro create_constraints(\n        constraint_types=[\n            'primary_key',\n            'unique_key',\n            'unique_combination_of_columns',\n            'unique',\n            'foreign_key',\n            'relationships',\n            'not_null'],\n        quote_columns=false) -%}\n    {%- if execute and var('dbt_constraints_enabled', false) and results -%}\n        {%- do log(\"Running dbt Constraints\", info=true) -%}\n\n        {%- set lookup_cache = {\n            \"table_columns\": { },\n            \"table_privileges\": { },\n            \"unique_keys\": { },\n            \"not_null_col\": { },\n            \"foreign_keys\": { } } -%}\n\n        {%- if 'not_null' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['not_null'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'primary_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['primary_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique_combination_of_columns' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_combination_of_columns'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'foreign_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['foreign_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'relationships' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['relationships'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n\n        {%- do log(\"Finished dbt Constraints\", info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.create_constraints_by_type"]}, "description": "Primary macro automatically called `on-run-end` to generate primary keys, unique keys, and foreign keys. The `dbt_constraints_enabled` variable can be set to `false` in your project to disable this macro.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "constraint_types", "type": "array of constraint types", "description": "Accepts a list of tests to consider for constraint creation and whether columns should be quoted. By default it will create all the constraint types. Valid values are ['primary_key', 'unique_key', 'unique_combination_of_columns', 'unique', 'foreign_key', 'relationships']"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}], "created_at": 1741278783.8685079, "supported_languages": null}, "macro.dbt_constraints.test_selected": {"name": "test_selected", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.test_selected", "macro_sql": "\n{%- macro test_selected(test_model) -%}\n\n    {%- if test_model.unique_id in selected_resources -%}\n        {{ return(\"TEST_SELECTED\") }}\n    {%- endif -%}\n    {%- if test_model.attached_node in selected_resources -%} -%}\n        {{ return(\"MODEL_SELECTED\") }}\n    {%- endif -%}\n\n    {#- Check if a PK/UK should be created because it is referenced by a selected FK -#}\n    {%- if test_model.test_metadata.name in (\"primary_key\", \"unique_key\", \"unique_combination_of_columns\", \"unique\") -%}\n        {%- set pk_test_args = test_model.test_metadata.kwargs -%}\n        {%- set pk_test_columns = [] -%}\n        {%- if pk_test_args.column_names -%}\n            {%- set pk_test_columns =  pk_test_args.column_names -%}\n        {%- elif pk_test_args.combination_of_columns -%}\n            {%- set pk_test_columns =  pk_test_args.combination_of_columns -%}\n        {%- elif pk_test_args.column_name -%}\n            {%- set pk_test_columns =  [pk_test_args.column_name] -%}\n        {%- endif -%}\n        {%- for fk_model in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"test\")\n                if  fk_model.test_metadata\n                and fk_model.test_metadata.name in (\"foreign_key\", \"relationships\")\n                and test_model.attached_node in fk_model.depends_on.nodes\n                and ( (fk_model.unique_id and fk_model.unique_id in selected_resources)\n                    or (fk_model.attached_node and fk_model.attached_node in selected_resources) ) -%}\n            {%- set fk_test_args = fk_model.test_metadata.kwargs -%}\n            {%- set fk_test_columns = [] -%}\n            {%- if fk_test_args.pk_column_names -%}\n                {%- set fk_test_columns =  fk_test_args.pk_column_names -%}\n            {%- elif fk_test_args.pk_column_name -%}\n                {%- set fk_test_columns =  [fk_test_args.pk_column_name] -%}\n            {%- elif fk_test_args.field -%}\n                {%- set fk_test_columns =  [fk_test_args.field] -%}\n            {%- endif -%}\n            {%- if column_list_matches(pk_test_columns, fk_test_columns) -%}\n                {{ return(\"PK_UK_FOR_SELECTED_FK\") }}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(none) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.356597, "supported_languages": null}, "macro.dbt_constraints.lookup_should_rely": {"name": "lookup_should_rely", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.lookup_should_rely", "macro_sql": "\n{%- macro lookup_should_rely(test_model) -%}\n    {%- if test_model.config.where\n            or test_model.config.warn_if != \"!= 0\"\n            or test_model.config.fail_calc != \"count(*)\" -%}\n        {#- Set NORELY if there is a condition on the test -#}\n        {{ return('NORELY') }}\n    {%- endif -%}\n\n    {%- for res in results\n        if res.node.config.materialized == \"test\"\n        and res.node.unique_id == test_model.unique_id -%}\n        {%- if res.failures == None -%}\n            {#- Set '' if we do not know if there is a test failure -#}\n            {{ return('') }}\n        {%- elif res.failures > 0 -%}\n            {#- Set NORELY if there is a test failure -#}\n            {{ return('NORELY') }}\n        {%- elif res.failures == 0 -%}\n            {#- Set RELY if there are 0 failures -#}\n            {{ return('RELY') }}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return('') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.357208, "supported_languages": null}, "macro.dbt_constraints.should_always_create_constraint": {"name": "should_always_create_constraint", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.should_always_create_constraint", "macro_sql": "\n{%- macro should_always_create_constraint(test_model) -%}\n    {%- if test_model.config.get(\"always_create_constraint\", false) == true -%}\n        {{ return(true) }}\n    {%- endif -%}\n    {%- for table_node in test_model.depends_on.nodes -%}\n        {%- for node in graph.nodes.values() | selectattr(\"unique_id\", \"equalto\", table_node)\n            if node.config.get(\"always_create_constraint\", false) == true -%}\n            {{ return(true) }}\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.357683, "supported_languages": null}, "macro.dbt_constraints.create_constraints_by_type": {"name": "create_constraints_by_type", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.create_constraints_by_type", "macro_sql": "\n{%- macro create_constraints_by_type(constraint_types, quote_columns, lookup_cache) -%}\n\n    {#- Loop through the metadata and find all tests that match the constraint_types and have all the fields we check for tests -#}\n    {%- for test_model in graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"test\")\n            if test_model.test_metadata\n            and test_model.test_metadata.kwargs\n            and test_model.test_metadata.name\n            and test_model.test_metadata.name is in( constraint_types )\n            and test_model.unique_id\n            and test_model.attached_node\n            and test_model.depends_on\n            and test_model.depends_on.nodes\n            and test_model.config\n            and test_model.config.enabled\n            and test_model.config.get(\"dbt_constraints_enabled\", true) -%}\n\n        {%- set test_parameters = test_model.test_metadata.kwargs -%}\n        {%- set test_name = test_model.test_metadata.name -%}\n        {%- set selected = dbt_constraints.test_selected(test_model) -%}\n\n        {#- We can shortcut additional tests if the constraint was not selected -#}\n        {%- if selected is not none -%}\n            {#- rely_clause clause will be RELY if a test passed, NORELY if it failed, and '' if it was skipped -#}\n            {%- set rely_clause = dbt_constraints.lookup_should_rely(test_model) -%}\n            {%- set always_create_constraint = dbt_constraints.should_always_create_constraint(test_model) -%}\n        {%- else -%}\n            {%- set rely_clause = '' -%}\n            {%- set always_create_constraint = false -%}\n        {%- endif -%}\n\n        {#- Create constraints that:\n            - Either the test or its model was selected to run, including PK/UK for FK\n            - Passed the test (RELY) or the database supports NORELY constraints\n            - We ran the test (RELY/NORELY) or we need the constraint for a FK\n              or we have the always_create_constraint parameter turned on -#}\n        {%- if selected is not none\n            and ( rely_clause == 'RELY'\n                  or dbt_constraints.adapter_supports_rely_norely(test_name) == true )\n            and ( rely_clause in('RELY', 'NORELY')\n                  or selected == \"PK_UK_FOR_SELECTED_FK\"\n                  or always_create_constraint == true ) -%}\n\n            {% set ns = namespace(verify_permissions=false) %}\n            {%- set table_models = [] -%}\n\n            {#- Find the table models that are referenced by this test. -#}\n            {%- for table_node in test_model.depends_on.nodes -%}\n                {%- for node in graph.nodes.values() | selectattr(\"unique_id\", \"equalto\", table_node)\n                    if node.config\n                    and node.config.get(\"materialized\", \"other\") not in (\"view\", \"ephemeral\", \"dynamic_table\")\n                    and ( node.resource_type in (\"model\", \"snapshot\", \"seed\")\n                        or ( node.resource_type == \"source\" and var('dbt_constraints_sources_enabled', false)\n                            and ( ( var('dbt_constraints_sources_pk_enabled', false) and test_name in(\"primary_key\") )\n                                or ( var('dbt_constraints_sources_uk_enabled', false) and test_name in(\"unique_key\", \"unique_combination_of_columns\", \"unique\") )\n                                or ( var('dbt_constraints_sources_fk_enabled', false) and test_name in(\"foreign_key\", \"relationships\") )\n                                or ( var('dbt_constraints_sources_nn_enabled', false) and test_name in(\"not_null\") ) )\n                        ) ) -%}\n\n                    {%- do node.update({'alias': node.alias or node.name }) -%}\n                    {#- Append to our list of models for this test -#}\n                    {%- do table_models.append(node) -%}\n                    {%- if node.resource_type == \"source\"\n                        or node.config.get(\"materialized\", \"other\") not in (\"table\", \"incremental\", \"snapshot\", \"seed\") -%}\n                        {#- If we are using a sources or custom materializations, we will need to verify permissions -#}\n                        {%- set ns.verify_permissions = true -%}\n                    {%- endif -%}\n\n                {% endfor %}\n            {% endfor %}\n\n            {#- We only create PK/UK if there is one model referenced by the test\n                and if all the columns exist as physical columns on the table -#}\n            {%- if 1 == table_models|count\n                and test_name in(\"primary_key\", \"unique_key\", \"unique_combination_of_columns\", \"unique\") -%}\n\n                {# Attempt to identify a parameter we can use for the column names #}\n                {%- set column_names = [] -%}\n                {%- if  test_parameters.column_names -%}\n                    {%- set column_names =  test_parameters.column_names -%}\n                {%- elif  test_parameters.combination_of_columns -%}\n                    {%- set column_names =  test_parameters.combination_of_columns -%}\n                {%- elif  test_parameters.column_name -%}\n                    {%- set column_names =  [test_parameters.column_name] -%}\n                {%- else  -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`column_names` or `column_name` parameter missing for primary/unique key constraint on table: '\" ~ table_models[0].name\n                    ) }}\n                {%- endif -%}\n\n                {%- set table_relation = adapter.get_relation(\n                    database=table_models[0].database,\n                    schema=table_models[0].schema,\n                    identifier=table_models[0].alias ) -%}\n                {%- if table_relation and table_relation.is_table -%}\n                    {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names, lookup_cache) -%}\n                        {%- if test_name == \"primary_key\" -%}\n                            {%- if dbt_constraints.adapter_supports_rely_norely(\"not_null\") == true -%}\n                                {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n                            {%- endif -%}\n                            {%- do dbt_constraints.create_primary_key(table_relation, column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache, rely_clause) -%}\n                        {%- else  -%}\n                            {%- do dbt_constraints.create_unique_key(table_relation, column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache, rely_clause) -%}\n                        {%- endif -%}\n                    {%- else  -%}\n                        {%- do log(\"Skipping primary/unique key because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n                    {%- endif -%}\n                {%- else  -%}\n                    {%- do log(\"Skipping primary/unique key because the table was not found in the database: \" ~ table_models[0].name, info=true) -%}\n                {%- endif -%}\n\n            {#- We only create FK if there are two models referenced by the test\n                and if all the columns exist as physical columns on the tables -#}\n            {%- elif 2 == table_models|count\n                and test_name in( \"foreign_key\", \"relationships\") -%}\n\n                {%- set fk_model = table_models | selectattr(\"unique_id\", \"equalto\", test_model.attached_node) | first -%}\n                {%- set pk_model = table_models | rejectattr(\"unique_id\", \"equalto\", test_model.attached_node) | first -%}\n\n                {%- if fk_model and pk_model -%}\n\n                    {%- set fk_table_relation = adapter.get_relation(\n                        database=fk_model.database,\n                        schema=fk_model.schema,\n                        identifier=fk_model.alias) -%}\n\n                    {%- set pk_table_relation = adapter.get_relation(\n                        database=pk_model.database,\n                        schema=pk_model.schema,\n                        identifier=pk_model.alias) -%}\n\n                    {%- if fk_table_relation and pk_table_relation and fk_table_relation.is_table and pk_table_relation.is_table-%}\n                        {# Attempt to identify parameters we can use for the column names #}\n                        {%- set pk_column_names = [] -%}\n                        {%- if  test_parameters.pk_column_names -%}\n                            {%- set pk_column_names = test_parameters.pk_column_names -%}\n                        {%- elif  test_parameters.field -%}\n                            {%- set pk_column_names = [test_parameters.field] -%}\n                        {%- elif test_parameters.pk_column_name -%}\n                            {%- set pk_column_names = [test_parameters.pk_column_name] -%}\n                        {%- else -%}\n                            {{ exceptions.raise_compiler_error(\n                            \"`pk_column_names`, `pk_column_name`, or `field` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                            ) }}\n                        {%- endif -%}\n\n                        {%- set fk_column_names = [] -%}\n                        {%- if  test_parameters.fk_column_names -%}\n                            {%- set fk_column_names = test_parameters.fk_column_names -%}\n                        {%- elif test_parameters.column_name -%}\n                            {%- set fk_column_names = [test_parameters.column_name] -%}\n                        {%- elif test_parameters.fk_column_name -%}\n                            {%- set fk_column_names = [test_parameters.fk_column_name] -%}\n                        {%- else -%}\n                            {{ exceptions.raise_compiler_error(\n                            \"`fk_column_names`, `fk_column_name`, or `column_name` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                            ) }}\n                        {%- endif -%}\n\n                        {%- if not dbt_constraints.table_columns_all_exist(pk_table_relation, pk_column_names, lookup_cache) -%}\n                            {%- do log(\"Skipping foreign key because a physical column was not found on the pk table: \" ~ pk_model.name ~ \" \" ~ pk_column_names, info=true) -%}\n                        {%- elif not dbt_constraints.table_columns_all_exist(fk_table_relation, fk_column_names, lookup_cache) -%}\n                            {%- do log(\"Skipping foreign key because a physical column was not found on the fk table: \" ~ fk_model.name ~ \" \" ~ fk_column_names, info=true) -%}\n                        {%- else  -%}\n                            {%- do dbt_constraints.create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache, rely_clause) -%}\n                        {%- endif -%}\n                    {%- else  -%}\n                        {%- if fk_model == None or not fk_table_relation.is_table -%}\n                            {%- do log(\"Skipping foreign key to \" ~ pk_model.alias ~ \" because the child table was not found in the database: \" ~ fk_model.alias, info=true) -%}\n                        {%- endif -%}\n                        {%- if pk_model == None or not pk_model.is_table -%}\n                            {%- do log(\"Skipping foreign key on \" ~ fk_model.alias ~ \" because the parent table was not found in the database: \" ~ pk_model.alias, info=true) -%}\n                        {%- endif -%}\n                    {%- endif -%}\n\n                {%- else  -%}\n                    {%- do log(\"Skipping foreign key because a we couldn't find the child table: model=\" ~ test_model.attached_node ~ \" or source\", info=true) -%}\n                {%- endif -%}\n\n            {#- We only create NN if there is one model referenced by the test\n                and if all the columns exist as physical columns on the table -#}\n            {%- elif 1 == table_models|count\n                and test_name in(\"not_null\") -%}\n\n                {# Attempt to identify a parameter we can use for the column names #}\n                {%- set column_names = [] -%}\n                {%- if  test_parameters.column_names -%}\n                    {%- set column_names =  test_parameters.column_names -%}\n                {%- elif  test_parameters.combination_of_columns -%}\n                    {%- set column_names =  test_parameters.combination_of_columns -%}\n                {%- elif  test_parameters.column_name -%}\n                    {%- set column_names =  [test_parameters.column_name] -%}\n                {%- else  -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`column_names` or `column_name` parameter missing for not null constraint on table: '\" ~ table_models[0].name\n                    ) }}\n                {%- endif -%}\n\n                {%- set table_relation = adapter.get_relation(\n                    database=table_models[0].database,\n                    schema=table_models[0].schema,\n                    identifier=table_models[0].alias ) -%}\n\n                {%- if table_relation and table_relation.is_table -%}\n                    {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names, lookup_cache) -%}\n                        {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n                    {%- else  -%}\n                        {%- do log(\"Skipping not null constraint because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n                    {%- endif -%}\n                {%- else  -%}\n                    {%- do log(\"Skipping not null constraint because the table was not found in the database: \" ~ table_models[0].name, info=true) -%}\n                {%- endif -%}\n\n            {%- endif -%}\n        {%- endif -%}\n\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.test_selected", "macro.dbt_constraints.lookup_should_rely", "macro.dbt_constraints.should_always_create_constraint", "macro.dbt_constraints.adapter_supports_rely_norely", "macro.dbt_constraints.table_columns_all_exist", "macro.dbt_constraints.create_not_null", "macro.dbt_constraints.create_primary_key", "macro.dbt_constraints.create_unique_key", "macro.dbt_constraints.create_foreign_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.364553, "supported_languages": null}, "macro.dbt_constraints.table_columns_all_exist": {"name": "table_columns_all_exist", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.table_columns_all_exist", "macro_sql": "\n{%- macro table_columns_all_exist(table_relation, column_list, lookup_cache) -%}\n    {%- set tab_column_list = dbt_constraints.lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- for column in column_list|map('upper') if column not in tab_column_list -%}\n        {{ return(false) }}\n    {%- endfor -%}\n    {{ return(true) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.lookup_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3648992, "supported_languages": null}, "macro.dbt_constraints.lookup_table_columns": {"name": "lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.lookup_table_columns", "macro_sql": "{%- macro lookup_table_columns(table_relation, lookup_cache) -%}\n    {{ return(adapter.dispatch('lookup_table_columns', 'dbt_constraints')(table_relation, lookup_cache)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3650749, "supported_languages": null}, "macro.dbt_constraints.default__lookup_table_columns": {"name": "default__lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.default__lookup_table_columns", "macro_sql": "{%- macro default__lookup_table_columns(table_relation, lookup_cache) -%}\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set tab_Columns = adapter.get_columns_in_relation(table_relation) -%}\n\n        {%- set tab_column_list = [] -%}\n        {%- for column in tab_Columns -%}\n            {{ tab_column_list.append(column.name|upper) }}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: tab_column_list }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.365504, "supported_languages": null}, "macro.dbt_constraints.column_list_matches": {"name": "column_list_matches", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "unique_id": "macro.dbt_constraints.column_list_matches", "macro_sql": "\n{%- macro column_list_matches(listA, listB) -%}\n    {# Test if A is empty or the lists are not the same size #}\n    {%- if listA | count > 0 and listA | count == listB | count  -%}\n        {# Fail if there are any columns in A that are not in B #}\n        {%- for valueFromA in listA|map('upper') -%}\n            {%- if valueFromA|upper not in listB| map('upper')  -%}\n                {{ return(false) }}\n            {%- endif -%}\n        {% endfor %}\n        {# Since we know the count is the same, A must equal B #}\n        {{ return(true) }}\n    {%- else -%}\n        {{ return(false) }}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3659542, "supported_languages": null}, "macro.dbt_constraints.snowflake__adapter_supports_rely_norely": {"name": "snowflake__adapter_supports_rely_norely", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__adapter_supports_rely_norely", "macro_sql": "\n{%- macro snowflake__adapter_supports_rely_norely(test_name) -%}\n    {%- if test_name in (\n            'primary_key',\n            'unique_key',\n            'unique_combination_of_columns',\n            'unique',\n            'foreign_key',\n            'relationships') -%}\n        {{ return(true) }}\n    {%- else -%}\n        {{ return(false) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.372378, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_primary_key": {"name": "snowflake__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_primary_key", "macro_sql": "\n{%- macro snowflake__create_primary_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n{%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n{#- Check that the table does not already have this PK/UK -#}\n{%- set existing_constraint = dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n{%- if constraint_name == existing_constraint -%}\n    {%- do dbt_constraints.set_rely_norely(table_relation, constraint_name, lookup_cache.unique_keys[table_relation][constraint_name].rely, rely_clause) -%}\n    {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name:\n        {  \"constraint_name\": constraint_name,\n            \"columns\": column_names,\n            \"rely\": \"true\" if rely_clause == \"RELY\" else \"false\" } } }) -%}\n{%- elif none == existing_constraint -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set rely_clause = 'NORELY' if rely_clause == '' else rely_clause -%}\n            {%- set query -%}\n            ALTER TABLE {{ table_relation }} ADD CONSTRAINT {{ constraint_name }} PRIMARY KEY ( {{ columns_csv }} ) {{ rely_clause }}\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name ~ \" \" ~ rely_clause, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name:\n                {  \"constraint_name\": constraint_name,\n                   \"columns\": column_names,\n                   \"rely\": \"true\" if rely_clause == \"RELY\" else \"false\" } } }) -%}\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.set_rely_norely", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.373863, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_unique_key": {"name": "snowflake__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_unique_key", "macro_sql": "\n{%- macro snowflake__create_unique_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n{%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n{#- Check that the table does not already have this PK/UK -#}\n{%- set existing_constraint = dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n{%- if constraint_name == existing_constraint -%}\n    {%- do dbt_constraints.set_rely_norely(table_relation, constraint_name, lookup_cache.unique_keys[table_relation][constraint_name].rely, rely_clause) -%}\n    {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name:\n        {  \"constraint_name\": constraint_name,\n            \"columns\": column_names,\n            \"rely\": \"true\" if rely_clause == \"RELY\" else \"false\" } } }) -%}\n{%- elif none == existing_constraint -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set rely_clause = 'NORELY' if rely_clause == '' else rely_clause -%}\n            {%- set query -%}\n            ALTER TABLE {{ table_relation }} ADD CONSTRAINT {{ constraint_name }} UNIQUE ( {{ columns_csv }} ) {{ rely_clause }}\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name ~ \" \" ~ rely_clause, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name:\n                {  \"constraint_name\": constraint_name,\n                   \"columns\": column_names,\n                   \"rely\": \"true\" if rely_clause == \"RELY\" else \"false\" } } }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.set_rely_norely", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3754208, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_foreign_key": {"name": "snowflake__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_foreign_key", "macro_sql": "\n{%- macro snowflake__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n{%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n{%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n{%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n\n{#- Check that the PK table has a PK or UK -#}\n{%- if none != dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- set existing_constraint = dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names, lookup_cache) -%}\n        {%- if constraint_name == existing_constraint -%}\n            {%- do dbt_constraints.set_rely_norely(fk_table_relation, constraint_name, lookup_cache.foreign_keys[fk_table_relation][constraint_name].rely, rely_clause) -%}\n            {%- do lookup_cache.foreign_keys.update({fk_table_relation: {constraint_name:\n                {\"constraint_name\": constraint_name,\n                    \"columns\": fk_column_names,\n                    \"rely\": \"true\" if rely_clause == \"RELY\" else \"false\" } } }) -%}\n        {%- elif none == existing_constraint -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set rely_clause = 'NORELY' if rely_clause == '' else rely_clause -%}\n                {%- set query -%}\n                ALTER TABLE {{ fk_table_relation }} ADD CONSTRAINT {{ constraint_name }} FOREIGN KEY ( {{ fk_columns_csv }} ) REFERENCES {{ pk_table_relation }} ( {{ pk_columns_csv }} ) {{ rely_clause }}\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names ~ \" \" ~ rely_clause, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- do lookup_cache.foreign_keys.update({fk_table_relation: {constraint_name:\n                    {\"constraint_name\": constraint_name,\n                     \"columns\": fk_column_names,\n                     \"rely\": \"true\" if rely_clause == \"RELY\" else \"false\" } } }) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.set_rely_norely", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.377324, "supported_languages": null}, "macro.dbt_constraints.snowflake__create_not_null": {"name": "snowflake__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__create_not_null", "macro_sql": "\n{%- macro snowflake__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n{%- if not rely_clause == 'RELY' -%}\n    {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because Snowflake does not support NORELY for not null constraints.\", info=true) -%}\n    {{ return(false) }}\n{%- endif -%}\n\n{%- set existing_not_null_col = lookup_cache.not_null_col[table_relation] -%}\n\n{%- set columns_to_change = [] -%}\n{%- for column_name in column_names if column_name not in existing_not_null_col -%}\n    {%- do columns_to_change.append(column_name) -%}\n    {%- do existing_not_null_col.append(column_name) -%}\n{%- endfor -%}\n{%- if columns_to_change|count > 0 -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(columns_to_change, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\n                ALTER TABLE {{ table_relation }} MODIFY {{ modify_statement_csv }};\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" \" ~ rely_clause, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- set constraint_key = table_relation.identifier ~ \"_\" ~ columns_to_change|join('_') ~ \"_NN\" -%}\n            {%- do lookup_cache.not_null_col.update({table_relation: existing_not_null_col }) -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- else -%}\n    {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because all columns are already not null\", info=false) -%}\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3788521, "supported_languages": null}, "macro.dbt_constraints.set_rely_norely": {"name": "set_rely_norely", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.set_rely_norely", "macro_sql": "\n{%- macro set_rely_norely(table_relation, constraint_name, constraint_rely, rely_clause) -%}\n    {%- if ( rely_clause == 'NORELY' and constraint_rely == 'true' )\n            or ( rely_clause == 'RELY' and constraint_rely == 'false' ) -%}\n        {%- set query -%}\n        ALTER TABLE {{ table_relation }} MODIFY CONSTRAINT {{ constraint_name }} {{ rely_clause }}\n        {%- endset -%}\n        {%- do log(\"Updating constraint: \" ~ constraint_name ~ \" \" ~ rely_clause, info=true) -%}\n        {%- do run_query(query) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.379285, "supported_languages": null}, "macro.dbt_constraints.snowflake__unique_constraint_exists": {"name": "snowflake__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__unique_constraint_exists", "macro_sql": "\n{%- macro snowflake__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n{#- Check if we can find this constraint in the lookup cache -#}\n{%- if table_relation in lookup_cache.unique_keys -%}\n    {%- set cached_unique_keys = lookup_cache.unique_keys[table_relation] -%}\n    {%- for cached_val in cached_unique_keys.values() -%}\n        {%- if dbt_constraints.column_list_matches(cached_val.columns, column_names ) -%}\n            {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ cached_val.columns ~ \" \" ~ cached_val.rely, info=false) -%}\n            {{ return(cached_val.constraint_name) }}\n        {%- endif -%}\n    {% endfor %}\n{%- endif -%}\n\n{%- set lookup_query -%}\nSHOW UNIQUE KEYS IN TABLE {{ table_relation }}\n{%- endset -%}\n{%- set constraint_list = run_query(lookup_query) -%}\n{%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n    {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n        {%- set existing_constraint_name = (constraint.columns[\"constraint_name\"].values() | first) -%}\n        {%- set existing_columns = constraint.columns[\"column_name\"].values() -%}\n        {%- set existing_rely = (constraint.columns[\"rely\"].values() | first) -%}\n        {#- Add this constraint to the lookup cache -#}\n        {%- do lookup_cache.unique_keys.update({table_relation: {existing_constraint_name:\n            {  \"constraint_name\": existing_constraint_name,\n                \"columns\": existing_columns,\n                \"rely\": existing_rely } } }) -%}\n        {%- if dbt_constraints.column_list_matches(existing_columns, column_names ) -%}\n            {%- do log(\"Found UK key: \" ~ existing_constraint_name ~ \" \" ~ table_relation ~ \" \" ~ column_names ~ \" \" ~ existing_rely, info=false) -%}\n            {{ return(existing_constraint_name) }}\n        {%- endif -%}\n    {% endfor %}\n{%- endif -%}\n\n{%- set lookup_query -%}\nSHOW PRIMARY KEYS IN TABLE {{ table_relation }}\n{%- endset -%}\n{%- set constraint_list = run_query(lookup_query) -%}\n{%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n    {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n        {%- set existing_constraint_name = (constraint.columns[\"constraint_name\"].values() | first) -%}\n        {%- set existing_columns = constraint.columns[\"column_name\"].values() -%}\n        {%- set existing_rely = (constraint.columns[\"rely\"].values() | first) -%}\n        {#- Add this constraint to the lookup cache -#}\n        {%- do lookup_cache.unique_keys.update({table_relation: {existing_constraint_name:\n            {  \"constraint_name\": existing_constraint_name,\n                \"columns\": existing_columns,\n                \"rely\": existing_rely } } }) -%}\n        {%- if dbt_constraints.column_list_matches(existing_columns, column_names ) -%}\n            {%- do log(\"Found PK key: \" ~ existing_constraint_name ~ \" \" ~ table_relation ~ \" \" ~ column_names ~ \" \" ~ existing_rely, info=false) -%}\n            {{ return(existing_constraint_name) }}\n        {%- endif -%}\n    {% endfor %}\n{%- endif -%}\n\n{#- If we get this far then the table does not have either constraint -#}\n{%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n{{ return(none) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query", "macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.381515, "supported_languages": null}, "macro.dbt_constraints.snowflake__foreign_key_exists": {"name": "snowflake__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__foreign_key_exists", "macro_sql": "\n{%- macro snowflake__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n\n{#- Check if we can find this constraint in the lookup cache -#}\n{%- if table_relation in lookup_cache.foreign_keys -%}\n    {%- set cached_foreign_keys = lookup_cache.foreign_keys[table_relation] -%}\n    {%- for cached_val in cached_foreign_keys.values() -%}\n        {%- if dbt_constraints.column_list_matches(cached_val.columns, column_names ) -%}\n            {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ cached_val.constraint_name ~ \" \" ~ column_names ~ \" \" ~ cached_val.rely, info=false) -%}\n            {{ return(cached_val.constraint_name) }}\n        {%- endif -%}\n    {% endfor %}\n{%- endif -%}\n\n{%- set lookup_query -%}\nSHOW IMPORTED KEYS IN TABLE {{ table_relation }}\n{%- endset -%}\n{%- set constraint_list = run_query(lookup_query) -%}\n{%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n    {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n        {%- set existing_constraint_name = (constraint.columns[\"fk_name\"].values() | first) -%}\n        {%- set existing_columns = constraint.columns[\"fk_column_name\"].values() -%}\n        {%- set existing_rely = (constraint.columns[\"rely\"].values() | first) -%}\n        {#- Add this constraint to the lookup cache -#}\n        {%- do lookup_cache.foreign_keys.update({table_relation: {existing_constraint_name:\n            {  \"constraint_name\": existing_constraint_name,\n                \"columns\": existing_columns,\n                \"rely\": existing_rely } } }) -%}\n        {%- if dbt_constraints.column_list_matches(existing_columns, column_names ) -%}\n            {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ existing_constraint_name ~ \" \" ~ column_names ~ \" \" ~ existing_rely, info=false) -%}\n            {{ return(existing_constraint_name) }}\n        {%- endif -%}\n    {% endfor %}\n{%- endif -%}\n\n{#- If we get this far then the table does not have this constraint -#}\n{%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n{{ return(none) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query", "macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.383017, "supported_languages": null}, "macro.dbt_constraints.snowflake__have_references_priv": {"name": "snowflake__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__have_references_priv", "macro_sql": "{%- macro snowflake__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n{%- if verify_permissions is sameas true -%}\n\n{%- set table_privileges = snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n{%- if \"REFERENCES\" in table_privileges or \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n{{ return(true) }}\n{%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3833978, "supported_languages": null}, "macro.dbt_constraints.snowflake__have_ownership_priv": {"name": "snowflake__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__have_ownership_priv", "macro_sql": "{%- macro snowflake__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n{%- if verify_permissions is sameas true -%}\n\n{%- set table_privileges = snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n{%- if \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n{{ return(true) }}\n{%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.snowflake__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.383744, "supported_languages": null}, "macro.dbt_constraints.snowflake__lookup_table_privileges": {"name": "snowflake__lookup_table_privileges", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__lookup_table_privileges", "macro_sql": "{%- macro snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n\n{%- if table_relation.database not in lookup_cache.table_privileges -%}\n        {%- do log(\"Caching privileges for database: \" ~ table_relation.database, info=false) -%}\n\n        {%- set lookup_query -%}\n        select distinct\n            upper(tp.table_schema) as \"table_schema\",\n            upper(tp.table_name) as \"table_name\",\n            tp.privilege_type as \"privilege_type\"\n        from {{ table_relation.database }}.information_schema.table_privileges tp\n        where (is_role_in_session(tp.grantee) or is_database_role_in_session(tp.grantee))\n            and tp.privilege_type in ('OWNERSHIP', 'REFERENCES')\n        {%- endset -%}\n        {%- set privilege_list = run_query(lookup_query) -%}\n        {%- do lookup_cache.table_privileges.update({ table_relation.database: privilege_list }) -%}\n    {%- endif -%}\n\n{%- set tab_priv_list = [] -%}\n{%- set schema_name = table_relation.schema|upper -%}\n{%- set table_name = table_relation.identifier|upper -%}\n{%- for row in lookup_cache.table_privileges[table_relation.database].rows -%}\n        {%- if row[\"table_schema\"] == schema_name and row[\"table_name\"] == table_name -%}\n            {%- do tab_priv_list.append(row[\"privilege_type\"]) -%}\n        {%- endif -%}\n    {%- endfor -%}\n{{ return(tab_priv_list) }}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.384515, "supported_languages": null}, "macro.dbt_constraints.snowflake__lookup_table_columns": {"name": "snowflake__lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "unique_id": "macro.dbt_constraints.snowflake__lookup_table_columns", "macro_sql": "{%- macro snowflake__lookup_table_columns(table_relation, lookup_cache) -%}\n\n{%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set lookup_query -%}\n        SHOW COLUMNS IN TABLE {{ table_relation }}\n        {%- endset -%}\n        {%- set results = run_query(lookup_query) -%}\n\n        {%- set not_null_col = [] -%}\n        {%- set upper_column_list = [] -%}\n        {%- for row in results.rows -%}\n            {%- do upper_column_list.append(row[\"column_name\"]|upper) -%}\n            {%- if row['null?'] == 'false' -%}\n                {%- do not_null_col.append(row[\"column_name\"]|upper) -%}\n            {%- endif -%}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: upper_column_list }) -%}\n        {%- do lookup_cache.not_null_col.update({ table_relation: not_null_col }) -%}\n    {%- endif -%}\n{{ return(lookup_cache.table_columns[table_relation]) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.385228, "supported_languages": null}, "macro.dbt_constraints.redshift__create_primary_key": {"name": "redshift__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_primary_key", "macro_sql": "\n{%- macro redshift__create_primary_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.38993, "supported_languages": null}, "macro.dbt_constraints.redshift__create_unique_key": {"name": "redshift__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_unique_key", "macro_sql": "\n{%- macro redshift__create_unique_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.390975, "supported_languages": null}, "macro.dbt_constraints.redshift__create_not_null": {"name": "redshift__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_not_null", "macro_sql": "\n{%- macro redshift__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because ALTER COLUMN SET NOT NULL is not supported\", info=true) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3912709, "supported_languages": null}, "macro.dbt_constraints.redshift__create_foreign_key": {"name": "redshift__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__create_foreign_key", "macro_sql": "\n{%- macro redshift__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- set query -%}\n                --Note: ON DELETE not supported in Redshift\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) --ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endset -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.392693, "supported_languages": null}, "macro.dbt_constraints.redshift__unique_constraint_exists": {"name": "redshift__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__unique_constraint_exists", "macro_sql": "\n{%- macro redshift__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name\n        , lower(kc.column_name) as column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type in ('PRIMARY KEY', 'UNIQUE')\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_expectations.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3934941, "supported_languages": null}, "macro.dbt_constraints.redshift__foreign_key_exists": {"name": "redshift__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__foreign_key_exists", "macro_sql": "\n{%- macro redshift__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name fk_name\n        , lower(kc.column_name) as fk_column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type='FOREIGN KEY'\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_expectations.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.394252, "supported_languages": null}, "macro.dbt_constraints.redshift__have_references_priv": {"name": "redshift__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__have_references_priv", "macro_sql": "{%- macro redshift__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.394785, "supported_languages": null}, "macro.dbt_constraints.redshift__have_ownership_priv": {"name": "redshift__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__have_ownership_priv", "macro_sql": "{%- macro redshift__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3953059, "supported_languages": null}, "macro.dbt_constraints.redshift__drop_referential_constraints": {"name": "redshift__drop_referential_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__drop_referential_constraints", "macro_sql": "{% macro redshift__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- set query -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT \"{{constraint_name}}\" CASCADE\n        {%- endset -%}\n        {%- do run_query(query) -%}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.395765, "supported_languages": null}, "macro.dbt_constraints.redshift__truncate_relation": {"name": "redshift__truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__truncate_relation", "macro_sql": "{% macro redshift__truncate_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.redshift__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3959522, "supported_languages": null}, "macro.dbt_constraints.redshift__drop_relation": {"name": "redshift__drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "unique_id": "macro.dbt_constraints.redshift__drop_relation", "macro_sql": "{% macro redshift__drop_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.redshift__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.3961291, "supported_languages": null}, "macro.dbt_constraints.vertica__create_primary_key": {"name": "vertica__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__create_primary_key", "macro_sql": "\n{%- macro vertica__create_primary_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4028668, "supported_languages": null}, "macro.dbt_constraints.vertica__create_unique_key": {"name": "vertica__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__create_unique_key", "macro_sql": "\n{%- macro vertica__create_unique_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.403849, "supported_languages": null}, "macro.dbt_constraints.vertica__create_foreign_key": {"name": "vertica__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__create_foreign_key", "macro_sql": "\n{%- macro vertica__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names, lookup_cache) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set query -%}\n                    ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} )\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- do lookup_cache.foreign_keys.update({fk_table_relation: {constraint_name: fk_column_names} }) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4051552, "supported_languages": null}, "macro.dbt_constraints.vertica__create_not_null": {"name": "vertica__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__create_not_null", "macro_sql": "\n{%- macro vertica__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n\n    {%- set existing_not_null_col = lookup_cache.not_null_col[table_relation] -%}\n\n    {%- set columns_to_change = [] -%}\n    {%- for column_name in column_names if column_name|upper not in existing_not_null_col -%}\n        {%- do columns_to_change.append(column_name) -%}\n        {%- do existing_not_null_col.append(column_name) -%}\n    {%- endfor -%}\n    {%- if columns_to_change|count > 0 -%}\n        {%- set columns_list = dbt_constraints.get_quoted_column_list(columns_to_change, quote_columns) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ALTER {{ modify_statement_csv }};\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- set constraint_key = table_relation.identifier ~ \"_\" ~ columns_to_change|join('_') ~ \"_NN\" -%}\n            {%- do lookup_cache.not_null_col.update({table_relation: existing_not_null_col }) -%}\n        {%- else -%}\n            {%- do log(\"Skipping not null constraint for \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because all columns are already not null\", info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4064908, "supported_languages": null}, "macro.dbt_constraints.vertica__unique_constraint_exists": {"name": "vertica__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__unique_constraint_exists", "macro_sql": "\n{%- macro vertica__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.unique_keys -%}\n        {%- set cached_unique_keys = lookup_cache.unique_keys[table_relation] -%}\n        {%- for cached_columns in cached_unique_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n      select constraint_name, column_name\n      from constraint_columns\n      where\n          table_schema ilike '{{table_relation.schema}}'\n        and table_name ilike '{{table_relation.identifier}}'\n        and constraint_type in ('u')\n      order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    select constraint_name, column_name\n    from constraint_columns\n    where\n        table_schema ilike '{{table_relation.schema}}'\n      and table_name ilike '{{table_relation.identifier}}'\n      and constraint_type in ('p')\n    order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query", "macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.408391, "supported_languages": null}, "macro.dbt_constraints.vertica__foreign_key_exists": {"name": "vertica__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__foreign_key_exists", "macro_sql": "\n{%- macro vertica__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.foreign_keys -%}\n        {%- set cached_foreign_keys = lookup_cache.foreign_keys[table_relation] -%}\n        {%- for cached_columns in cached_foreign_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n        select constraint_name as fk_name, column_name as fk_column_name\n        from constraint_columns\n        where\n            table_schema ilike '{{table_relation.schema}}'\n          and table_name ilike '{{table_relation.identifier}}'\n          and constraint_type in ('f')\n        order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.foreign_keys.update({table_relation: {constraint.key_name: constraint.columns[\"fk_column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.column_list_matches", "macro.dbt.run_query", "macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4096792, "supported_languages": null}, "macro.dbt_constraints.vertica__have_references_priv": {"name": "vertica__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__have_references_priv", "macro_sql": "{%- macro vertica__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"REFERENCES\" in table_privileges or \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.vertica__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.410053, "supported_languages": null}, "macro.dbt_constraints.vertica__have_ownership_priv": {"name": "vertica__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__have_ownership_priv", "macro_sql": "{%- macro vertica__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_constraints.vertica__lookup_table_privileges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4103942, "supported_languages": null}, "macro.dbt_constraints.vertica__lookup_table_privileges": {"name": "vertica__lookup_table_privileges", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__lookup_table_privileges", "macro_sql": "{%- macro vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n\n    {%- if table_relation.database not in lookup_cache.table_privileges -%}\n        {%- set lookup_query -%}\n            select distinct\n              upper(tp.table_schema) as \"table_schema\",\n              upper(tp.table_name) as \"table_name\",\n              tp.privilege_type as \"privilege_type\"\n            from {{table_relation.database}}.information_schema.table_privileges tp\n            where is_role_in_session(tp.grantee)\n              and tp.privilege_type in ('OWNERSHIP', 'REFERENCES')\n        {%- endset -%}\n        {%- do log(\"Caching privileges for database: \" ~ table_relation.database, info=false) -%}\n        {%- set privilege_list = run_query(lookup_query) -%}\n        {%- do lookup_cache.table_privileges.update({ table_relation.database: privilege_list }) -%}\n    {%- endif -%}\n\n    {%- set tab_priv_list = [] -%}\n    {%- set schema_name = table_relation.schema|upper -%}\n    {%- set table_name = table_relation.identifier|upper -%}\n    {%- for row in lookup_cache.table_privileges[table_relation.database].rows -%}\n        {%- if row[\"table_schema\"] == schema_name and row[\"table_name\"] == table_name -%}\n            {%- do tab_priv_list.append(row[\"privilege_type\"]) -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(tab_priv_list) }}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.411155, "supported_languages": null}, "macro.dbt_constraints.vertica__lookup_table_columns": {"name": "vertica__lookup_table_columns", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__lookup_table_columns", "macro_sql": "{%- macro vertica__lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set lookup_query -%}\n            select column_name, is_nullable\n            from columns\n            where table_schema ilike '{{table_relation.schema}}'\n              and table_name ilike '{{table_relation.identifier}}'\n        {%- endset -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- set not_null_col = [] -%}\n        {%- set upper_column_list = [] -%}\n        {%- for row in results.rows -%}\n            {%- do upper_column_list.append(row[\"column_name\"]|upper) -%}\n            {%- if row['is_nullable'] == False -%}\n                {%- do not_null_col.append(row[\"column_name\"]|upper) -%}\n            {%- endif -%}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: upper_column_list }) -%}\n\n        {%- do lookup_cache.not_null_col.update({ table_relation: not_null_col }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4118989, "supported_languages": null}, "macro.dbt_constraints.vertica__get_create_index_sql": {"name": "vertica__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/vertica__create_constraints.sql", "original_file_path": "macros/vertica__create_constraints.sql", "unique_id": "macro.dbt_constraints.vertica__get_create_index_sql", "macro_sql": "{%- macro vertica__get_create_index_sql(table_relation, lookup_cache) -%}\n\n    {%- do log(\"Skipping creation of indexes, they are not supported by Vertica\", info=true) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4120388, "supported_languages": null}, "macro.dbt_constraints.oracle__create_primary_key": {"name": "oracle__create_primary_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_primary_key", "macro_sql": "\n{%- macro oracle__create_primary_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'PK_' ||  ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.416173, "supported_languages": null}, "macro.dbt_constraints.oracle__create_unique_key": {"name": "oracle__create_unique_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_unique_key", "macro_sql": "\n{%- macro oracle__create_unique_key(table_relation, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4172301, "supported_languages": null}, "macro.dbt_constraints.oracle__create_foreign_key": {"name": "oracle__create_foreign_key", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_foreign_key", "macro_sql": "\n{%- macro oracle__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache, rely_clause) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions) -%}\n\n                {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4188192, "supported_languages": null}, "macro.dbt_constraints.oracle__create_not_null": {"name": "oracle__create_not_null", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__create_not_null", "macro_sql": "\n{%- macro oracle__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache, rely_clause) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( column ~ \" NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} MODIFY ( {{ modify_statement_csv }} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n", "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4195929, "supported_languages": null}, "macro.dbt_constraints.oracle__unique_constraint_exists": {"name": "oracle__unique_constraint_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__unique_constraint_exists", "macro_sql": "\n{%- macro oracle__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"constraint_name\",\n    upper(cols.column_name) as \"column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'P', 'U' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_expectations.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.420362, "supported_languages": null}, "macro.dbt_constraints.oracle__foreign_key_exists": {"name": "oracle__foreign_key_exists", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__foreign_key_exists", "macro_sql": "\n{%- macro oracle__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"fk_name\",\n    upper(cols.column_name) as \"fk_column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'R' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_expectations.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.421124, "supported_languages": null}, "macro.dbt_constraints.oracle__have_references_priv": {"name": "oracle__have_references_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__have_references_priv", "macro_sql": "\n{%- macro oracle__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.421251, "supported_languages": null}, "macro.dbt_constraints.oracle__have_ownership_priv": {"name": "oracle__have_ownership_priv", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__have_ownership_priv", "macro_sql": "\n{%- macro oracle__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4213629, "supported_languages": null}, "macro.dbt_constraints.oracle__drop_referential_constraints": {"name": "oracle__drop_referential_constraints", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__drop_referential_constraints", "macro_sql": "{% macro oracle__drop_referential_constraints(relation) -%}\n    {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT owner, table_name, constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = '{{relation.schema|upper}}'\n            AND upper(cons.table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.42157, "supported_languages": null}, "macro.dbt_constraints.oracle__truncate_relation": {"name": "oracle__truncate_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__truncate_relation", "macro_sql": "{% macro oracle__truncate_relation(relation) -%}\n    {%- do log(\"Truncating table \" ~ relation, info=true) -%}\n    {{ oracle__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_constraints.oracle__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.421817, "supported_languages": null}, "macro.dbt_constraints.oracle__drop_relation": {"name": "oracle__drop_relation", "resource_type": "macro", "package_name": "dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "unique_id": "macro.dbt_constraints.oracle__drop_relation", "macro_sql": "{% macro oracle__drop_relation(relation) -%}\n    {%- do log(\"Dropping table \" ~ relation, info=true) -%}\n        {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT owner, table_name, constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = '{{relation.schema|upper}}'\n            AND upper(cons.table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\n    FOR REC IN (\n        SELECT owner, table_name\n        FROM all_tables\n        WHERE upper(owner) = '{{relation.schema|upper}}'\n            AND upper(table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'DROP TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" CASCADE CONSTRAINTS';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop table: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.422173, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_table": {"name": "bigquery__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {{column_quoted}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.424693, "supported_languages": null}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"name": "bigquery__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.425385, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_table": {"name": "snowflake__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column_quoted -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n    {% if external.table_format -%} table_format = '{{external.table_format}}' {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.427474, "supported_languages": null}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"name": "snowflake__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.428305, "supported_languages": null}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"name": "snowflake__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4296288, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"name": "snowflake_create_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        {% if snowpipe.error_integration -%} error_integration = '{{snowpipe.error_integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.430323, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_empty_table": {"name": "snowflake_create_empty_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.430827, "supported_languages": null}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"name": "snowflake_refresh_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.431427, "supported_languages": null}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"name": "snowflake_get_copy_sql", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4327621, "supported_languages": null}, "macro.dbt_external_tables.is_csv": {"name": "is_csv", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "unique_id": "macro.dbt_external_tables.is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.435148, "supported_languages": null}, "macro.dbt_external_tables.redshift__create_external_table": {"name": "redshift__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4363809, "supported_languages": null}, "macro.dbt_external_tables.redshift__refresh_external_table": {"name": "redshift__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.440685, "supported_languages": null}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"name": "redshift__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.441341, "supported_languages": null}, "macro.dbt_external_tables.render_from_context": {"name": "render_from_context", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "unique_id": "macro.dbt_external_tables.render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.442237, "supported_languages": null}, "macro.dbt_external_tables.redshift__dropif": {"name": "redshift__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.442497, "supported_languages": null}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"name": "redshift_alter_table_add_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4438841, "supported_languages": null}, "macro.dbt_external_tables.redshift__exit_transaction": {"name": "redshift__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.444025, "supported_languages": null}, "macro.dbt_external_tables.year_month_day": {"name": "year_month_day", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.444315, "supported_languages": null}, "macro.dbt_external_tables.key_value": {"name": "key_value", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.444475, "supported_languages": null}, "macro.dbt_external_tables.value_only": {"name": "value_only", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4446201, "supported_languages": null}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"name": "redshift_is_ext_tbl", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.445438, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__create_external_table": {"name": "sqlserver__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4467268, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"name": "sqlserver__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.447458, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__dropif": {"name": "sqlserver__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.447793, "supported_languages": null}, "macro.dbt_external_tables.spark__create_external_table": {"name": "spark__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4496078, "supported_languages": null}, "macro.dbt_external_tables.spark__refresh_external_table": {"name": "spark__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.449887, "supported_languages": null}, "macro.dbt_external_tables.spark__get_external_build_plan": {"name": "spark__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = dbt_external_tables.recover_partitions(source_node) %}\n    {% if recover_partitions %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.450825, "supported_languages": null}, "macro.dbt_external_tables.spark__recover_partitions": {"name": "spark__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        {% set ddl %}\n            ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n        {% endset %}\n    {%- else -%}\n        {% set ddl = none %}\n    {%- endif -%}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.451379, "supported_languages": null}, "macro.dbt_external_tables.recover_partitions": {"name": "recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.recover_partitions", "macro_sql": "{% macro recover_partitions(source_node) %}\n    {{ return(adapter.dispatch('recover_partitions', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4515378, "supported_languages": null}, "macro.dbt_external_tables.default__recover_partitions": {"name": "default__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.default__recover_partitions", "macro_sql": "{% macro default__recover_partitions(source_node) %}\n    /*{# \n        We're dispatching this macro so that users can override it if required on other adapters\n        but this will work for spark/databricks. \n    #}*/\n\n    {{ exceptions.raise_not_implemented('recover_partitions macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.451684, "supported_languages": null}, "macro.dbt_external_tables.spark__dropif": {"name": "spark__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.45193, "supported_languages": null}, "macro.dbt_external_tables.create_external_table": {"name": "create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.452142, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_table": {"name": "default__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4522529, "supported_languages": null}, "macro.dbt_external_tables.refresh_external_table": {"name": "refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.452469, "supported_languages": null}, "macro.dbt_external_tables.default__refresh_external_table": {"name": "default__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.452584, "supported_languages": null}, "macro.dbt_external_tables.get_external_build_plan": {"name": "get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.45281, "supported_languages": null}, "macro.dbt_external_tables.default__get_external_build_plan": {"name": "default__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4529212, "supported_languages": null}, "macro.dbt_external_tables.stage_external_sources": {"name": "stage_external_sources", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "unique_id": "macro.dbt_external_tables.stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.457555, "supported_languages": null}, "macro.dbt_external_tables.dropif": {"name": "dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.457786, "supported_languages": null}, "macro.dbt_external_tables.default__dropif": {"name": "default__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4578931, "supported_languages": null}, "macro.dbt_external_tables.exit_transaction": {"name": "exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.458097, "supported_languages": null}, "macro.dbt_external_tables.default__exit_transaction": {"name": "default__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.458194, "supported_languages": null}, "macro.dbt_snowflake_query_tags.get_query_comment": {"name": "get_query_comment", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_comment.sql", "original_file_path": "macros/query_comment.sql", "unique_id": "macro.dbt_snowflake_query_tags.get_query_comment", "macro_sql": "{% macro get_query_comment(node, extra = {}) %}\n    {%- set comment_dict = extra -%}\n    {%- do comment_dict.update(\n        app='dbt',\n        dbt_snowflake_query_tags_version='2.5.0',\n        dbt_version=dbt_version,\n        project_name=project_name,\n        target_name=target.name,\n        target_database=target.database,\n        target_schema=target.schema,\n        invocation_id=invocation_id,\n        run_started_at=run_started_at.astimezone(modules.pytz.utc).isoformat(),\n        full_refresh=flags.FULL_REFRESH,\n        which=flags.WHICH,\n    ) -%}\n\n    {%- if node is not none -%}\n        {%- do comment_dict.update(\n            node_name=node.name,\n            node_alias=node.alias,\n            node_package_name=node.package_name,\n            node_original_file_path=node.original_file_path,\n            node_database=node.database,\n            node_schema=node.schema,\n            node_id=node.unique_id,\n            node_resource_type=node.resource_type,\n            node_meta=node.config.meta,\n            node_tags=node.tags,\n        ) -%}\n\n        {%- if flags.INVOCATION_COMMAND -%}\n            {%- do comment_dict.update(\n                invocation_command=flags.INVOCATION_COMMAND\n            ) -%}\n        {%- endif -%}\n\n        {%- if node.resource_type != ('seed') -%} {# Otherwise this throws an error saying 'Seeds cannot depend on other nodes.' #}\n            {%- if node.refs is defined -%}\n                {% set refs = [] %}\n                {% for ref in node.refs %}\n                    {%- if dbt_version >= '1.5.0' -%}\n                        {%- do refs.append(ref.name) -%}\n                    {%- else -%}\n                        {%- do refs.append(ref[0]) -%}\n                    {%- endif -%}\n                {% endfor %}\n                {%- do comment_dict.update(\n                    node_refs=refs | unique | list\n                ) -%}\n            {%- endif -%}\n        {%- endif -%}\n        {%- if node.resource_type == 'model' -%}\n            {%- do comment_dict.update(\n                materialized=node.config.materialized,\n            ) -%}\n        {%- endif -%}\n\n        {%- if node.raw_code is not none and local_md5 -%}\n            {%- do comment_dict.update({\n                \"raw_code_hash\": local_md5(node.raw_code)\n            }) -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_PROJECT_ID', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_project_id=env_var('DBT_CLOUD_PROJECT_ID')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_JOB_ID', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_job_id=env_var('DBT_CLOUD_JOB_ID')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_ID', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_run_id=env_var('DBT_CLOUD_RUN_ID')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_REASON_CATEGORY', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_run_reason_category=env_var('DBT_CLOUD_RUN_REASON_CATEGORY')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_REASON', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_run_reason=env_var('DBT_CLOUD_RUN_REASON')\n        ) -%}\n    {%- endif -%}\n\n    {{ return(tojson(comment_dict)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.461592, "supported_languages": null}, "macro.dbt_snowflake_query_tags.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.set_query_tag", "macro_sql": "{% macro set_query_tag(extra = {}) -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt_snowflake_query_tags')(extra=extra)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4624581, "supported_languages": null}, "macro.dbt_snowflake_query_tags.default__set_query_tag": {"name": "default__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.default__set_query_tag", "macro_sql": "{% macro default__set_query_tag(extra = {}) -%}\n    {# Get session level query tag #}\n    {% set original_query_tag = get_current_query_tag() %}\n    {% set original_query_tag_parsed = {} %}\n\n    {% if original_query_tag %}\n        {% if fromjson(original_query_tag) is mapping %}\n            {% set original_query_tag_parsed = fromjson(original_query_tag) %}\n        {% endif %}\n    {% endif %}\n\n    {# The env_vars_to_query_tag_list should contain an environment variables list to construct query tag dict #}\n    {% set env_var_query_tags = {} %}\n    {% if var('env_vars_to_query_tag_list', '') %} {# Get a list of env vars from env_vars_to_query_tag_list variable to add additional query tags #}\n        {% for k in var('env_vars_to_query_tag_list') %}\n            {% set v = env_var(k, '') %}\n            {% do env_var_query_tags.update({k.lower(): v}) if v %}\n        {% endfor %}\n    {% endif %}\n\n    {# Start with any model-configured dict #}\n    {% set query_tag = config.get('query_tag', default={}) %}\n\n    {% if query_tag is not mapping %}\n    {% do log(\"dbt-snowflake-query-tags warning: the query_tag config value of '{}' is not a mapping type, so is being ignored. If you'd like to add additional query tag information, use a mapping type instead, or remove it to avoid this message.\".format(query_tag), True) %}\n    {% set query_tag = {} %} {# If the user has set the query tag config as a non mapping type, start fresh #}\n    {% endif %}\n\n    {% do query_tag.update(original_query_tag_parsed) %}\n    {% do query_tag.update(env_var_query_tags) %}\n    {% do query_tag.update(extra) %}\n\n    {%- do query_tag.update(\n        app='dbt',\n        dbt_snowflake_query_tags_version='2.5.0',\n    ) -%}\n\n    {% if thread_id %}\n        {%- do query_tag.update(\n            thread_id=thread_id\n        ) -%}\n    {% endif %}\n\n\n    {# We have to bring is_incremental through here because its not available in the comment context #}\n    {% if model.resource_type == 'model' %}\n        {%- do query_tag.update(\n            is_incremental=is_incremental()\n        ) -%}\n    {% endif %}\n\n    {% set query_tag_json = tojson(query_tag) %}\n    {{ log(\"Setting query_tag to '\" ~ query_tag_json ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(query_tag_json)) %}\n    {{ return(original_query_tag)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.is_incremental", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.464009, "supported_languages": null}, "macro.dbt_snowflake_query_tags.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt_snowflake_query_tags')(original_query_tag)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.464179, "supported_languages": null}, "macro.dbt_snowflake_query_tags.default__unset_query_tag": {"name": "default__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.default__unset_query_tag", "macro_sql": "{% macro default__unset_query_tag(original_query_tag) -%}\n    {% if original_query_tag %}\n    {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n    {{ log(\"No original query_tag, unsetting parameter.\") }}\n    {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4644842, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4648142, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.464881, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4649448, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.465006, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.465136, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4652002, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.465261, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4653199, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.465555, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.465761, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4667578, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.467044, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4673998, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4678028, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4680479, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.468318, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.468669, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\" \n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.469036, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4692822, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4693708, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.469456, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.469544, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.469814, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.469883, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.469943, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.470015, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4700758, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.470135, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4703062, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.470675, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4708428, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.471017, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4714088, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.471961, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.472972, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4735749, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4744189, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.474664, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.475163, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4797592, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.480203, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.480602, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.481639, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.481861, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4819572, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4824152, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.48326, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.483851, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4842849, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.484946, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.485534, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.486519, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4874399, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4882822, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.488495, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.488939, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.489911, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.490409, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.491384, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4922318, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4925282, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.493472, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.495531, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.496377, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4973671, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.497935, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4981718, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.4989262, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.499278, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.500236, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.500489, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.501503, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5018182, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.502984, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5035148, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5038562, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.504255, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5045629, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.505381, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.50612, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.506882, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.508029, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.508405, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.508616, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.509254, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.510311, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.511211, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.511403, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.511755, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5121222, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.512778, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.513458, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.51421, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5149162, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5156538, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5164878, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5180612, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5186849, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.51944, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.519941, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.520452, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5211039, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.522274, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5226638, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5233269, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.523979, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.524491, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.525302, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.525932, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.529299, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5330188, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.533487, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5347478, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5355148, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.535976, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.537285, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.538178, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.539865, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5406232, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.541128, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.541684, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1741278780.5428329, "supported_languages": null}}, "docs": {"doc.maya_models.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/__overview__.md", "original_file_path": "models/descriptions/__overview__.md", "unique_id": "doc.maya_models.__overview__", "block_contents": "# Welcome to the Flipside Crypto Maya Models Documentation\n\n## **What does this documentation cover?**\n\nThe documentation included here details the design of the Maya\ntables and views available via [Flipside Crypto.](https://flipsidecrypto.xyz/insights/dashboards/maya) For more information on how these models are built, please see [the github repository.](https://github.com/FlipsideCrypto/maya-models)\n\n## **How do I use these docs?**\n\nThe easiest way to navigate this documentation is to use the Quick Links below. These links will take you to the documentation for each table, which contains a description, a list of the columns, and other helpful information.\n\nIf you are experienced with dbt docs, feel free to use the sidebar to navigate the documentation, as well as explore the relationships between tables and the logic building them.\n\nThere is more information on how to use dbt docs in the last section of this document.\n\n## **Quick Links to Table Documentation**\n\n**Click on the links below to jump to the documentation for each schema.**\n\n### Core Schema (`maya`.`CORE`.`<table_name>`)\n\n- [core.dim_block](#!/model/model.maya_models.core__dim_block)\n- [core.dim_midgard](#!/model/model.maya_models.core__dim_midgard)\n- [core.fact_mayaname_change_events](#!/model/model.maya_models.core__fact_mayaname_change_events)\n- [core.fact_set_mimir_events](#!/model/model.maya_models.core__fact_set_mimir_events)\n- [core.fact_transfer_events](#!/model/model.maya_models.core__fact_transfer_events)\n- [core.fact_transfers](#!/model/model.maya_models.core__fact_transfers)\n\n### Defi Schema\n\n- [defi.fact_active_vault_events](#!/model/model.maya_models.defi__fact_active_vault_events)\n- [defi.fact_add_events](#!/model/model.maya_models.defi__fact_add_events)\n- [defi.fact_block_pool_depths](#!/model/model.maya_models.defi__fact_block_pool_depths)\n- [defi.fact_block_rewards](#!/model/model.maya_models.defi__fact_block_rewards)\n- [defi.fact_bond_actions](#!/model/model.maya_models.defi__fact_bond_actions)\n- [defi.fact_bond_events](#!/model/model.maya_models.defi__fact_bond_events)\n- [defi.fact_daily_earnings](#!/model/model.maya_models.defi__fact_daily_earnings)\n- [defi.fact_daily_pool_stats](#!/model/model.maya_models.defi__fact_daily_pool_stats)\n- [defi.fact_daily_tvl](#!/model/model.maya_models.defi__fact_daily_tvl)\n- [defi.fact_failed_deposit_messages](#!/model/model.maya_models.defi__fact_failed_deposit_messages)\n- [defi.fact_fee_events](#!/model/model.maya_models.defi__fact_fee_events)\n- [defi.fact_gas_events](#!/model/model.maya_models.defi__fact_gas_events)\n- [defi.fact_inactive_vault_events](#!/model/model.maya_models.defi__fact_inactive_vault_events)\n- [defi.fact_liquidity_actions](#!/model/model.maya_models.defi__fact_liquidity_actions)\n- [defi.fact_outbound_events](#!/model/model.maya_models.defi__fact_outbound_events)\n- [defi.fact_pending_liquidity_events](#!/model/model.maya_models.defi__fact_pending_liquidity_events)\n- [defi.fact_pool_balance_change_events](#!/model/model.maya_models.defi__fact_pool_balance_change_events)\n- [defi.fact_pool_block_balances](#!/model/model.maya_models.defi__fact_pool_block_balances)\n- [defi.fact_pool_block_fees](#!/model/model.maya_models.defi__fact_pool_block_fees)\n- [defi.fact_pool_block_statistics](#!/model/model.maya_models.defi__fact_pool_block_statistics)\n- [defi.fact_pool_events](#!/model/model.maya_models.defi__fact_pool_events)\n- [defi.fact_refund_events](#!/model/model.maya_models.defi__fact_refund_events)\n- [defi.fact_reserve_events](#!/model/model.maya_models.defi__fact_reserve_events)\n- [defi.fact_rewards_event_entries](#!/model/model.maya_models.defi__fact_rewards_event_entries)\n- [defi.fact_rewards_events](#!/model/model.maya_models.defi__fact_rewards_events)\n- [defi.fact_send_message_events](#!/model/model.maya_models.defi__fact_send_message_events)\n- [defi.fact_slash_liquidity_events](#!/model/model.maya_models.defi__fact_slash_liquidity_events)\n- [defi.fact_stake_events](#!/model/model.maya_models.defi__fact_stake_events)\n- [defi.fact_streamling_swap_details_events](#!/model/model.maya_models.defi__fact_streamling_swap_details_events)\n- [defi.fact_swaps](#!/model/model.maya_models.defi__fact_swaps)\n- [defi.fact_swaps_events](#!/model/model.maya_models.defi__fact_swaps_events)\n- [defi.fact_total_block_rewards](#!/model/model.maya_models.defi__fact_total_block_rewards)\n- [defi.fact_total_value_locked](#!/model/model.maya_models.defi__fact_total_value_locked)\n- [defi.fact_update_node_account_status_events](#!/model/model.maya_models.defi__fact_update_node_account_status_events)\n- [defi.fact_withdraw_events](#!/model/model.maya_models.defi__fact_withdraw_events)\n\n### Governance Schema\n\n- [gov.fact_new_node_events](#!/model/model.maya_models.gov__fact_new_node_events)\n- [gov.fact_set_ip_address_events](#!/model/model.maya_models.gov__fact_set_ip_address_events)\n- [gov.fact_set_node_keys_events](#!/model/model.maya_models.gov__fact_set_node_keys_events)\n- [gov.fact_set_version_events](#!/model/model.maya_models.gov__fact_set_version_events)\n- [gov.fact_slash_amounts](#!/model/model.maya_models.gov__fact_slash_amounts)\n- [gov.fact_slash_points](#!/model/model.maya_models.gov__fact_slash_points)\n- [gov.fact_validator_request_leave_events](#!/model/model.maya_models.gov__fact_validator_request_leave_events)\n\n### Price Schema\n\n - [price.factcacao_price](#!/model/model.maya_models.price__fact_cacao_price)\n \n\n## **Data Model Overview**\n\nWhile maya models are built a few different ways, they are organized into three layers of sql models: **bronze, silver, and gold (or core).**\n\n- Bronze: Data is loaded in from the source as a view\n- Silver: All necessary parsing, filtering, de-duping, and other transformations are done here\n- Gold (or core): Final views and tables that are available publicly\n\nThe dimension tables are sourced from a variety of on-chain and off-chain sources.\n\nConvenience views (denoted ez\\_) are a combination of different fact and dimension tables. These views are built to make it easier to query the data.\n\n## **Using dbt docs**\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models in the project.\n\n### Database Tab\n\nThis view shows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown in this interface, as they do not exist in the database.\n\n### Graph Exploration\n\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the Expand button at the top-right of this lineage pane, you'll be able to see all of the models that are used to build, or are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the models in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n### **More information**\n\n- [maya on Flipside Crypto](https://flipsidecrypto.xyz/insights/dashboards/maya)\n- [Tutorials](https://docs.flipsidecrypto.com/our-data/tutorials)\n- [Github](https://github.com/FlipsideCrypto/maya-models)\n- [What is dbt?](https://docs.getdbt.com/docs/introduction)"}, "doc.maya_models.to_address": {"name": "to_address", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/to_address.md", "original_file_path": "models/descriptions/to_address.md", "unique_id": "doc.maya_models.to_address", "block_contents": "The receiving address for this event"}, "doc.maya_models.pk": {"name": "pk", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/pk.md", "original_file_path": "models/descriptions/pk.md", "unique_id": "doc.maya_models.pk", "block_contents": "The unique identifier for each row in the table."}, "doc.maya_models.blockchain": {"name": "blockchain", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/blockchain.md", "original_file_path": "models/descriptions/blockchain.md", "unique_id": "doc.maya_models.blockchain", "block_contents": "The name of the blockchain"}, "doc.maya_models.sk": {"name": "sk", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/sk.md", "original_file_path": "models/descriptions/sk.md", "unique_id": "doc.maya_models.sk", "block_contents": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables"}, "doc.maya_models.tx_id": {"name": "tx_id", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/tx_id.md", "original_file_path": "models/descriptions/tx_id.md", "unique_id": "doc.maya_models.tx_id", "block_contents": "The unique transaction id"}, "doc.maya_models.from_address": {"name": "from_address", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/from_address.md", "original_file_path": "models/descriptions/from_address.md", "unique_id": "doc.maya_models.from_address", "block_contents": "The sending address for this event"}, "doc.maya_models.inserted_timestamp": {"name": "inserted_timestamp", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/inserted_timestamp.md", "original_file_path": "models/descriptions/inserted_timestamp.md", "unique_id": "doc.maya_models.inserted_timestamp", "block_contents": "The utc timestamp at which the row was inserted into the table."}, "doc.maya_models.modified_timestamp": {"name": "modified_timestamp", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/modified_timestamp.md", "original_file_path": "models/descriptions/modified_timestamp.md", "unique_id": "doc.maya_models.modified_timestamp", "block_contents": "The utc timestamp at which the row was last modified."}, "doc.maya_models.block_date": {"name": "block_date", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/block_date.md", "original_file_path": "models/descriptions/block_date.md", "unique_id": "doc.maya_models.block_date", "block_contents": "Date of block minting(without a timezone)"}, "doc.maya_models.prices_dim_asset_metadata_table_doc": {"name": "prices_dim_asset_metadata_table_doc", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_dim_asset_metadata_table_doc", "block_contents": "A comprehensive dimensional table holding asset metadata and other relevant details pertaining to each id, from multiple providers. This data set includes raw, non-transformed data coming directly from the provider APIs and rows are not intended to be unique. As a result, there may be data quality issues persisting in the APIs that flow through to this dimensional model. If you are interested in using a curated data set instead, please utilize ez_asset_metadata."}, "doc.maya_models.prices_ez_asset_metadata_table_doc": {"name": "prices_ez_asset_metadata_table_doc", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_ez_asset_metadata_table_doc", "block_contents": "A convenience table holding prioritized asset metadata and other relevant details pertaining to each token_address and native asset. This data set is highly curated and contains metadata for one unique asset per blockchain."}, "doc.maya_models.prices_fact_prices_ohlc_hourly_table_doc": {"name": "prices_fact_prices_ohlc_hourly_table_doc", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_fact_prices_ohlc_hourly_table_doc", "block_contents": "A comprehensive fact table holding id and provider specific open, high, low, close hourly prices, from multiple providers. This data set includes raw, non-transformed data coming directly from the provider APIs and rows are not intended to be unique. As a result, there may be data quality issues persisting in the APIs that flow through to this fact based model. If you are interested in using a curated data set instead, please utilize ez_prices_hourly."}, "doc.maya_models.prices_ez_prices_hourly_table_doc": {"name": "prices_ez_prices_hourly_table_doc", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_ez_prices_hourly_table_doc", "block_contents": "A convenience table for determining token prices by address and blockchain, and native asset prices by symbol and blockchain. This data set is highly curated and contains metadata for one price per hour per unique asset and blockchain."}, "doc.maya_models.prices_provider": {"name": "prices_provider", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_provider", "block_contents": "The provider or source of the data."}, "doc.maya_models.prices_asset_id": {"name": "prices_asset_id", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_asset_id", "block_contents": "The unique identifier representing the asset."}, "doc.maya_models.prices_name": {"name": "prices_name", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_name", "block_contents": "The name of asset."}, "doc.maya_models.prices_symbol": {"name": "prices_symbol", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_symbol", "block_contents": "The symbol of asset."}, "doc.maya_models.prices_token_address": {"name": "prices_token_address", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_token_address", "block_contents": "The specific address representing the asset on a specific platform. This will be NULL if referring to a native asset."}, "doc.maya_models.prices_blockchain": {"name": "prices_blockchain", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_blockchain", "block_contents": "The Blockchain, Network, or Platform for this asset."}, "doc.maya_models.prices_blockchain_id": {"name": "prices_blockchain_id", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_blockchain_id", "block_contents": "The unique identifier of the Blockchain, Network, or Platform for this asset."}, "doc.maya_models.prices_decimals": {"name": "prices_decimals", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_decimals", "block_contents": "The number of decimals for the asset. May be NULL."}, "doc.maya_models.prices_is_native": {"name": "prices_is_native", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_is_native", "block_contents": "A flag indicating assets native to the respective blockchain."}, "doc.maya_models.prices_is_deprecated": {"name": "prices_is_deprecated", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_is_deprecated", "block_contents": "A flag indicating if the asset is deprecated or no longer supported by the provider."}, "doc.maya_models.prices_id_deprecation": {"name": "prices_id_deprecation", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_id_deprecation", "block_contents": "Deprecating soon! Please use the `asset_id` column instead."}, "doc.maya_models.prices_decimals_deprecation": {"name": "prices_decimals_deprecation", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_decimals_deprecation", "block_contents": "Deprecating soon! Please use the decimals column in `ez_asset_metadata` or join in `dim_contracts` instead."}, "doc.maya_models.prices_hour": {"name": "prices_hour", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_hour", "block_contents": "Hour that the price was recorded at."}, "doc.maya_models.prices_price": {"name": "prices_price", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_price", "block_contents": "Closing price of the recorded hour in USD."}, "doc.maya_models.prices_is_imputed": {"name": "prices_is_imputed", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_is_imputed", "block_contents": "A flag indicating if the price was imputed, or derived, from the last arriving record. This is generally used for tokens with low-liquidity or inconsistent reporting."}, "doc.maya_models.prices_open": {"name": "prices_open", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_open", "block_contents": "Opening price of the recorded hour in USD."}, "doc.maya_models.prices_high": {"name": "prices_high", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_high", "block_contents": "Highest price of the recorded hour in USD"}, "doc.maya_models.prices_low": {"name": "prices_low", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_low", "block_contents": "Lowest price of the recorded hour in USD"}, "doc.maya_models.prices_close": {"name": "prices_close", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.maya_models.prices_close", "block_contents": "Closing price of the recorded hour in USD"}, "doc.maya_models.id": {"name": "id", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/id.md", "original_file_path": "models/descriptions/id.md", "unique_id": "doc.maya_models.id", "block_contents": "The primary key for the table."}, "doc.maya_models.asset": {"name": "asset", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/asset.md", "original_file_path": "models/descriptions/asset.md", "unique_id": "doc.maya_models.asset", "block_contents": "Asset name or pool name"}, "doc.maya_models.address": {"name": "address", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/address.md", "original_file_path": "models/descriptions/address.md", "unique_id": "doc.maya_models.address", "block_contents": "The account public key"}, "doc.maya_models.bond_type": {"name": "bond_type", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/bond_type.md", "original_file_path": "models/descriptions/bond_type.md", "unique_id": "doc.maya_models.bond_type", "block_contents": "There are 4 different types of bond:bond_reward, bond_paid, bond_cost, bond_returned"}, "doc.maya_models.block_id": {"name": "block_id", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/block_id.md", "original_file_path": "models/descriptions/block_id.md", "unique_id": "doc.maya_models.block_id", "block_contents": "ID of the confirmed block"}, "doc.maya_models.memo": {"name": "memo", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/memo.md", "original_file_path": "models/descriptions/memo.md", "unique_id": "doc.maya_models.memo", "block_contents": "The memo for this event"}, "doc.maya_models.pool_name": {"name": "pool_name", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/pool_name.md", "original_file_path": "models/descriptions/pool_name.md", "unique_id": "doc.maya_models.pool_name", "block_contents": "Name of the pool -- also asset name in other tables"}, "doc.maya_models.block_timestamp": {"name": "block_timestamp", "resource_type": "doc", "package_name": "maya_models", "path": "descriptions/block_timestamp.md", "original_file_path": "models/descriptions/block_timestamp.md", "unique_id": "doc.maya_models.block_timestamp", "block_contents": "Timestamp of block minting(without a timezone)"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.livequery_base.__livequery_models__": {"name": "__livequery_models__", "resource_type": "doc", "package_name": "livequery_base", "path": "doc_descriptions/general/__overview__.md", "original_file_path": "models/doc_descriptions/general/__overview__.md", "unique_id": "doc.livequery_base.__livequery_models__", "block_contents": "# Welcome to the Flipside Crypto LiveQuery Models Documentation!\n\n## **What does this documentation cover?**\nThe documentation included here details the design of the LiveQuery functions available via [Flipside Crypto](https://flipsidecrypto.xyz/). For more information on how these functions are built, please see [the github repository.](https://github.com/FlipsideCrypto/livequery-models)\n\n### **Overview of Available Functions**\n\n#### **UTILS Functions**\n\n- `livequery.utils.hex_to_int`: Use this UDF to transform any hex string to integer\n    ```\n    ex: Curve Swaps\n\n    SELECT\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        livequery.utils.hex_to_int(segmented_data [1] :: STRING) :: INTEGER AS tokens_sold\n    FROM\n        optimism.core.fact_event_logs\n    WHERE\n        topics [0] :: STRING IN (\n            '0x8b3e96f2b889fa771c53c981b40daf005f63f637f1869f707052d15a3dd97140',\n            '0xd013ca23e77a65003c2c659c5442c00c805371b7fc1ebd4c206c41d1536bd90b'\n        )\n    ```\n- `livequery.utils.hex_encode_function` (coming soon)(Function VARCHAR): Use this UDF to hex encode any string\n    ```\n    ex: Decimals Function Signature\n\n    SELECT\n        `decimals` AS function_name,\n        livequery.utils.hex_encode_function(`decimals()`) :: STRING AS text_sig,\n        LEFT(text_sig,10) AS function_sig,\n        '0x313ce567' AS expected_sig\n    ```\n- `livequery.utils.evm_decode_logs` (coming soon)\n- `livequery.utils.udf_register_secret`\n\n#### **LIVE Functions & Examples**\n\n- `livequery.live.udf_api`(Method STRING, URL STRING, Headers OBJECT, Data OBJECT): Use this UDF to make a GET or POST request on any API\n    ```\n    ex: Defillama GET request -> working with the output (JSON flatten)\n\n    WITH chain_base AS (\n        SELECT\n            livequery.live.udf_api(\n                'GET','https://api.llama.fi/chains',{},{}\n            ) AS read\n    )\n\n    SELECT\n        VALUE:chainId::STRING AS chain_id,\n        VALUE:name::STRING AS chain,\n        VALUE:tokenSymbol::STRING AS token_symbol\n    FROM chain_base,\n        LATERAL FLATTEN (input=> read:data)\n\n    ex: Solana Token Metadata\n\n    SELECT\n        livequery.live.udf_api(\n            'GET',\n            'https://public-api.solscan.io/token/meta?tokenAddress=SPraYi59a21jEhqvPBbWuwmjA4vdTaSLbiRTefcHJSR',\n            { },\n            { }\n        );\n\n    ex: Running with multiple token addresses at the same time\n\n    WITH solana_addresses AS (\n        SELECT\n            'SPraYi59a21jEhqvPBbWuwmjA4vdTaSLbiRTefcHJSR' AS address\n        UNION\n        SELECT\n            '4KbzSz2VF1LCvEaw8viq1335VgWzNjMd8rwQMsCkKHip'\n    )\n    SELECT\n        livequery.live.udf_api(\n            'GET',\n            concat(\n                'https://public-api.solscan.io/token/meta?tokenAddress=',\n                address\n            ),\n            { },\n            { }\n        )\n    FROM\n        solana_addresses;\n\n    ex: Hit Quicknode (see instructions below for how to register an API Key with Flipside securely)\n\n    SELECT\n        livequery.live.udf_api(\n            'POST',\n            concat(\n                'http://sample-endpoint-name.network.quiknode.pro/',\n                '{my_key}'\n            ),\n            {},\n            { 'method' :'eth_blockNumber',\n              'params' :[],\n                'id' :1,\n                'jsonrpc' :'2.0' },\n            'quicknode'\n        );\n    ```\n\n##### **Registering and Using LiveQuery Credentials to Query Quicknode**\nWith LiveQuery you can safely store encrypted credentials, such as an API key, with Flipside, and query blockchain nodes directly via our SQL interface. Here\u2019s how:\n1. Sign up for a free [Quicknode API Account](https://www.quicknode.com/core-api)\n2. Navigate to ***Endpoints*** on the left hand side then click the ***Get Started*** tab and ***Copy*** the HTTP Provider Endpoint. Do not adjust the Setup or Security parameters.\n3. Visit [Ephit](https://science.flipsidecrypto.xyz/ephit) to obtain an Ephemeral query that will securely link your API Endpoint to Flipside's backend. This will allow you to refer to the URL securely in our application without referencing it or exposing keys directly.\n4. Fill out the form and click ***Submit this Credential***\n5. Paste the provided query into [Flipside](https://flipside.new) and query your node directly in the app with your submitted Credential (`{my_key}`).\n\n##### **API Endpoints available for use with LiveQuery:**\nPlease visit the Flipside discord or open a ticket for questions, concerns or more information.\n\n- Snapshot: [https://hub.snapshot.org/graphql](https://docs.snapshot.org/graphql-api)\n- Defillama: [https://api.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://yields.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://stablecoins.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://bridges.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://coins.llama.fi/](https://defillama.com/docs/api)\n- zkSync: [https://api.zksync.io/api/v0.2/](https://docs.zksync.io/apiv02-docs/)\n- DeepNFT Value: [https://api.deepnftvalue.com/v1](https://deepnftvalue.readme.io/reference/getting-started-with-deepnftvalue-api)\n- Zapper: [https://api.zapper.fi/v2/](https://api.zapper.fi/api/static/index.html#/Apps/AppsController_getApps)\n- Helius: [https://api.helius.xyz](https://docs.helius.xyz/introduction/why-helius)\n- Stargaze Name Service: [https://rest.stargaze-apis.com](https://github.com/public-awesome/names/blob/main/API.md)\n\n## **Using dbt docs**\n### Navigation\n\nYou can use the ```Project``` and ```Database``` navigation tabs on the left side of the window to explore the models in the project.\n\n### Database Tab\n\nThis view shows relations (tables and views) grouped into database schemas. Note that ephemeral models are *not* shown in this interface, as they do not exist in the database.\n\n### Graph Exploration\n\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the Expand button at the top-right of this lineage pane, you'll be able to see all of the models that are used to build, or are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the ```--models``` and ```--exclude``` model selection syntax to filter the models in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n### **More information**\n- [Flipside](https://flipsidecrypto.xyz/)\n- [Velocity](https://app.flipsidecrypto.com/velocity?nav=Discover)\n- [Tutorials](https://docs.flipsidecrypto.com/our-data/tutorials)\n- [Github](https://github.com/FlipsideCrypto/external-models)\n- [What is dbt?](https://docs.getdbt.com/docs/introduction)"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"model.livequery_base.secrets": [{"database": "MAYA", "schema": "secrets", "name": "secrets", "resource_type": "model", "package_name": "livequery_base", "path": "deploy/core/secrets.sql", "original_file_path": "models/deploy/core/secrets.sql", "unique_id": "model.livequery_base.secrets", "fqn": ["livequery_base", "deploy", "core", "secrets"], "alias": "", "checksum": {"name": "sha256", "checksum": "ec1f117cc419f648463c64fca28b91e20fff87fa5b6f982ab8d75e74a3d1b052"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["core"], "description": "", "columns": {"udf_register_secret": {"name": "udf_register_secret", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_get_secret": {"name": "udf_get_secret", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_get_secrets": {"name": "udf_get_secrets", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_create_secret": {"name": "udf_create_secret", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_delete_secret": {"name": "udf_delete_secret", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_base://models/deploy/core/secrets.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "enabled": "{{ true if env_var(\"ENABLE_SNOWFLAKE_SECRETS\", \"\") else false }}", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1741278783.8110862, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_utils') }}\n-- depends_on: {{ ref('live') }}\n{% set config = config_core_secrets %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}, {"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_base.ephemeral_deploy_core"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}]}, "parent_map": {"model.maya_models.bronze__gas_events": ["source.maya_models.maya_midgard.midgard_gas_events"], "model.maya_models.bronze__set_node_mimir_events": ["source.maya_models.maya_midgard.midgard_set_node_mimir_events"], "model.maya_models.bronze__inactive_vault_events": ["source.maya_models.maya_midgard.midgard_inactive_vault_events"], "model.maya_models.bronze__failed_deposit_messages": ["source.maya_models.maya_midgard.midgard_failed_deposit_messages"], "model.maya_models.bronze__new_node_events": ["source.maya_models.maya_midgard.midgard_new_node_events"], "model.maya_models.bronze__send_messages": ["source.maya_models.maya_midgard.midgard_send_messages"], "model.maya_models.bronze__rewards_events": ["source.maya_models.maya_midgard.midgard_rewards_events"], "model.maya_models.bronze__bond_events": ["source.maya_models.maya_midgard.midgard_bond_events"], "model.maya_models.bronze__pending_liquidity_events": ["source.maya_models.maya_midgard.midgard_pending_liquidity_events"], "model.maya_models.bronze__slash_liquidity_events": ["source.maya_models.maya_midgard.midgard_slash_liquidity_events"], "model.maya_models.bronze__swap_events": ["source.maya_models.maya_midgard.midgard_swap_events"], "model.maya_models.bronze__streamling_swap_details_events": ["source.maya_models.maya_midgard.midgard_streaming_swap_details_events"], "model.maya_models.bronze__stake_events": ["source.maya_models.maya_midgard.midgard_stake_events"], "model.maya_models.bronze__block_pool_depths": ["source.maya_models.maya_midgard.midgard_block_pool_depths"], "model.maya_models.bronze__set_version_events": ["source.maya_models.maya_midgard.midgard_set_version_events"], "model.maya_models.bronze__cacao_price": ["source.maya_models.maya_midgard.midgard_cacao_price"], "model.maya_models.bronze__add_events": ["source.maya_models.maya_midgard.midgard_add_events"], "model.maya_models.bronze__pool_balance_change_events": ["source.maya_models.maya_midgard.midgard_pool_balance_change_events"], "model.maya_models.bronze__block_log": ["source.maya_models.maya_midgard.midgard_block_log"], "model.maya_models.bronze__transfer_events": ["source.maya_models.maya_midgard.midgard_transfer_events"], "model.maya_models.bronze__set_mimir_events": ["source.maya_models.maya_midgard.midgard_set_mimir_events"], "model.maya_models.bronze__fee_events": ["source.maya_models.maya_midgard.midgard_fee_events"], "model.maya_models.bronze__reserve_events": ["source.maya_models.maya_midgard.midgard_reserve_events"], "model.maya_models.bronze__refund_events": ["source.maya_models.maya_midgard.midgard_refund_events"], "model.maya_models.bronze__active_vault_events": ["source.maya_models.maya_midgard.midgard_active_vault_events"], "model.maya_models.bronze__validator_request_leave_events": ["source.maya_models.maya_midgard.midgard_validator_request_leave_events"], "model.maya_models.bronze__rewards_event_entries": ["source.maya_models.maya_midgard.midgard_rewards_event_entries"], "model.maya_models.bronze__update_node_account_status_events": ["source.maya_models.maya_midgard.midgard_update_node_account_status_events"], "model.maya_models.bronze__mayaname_change_events": ["source.maya_models.maya_midgard.midgard_mayaname_change_events"], "model.maya_models.bronze__slash_points_events": ["source.maya_models.maya_midgard.midgard_slash_points_events"], "model.maya_models.bronze__set_ip_address_events": ["source.maya_models.maya_midgard.midgard_set_ip_address_events"], "model.maya_models.bronze__outbound_events": ["source.maya_models.maya_midgard.midgard_outbound_events"], "model.maya_models.bronze__slash_events": ["source.maya_models.maya_midgard.midgard_slash_events"], "model.maya_models.bronze__constants": ["source.maya_models.maya_midgard.midgard_constants"], "model.maya_models.bronze__withdraw_events": ["source.maya_models.maya_midgard.midgard_withdraw_events"], "model.maya_models.bronze__pool_events": ["source.maya_models.maya_midgard.midgard_pool_events"], "model.maya_models.bronze__set_node_keys_events": ["source.maya_models.maya_midgard.midgard_set_node_keys_events"], "model.maya_models.silver__daily_tvl": ["model.maya_models.silver__prices", "model.maya_models.silver__total_value_locked"], "model.maya_models.silver__outbound_events": ["model.maya_models.bronze__outbound_events"], "model.maya_models.silver__failed_deposit_messages": ["model.maya_models.bronze__failed_deposit_messages"], "model.maya_models.silver__daily_pool_stats": ["model.maya_models.silver__pool_block_fees", "model.maya_models.silver__pool_block_statistics", "model.maya_models.silver__prices"], "model.maya_models.silver__daily_earnings": ["model.maya_models.silver__block_rewards", "model.maya_models.silver__prices"], "model.maya_models.silver__set_node_mimir_events": ["model.maya_models.bronze__set_node_mimir_events"], "model.maya_models.silver__inactive_vault_events": ["model.maya_models.bronze__inactive_vault_events"], "model.maya_models.silver__withdraw_events": ["model.maya_models.bronze__withdraw_events"], "model.maya_models.silver__slash_events": ["model.maya_models.bronze__slash_events"], "model.maya_models.silver__transfers": ["model.maya_models.silver__block_log", "model.maya_models.silver__prices", "model.maya_models.silver__transfer_events"], "model.maya_models.silver__block_pool_depths": ["model.maya_models.bronze__block_pool_depths"], "model.maya_models.silver__set_mimir_events": ["model.maya_models.bronze__set_mimir_events"], "model.maya_models.silver__pool_block_statistics": ["model.maya_models.silver__block_log", "model.maya_models.silver__block_pool_depths", "model.maya_models.silver__pool_events", "model.maya_models.silver__prices", "model.maya_models.silver__stake_events", "model.maya_models.silver__swap_events", "model.maya_models.silver__withdraw_events"], "model.maya_models.silver__liquidity_actions": ["model.maya_models.silver__block_log", "model.maya_models.silver__prices", "model.maya_models.silver__stake_events", "model.maya_models.silver__withdraw_events"], "model.maya_models.silver__refund_events": ["model.maya_models.bronze__refund_events"], "model.maya_models.silver__validator_request_leave_events": ["model.maya_models.bronze__validator_request_leave_events"], "model.maya_models.silver__transfer_events": ["model.maya_models.bronze__transfer_events"], "model.maya_models.silver__total_value_locked": ["model.maya_models.silver__block_log", "model.maya_models.silver__block_pool_depths", "model.maya_models.silver__bond_events"], "model.maya_models.silver__bond_events": ["model.maya_models.bronze__bond_events"], "model.maya_models.silver__update_node_account_status_events": ["model.maya_models.bronze__update_node_account_status_events"], "model.maya_models.silver__swaps": ["model.maya_models.silver__block_log", "model.maya_models.silver__prices", "model.maya_models.silver__swap_events"], "model.maya_models.silver__swap_events": ["model.maya_models.bronze__swap_events"], "model.maya_models.silver__mayaname_change_events": ["model.maya_models.bronze__mayaname_change_events"], "model.maya_models.silver__rewards_events": ["model.maya_models.bronze__rewards_events"], "model.maya_models.silver__pool_block_fees": ["model.maya_models.silver__block_log", "model.maya_models.silver__block_pool_depths", "model.maya_models.silver__rewards_event_entries", "model.maya_models.silver__swap_events"], "model.maya_models.silver__fee_events": ["model.maya_models.bronze__fee_events"], "model.maya_models.silver__add_events": ["model.maya_models.bronze__add_events"], "model.maya_models.silver__pool_balance_change_events": ["model.maya_models.bronze__pool_balance_change_events"], "model.maya_models.silver__block_rewards": ["model.maya_models.silver__block_log", "model.maya_models.silver__block_pool_depths", "model.maya_models.silver__rewards_event_entries", "model.maya_models.silver__rewards_events", "model.maya_models.silver__swap_events", "model.maya_models.silver__update_node_account_status_events"], "model.maya_models.silver__cacao_price": ["model.maya_models.bronze__cacao_price"], "model.maya_models.silver__reserve_events": ["model.maya_models.bronze__reserve_events"], "model.maya_models.silver__streamling_swap_details_events": ["model.maya_models.bronze__streamling_swap_details_events"], "model.maya_models.silver__set_node_keys_events": ["model.maya_models.bronze__set_node_keys_events"], "model.maya_models.silver__block_log": ["model.maya_models.bronze__block_log"], "model.maya_models.silver__stake_events": ["model.maya_models.bronze__stake_events"], "model.maya_models.silver__send_messages": ["model.maya_models.bronze__send_messages"], "model.maya_models.silver__rewards_event_entries": ["model.maya_models.bronze__rewards_event_entries"], "model.maya_models.silver__slash_liquidity_events": ["model.maya_models.bronze__slash_liquidity_events"], "model.maya_models.silver__set_ip_address_events": ["model.maya_models.bronze__set_ip_address_events"], "model.maya_models.silver__prices": ["model.maya_models.silver__block_log", "model.maya_models.silver__block_pool_depths", "model.maya_models.silver__cacao_price"], "model.maya_models.silver__total_block_rewards": ["model.maya_models.silver__block_log", "model.maya_models.silver__prices", "model.maya_models.silver__rewards_event_entries", "model.maya_models.silver__rewards_events"], "model.maya_models.silver__pending_liquidity_events": ["model.maya_models.bronze__pending_liquidity_events"], "model.maya_models.silver__gas_events": ["model.maya_models.bronze__gas_events"], "model.maya_models.silver__pool_events": ["model.maya_models.bronze__pool_events"], "model.maya_models.silver__set_version_events": ["model.maya_models.bronze__set_version_events"], "model.maya_models.silver__active_vault_events": ["model.maya_models.bronze__active_vault_events"], "model.maya_models.silver__pool_block_balances": ["model.maya_models.silver__block_log", "model.maya_models.silver__block_pool_depths", "model.maya_models.silver__prices"], "model.maya_models.silver__slash_points_events": ["model.maya_models.bronze__slash_points_events"], "model.maya_models.silver__constants": ["model.maya_models.bronze__constants"], "model.maya_models.silver__new_node_events": ["model.maya_models.bronze__new_node_events"], "model.maya_models.core__fact_mayaname_change_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__mayaname_change_events"], "model.maya_models.core__dim_block": ["model.maya_models.silver__block_log"], "model.maya_models.core__fact_set_mimir_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__set_mimir_events"], "model.maya_models.core__fact_transfers": ["model.maya_models.core__dim_block", "model.maya_models.silver__transfers"], "model.maya_models.core__dim_midgard": [], "model.maya_models.core__fact_transfer_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__transfer_events"], "model.maya_models.price__fact_cacao_price": ["model.maya_models.core__dim_block", "model.maya_models.silver__cacao_price"], "model.maya_models.defi__fact_daily_earnings": ["model.maya_models.silver__daily_earnings"], "model.maya_models.defi__fact_swaps_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__swap_events"], "model.maya_models.defi__fact_withdraw_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__withdraw_events"], "model.maya_models.defi__fact_block_rewards": ["model.maya_models.silver__block_rewards"], "model.maya_models.defi__fact_outbound_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__outbound_events"], "model.maya_models.defi__fact_pending_liquidity_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__pending_liquidity_events"], "model.maya_models.defi__fact_refund_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__refund_events"], "model.maya_models.defi__fact_gas_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__gas_events"], "model.maya_models.defi__fact_bond_actions": ["model.maya_models.core__dim_block", "model.maya_models.silver__bond_events", "model.maya_models.silver__prices"], "model.maya_models.defi__fact_streamling_swap_details_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__streamling_swap_details_events"], "model.maya_models.defi__fact_inactive_vault_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__inactive_vault_events"], "model.maya_models.defi__fact_rewards_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__rewards_events"], "model.maya_models.defi__fact_bond_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__bond_events"], "model.maya_models.defi__fact_update_node_account_status_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__update_node_account_status_events"], "model.maya_models.defi__fact_pool_block_statistics": ["model.maya_models.silver__pool_block_statistics"], "model.maya_models.defi__fact_failed_deposit_messages": ["model.maya_models.core__dim_block", "model.maya_models.silver__failed_deposit_messages"], "model.maya_models.defi__fact_pool_block_fees": ["model.maya_models.silver__pool_block_fees"], "model.maya_models.defi__fact_pool_balance_change_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__pool_balance_change_events"], "model.maya_models.defi__fact_reserve_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__reserve_events"], "model.maya_models.defi__fact_stake_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__stake_events"], "model.maya_models.defi__fact_slash_liquidity_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__slash_liquidity_events"], "model.maya_models.defi__fact_swaps": ["model.maya_models.core__dim_block", "model.maya_models.silver__swaps"], "model.maya_models.defi__fact_fee_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__fee_events"], "model.maya_models.defi__fact_block_pool_depths": ["model.maya_models.core__dim_block", "model.maya_models.silver__block_pool_depths"], "model.maya_models.defi__fact_add_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__add_events"], "model.maya_models.defi__fact_send_messages": ["model.maya_models.core__dim_block", "model.maya_models.silver__send_messages"], "model.maya_models.defi__fact_liquidity_actions": ["model.maya_models.core__dim_block", "model.maya_models.silver__liquidity_actions"], "model.maya_models.defi__fact_pool_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__pool_events"], "model.maya_models.defi__fact_active_vault_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__active_vault_events"], "model.maya_models.defi__fact_pool_block_balances": ["model.maya_models.core__dim_block", "model.maya_models.silver__pool_block_balances"], "model.maya_models.defi__fact_total_value_locked": ["model.maya_models.silver__total_value_locked"], "model.maya_models.defi__fact_daily_tvl": ["model.maya_models.silver__daily_tvl"], "model.maya_models.defi__fact_daily_pool_stats": ["model.maya_models.silver__daily_pool_stats"], "model.maya_models.defi__fact_total_block_rewards": ["model.maya_models.core__dim_block", "model.maya_models.silver__total_block_rewards"], "model.maya_models.defi__fact_rewards_event_entries": ["model.maya_models.core__dim_block", "model.maya_models.silver__rewards_event_entries"], "model.maya_models.gov__fact_set_node_keys_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__set_node_keys_events"], "model.maya_models.gov__fact_new_node_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__new_node_events"], "model.maya_models.gov__fact_slash_points": ["model.maya_models.core__dim_block", "model.maya_models.silver__slash_points_events"], "model.maya_models.gov__fact_validator_request_leave_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__validator_request_leave_events"], "model.maya_models.gov__fact_set_version_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__set_version_events"], "model.maya_models.gov__fact_slash_amounts": ["model.maya_models.core__dim_block", "model.maya_models.silver__slash_events"], "model.maya_models.gov__fact_set_ip_address_events": ["model.maya_models.core__dim_block", "model.maya_models.silver__set_ip_address_events"], "operation.maya_models.maya_models-on-run-start-0": [], "operation.maya_models.maya_models-on-run-start-1": [], "model.fsc_utils._datashare___create_udfs": [], "model.fsc_utils._datashare___create_gold": [], "model.livequery_base.live__allow_list": ["model.livequery_base.live"], "model.livequery_base._live": [], "model.livequery_base.utils": ["model.livequery_base._utils"], "model.livequery_base.live": ["model.livequery_base._live", "model.livequery_base._utils", "model.livequery_base.utils"], "model.livequery_base._utils": [], "analysis.livequery_base.test_functions_py": [], "analysis.livequery_base.test_functions": [], "analysis.livequery_base.test_create_or_drop_function_from_config": [], "seed.livequery_base.live__verified_api_endpoints": [], "operation.livequery_base.livequery_base-on-run-start-0": [], "operation.livequery_base.livequery_base-on-run-end-0": [], "operation.dbt_constraints.dbt_constraints-on-run-end-0": [], "test.maya_models.not_null_silver__transfer_events_BLOCK_TIMESTAMP.1ff60425a6": ["model.maya_models.silver__transfer_events"], "test.maya_models.not_null_silver__transfer_events_ASSET.4d061223da": ["model.maya_models.silver__transfer_events"], "test.maya_models.not_null_silver__transfer_events_AMOUNT_E8.4a22457c1d": ["model.maya_models.silver__transfer_events"], "test.maya_models.not_null_silver__transfer_events_FROM_ADDRESS.199be5d0bb": ["model.maya_models.silver__transfer_events"], "test.maya_models.not_null_silver__transfer_events_TO_ADDRESS.3db72ea291": ["model.maya_models.silver__transfer_events"], "test.maya_models.not_null_silver__validator_request_leave_events_EVENT_ID.b55c332547": ["model.maya_models.silver__validator_request_leave_events"], "test.maya_models.not_null_silver__validator_request_leave_events_TX_ID.e98479bb26": ["model.maya_models.silver__validator_request_leave_events"], "test.maya_models.not_null_silver__validator_request_leave_events_FROM_ADDRESS.209d28d48f": ["model.maya_models.silver__validator_request_leave_events"], "test.maya_models.not_null_silver__validator_request_leave_events_NODE_ADDRESS.c91207bb4e": ["model.maya_models.silver__validator_request_leave_events"], "test.maya_models.not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP.290714d793": ["model.maya_models.silver__validator_request_leave_events"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__validator_request_leave_events_EVENT_ID__TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__NODE_ADDRESS.90d08ddaee": ["model.maya_models.silver__validator_request_leave_events"], "test.maya_models.not_null_silver__refund_events_TX_ID.d818e4a9c0": ["model.maya_models.silver__refund_events"], "test.maya_models.not_null_silver__refund_events_BLOCKCHAIN.377143648d": ["model.maya_models.silver__refund_events"], "test.maya_models.not_null_silver__refund_events_FROM_ADDRESS.95dd9f9c95": ["model.maya_models.silver__refund_events"], "test.maya_models.not_null_silver__refund_events_TO_ADDRESS.2fda85c5dd": ["model.maya_models.silver__refund_events"], "test.maya_models.not_null_silver__refund_events_ASSET.8d91917f0d": ["model.maya_models.silver__refund_events"], "test.maya_models.not_null_silver__refund_events_ASSET_E8.2e099ee072": ["model.maya_models.silver__refund_events"], "test.maya_models.not_null_silver__refund_events_ASSET_2ND_E8.f8450d1bd5": ["model.maya_models.silver__refund_events"], "test.maya_models.not_null_silver__refund_events_CODE.fee514c705": ["model.maya_models.silver__refund_events"], "test.maya_models.not_null_silver__refund_events_REASON.080b9527d1": ["model.maya_models.silver__refund_events"], "test.maya_models.not_null_silver__refund_events_BLOCK_TIMESTAMP.60c1f10234": ["model.maya_models.silver__refund_events"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__refund_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__ASSET_2ND__MEMO__CODE__REASON__BLOCK_TIMESTAMP__EVENT_ID.bfb7525b50": ["model.maya_models.silver__refund_events"], "test.maya_models.not_null_silver__liquidity_actions_BLOCK_TIMESTAMP.ff2d2892a0": ["model.maya_models.silver__liquidity_actions"], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__liquidity_actions_BLOCK_TIMESTAMP__day__1.20722a4e9a": ["model.maya_models.silver__liquidity_actions"], "test.maya_models.not_null_silver__liquidity_actions_BLOCK_ID.39dcd6abaa": ["model.maya_models.silver__liquidity_actions"], "test.maya_models.not_null_silver__liquidity_actions_LP_ACTION.c249d79d62": ["model.maya_models.silver__liquidity_actions"], "test.maya_models.not_null_silver__liquidity_actions_POOL_NAME.3ad71b8145": ["model.maya_models.silver__liquidity_actions"], "test.maya_models.not_null_silver__liquidity_actions_cacao_AMOUNT.fad92cc503": ["model.maya_models.silver__liquidity_actions"], "test.maya_models.not_null_silver__liquidity_actions_cacao_AMOUNT_USD.4f2702f843": ["model.maya_models.silver__liquidity_actions"], "test.maya_models.not_null_silver__liquidity_actions_ASSET_AMOUNT.9620d465a9": ["model.maya_models.silver__liquidity_actions"], "test.maya_models.not_null_silver__liquidity_actions_STAKE_UNITS.689ec0ada5": ["model.maya_models.silver__liquidity_actions"], "test.maya_models.not_null_silver__total_value_locked_DAY.5d7ba86e85": ["model.maya_models.silver__total_value_locked"], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_value_locked_DAY__day__2.40cc6ac950": ["model.maya_models.silver__total_value_locked"], "test.maya_models.not_null_silver__total_value_locked_TOTAL_VALUE_POOLED.ca339c528a": ["model.maya_models.silver__total_value_locked"], "test.maya_models.not_null_silver__total_value_locked_TOTAL_VALUE_BONDED.6df7fe839f": ["model.maya_models.silver__total_value_locked"], "test.maya_models.not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED.32714bbc40": ["model.maya_models.silver__total_value_locked"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__total_value_locked_DAY.156a4d804a": ["model.maya_models.silver__total_value_locked"], "test.maya_models.not_null_silver__update_node_account_status_events_NODE_ADDRESS.2462678a83": ["model.maya_models.silver__update_node_account_status_events"], "test.maya_models.not_null_silver__update_node_account_status_events_CURRENT_STATUS.e8417a26f7": ["model.maya_models.silver__update_node_account_status_events"], "test.maya_models.not_null_silver__update_node_account_status_events_FORMER_STATUS.a863f18a99": ["model.maya_models.silver__update_node_account_status_events"], "test.maya_models.not_null_silver__update_node_account_status_events_BLOCK_TIMESTAMP.f7cd76f13b": ["model.maya_models.silver__update_node_account_status_events"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__update_node_account_status_events_NODE_ADDRESS__CURRENT_STATUS__FORMER_STATUS__BLOCK_TIMESTAMP__EVENT_ID.a1b6af9de0": ["model.maya_models.silver__update_node_account_status_events"], "test.maya_models.not_null_silver__bond_events_BLOCK_TIMESTAMP.b9485030e0": ["model.maya_models.silver__bond_events"], "test.maya_models.not_null_silver__bond_events_TX_ID.d18467b918": ["model.maya_models.silver__bond_events"], "test.maya_models.not_null_silver__bond_events_ASSET_E8.2bc5c2e174": ["model.maya_models.silver__bond_events"], "test.maya_models.not_null_silver__bond_events_BOND_TYPE.598bb69e8e": ["model.maya_models.silver__bond_events"], "test.maya_models.not_null_silver__bond_events_E8.c19384976b": ["model.maya_models.silver__bond_events"], "test.maya_models.not_null_silver__pool_block_fees_DAY.ecfb240ac6": ["model.maya_models.silver__pool_block_fees"], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_fees_DAY__day__2.ece5c1920a": ["model.maya_models.silver__pool_block_fees"], "test.maya_models.not_null_silver__pool_block_fees_POOL_NAME.f126e2294d": ["model.maya_models.silver__pool_block_fees"], "test.maya_models.not_null_silver__pool_block_fees_REWARDS.5b1d8b2e19": ["model.maya_models.silver__pool_block_fees"], "test.maya_models.not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_cacao.f8aaa086a0": ["model.maya_models.silver__pool_block_fees"], "test.maya_models.not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES.b890f32362": ["model.maya_models.silver__pool_block_fees"], "test.maya_models.not_null_silver__pool_block_fees_cacao_LIQUIDITY_FEES.d6bd4f1894": ["model.maya_models.silver__pool_block_fees"], "test.maya_models.not_null_silver__pool_block_fees_EARNINGS.78b1e80755": ["model.maya_models.silver__pool_block_fees"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pool_block_fees_DAY__POOL_NAME.bd55b36cef": ["model.maya_models.silver__pool_block_fees"], "test.maya_models.not_null_silver__rewards_events_BLOCK_TIMESTAMP.9c9ab7fca9": ["model.maya_models.silver__rewards_events"], "test.maya_models.not_null_silver__rewards_events_BOND_E8.7e5ede5d73": ["model.maya_models.silver__rewards_events"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__rewards_events_BLOCK_TIMESTAMP.b923b50047": ["model.maya_models.silver__rewards_events"], "test.maya_models.not_null_silver__swap_events_TX_ID.ba927b5821": ["model.maya_models.silver__swap_events"], "test.maya_models.not_null_silver__swap_events_BLOCKCHAIN.46d45dd5fc": ["model.maya_models.silver__swap_events"], "test.maya_models.not_null_silver__swap_events_FROM_ADDRESS.06e1df5a46": ["model.maya_models.silver__swap_events"], "test.maya_models.not_null_silver__swap_events_TO_ADDRESS.3c473194d8": ["model.maya_models.silver__swap_events"], "test.maya_models.not_null_silver__swap_events_FROM_ASSET.cfbedd6f2a": ["model.maya_models.silver__swap_events"], "test.maya_models.not_null_silver__swap_events_FROM_E8.74389cdde1": ["model.maya_models.silver__swap_events"], "test.maya_models.not_null_silver__swap_events_TO_ASSET.2a903da825": ["model.maya_models.silver__swap_events"], "test.maya_models.not_null_silver__swap_events_TO_E8.5ad719c657": ["model.maya_models.silver__swap_events"], "test.maya_models.not_null_silver__swap_events_MEMO.29e2c5dd27": ["model.maya_models.silver__swap_events"], "test.maya_models.not_null_silver__swap_events_POOL_NAME.e529db3476": ["model.maya_models.silver__swap_events"], "test.maya_models.not_null_silver__swap_events_TO_E8_MIN.d4667fb218": ["model.maya_models.silver__swap_events"], "test.maya_models.not_null_silver__swap_events_SWAP_SLIP_BP.61c1b2db2f": ["model.maya_models.silver__swap_events"], "test.maya_models.not_null_silver__swap_events_LIQ_FEE_E8.3403a5a47e": ["model.maya_models.silver__swap_events"], "test.maya_models.not_null_silver__swap_events_LIQ_FEE_IN_CACAO_E8.8d242c34b0": ["model.maya_models.silver__swap_events"], "test.maya_models.not_null_silver__swap_events__DIRECTION.910c1bf98a": ["model.maya_models.silver__swap_events"], "test.maya_models.not_null_silver__swap_events_BLOCK_TIMESTAMP.a57ee76fa3": ["model.maya_models.silver__swap_events"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__swap_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__FROM_ASSET__FROM_E8__TO_ASSET__TO_E8__MEMO__POOL_NAME__TO_E8_MIN__SWAP_SLIP_BP__LIQ_FEE_E8__LIQ_FEE_IN_CACAO_E8___DIRECTION__BLOCK_TIMESTAMP__EVENT_ID.6b4a3b623f": ["model.maya_models.silver__swap_events"], "test.maya_models.not_null_silver__swaps_BLOCK_ID.85d35d8cd4": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_BLOCK_TIMESTAMP_DATE.57ccf41e0a": ["model.maya_models.silver__swaps"], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_BLOCK_TIMESTAMP_DATE__day__2.d8a8588da7": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_TX_ID.429c1bdd9e": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_BLOCKCHAIN.704d8b1b68": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_POOL_NAME.8d3cfe0652": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_FROM_ADDRESS.247c2a81d9": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_TO_POOL_ADDRESS.eec1cbbccd": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_FROM_ASSET.2503f2d93d": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_TO_ASSET.d9705bc2c4": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_FROM_AMOUNT.a2d756c197": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_TO_AMOUNT.db49c788b2": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_MIN_TO_AMOUNT.75770dfa8f": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_FROM_AMOUNT_USD.78ab9ab5ae": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_TO_AMOUNT_USD.f7a4de00a3": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_TO_AMOUNT_MIN_USD.cc63ea20d5": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_SWAP_SLIP_BP.049ffdaa3d": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_LIQ_FEE_cacao.545480628b": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_LIQ_FEE_cacao_USD.1a59fb77e9": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_LIQ_FEE_ASSET.3ab6185469": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__swaps_LIQ_FEE_ASSET_USD.542bee191c": ["model.maya_models.silver__swaps"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__swaps_BLOCK_ID__TX_ID__POOL_NAME__FROM_ADDRESS__TO_POOL_ADDRESS__FROM_ASSET__TO_ASSET__NATIVE_TO_ADDRESS__FROM_AMOUNT__TO_AMOUNT.aa735861a8": ["model.maya_models.silver__swaps"], "test.maya_models.not_null_silver__fee_events_BLOCK_TIMESTAMP.c40fd33f4a": ["model.maya_models.silver__fee_events"], "test.maya_models.not_null_silver__fee_events_TX_ID.bfb2bd0eb8": ["model.maya_models.silver__fee_events"], "test.maya_models.not_null_silver__fee_events_ASSET.3832e5408e": ["model.maya_models.silver__fee_events"], "test.maya_models.not_null_silver__fee_events_POOL_DEDUCT.3a131f1475": ["model.maya_models.silver__fee_events"], "test.maya_models.not_null_silver__fee_events_ASSET_E8.0ae7bb759e": ["model.maya_models.silver__fee_events"], "test.maya_models.not_null_silver__add_events_TX_ID.3e7dfb5274": ["model.maya_models.silver__add_events"], "test.maya_models.not_null_silver__add_events_FROM_ADDRESS.c11c449394": ["model.maya_models.silver__add_events"], "test.maya_models.not_null_silver__add_events_TO_ADDRESS.ee57bfcd57": ["model.maya_models.silver__add_events"], "test.maya_models.not_null_silver__add_events_ASSET_E8.49cc46d9aa": ["model.maya_models.silver__add_events"], "test.maya_models.not_null_silver__add_events_MEMO.111566b9b2": ["model.maya_models.silver__add_events"], "test.maya_models.not_null_silver__add_events_cacao_E8.9839039ade": ["model.maya_models.silver__add_events"], "test.maya_models.not_null_silver__add_events_POOL_NAME.66d963165a": ["model.maya_models.silver__add_events"], "test.maya_models.not_null_silver__add_events_BLOCK_TIMESTAMP.00d2f77a19": ["model.maya_models.silver__add_events"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__add_events_EVENT_ID__TX_ID__BLOCKCHAIN__POOL_NAME__FROM_ADDRESS__TO_ADDRESS__MEMO.ba16b70ba9": ["model.maya_models.silver__add_events"], "test.maya_models.not_null_silver__block_rewards_DAY.202d1b684a": ["model.maya_models.silver__block_rewards"], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_rewards_DAY__day__2.c5edb01bcd": ["model.maya_models.silver__block_rewards"], "test.maya_models.not_null_silver__block_rewards_LIQUIDITY_FEE.0d49408c2f": ["model.maya_models.silver__block_rewards"], "test.maya_models.not_null_silver__block_rewards_BLOCK_REWARDS.1424b5c928": ["model.maya_models.silver__block_rewards"], "test.maya_models.not_null_silver__block_rewards_EARNINGS.cc83b753f9": ["model.maya_models.silver__block_rewards"], "test.maya_models.not_null_silver__block_rewards_BONDING_EARNINGS.46eaa4df77": ["model.maya_models.silver__block_rewards"], "test.maya_models.not_null_silver__block_rewards_LIQUIDITY_EARNINGS.61a45ddd0e": ["model.maya_models.silver__block_rewards"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__block_rewards_DAY.62cb5ef71d": ["model.maya_models.silver__block_rewards"], "test.maya_models.not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP.17e9062fd9": ["model.maya_models.silver__pool_balance_change_events"], "test.maya_models.not_null_silver__pool_balance_change_events_ASSET.fe12efdf7a": ["model.maya_models.silver__pool_balance_change_events"], "test.maya_models.not_null_silver__pool_balance_change_events_CACAO_AMOUNT.612b63c529": ["model.maya_models.silver__pool_balance_change_events"], "test.maya_models.not_null_silver__pool_balance_change_events_CACAO_ADD.5b7cd349b8": ["model.maya_models.silver__pool_balance_change_events"], "test.maya_models.not_null_silver__pool_balance_change_events_ASSET_AMOUNT.c610565710": ["model.maya_models.silver__pool_balance_change_events"], "test.maya_models.not_null_silver__pool_balance_change_events_ASSET_ADD.ca42123793": ["model.maya_models.silver__pool_balance_change_events"], "test.maya_models.not_null_silver__pool_balance_change_events_REASON.cc5900d926": ["model.maya_models.silver__pool_balance_change_events"], "test.maya_models.not_null_silver__outbound_events_BLOCKCHAIN.65ee27c62d": ["model.maya_models.silver__outbound_events"], "test.maya_models.not_null_silver__outbound_events_FROM_ADDRESS.50d56a9b55": ["model.maya_models.silver__outbound_events"], "test.maya_models.not_null_silver__outbound_events_TO_ADDRESS.48297fe87a": ["model.maya_models.silver__outbound_events"], "test.maya_models.not_null_silver__outbound_events_ASSET.0d7a3cb9ee": ["model.maya_models.silver__outbound_events"], "test.maya_models.not_null_silver__outbound_events_ASSET_E8.e28187620c": ["model.maya_models.silver__outbound_events"], "test.maya_models.not_null_silver__outbound_events_MEMO.88f8ed52e8": ["model.maya_models.silver__outbound_events"], "test.maya_models.not_null_silver__outbound_events_IN_TX.6b2f2fb6dc": ["model.maya_models.silver__outbound_events"], "test.maya_models.not_null_silver__outbound_events_BLOCK_TIMESTAMP.95d579ffd3": ["model.maya_models.silver__outbound_events"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__outbound_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__IN_TX__BLOCK_TIMESTAMP__EVENT_ID.4205fd70e7": ["model.maya_models.silver__outbound_events"], "test.maya_models.not_null_silver__daily_tvl_DAY.b4b5f55703": ["model.maya_models.silver__daily_tvl"], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_tvl_DAY__day__2.852820090f": ["model.maya_models.silver__daily_tvl"], "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED.681d912d91": ["model.maya_models.silver__daily_tvl"], "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD.87301e85c3": ["model.maya_models.silver__daily_tvl"], "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED.0fa0211531": ["model.maya_models.silver__daily_tvl"], "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD.6132803dfb": ["model.maya_models.silver__daily_tvl"], "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED.8b27efa4f5": ["model.maya_models.silver__daily_tvl"], "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD.14a3029246": ["model.maya_models.silver__daily_tvl"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY.dc405aa093": ["model.maya_models.silver__daily_tvl"], "test.maya_models.not_null_silver__daily_earnings_DAY.507c4965f2": ["model.maya_models.silver__daily_earnings"], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_earnings_DAY__day__2.439dcce651": ["model.maya_models.silver__daily_earnings"], "test.maya_models.not_null_silver__daily_earnings_LIQUIDITY_FEES.f7387c05a8": ["model.maya_models.silver__daily_earnings"], "test.maya_models.not_null_silver__daily_earnings_LIQUIDITY_FEES_USD.cab6f63899": ["model.maya_models.silver__daily_earnings"], "test.maya_models.not_null_silver__daily_earnings_BLOCK_REWARDS.425ab37b25": ["model.maya_models.silver__daily_earnings"], "test.maya_models.not_null_silver__daily_earnings_BLOCK_REWARDS_USD.ea664e5f41": ["model.maya_models.silver__daily_earnings"], "test.maya_models.not_null_silver__daily_earnings_TOTAL_EARNINGS.ccc7cfc3fb": ["model.maya_models.silver__daily_earnings"], "test.maya_models.not_null_silver__daily_earnings_TOTAL_EARNINGS_USD.3fd52ad085": ["model.maya_models.silver__daily_earnings"], "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES.32ed3a19df": ["model.maya_models.silver__daily_earnings"], "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD.4cb99a589c": ["model.maya_models.silver__daily_earnings"], "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS.6073eca3d0": ["model.maya_models.silver__daily_earnings"], "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD.7172cf23ad": ["model.maya_models.silver__daily_earnings"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__daily_earnings_DAY.5ba256d244": ["model.maya_models.silver__daily_earnings"], "test.maya_models.not_null_silver__daily_pool_stats_DAY.1fc2ebda22": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_pool_stats_DAY__day__2.57bf32999f": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_POOL_NAME.65d2c5c182": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS.e8287959c7": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD.03e77f1a19": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_ASSET_LIQUIDITY.c39639a01a": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_ASSET_PRICE.1404d1ca43": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_ASSET_PRICE_USD.43269ee26c": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_cacao_LIQUIDITY.09de9215b3": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_cacao_PRICE.dbd669288c": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_cacao_PRICE_USD.e340e04f34": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT.8ad59930c0": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY.6894fa8392": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD.2667955ead": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_ADD_cacao_LIQUIDITY_USD.4061945e18": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_COUNT.44ef41bdfd": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY.87edc02d31": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD.fd07f09d47": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_cacao_LIQUIDITY.71885f6e08": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_cacao_LIQUIDITY_USD.9816b8ad37": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID.b751810329": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD.bd460521d5": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_AVERAGE_SLIP.8d606cbfae": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP.cf8b4755a7": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_TO_cacao_AVERAGE_SLIP.70fc8fc61f": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_SWAP_COUNT.ed3ad68953": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT.366a142cfd": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_TO_cacao_SWAP_COUNT.3ff1620fff": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_cacao.5ebb701e40": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_cacao_USD.95397f1143": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME.475255ccb5": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_TO_cacao_SWAP_VOLUME.edee77e991": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_cacao.af0178ad49": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD.ef71577e45": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES.e8298a5287": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_cacao_FEES.635f330f09": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT.c70ad54d24": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT.38ba7212c2": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__daily_pool_stats_LIQUIDITY_UNITS.71283b6ef9": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__daily_pool_stats_DAY__POOL_NAME.66912a355d": ["model.maya_models.silver__daily_pool_stats"], "test.maya_models.not_null_silver__failed_deposit_messages_AMOUNT_E8.9331d6135c": ["model.maya_models.silver__failed_deposit_messages"], "test.maya_models.not_null_silver__failed_deposit_messages_ASSET.1b88575223": ["model.maya_models.silver__failed_deposit_messages"], "test.maya_models.not_null_silver__failed_deposit_messages_FROM_ADDRESS.f300bfa3ee": ["model.maya_models.silver__failed_deposit_messages"], "test.maya_models.not_null_silver__failed_deposit_messages_TX_ID.96bf8221ba": ["model.maya_models.silver__failed_deposit_messages"], "test.maya_models.not_null_silver__failed_deposit_messages_EVENT_ID.8c685c70e8": ["model.maya_models.silver__failed_deposit_messages"], "test.maya_models.not_null_silver__failed_deposit_messages_BLOCK_TIMESTAMP.68750ec9c1": ["model.maya_models.silver__failed_deposit_messages"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__failed_deposit_messages_EVENT_ID.f82d89db78": ["model.maya_models.silver__failed_deposit_messages"], "test.maya_models.not_null_silver__withdraw_events_TX_ID.b23e83e2df": ["model.maya_models.silver__withdraw_events"], "test.maya_models.not_null_silver__withdraw_events_BLOCKCHAIN.2a184325c3": ["model.maya_models.silver__withdraw_events"], "test.maya_models.not_null_silver__withdraw_events_FROM_ADDRESS.221980d7cb": ["model.maya_models.silver__withdraw_events"], "test.maya_models.not_null_silver__withdraw_events_TO_ADDRESS.7500c7f147": ["model.maya_models.silver__withdraw_events"], "test.maya_models.not_null_silver__withdraw_events_ASSET.ea07249536": ["model.maya_models.silver__withdraw_events"], "test.maya_models.not_null_silver__withdraw_events_ASSET_E8.faae5c4b97": ["model.maya_models.silver__withdraw_events"], "test.maya_models.not_null_silver__withdraw_events_EMIT_ASSET_E8.dc3f62c561": ["model.maya_models.silver__withdraw_events"], "test.maya_models.not_null_silver__withdraw_events_EMIT_cacao_E8.7f717e247c": ["model.maya_models.silver__withdraw_events"], "test.maya_models.not_null_silver__withdraw_events_MEMO.0237304635": ["model.maya_models.silver__withdraw_events"], "test.maya_models.not_null_silver__withdraw_events_POOL_NAME.f200904b8c": ["model.maya_models.silver__withdraw_events"], "test.maya_models.not_null_silver__withdraw_events_STAKE_UNITS.602d35eb7a": ["model.maya_models.silver__withdraw_events"], "test.maya_models.not_null_silver__withdraw_events_BASIS_POINTS.a18baacaeb": ["model.maya_models.silver__withdraw_events"], "test.maya_models.not_null_silver__withdraw_events_ASYMMETRY.5e0af14a3f": ["model.maya_models.silver__withdraw_events"], "test.maya_models.not_null_silver__withdraw_events_IMP_LOSS_PROTECTION_E8.3f9dd7135b": ["model.maya_models.silver__withdraw_events"], "test.maya_models.not_null_silver__withdraw_events__EMIT_ASSET_IN_cacao_E8.02d525bd2d": ["model.maya_models.silver__withdraw_events"], "test.maya_models.not_null_silver__withdraw_events_BLOCK_TIMESTAMP.7a02200069": ["model.maya_models.silver__withdraw_events"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__withdraw_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__POOL_NAME__BLOCK_TIMESTAMP__EVENT_ID.0ddc8ceed7": ["model.maya_models.silver__withdraw_events"], "test.maya_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": ["model.maya_models.silver__transfers"], "test.maya_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c": ["model.maya_models.silver__transfers"], "test.maya_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c": ["model.maya_models.silver__transfers"], "test.maya_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c": ["model.maya_models.silver__transfers"], "test.maya_models.not_null_silver__transfers_cacao_AMOUNT.fc29e27e26": ["model.maya_models.silver__transfers"], "test.maya_models.not_null_silver__transfers_cacao_AMOUNT_USD.518cddefe8": ["model.maya_models.silver__transfers"], "test.maya_models.not_null_silver__block_pool_depths_BLOCK_TIMESTAMP.d45c965914": ["model.maya_models.silver__block_pool_depths"], "test.maya_models.not_null_silver__block_pool_depths_POOL_NAME.6b5899c602": ["model.maya_models.silver__block_pool_depths"], "test.maya_models.not_null_silver__block_pool_depths_ASSET_E8.aacfa8eedf": ["model.maya_models.silver__block_pool_depths"], "test.maya_models.not_null_silver__block_pool_depths_CACAO_E8.6ea6c27fb2": ["model.maya_models.silver__block_pool_depths"], "test.maya_models.not_null_silver__block_pool_depths_SYNTH_E8.4ac67d8c72": ["model.maya_models.silver__block_pool_depths"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__block_pool_depths_BLOCK_TIMESTAMP__POOL_NAME.b5ab31baa3": ["model.maya_models.silver__block_pool_depths"], "test.maya_models.not_null_silver__pool_block_statistics_DAY.e1d1716d58": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_statistics_DAY__day__2.56faaa8dbf": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME.d13b4e223c": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT.a6468ef5dd": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME.8c96da03e7": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_ADD_cacao_LIQUIDITY_VOLUME.d205951804": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_ASSET.e2a9d555b4": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_ASSET_DEPTH.afecafb5a1": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_ASSET_PRICE.13060f5529": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_ASSET_PRICE_USD.d58add8c57": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_AVERAGE_SLIP.0dd0338788": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID.de64fea0f1": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_cacao_DEPTH.e194b1e7f1": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_STATUS.12571911dc": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_SWAP_COUNT.d16cc64040": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_SWAP_VOLUME.4d59da2017": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP.616ea124ef": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_COUNT.686e56b6a2": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_FEES.4243fd1291": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_VOLUME.a7619cb0c1": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_AVERAGE_SLIP.3ec16dcf5b": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_COUNT.b9826d563a": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_FEES.b88c364faa": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_VOLUME.eddc6586ac": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_TOTALFEES.cb447c44c8": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT.e21371b8b6": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT.f58c3b5939": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_UNITS.1c3ee9d2a0": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME.8109e4b0cb": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_COUNT.5fcea77d8b": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_cacao_VOLUME.e852869cf9": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_VOLUME.7c44597ab7": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_TOTAL_STAKE.acfd31062e": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_DEPTH_PRODUCT.10ec4d6762": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_SYNTH_UNITS.d34b8ef943": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_POOL_UNITS.a9fd8a4a48": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_LIQUIDITY_UNIT_VALUE_INDEX.2961093934": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__pool_block_statistics_PREV_LIQUIDITY_UNIT_VALUE_INDEX.a33c024362": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pool_block_statistics_DAY__ASSET.aa179a7a3e": ["model.maya_models.silver__pool_block_statistics"], "test.maya_models.not_null_silver__prices_BLOCK_ID.b3347041fc": ["model.maya_models.silver__prices"], "test.maya_models.not_null_silver__prices_BLOCK_TIMESTAMP.d245b83d4f": ["model.maya_models.silver__prices"], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_BLOCK_TIMESTAMP__day__1.00281f997e": ["model.maya_models.silver__prices"], "test.maya_models.not_null_silver__prices_PRICE_cacao_ASSET.2443bbba18": ["model.maya_models.silver__prices"], "test.maya_models.not_null_silver__prices_PRICE_ASSET_cacao.8241728751": ["model.maya_models.silver__prices"], "test.maya_models.not_null_silver__prices_ASSET_USD.a900d8c697": ["model.maya_models.silver__prices"], "test.maya_models.not_null_silver__prices_cacao_USD.fb9aeff69a": ["model.maya_models.silver__prices"], "test.maya_models.not_null_silver__prices_POOL_NAME.7eacc16a03": ["model.maya_models.silver__prices"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__prices_BLOCK_ID__POOL_NAME.7a2931d6eb": ["model.maya_models.silver__prices"], "test.maya_models.not_null_silver__pending_liquidity_events_POOL_NAME.5e22402fb9": ["model.maya_models.silver__pending_liquidity_events"], "test.maya_models.not_null_silver__pending_liquidity_events_ASSET_E8.c201915269": ["model.maya_models.silver__pending_liquidity_events"], "test.maya_models.not_null_silver__pending_liquidity_events_CACAO_ADDRESS.871aaa4926": ["model.maya_models.silver__pending_liquidity_events"], "test.maya_models.not_null_silver__pending_liquidity_events_CACAO_E8.857d5c83f2": ["model.maya_models.silver__pending_liquidity_events"], "test.maya_models.not_null_silver__pending_liquidity_events_PENDING_TYPE.98039831a1": ["model.maya_models.silver__pending_liquidity_events"], "test.maya_models.not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP.ab766ea5ff": ["model.maya_models.silver__pending_liquidity_events"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pending_liquidity_events_EVENT_ID__ASSET_ADDRESS__CACAO_ADDRESS.188b780819": ["model.maya_models.silver__pending_liquidity_events"], "test.maya_models.not_null_silver__total_block_rewards_BLOCK_TIMESTAMP.7d7b639434": ["model.maya_models.silver__total_block_rewards"], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_block_rewards_BLOCK_TIMESTAMP__day__1.8b65eead55": ["model.maya_models.silver__total_block_rewards"], "test.maya_models.not_null_silver__total_block_rewards_BLOCK_ID.8619b81300": ["model.maya_models.silver__total_block_rewards"], "test.maya_models.not_null_silver__total_block_rewards_REWARD_ENTITY.06013c60c2": ["model.maya_models.silver__total_block_rewards"], "test.maya_models.not_null_silver__total_block_rewards_cacao_AMOUNT.991c1821ee": ["model.maya_models.silver__total_block_rewards"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__total_block_rewards_BLOCK_ID__REWARD_ENTITY.23ceb96a43": ["model.maya_models.silver__total_block_rewards"], "test.maya_models.not_null_silver__gas_events_BLOCK_TIMESTAMP.88c6e43d24": ["model.maya_models.silver__gas_events"], "test.maya_models.not_null_silver__gas_events_ASSET.59ad7ccacd": ["model.maya_models.silver__gas_events"], "test.maya_models.not_null_silver__gas_events_CACAO_E8.4dad242a6b": ["model.maya_models.silver__gas_events"], "test.maya_models.not_null_silver__gas_events_TX_COUNT.a45fc07260": ["model.maya_models.silver__gas_events"], "test.maya_models.not_null_silver__gas_events_ASSET_E8.2072d4ce77": ["model.maya_models.silver__gas_events"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__gas_events_EVENT_ID__ASSET__BLOCK_TIMESTAMP.b0baea926f": ["model.maya_models.silver__gas_events"], "test.maya_models.not_null_silver__pool_block_balances_BLOCK_TIMESTAMP.9d9432e579": ["model.maya_models.silver__pool_block_balances"], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_balances_BLOCK_TIMESTAMP__day__1.06ec2e6c79": ["model.maya_models.silver__pool_block_balances"], "test.maya_models.not_null_silver__pool_block_balances_BLOCK_ID.6a3b314f7c": ["model.maya_models.silver__pool_block_balances"], "test.maya_models.not_null_silver__pool_block_balances_POOL_NAME.95fecffc4b": ["model.maya_models.silver__pool_block_balances"], "test.maya_models.not_null_silver__pool_block_balances_cacao_AMOUNT.a4ce75ab63": ["model.maya_models.silver__pool_block_balances"], "test.maya_models.not_null_silver__pool_block_balances_cacao_AMOUNT_USD.d6dbe01d1f": ["model.maya_models.silver__pool_block_balances"], "test.maya_models.not_null_silver__pool_block_balances_ASSET_AMOUNT.69087d909b": ["model.maya_models.silver__pool_block_balances"], "test.maya_models.not_null_silver__pool_block_balances_ASSET_AMOUNT_USD.eedbf84e66": ["model.maya_models.silver__pool_block_balances"], "test.maya_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT.6394f07310": ["model.maya_models.silver__pool_block_balances"], "test.maya_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD.e507c3e553": ["model.maya_models.silver__pool_block_balances"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pool_block_balances_BLOCK_ID__POOL_NAME.db3d915190": ["model.maya_models.silver__pool_block_balances"], "test.maya_models.not_null_silver__active_vault_events_BLOCK_TIMESTAMP.bfcca60868": ["model.maya_models.silver__active_vault_events"], "test.maya_models.not_null_silver__active_vault_events_ADD_ASGARD_ADDR.cd001c3c13": ["model.maya_models.silver__active_vault_events"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__active_vault_events_EVENT_ID__BLOCK_TIMESTAMP__ADD_ASGARD_ADDR.f7fa9e1978": ["model.maya_models.silver__active_vault_events"], "test.maya_models.not_null_silver__cacao_price_CACAO_PRICE_E8.9e3d0f25c9": ["model.maya_models.silver__cacao_price"], "test.maya_models.not_null_silver__cacao_price_BLOCK_TIMESTAMP.70949f9fc4": ["model.maya_models.silver__cacao_price"], "test.maya_models.not_null_silver__streamling_swap_details_events_TX_ID.8949f66cf6": ["model.maya_models.silver__streamling_swap_details_events"], "test.maya_models.not_null_silver__streamling_swap_details_events_INTERVAL.1071875126": ["model.maya_models.silver__streamling_swap_details_events"], "test.maya_models.not_null_silver__streamling_swap_details_events_quantity.fd5461e50b": ["model.maya_models.silver__streamling_swap_details_events"], "test.maya_models.not_null_silver__streamling_swap_details_events_COUNT.12c52bff4c": ["model.maya_models.silver__streamling_swap_details_events"], "test.maya_models.not_null_silver__streamling_swap_details_events_last_height.e19319cce2": ["model.maya_models.silver__streamling_swap_details_events"], "test.maya_models.not_null_silver__streamling_swap_details_events_deposit_asset.910fc757bd": ["model.maya_models.silver__streamling_swap_details_events"], "test.maya_models.not_null_silver__streamling_swap_details_events_deposit_e8.be8b643427": ["model.maya_models.silver__streamling_swap_details_events"], "test.maya_models.not_null_silver__streamling_swap_details_events_in_asset.a79e30ae3f": ["model.maya_models.silver__streamling_swap_details_events"], "test.maya_models.not_null_silver__streamling_swap_details_events_in_e8.a0acf84a1f": ["model.maya_models.silver__streamling_swap_details_events"], "test.maya_models.not_null_silver__streamling_swap_details_events_out_asset.4e10bc70d0": ["model.maya_models.silver__streamling_swap_details_events"], "test.maya_models.not_null_silver__streamling_swap_details_events_out_e8.3869542c15": ["model.maya_models.silver__streamling_swap_details_events"], "test.maya_models.not_null_silver__streamling_swap_details_events_event_id.84d056a572": ["model.maya_models.silver__streamling_swap_details_events"], "test.maya_models.not_null_silver__streamling_swap_details_events_block_timestamp.2889dd87d2": ["model.maya_models.silver__streamling_swap_details_events"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__streamling_swap_details_events_EVENT_ID.9d2418d597": ["model.maya_models.silver__streamling_swap_details_events"], "test.maya_models.not_null_silver__block_log_TIMESTAMP.211bc1ece9": ["model.maya_models.silver__block_log"], "test.maya_models.not_null_silver__block_log_HEIGHT.e9a4d0156c": ["model.maya_models.silver__block_log"], "test.maya_models.not_null_silver__block_log_HASH.832559848d": ["model.maya_models.silver__block_log"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__block_log_HEIGHT__TIMESTAMP__HASH__AGG_STATE.ba5ad4e27e": ["model.maya_models.silver__block_log"], "test.maya_models.not_null_silver__send_messages_AMOUNT_E8.104c5a7c7e": ["model.maya_models.silver__send_messages"], "test.maya_models.not_null_silver__send_messages_ASSET.94814200c0": ["model.maya_models.silver__send_messages"], "test.maya_models.not_null_silver__send_messages_FROM_ADDRESS.cd61a44284": ["model.maya_models.silver__send_messages"], "test.maya_models.not_null_silver__send_messages_TO_ADDRESS.21baa8f940": ["model.maya_models.silver__send_messages"], "test.maya_models.not_null_silver__send_messages_TX_ID.4845b0765f": ["model.maya_models.silver__send_messages"], "test.maya_models.not_null_silver__send_messages_EVENT_ID.32349d2e99": ["model.maya_models.silver__send_messages"], "test.maya_models.not_null_silver__send_messages_BLOCK_TIMESTAMP.e97a44bf3a": ["model.maya_models.silver__send_messages"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__send_messages_EVENT_ID.cf7796cd5e": ["model.maya_models.silver__send_messages"], "test.maya_models.not_null_silver__stake_events_POOL_NAME.341d5d5927": ["model.maya_models.silver__stake_events"], "test.maya_models.not_null_silver__stake_events_ASSET_E8.23fed0c3e9": ["model.maya_models.silver__stake_events"], "test.maya_models.not_null_silver__stake_events_STAKE_UNITS.71ce8d8f55": ["model.maya_models.silver__stake_events"], "test.maya_models.not_null_silver__stake_events_CACAO_E8.3fb99bec11": ["model.maya_models.silver__stake_events"], "test.maya_models.not_null_silver__stake_events__ASSET_IN_CACAO_E8.93d05d9743": ["model.maya_models.silver__stake_events"], "test.maya_models.not_null_silver__stake_events_BLOCK_TIMESTAMP.99273b28bf": ["model.maya_models.silver__stake_events"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__stake_events_POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__STAKE_UNITS__CACAO_TX_ID__CACAO_ADDRESS__BLOCK_TIMESTAMP__EVENT_ID.e0af54f8ef": ["model.maya_models.silver__stake_events"], "test.maya_models.not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP.b2bee0a774": ["model.maya_models.silver__rewards_event_entries"], "test.maya_models.not_null_silver__rewards_event_entries_CACAO_E8.cb93b74b1a": ["model.maya_models.silver__rewards_event_entries"], "test.maya_models.not_null_silver__rewards_event_entries_POOL_NAME.714768eae5": ["model.maya_models.silver__rewards_event_entries"], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__rewards_event_entries_BLOCK_TIMESTAMP__POOL_NAME__EVENT_ID.08efcdc427": ["model.maya_models.silver__rewards_event_entries"], "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID.f1690ca9f9": ["model.maya_models.core__fact_mayaname_change_events"], "test.maya_models.unique_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID.9f4f6034c6": ["model.maya_models.core__fact_mayaname_change_events"], "test.maya_models.not_null_core__fact_mayaname_change_events_BLOCK_TIMESTAMP.9ce56f203c": ["model.maya_models.core__fact_mayaname_change_events"], "test.maya_models.negative_one_core__fact_mayaname_change_events_DIM_BLOCK_ID.b8b82e83de": ["model.maya_models.core__fact_mayaname_change_events"], "test.maya_models.dbt_constraints_primary_key_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID.67404a158e": ["model.maya_models.core__fact_mayaname_change_events"], "test.maya_models.dbt_constraints_foreign_key_core__fact_mayaname_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cc1edff2ff": ["model.maya_models.core__dim_block", "model.maya_models.core__fact_mayaname_change_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID.3b69086dc7": ["model.maya_models.core__dim_block"], "test.maya_models.not_null_core__dim_block_BLOCK_ID.4093a445bc": ["model.maya_models.core__dim_block"], "test.maya_models.not_null_core__dim_block_BLOCK_TIMESTAMP.0e822266b8": ["model.maya_models.core__dim_block"], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1.412ac293c7": ["model.maya_models.core__dim_block"], "test.maya_models.not_null_core__dim_block_BLOCK_DATE.fcae0dfd62": ["model.maya_models.core__dim_block"], "test.maya_models.not_null_core__dim_block_BLOCK_HOUR.4bdf258b00": ["model.maya_models.core__dim_block"], "test.maya_models.not_null_core__dim_block_BLOCK_WEEK.bd31abb003": ["model.maya_models.core__dim_block"], "test.maya_models.not_null_core__dim_block_TIMESTAMP.2e8fff01ed": ["model.maya_models.core__dim_block"], "test.maya_models.not_null_core__dim_block_HASH.b08299a937": ["model.maya_models.core__dim_block"], "test.maya_models.dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.6c2c5b98b3": ["model.maya_models.core__dim_block"], "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b834b16336": ["model.maya_models.core__fact_transfer_events"], "test.maya_models.unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b97c8780e8": ["model.maya_models.core__fact_transfer_events"], "test.maya_models.not_null_core__fact_transfer_events_BLOCK_TIMESTAMP.307906b318": ["model.maya_models.core__fact_transfer_events"], "test.maya_models.negative_one_core__fact_transfer_events_DIM_BLOCK_ID.2e128858c5": ["model.maya_models.core__fact_transfer_events"], "test.maya_models.not_null_core__fact_transfer_events_FROM_ADDRESS.2e1a952935": ["model.maya_models.core__fact_transfer_events"], "test.maya_models.not_null_core__fact_transfer_events_TO_ADDRESS.14f29de988": ["model.maya_models.core__fact_transfer_events"], "test.maya_models.not_null_core__fact_transfer_events_ASSET.bacb47e2e3": ["model.maya_models.core__fact_transfer_events"], "test.maya_models.not_null_core__fact_transfer_events_AMOUNT_E8.4fe1565b1c": ["model.maya_models.core__fact_transfer_events"], "test.maya_models.dbt_constraints_primary_key_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.2d391ee070": ["model.maya_models.core__fact_transfer_events"], "test.maya_models.dbt_constraints_foreign_key_core__fact_transfer_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.3478d94d61": ["model.maya_models.core__dim_block", "model.maya_models.core__fact_transfer_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.ae85001246": ["model.maya_models.core__fact_set_mimir_events"], "test.maya_models.unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.449f05e794": ["model.maya_models.core__fact_set_mimir_events"], "test.maya_models.not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP.5ba3385f5b": ["model.maya_models.core__fact_set_mimir_events"], "test.maya_models.negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID.f97f1b5336": ["model.maya_models.core__fact_set_mimir_events"], "test.maya_models.dbt_constraints_primary_key_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.9f1768474c": ["model.maya_models.core__fact_set_mimir_events"], "test.maya_models.dbt_constraints_foreign_key_core__fact_set_mimir_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f0eb017ef2": ["model.maya_models.core__dim_block", "model.maya_models.core__fact_set_mimir_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID.7e9e26b3be": ["model.maya_models.core__fact_transfers"], "test.maya_models.unique_core__fact_transfers_FACT_TRANSFERS_ID.385cd38e6c": ["model.maya_models.core__fact_transfers"], "test.maya_models.not_null_core__fact_transfers_BLOCK_TIMESTAMP.bdf9b015dd": ["model.maya_models.core__fact_transfers"], "test.maya_models.negative_one_core__fact_transfers_DIM_BLOCK_ID.09484decc3": ["model.maya_models.core__fact_transfers"], "test.maya_models.not_null_core__fact_transfers_FROM_ADDRESS.b75e3a345a": ["model.maya_models.core__fact_transfers"], "test.maya_models.not_null_core__fact_transfers_TO_ADDRESS.b8db4a5a70": ["model.maya_models.core__fact_transfers"], "test.maya_models.not_null_core__fact_transfers_ASSET.77d44cdd84": ["model.maya_models.core__fact_transfers"], "test.maya_models.not_null_core__fact_transfers_cacao_AMOUNT.37b422cd3d": ["model.maya_models.core__fact_transfers"], "test.maya_models.not_null_core__fact_transfers_cacao_AMOUNT_USD.ebd0803995": ["model.maya_models.core__fact_transfers"], "test.maya_models.dbt_constraints_primary_key_core__fact_transfers_FACT_TRANSFERS_ID.0e37c8cbc3": ["model.maya_models.core__fact_transfers"], "test.maya_models.dbt_constraints_foreign_key_core__fact_transfers_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e0e628ae42": ["model.maya_models.core__dim_block", "model.maya_models.core__fact_transfers"], "test.maya_models.dbt_expectations_expect_column_to_exist_price__fact_cacao_price_FACT_cacao_PRICE_ID.f9b7879357": ["model.maya_models.price__fact_cacao_price"], "test.maya_models.unique_price__fact_cacao_price_FACT_cacao_PRICE_ID.0e01ec76f4": ["model.maya_models.price__fact_cacao_price"], "test.maya_models.not_null_price__fact_cacao_price_BLOCK_TIMESTAMP.bb1afdc573": ["model.maya_models.price__fact_cacao_price"], "test.maya_models.negative_one_price__fact_cacao_price_DIM_BLOCK_ID.76c72bb6e6": ["model.maya_models.price__fact_cacao_price"], "test.maya_models.dbt_constraints_primary_key_price__fact_cacao_price_FACT_cacao_PRICE_ID.c5f3967993": ["model.maya_models.price__fact_cacao_price"], "test.maya_models.dbt_constraints_foreign_key_price__fact_cacao_price_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.86ae6c3419": ["model.maya_models.core__dim_block", "model.maya_models.price__fact_cacao_price"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID.50d38af79b": ["model.maya_models.defi__fact_streamling_swap_details_events"], "test.maya_models.unique_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID.d77d5d9d53": ["model.maya_models.defi__fact_streamling_swap_details_events"], "test.maya_models.not_null_defi__fact_streamling_swap_details_events_BLOCK_TIMESTAMP.5598932a8c": ["model.maya_models.defi__fact_streamling_swap_details_events"], "test.maya_models.negative_one_defi__fact_streamling_swap_details_events_DIM_BLOCK_ID.51fbe7f43e": ["model.maya_models.defi__fact_streamling_swap_details_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID.731c12e564": ["model.maya_models.defi__fact_streamling_swap_details_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_streamling_swap_details_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1d5bc115b2": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_streamling_swap_details_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.16f98389c1": ["model.maya_models.defi__fact_inactive_vault_events"], "test.maya_models.unique_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.d1b9a47336": ["model.maya_models.defi__fact_inactive_vault_events"], "test.maya_models.not_null_defi__fact_inactive_vault_events_BLOCK_TIMESTAMP.f697396e3b": ["model.maya_models.defi__fact_inactive_vault_events"], "test.maya_models.negative_one_defi__fact_inactive_vault_events_DIM_BLOCK_ID.5429b32093": ["model.maya_models.defi__fact_inactive_vault_events"], "test.maya_models.not_null_defi__fact_inactive_vault_events_ADD_ASGARD_ADDRESS.76e93119e7": ["model.maya_models.defi__fact_inactive_vault_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.0d615f85a1": ["model.maya_models.defi__fact_inactive_vault_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_inactive_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.52206550a8": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_inactive_vault_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_bond_events_FACT_BOND_EVENTS_ID.a5f50df30f": ["model.maya_models.defi__fact_bond_events"], "test.maya_models.unique_defi__fact_bond_events_FACT_BOND_EVENTS_ID.8280804d98": ["model.maya_models.defi__fact_bond_events"], "test.maya_models.not_null_defi__fact_bond_events_BLOCK_TIMESTAMP.ca66b0639c": ["model.maya_models.defi__fact_bond_events"], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__fact_bond_events_BLOCK_TIMESTAMP__day__4.a72035b010": ["model.maya_models.defi__fact_bond_events"], "test.maya_models.negative_one_defi__fact_bond_events_DIM_BLOCK_ID.b035c08edd": ["model.maya_models.defi__fact_bond_events"], "test.maya_models.not_null_defi__fact_bond_events_TX_ID.2f9aabd8d8": ["model.maya_models.defi__fact_bond_events"], "test.maya_models.not_null_defi__fact_bond_events_BLOCKCHAIN.cf9fb111ab": ["model.maya_models.defi__fact_bond_events"], "test.maya_models.not_null_defi__fact_bond_events_FROM_ADDRESS.d44d5b061a": ["model.maya_models.defi__fact_bond_events"], "test.maya_models.not_null_defi__fact_bond_events_TO_ADDRESS.fcaf91ad33": ["model.maya_models.defi__fact_bond_events"], "test.maya_models.not_null_defi__fact_bond_events_ASSET_E8.2a4a2e8c40": ["model.maya_models.defi__fact_bond_events"], "test.maya_models.not_null_defi__fact_bond_events_MEMO.bd8692f383": ["model.maya_models.defi__fact_bond_events"], "test.maya_models.not_null_defi__fact_bond_events_bond_type.544f931184": ["model.maya_models.defi__fact_bond_events"], "test.maya_models.not_null_defi__fact_bond_events_E8.7f6d200479": ["model.maya_models.defi__fact_bond_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_bond_events_FACT_BOND_EVENTS_ID.54da2fbbeb": ["model.maya_models.defi__fact_bond_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_bond_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.54ca49d7f9": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_bond_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID.72b7656211": ["model.maya_models.defi__fact_rewards_events"], "test.maya_models.unique_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID.1194862d02": ["model.maya_models.defi__fact_rewards_events"], "test.maya_models.not_null_defi__fact_rewards_events_BLOCK_TIMESTAMP.60668786c2": ["model.maya_models.defi__fact_rewards_events"], "test.maya_models.negative_one_defi__fact_rewards_events_DIM_BLOCK_ID.8645c1eaa1": ["model.maya_models.defi__fact_rewards_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID.a30d4540ea": ["model.maya_models.defi__fact_rewards_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_rewards_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e2e57eb147": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_rewards_events"], "test.maya_models.not_null_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID.98d9a7a40e": ["model.maya_models.defi__fact_failed_deposit_messages"], "test.maya_models.unique_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID.0695d1704a": ["model.maya_models.defi__fact_failed_deposit_messages"], "test.maya_models.not_null_defi__fact_failed_deposit_messages_BLOCK_TIMESTAMP.df465b93f7": ["model.maya_models.defi__fact_failed_deposit_messages"], "test.maya_models.negative_one_defi__fact_failed_deposit_messages_DIM_BLOCK_ID.1a15b7f7ea": ["model.maya_models.defi__fact_failed_deposit_messages"], "test.maya_models.not_null_defi__fact_failed_deposit_messages_AMOUNT_E8.b99a38df0a": ["model.maya_models.defi__fact_failed_deposit_messages"], "test.maya_models.not_null_defi__fact_failed_deposit_messages_ASSET.9698d44bd6": ["model.maya_models.defi__fact_failed_deposit_messages"], "test.maya_models.dbt_constraints_primary_key_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID.5222579419": ["model.maya_models.defi__fact_failed_deposit_messages"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_failed_deposit_messages_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ae79fc665a": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_failed_deposit_messages"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.ea9e1f3b9b": ["model.maya_models.defi__fact_pool_block_statistics"], "test.maya_models.unique_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.59e4ff0377": ["model.maya_models.defi__fact_pool_block_statistics"], "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.a0f8192d8b": ["model.maya_models.defi__fact_pool_block_statistics"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.774a6e2a92": ["model.maya_models.defi__fact_update_node_account_status_events"], "test.maya_models.unique_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.955bf5f1be": ["model.maya_models.defi__fact_update_node_account_status_events"], "test.maya_models.not_null_defi__fact_update_node_account_status_events_BLOCK_TIMESTAMP.2e391b047b": ["model.maya_models.defi__fact_update_node_account_status_events"], "test.maya_models.negative_one_defi__fact_update_node_account_status_events_DIM_BLOCK_ID.2668c31a3f": ["model.maya_models.defi__fact_update_node_account_status_events"], "test.maya_models.not_null_defi__fact_update_node_account_status_events_FORMER_STATUS.b4bb08ccb0": ["model.maya_models.defi__fact_update_node_account_status_events"], "test.maya_models.not_null_defi__fact_update_node_account_status_events_CURRENT_STATUS.d76b33c0c7": ["model.maya_models.defi__fact_update_node_account_status_events"], "test.maya_models.not_null_defi__fact_update_node_account_status_events_NODE_ADDRESS.13852b9c2e": ["model.maya_models.defi__fact_update_node_account_status_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.e4286d8c42": ["model.maya_models.defi__fact_update_node_account_status_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_update_node_account_status_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ff3ca4dfef": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_update_node_account_status_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.d2ddaebdfc": ["model.maya_models.defi__fact_pool_balance_change_events"], "test.maya_models.unique_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.a9f6a259b3": ["model.maya_models.defi__fact_pool_balance_change_events"], "test.maya_models.not_null_defi__fact_pool_balance_change_events_BLOCK_TIMESTAMP.fd61518b64": ["model.maya_models.defi__fact_pool_balance_change_events"], "test.maya_models.negative_one_defi__fact_pool_balance_change_events_DIM_BLOCK_ID.8cc70ad2c3": ["model.maya_models.defi__fact_pool_balance_change_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.797e263c54": ["model.maya_models.defi__fact_pool_balance_change_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_balance_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1c20c73d64": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_pool_balance_change_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.de667c6ed6": ["model.maya_models.defi__fact_pool_block_fees"], "test.maya_models.unique_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.ee55d40c08": ["model.maya_models.defi__fact_pool_block_fees"], "test.maya_models.not_null_defi__fact_pool_block_fees_DAY.5196d903a4": ["model.maya_models.defi__fact_pool_block_fees"], "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.356350731a": ["model.maya_models.defi__fact_pool_block_fees"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.4e969deb63": ["model.maya_models.defi__fact_daily_earnings"], "test.maya_models.unique_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.1b0a6fbdd6": ["model.maya_models.defi__fact_daily_earnings"], "test.maya_models.not_null_defi__fact_daily_earnings_DAY.3ecfd9b0ee": ["model.maya_models.defi__fact_daily_earnings"], "test.maya_models.unique_defi__fact_daily_earnings_DAY.35299fa0f2": ["model.maya_models.defi__fact_daily_earnings"], "test.maya_models.not_null_defi__fact_daily_earnings_LIQUIDITY_FEES.d5cf335416": ["model.maya_models.defi__fact_daily_earnings"], "test.maya_models.not_null_defi__fact_daily_earnings_LIQUIDITY_FEES_USD.82b7149fd9": ["model.maya_models.defi__fact_daily_earnings"], "test.maya_models.not_null_defi__fact_daily_earnings_BLOCK_REWARDS.b126b4b314": ["model.maya_models.defi__fact_daily_earnings"], "test.maya_models.not_null_defi__fact_daily_earnings_BLOCK_REWARDS_USD.107e54d6bb": ["model.maya_models.defi__fact_daily_earnings"], "test.maya_models.not_null_defi__fact_daily_earnings_TOTAL_EARNINGS.66fbf6afc0": ["model.maya_models.defi__fact_daily_earnings"], "test.maya_models.not_null_defi__fact_daily_earnings_TOTAL_EARNINGS_USD.efaf0622ac": ["model.maya_models.defi__fact_daily_earnings"], "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_NODES.147efdb208": ["model.maya_models.defi__fact_daily_earnings"], "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_NODES_USD.05d14a2dcd": ["model.maya_models.defi__fact_daily_earnings"], "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_POOLS.fbeff5d134": ["model.maya_models.defi__fact_daily_earnings"], "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_POOLS_USD.39dea1c2bb": ["model.maya_models.defi__fact_daily_earnings"], "test.maya_models.dbt_constraints_primary_key_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.405108b886": ["model.maya_models.defi__fact_daily_earnings"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID.1f26ff2cfb": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.unique_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID.651eb6dfe4": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.not_null_defi__fact_withdraw_events_BLOCK_TIMESTAMP.e2e54ceae9": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.negative_one_defi__fact_withdraw_events_DIM_BLOCK_ID.5b55c401d8": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.not_null_defi__fact_withdraw_events_TX_ID.e7d3e3beef": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.not_null_defi__fact_withdraw_events_BLOCKCHAIN.5f12fcea5a": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.not_null_defi__fact_withdraw_events_FROM_ADDRESS.fb0510a262": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.not_null_defi__fact_withdraw_events_TO_ADDRESS.f4aadfb9bb": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.not_null_defi__fact_withdraw_events_ASSET_E8.d0be5ed1a4": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.not_null_defi__fact_withdraw_events_EMIT_ASSET_E8.5c62cbff98": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.not_null_defi__fact_withdraw_events_EMIT_cacao_E8.4ce153e62c": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.not_null_defi__fact_withdraw_events_MEMO.670b33bd28": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.not_null_defi__fact_withdraw_events_POOL_NAME.7816baa3be": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.not_null_defi__fact_withdraw_events_STAKE_UNITS.4940151023": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.not_null_defi__fact_withdraw_events_BASIS_POINTS.a01b4d3168": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.not_null_defi__fact_withdraw_events_ASYMMETRY.27f7ecb3e2": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.not_null_defi__fact_withdraw_events_IMP_LOSS_PROTECTION_E8.b061882c2b": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.not_null_defi__fact_withdraw_events__EMIT_ASSET_IN_cacao_E8.75c9544a1e": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID.2abb09d2d0": ["model.maya_models.defi__fact_withdraw_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_withdraw_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c30b39b2dd": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_withdraw_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID.e8a3be544e": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.unique_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID.275b663f75": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.not_null_defi__fact_swaps_events_BLOCK_TIMESTAMP.152a60ae05": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.negative_one_defi__fact_swaps_events_DIM_BLOCK_ID.32d0060a7d": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.not_null_defi__fact_swaps_events_TX_ID.769f694135": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.not_null_defi__fact_swaps_events_BLOCKCHAIN.a7bfef9416": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.not_null_defi__fact_swaps_events_FROM_ADDRESS.f438dceaed": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.not_null_defi__fact_swaps_events_TO_ADDRESS.0fab10cf01": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.not_null_defi__fact_swaps_events_FROM_ASSET.d1bd099314": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.not_null_defi__fact_swaps_events_FROM_E8.e5316aeab9": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.not_null_defi__fact_swaps_events_TO_ASSET.d10e7cab75": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.not_null_defi__fact_swaps_events_TO_E8.ba0a8505a0": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.not_null_defi__fact_swaps_events_MEMO.e737d61e21": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.not_null_defi__fact_swaps_events_POOL_NAME.47817b05e7": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.not_null_defi__fact_swaps_events_TO_E8_MIN.f257749398": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.not_null_defi__fact_swaps_events_SWAP_SLIP_BP.83363ed081": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.not_null_defi__fact_swaps_events_LIQ_FEE_E8.8ab774160b": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.not_null_defi__fact_swaps_events_LIQ_FEE_IN_cacao_E8.c9dad22e6c": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.not_null_defi__fact_swaps_events__DIRECTION.6ab3030ca2": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID.bd110e1762": ["model.maya_models.defi__fact_swaps_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_swaps_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.6efb37c54a": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_swaps_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID.f26dd135e0": ["model.maya_models.defi__fact_block_rewards"], "test.maya_models.unique_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID.d5d72bba07": ["model.maya_models.defi__fact_block_rewards"], "test.maya_models.not_null_defi__fact_block_rewards_DAY.7fa63155fc": ["model.maya_models.defi__fact_block_rewards"], "test.maya_models.unique_defi__fact_block_rewards_DAY.6963e728a5": ["model.maya_models.defi__fact_block_rewards"], "test.maya_models.not_null_defi__fact_block_rewards_LIQUIDITY_FEE.dbbf334ba1": ["model.maya_models.defi__fact_block_rewards"], "test.maya_models.not_null_defi__fact_block_rewards_BLOCK_REWARDS.a92137996e": ["model.maya_models.defi__fact_block_rewards"], "test.maya_models.not_null_defi__fact_block_rewards_EARNINGS.6734c56332": ["model.maya_models.defi__fact_block_rewards"], "test.maya_models.not_null_defi__fact_block_rewards_BONDING_EARNINGS.21f4a2d782": ["model.maya_models.defi__fact_block_rewards"], "test.maya_models.not_null_defi__fact_block_rewards_LIQUIDITY_EARNINGS.6e711b1025": ["model.maya_models.defi__fact_block_rewards"], "test.maya_models.dbt_constraints_primary_key_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID.6fb653e543": ["model.maya_models.defi__fact_block_rewards"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.c429e7e114": ["model.maya_models.defi__fact_outbound_events"], "test.maya_models.unique_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.7ce8b4da38": ["model.maya_models.defi__fact_outbound_events"], "test.maya_models.not_null_defi__fact_outbound_events_BLOCK_TIMESTAMP.ba5c7a7372": ["model.maya_models.defi__fact_outbound_events"], "test.maya_models.negative_one_defi__fact_outbound_events_DIM_BLOCK_ID.c4dc4c2e5b": ["model.maya_models.defi__fact_outbound_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.56a7c40cd9": ["model.maya_models.defi__fact_outbound_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_outbound_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2aa6dc45d7": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_outbound_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.baab1e87b2": ["model.maya_models.defi__fact_pending_liquidity_events"], "test.maya_models.unique_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.6793a43b6b": ["model.maya_models.defi__fact_pending_liquidity_events"], "test.maya_models.not_null_defi__fact_pending_liquidity_events_BLOCK_TIMESTAMP.c703e15c52": ["model.maya_models.defi__fact_pending_liquidity_events"], "test.maya_models.negative_one_defi__fact_pending_liquidity_events_DIM_BLOCK_ID.ab0617b986": ["model.maya_models.defi__fact_pending_liquidity_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.6a659e8b12": ["model.maya_models.defi__fact_pending_liquidity_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_pending_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ca2e4eee90": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_pending_liquidity_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_gas_events_FACT_GAS_EVENTS_ID.bb047375bf": ["model.maya_models.defi__fact_gas_events"], "test.maya_models.unique_defi__fact_gas_events_FACT_GAS_EVENTS_ID.7c04247747": ["model.maya_models.defi__fact_gas_events"], "test.maya_models.not_null_defi__fact_gas_events_BLOCK_TIMESTAMP.18a33f6f4d": ["model.maya_models.defi__fact_gas_events"], "test.maya_models.negative_one_defi__fact_gas_events_DIM_BLOCK_ID.2593523927": ["model.maya_models.defi__fact_gas_events"], "test.maya_models.not_null_defi__fact_gas_events_ASSET.29cdba3bea": ["model.maya_models.defi__fact_gas_events"], "test.maya_models.not_null_defi__fact_gas_events_ASSET_E8.07160f6bba": ["model.maya_models.defi__fact_gas_events"], "test.maya_models.not_null_defi__fact_gas_events_cacao_E8.fcef1e99c1": ["model.maya_models.defi__fact_gas_events"], "test.maya_models.not_null_defi__fact_gas_events_TX_COUNT.b58d3dfec7": ["model.maya_models.defi__fact_gas_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_gas_events_FACT_GAS_EVENTS_ID.c0ced5df45": ["model.maya_models.defi__fact_gas_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_gas_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.d2b43cd8e7": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_gas_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_refund_events_FACT_REFUND_EVENTS_ID.e60a9cc49f": ["model.maya_models.defi__fact_refund_events"], "test.maya_models.unique_defi__fact_refund_events_FACT_REFUND_EVENTS_ID.a016111425": ["model.maya_models.defi__fact_refund_events"], "test.maya_models.not_null_defi__fact_refund_events_BLOCK_TIMESTAMP.34d8aabf5a": ["model.maya_models.defi__fact_refund_events"], "test.maya_models.negative_one_defi__fact_refund_events_DIM_BLOCK_ID.3c1c234ab9": ["model.maya_models.defi__fact_refund_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_refund_events_FACT_REFUND_EVENTS_ID.c03b0b240a": ["model.maya_models.defi__fact_refund_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_refund_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.46380231ed": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_refund_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID.f75bda8238": ["model.maya_models.defi__fact_bond_actions"], "test.maya_models.unique_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID.750a1a0be6": ["model.maya_models.defi__fact_bond_actions"], "test.maya_models.not_null_defi__fact_bond_actions_BLOCK_TIMESTAMP.7a24d4f258": ["model.maya_models.defi__fact_bond_actions"], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__fact_bond_actions_BLOCK_TIMESTAMP__day__4.fe7e158561": ["model.maya_models.defi__fact_bond_actions"], "test.maya_models.negative_one_defi__fact_bond_actions_DIM_BLOCK_ID.615245fbb3": ["model.maya_models.defi__fact_bond_actions"], "test.maya_models.not_null_defi__fact_bond_actions_TX_ID.5e9f18d02d": ["model.maya_models.defi__fact_bond_actions"], "test.maya_models.not_null_defi__fact_bond_actions_BLOCKCHAIN.96b4414efb": ["model.maya_models.defi__fact_bond_actions"], "test.maya_models.not_null_defi__fact_bond_actions_FROM_ADDRESS.d62d81333f": ["model.maya_models.defi__fact_bond_actions"], "test.maya_models.not_null_defi__fact_bond_actions_TO_ADDRESS.03e2a4ee17": ["model.maya_models.defi__fact_bond_actions"], "test.maya_models.not_null_defi__fact_bond_actions_bond_type.22b01f3b86": ["model.maya_models.defi__fact_bond_actions"], "test.maya_models.not_null_defi__fact_bond_actions_ASSET_AMOUNT.8de4adaec4": ["model.maya_models.defi__fact_bond_actions"], "test.maya_models.not_null_defi__fact_bond_actions_ASSET_USD.4eb112cfa0": ["model.maya_models.defi__fact_bond_actions"], "test.maya_models.dbt_constraints_primary_key_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID.b04f02a38c": ["model.maya_models.defi__fact_bond_actions"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_bond_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f00f5c0230": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_bond_actions"], "test.maya_models.not_null_defi__fact_send_messages_FACT_SEND_MESSAGES_ID.da36ef8cad": ["model.maya_models.defi__fact_send_messages"], "test.maya_models.not_null_defi__fact_send_messages_BLOCK_TIMESTAMP.aa6c02bd54": ["model.maya_models.defi__fact_send_messages"], "test.maya_models.negative_one_defi__fact_send_messages_DIM_BLOCK_ID.c58daf7759": ["model.maya_models.defi__fact_send_messages"], "test.maya_models.dbt_constraints_primary_key_defi__fact_send_messages_FACT_SEND_MESSAGES_ID.8741e5d595": ["model.maya_models.defi__fact_send_messages"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_send_messages_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1adb347953": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_send_messages"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.1e8f9391c2": ["model.maya_models.defi__fact_liquidity_actions"], "test.maya_models.unique_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.3c4c48acd9": ["model.maya_models.defi__fact_liquidity_actions"], "test.maya_models.not_null_defi__fact_liquidity_actions_BLOCK_TIMESTAMP.9a65b82adc": ["model.maya_models.defi__fact_liquidity_actions"], "test.maya_models.negative_one_defi__fact_liquidity_actions_DIM_BLOCK_ID.64fdcec13b": ["model.maya_models.defi__fact_liquidity_actions"], "test.maya_models.not_null_defi__fact_liquidity_actions_LP_ACTION.888ababa2b": ["model.maya_models.defi__fact_liquidity_actions"], "test.maya_models.not_null_defi__fact_liquidity_actions_POOL_NAME.798a435875": ["model.maya_models.defi__fact_liquidity_actions"], "test.maya_models.not_null_defi__fact_liquidity_actions_cacao_AMOUNT.69b767546b": ["model.maya_models.defi__fact_liquidity_actions"], "test.maya_models.not_null_defi__fact_liquidity_actions_cacao_AMOUNT_USD.5b994381e1": ["model.maya_models.defi__fact_liquidity_actions"], "test.maya_models.not_null_defi__fact_liquidity_actions_ASSET_AMOUNT.bcd1c6e65b": ["model.maya_models.defi__fact_liquidity_actions"], "test.maya_models.not_null_defi__fact_liquidity_actions_STAKE_UNITS.407cd789d6": ["model.maya_models.defi__fact_liquidity_actions"], "test.maya_models.dbt_constraints_primary_key_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.127d2c721c": ["model.maya_models.defi__fact_liquidity_actions"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_liquidity_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.608597a4f4": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_liquidity_actions"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.407d4f6cb6": ["model.maya_models.defi__fact_pool_block_balances"], "test.maya_models.unique_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.c9074e5b2a": ["model.maya_models.defi__fact_pool_block_balances"], "test.maya_models.not_null_defi__fact_pool_block_balances_BLOCK_TIMESTAMP.57a565d05f": ["model.maya_models.defi__fact_pool_block_balances"], "test.maya_models.negative_one_defi__fact_pool_block_balances_DIM_BLOCK_ID.2418ce23a3": ["model.maya_models.defi__fact_pool_block_balances"], "test.maya_models.not_null_defi__fact_pool_block_balances_POOL_NAME.05a1892218": ["model.maya_models.defi__fact_pool_block_balances"], "test.maya_models.not_null_defi__fact_pool_block_balances_cacao_AMOUNT.cb25b0b071": ["model.maya_models.defi__fact_pool_block_balances"], "test.maya_models.not_null_defi__fact_pool_block_balances_cacao_AMOUNT_USD.5db52684f2": ["model.maya_models.defi__fact_pool_block_balances"], "test.maya_models.not_null_defi__fact_pool_block_balances_ASSET_AMOUNT.4c11b2c4dc": ["model.maya_models.defi__fact_pool_block_balances"], "test.maya_models.not_null_defi__fact_pool_block_balances_SYNTH_AMOUNT.dd1d486159": ["model.maya_models.defi__fact_pool_block_balances"], "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.24a399277f": ["model.maya_models.defi__fact_pool_block_balances"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_block_balances_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.66031e6ec7": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_pool_block_balances"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.880e905612": ["model.maya_models.defi__fact_active_vault_events"], "test.maya_models.unique_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.3aaa103dd9": ["model.maya_models.defi__fact_active_vault_events"], "test.maya_models.not_null_defi__fact_active_vault_events_BLOCK_TIMESTAMP.4cc71715c7": ["model.maya_models.defi__fact_active_vault_events"], "test.maya_models.negative_one_defi__fact_active_vault_events_DIM_BLOCK_ID.4a790deb55": ["model.maya_models.defi__fact_active_vault_events"], "test.maya_models.not_null_defi__fact_active_vault_events_ADD_ASGARD_ADDR.2b058b6553": ["model.maya_models.defi__fact_active_vault_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.8da304f0fc": ["model.maya_models.defi__fact_active_vault_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_active_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.dc9110e090": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_active_vault_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_events_FACT_POOL_EVENTS_ID.9ebc09a3db": ["model.maya_models.defi__fact_pool_events"], "test.maya_models.unique_defi__fact_pool_events_FACT_POOL_EVENTS_ID.a88bad6268": ["model.maya_models.defi__fact_pool_events"], "test.maya_models.not_null_defi__fact_pool_events_BLOCK_TIMESTAMP.22275a664b": ["model.maya_models.defi__fact_pool_events"], "test.maya_models.negative_one_defi__fact_pool_events_DIM_BLOCK_ID.5c5bf65270": ["model.maya_models.defi__fact_pool_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_events_FACT_POOL_EVENTS_ID.d9300b6771": ["model.maya_models.defi__fact_pool_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.111d8db3ee": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_pool_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.23e51de8c7": ["model.maya_models.defi__fact_total_value_locked"], "test.maya_models.unique_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.7c08aabdf6": ["model.maya_models.defi__fact_total_value_locked"], "test.maya_models.not_null_defi__fact_total_value_locked_DAY.fe0da8741a": ["model.maya_models.defi__fact_total_value_locked"], "test.maya_models.unique_defi__fact_total_value_locked_DAY.54d8e130aa": ["model.maya_models.defi__fact_total_value_locked"], "test.maya_models.dbt_constraints_primary_key_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.ac35fbd215": ["model.maya_models.defi__fact_total_value_locked"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.df35fa9fd3": ["model.maya_models.defi__fact_daily_pool_stats"], "test.maya_models.unique_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.0e5e688f58": ["model.maya_models.defi__fact_daily_pool_stats"], "test.maya_models.not_null_defi__fact_daily_pool_stats_DAY.134c4023bc": ["model.maya_models.defi__fact_daily_pool_stats"], "test.maya_models.dbt_constraints_primary_key_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.bd74e047c0": ["model.maya_models.defi__fact_daily_pool_stats"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_daily_tvl_FACT_DAILY_TVL_ID.1ae493b505": ["model.maya_models.defi__fact_daily_tvl"], "test.maya_models.unique_defi__fact_daily_tvl_FACT_DAILY_TVL_ID.4720396096": ["model.maya_models.defi__fact_daily_tvl"], "test.maya_models.not_null_defi__fact_daily_tvl_DAY.6793a4c86b": ["model.maya_models.defi__fact_daily_tvl"], "test.maya_models.dbt_constraints_primary_key_defi__fact_daily_tvl_FACT_DAILY_TVL_ID.f657fdd70c": ["model.maya_models.defi__fact_daily_tvl"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.60587db32e": ["model.maya_models.defi__fact_rewards_event_entries"], "test.maya_models.unique_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.c1c1880829": ["model.maya_models.defi__fact_rewards_event_entries"], "test.maya_models.not_null_defi__fact_rewards_event_entries_BLOCK_TIMESTAMP.390c2d3861": ["model.maya_models.defi__fact_rewards_event_entries"], "test.maya_models.negative_one_defi__fact_rewards_event_entries_DIM_BLOCK_ID.ae74184dc0": ["model.maya_models.defi__fact_rewards_event_entries"], "test.maya_models.dbt_constraints_primary_key_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.797b705be0": ["model.maya_models.defi__fact_rewards_event_entries"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_rewards_event_entries_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f384372f38": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_rewards_event_entries"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.908c6385f1": ["model.maya_models.defi__fact_total_block_rewards"], "test.maya_models.unique_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.97eb93b600": ["model.maya_models.defi__fact_total_block_rewards"], "test.maya_models.not_null_defi__fact_total_block_rewards_BLOCK_TIMESTAMP.b82d9032fc": ["model.maya_models.defi__fact_total_block_rewards"], "test.maya_models.negative_one_defi__fact_total_block_rewards_DIM_BLOCK_ID.875d3d7233": ["model.maya_models.defi__fact_total_block_rewards"], "test.maya_models.not_null_defi__fact_total_block_rewards_REWARD_ENTITY.3ee825413f": ["model.maya_models.defi__fact_total_block_rewards"], "test.maya_models.not_null_defi__fact_total_block_rewards_cacao_AMOUNT.b50618c8d2": ["model.maya_models.defi__fact_total_block_rewards"], "test.maya_models.dbt_constraints_primary_key_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.1279348063": ["model.maya_models.defi__fact_total_block_rewards"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_total_block_rewards_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.10797bc02d": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_total_block_rewards"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID.8a326356fc": ["model.maya_models.defi__fact_reserve_events"], "test.maya_models.unique_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID.276156f1e1": ["model.maya_models.defi__fact_reserve_events"], "test.maya_models.not_null_defi__fact_reserve_events_BLOCK_TIMESTAMP.2034989c09": ["model.maya_models.defi__fact_reserve_events"], "test.maya_models.negative_one_defi__fact_reserve_events_DIM_BLOCK_ID.f394603e35": ["model.maya_models.defi__fact_reserve_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID.bc7c918b28": ["model.maya_models.defi__fact_reserve_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_reserve_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.02187e1ac9": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_reserve_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID.a45d16f999": ["model.maya_models.defi__fact_slash_liquidity_events"], "test.maya_models.unique_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID.a983479ef3": ["model.maya_models.defi__fact_slash_liquidity_events"], "test.maya_models.not_null_defi__fact_slash_liquidity_events_BLOCK_TIMESTAMP.5b14c39cd8": ["model.maya_models.defi__fact_slash_liquidity_events"], "test.maya_models.negative_one_defi__fact_slash_liquidity_events_DIM_BLOCK_ID.0f21ab898d": ["model.maya_models.defi__fact_slash_liquidity_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID.2b04027532": ["model.maya_models.defi__fact_slash_liquidity_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_slash_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0acbf7ba85": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_slash_liquidity_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_stake_events_FACT_STAKE_EVENTS_ID.9b7786f345": ["model.maya_models.defi__fact_stake_events"], "test.maya_models.unique_defi__fact_stake_events_FACT_STAKE_EVENTS_ID.235ec51a23": ["model.maya_models.defi__fact_stake_events"], "test.maya_models.not_null_defi__fact_stake_events_BLOCK_TIMESTAMP.efe6e00a44": ["model.maya_models.defi__fact_stake_events"], "test.maya_models.negative_one_defi__fact_stake_events_DIM_BLOCK_ID.7c0bfe48d7": ["model.maya_models.defi__fact_stake_events"], "test.maya_models.not_null_defi__fact_stake_events_POOL_NAME.efc87f2e2f": ["model.maya_models.defi__fact_stake_events"], "test.maya_models.not_null_defi__fact_stake_events_ASSET_E8.3ef47d7e7f": ["model.maya_models.defi__fact_stake_events"], "test.maya_models.not_null_defi__fact_stake_events_STAKE_UNITS.7dd72be974": ["model.maya_models.defi__fact_stake_events"], "test.maya_models.not_null_defi__fact_stake_events_cacao_E8.1c41c93867": ["model.maya_models.defi__fact_stake_events"], "test.maya_models.not_null_defi__fact_stake_events__ASSET_IN_cacao_E8.4b8f2965f9": ["model.maya_models.defi__fact_stake_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_stake_events_FACT_STAKE_EVENTS_ID.aa005ffc15": ["model.maya_models.defi__fact_stake_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_stake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.59228e8edb": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_stake_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FACT_SWAPS_ID.65b78c9b2b": ["model.maya_models.defi__fact_swaps"], "test.maya_models.unique_defi__fact_swaps_FACT_SWAPS_ID.ef29d48647": ["model.maya_models.defi__fact_swaps"], "test.maya_models.not_null_defi__fact_swaps_BLOCK_TIMESTAMP.075d054d65": ["model.maya_models.defi__fact_swaps"], "test.maya_models.negative_one_defi__fact_swaps_DIM_BLOCK_ID.a0b8b6777c": ["model.maya_models.defi__fact_swaps"], "test.maya_models.dbt_constraints_primary_key_defi__fact_swaps_FACT_SWAPS_ID.9c12307bcb": ["model.maya_models.defi__fact_swaps"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_swaps_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.6b212551fd": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_swaps"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_fee_events_FACT_FEE_EVENTS_ID.b1c98cbf26": ["model.maya_models.defi__fact_fee_events"], "test.maya_models.unique_defi__fact_fee_events_FACT_FEE_EVENTS_ID.cbb6dfce5c": ["model.maya_models.defi__fact_fee_events"], "test.maya_models.not_null_defi__fact_fee_events_BLOCK_TIMESTAMP.70a94fec54": ["model.maya_models.defi__fact_fee_events"], "test.maya_models.negative_one_defi__fact_fee_events_DIM_BLOCK_ID.48e400d73b": ["model.maya_models.defi__fact_fee_events"], "test.maya_models.not_null_defi__fact_fee_events_TX_ID.e74d21d77e": ["model.maya_models.defi__fact_fee_events"], "test.maya_models.not_null_defi__fact_fee_events_ASSET.58dfc939f5": ["model.maya_models.defi__fact_fee_events"], "test.maya_models.not_null_defi__fact_fee_events_POOL_DEDUCT.75679a84a7": ["model.maya_models.defi__fact_fee_events"], "test.maya_models.not_null_defi__fact_fee_events_ASSET_E8.ec1824433c": ["model.maya_models.defi__fact_fee_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_fee_events_FACT_FEE_EVENTS_ID.4f9bb0aae9": ["model.maya_models.defi__fact_fee_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_fee_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7028a1c586": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_fee_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_add_events_FACT_ADD_EVENTS_ID.dcfa45dc5c": ["model.maya_models.defi__fact_add_events"], "test.maya_models.unique_defi__fact_add_events_FACT_ADD_EVENTS_ID.f9bab79293": ["model.maya_models.defi__fact_add_events"], "test.maya_models.not_null_defi__fact_add_events_BLOCK_TIMESTAMP.06d09f2202": ["model.maya_models.defi__fact_add_events"], "test.maya_models.negative_one_defi__fact_add_events_DIM_BLOCK_ID.b6ac5d06b5": ["model.maya_models.defi__fact_add_events"], "test.maya_models.not_null_defi__fact_add_events_cacao_E8.980c31d51a": ["model.maya_models.defi__fact_add_events"], "test.maya_models.not_null_defi__fact_add_events_BLOCKCHAIN.00aaf6b4cf": ["model.maya_models.defi__fact_add_events"], "test.maya_models.not_null_defi__fact_add_events_ASSET_E8.366017cb0d": ["model.maya_models.defi__fact_add_events"], "test.maya_models.not_null_defi__fact_add_events_POOL_NAME.e418ec498a": ["model.maya_models.defi__fact_add_events"], "test.maya_models.not_null_defi__fact_add_events_MEMO.10fc5a9c70": ["model.maya_models.defi__fact_add_events"], "test.maya_models.not_null_defi__fact_add_events_TO_ADDRESS.5249804a36": ["model.maya_models.defi__fact_add_events"], "test.maya_models.not_null_defi__fact_add_events_FROM_ADDRESS.c69fd5096c": ["model.maya_models.defi__fact_add_events"], "test.maya_models.dbt_constraints_primary_key_defi__fact_add_events_FACT_ADD_EVENTS_ID.e2c050e363": ["model.maya_models.defi__fact_add_events"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_add_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.927064ee9c": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_add_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.b5bb9290e5": ["model.maya_models.defi__fact_block_pool_depths"], "test.maya_models.unique_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.d893b0b8a0": ["model.maya_models.defi__fact_block_pool_depths"], "test.maya_models.not_null_defi__fact_block_pool_depths_BLOCK_TIMESTAMP.289de889f0": ["model.maya_models.defi__fact_block_pool_depths"], "test.maya_models.negative_one_defi__fact_block_pool_depths_DIM_BLOCK_ID.5c18572103": ["model.maya_models.defi__fact_block_pool_depths"], "test.maya_models.not_null_defi__fact_block_pool_depths_cacao_E8.940c4df3e3": ["model.maya_models.defi__fact_block_pool_depths"], "test.maya_models.not_null_defi__fact_block_pool_depths_ASSET_E8.18864edf3b": ["model.maya_models.defi__fact_block_pool_depths"], "test.maya_models.not_null_defi__fact_block_pool_depths_SYNTH_E8.a148b6fdac": ["model.maya_models.defi__fact_block_pool_depths"], "test.maya_models.not_null_defi__fact_block_pool_depths_POOL_NAME.c9b3847f9a": ["model.maya_models.defi__fact_block_pool_depths"], "test.maya_models.dbt_constraints_primary_key_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.516d84511a": ["model.maya_models.defi__fact_block_pool_depths"], "test.maya_models.dbt_constraints_foreign_key_defi__fact_block_pool_depths_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b693e5d66c": ["model.maya_models.core__dim_block", "model.maya_models.defi__fact_block_pool_depths"], "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.5cc3f7cdc4": ["model.maya_models.gov__fact_set_node_keys_events"], "test.maya_models.unique_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.8880e9c1e4": ["model.maya_models.gov__fact_set_node_keys_events"], "test.maya_models.not_null_gov__fact_set_node_keys_events_BLOCK_TIMESTAMP.ebec22d08a": ["model.maya_models.gov__fact_set_node_keys_events"], "test.maya_models.negative_one_gov__fact_set_node_keys_events_DIM_BLOCK_ID.e78644b2d2": ["model.maya_models.gov__fact_set_node_keys_events"], "test.maya_models.dbt_constraints_primary_key_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.8a3255067b": ["model.maya_models.gov__fact_set_node_keys_events"], "test.maya_models.dbt_constraints_foreign_key_gov__fact_set_node_keys_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b1e2dcf0f1": ["model.maya_models.core__dim_block", "model.maya_models.gov__fact_set_node_keys_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_slash_points_FACT_SLASH_POINTS_ID.8d109c0e13": ["model.maya_models.gov__fact_slash_points"], "test.maya_models.unique_gov__fact_slash_points_FACT_SLASH_POINTS_ID.209781dbb5": ["model.maya_models.gov__fact_slash_points"], "test.maya_models.not_null_gov__fact_slash_points_BLOCK_TIMESTAMP.2399b1a318": ["model.maya_models.gov__fact_slash_points"], "test.maya_models.negative_one_gov__fact_slash_points_DIM_BLOCK_ID.3e57f036d1": ["model.maya_models.gov__fact_slash_points"], "test.maya_models.dbt_constraints_primary_key_gov__fact_slash_points_FACT_SLASH_POINTS_ID.dd103daf92": ["model.maya_models.gov__fact_slash_points"], "test.maya_models.dbt_constraints_foreign_key_gov__fact_slash_points_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ee65c78e29": ["model.maya_models.core__dim_block", "model.maya_models.gov__fact_slash_points"], "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.74e7f39f87": ["model.maya_models.gov__fact_new_node_events"], "test.maya_models.unique_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.5818fff587": ["model.maya_models.gov__fact_new_node_events"], "test.maya_models.not_null_gov__fact_new_node_events_BLOCK_TIMESTAMP.00db5f265e": ["model.maya_models.gov__fact_new_node_events"], "test.maya_models.negative_one_gov__fact_new_node_events_DIM_BLOCK_ID.7e9a4f4df8": ["model.maya_models.gov__fact_new_node_events"], "test.maya_models.not_null_gov__fact_new_node_events_NODE_ADDRESS.acfc5e9153": ["model.maya_models.gov__fact_new_node_events"], "test.maya_models.dbt_constraints_primary_key_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.f1563548b6": ["model.maya_models.gov__fact_new_node_events"], "test.maya_models.dbt_constraints_foreign_key_gov__fact_new_node_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.db84a142ae": ["model.maya_models.core__dim_block", "model.maya_models.gov__fact_new_node_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.d6b2eb9e82": ["model.maya_models.gov__fact_slash_amounts"], "test.maya_models.unique_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.cf41247be9": ["model.maya_models.gov__fact_slash_amounts"], "test.maya_models.not_null_gov__fact_slash_amounts_BLOCK_TIMESTAMP.df74c36c69": ["model.maya_models.gov__fact_slash_amounts"], "test.maya_models.negative_one_gov__fact_slash_amounts_DIM_BLOCK_ID.24c3e556a0": ["model.maya_models.gov__fact_slash_amounts"], "test.maya_models.dbt_constraints_primary_key_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.11ef3a37b6": ["model.maya_models.gov__fact_slash_amounts"], "test.maya_models.dbt_constraints_foreign_key_gov__fact_slash_amounts_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8100e32bac": ["model.maya_models.core__dim_block", "model.maya_models.gov__fact_slash_amounts"], "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.a23f25ab20": ["model.maya_models.gov__fact_set_version_events"], "test.maya_models.unique_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.b00d92c74c": ["model.maya_models.gov__fact_set_version_events"], "test.maya_models.not_null_gov__fact_set_version_events_BLOCK_TIMESTAMP.98b94bb2b0": ["model.maya_models.gov__fact_set_version_events"], "test.maya_models.negative_one_gov__fact_set_version_events_DIM_BLOCK_ID.219f154265": ["model.maya_models.gov__fact_set_version_events"], "test.maya_models.dbt_constraints_primary_key_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.cd19861ffb": ["model.maya_models.gov__fact_set_version_events"], "test.maya_models.dbt_constraints_foreign_key_gov__fact_set_version_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f9e30bbb44": ["model.maya_models.core__dim_block", "model.maya_models.gov__fact_set_version_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.ea06e8b3eb": ["model.maya_models.gov__fact_validator_request_leave_events"], "test.maya_models.unique_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.37fdb42c72": ["model.maya_models.gov__fact_validator_request_leave_events"], "test.maya_models.not_null_gov__fact_validator_request_leave_events_BLOCK_TIMESTAMP.28cd20e919": ["model.maya_models.gov__fact_validator_request_leave_events"], "test.maya_models.negative_one_gov__fact_validator_request_leave_events_DIM_BLOCK_ID.68c2b3f504": ["model.maya_models.gov__fact_validator_request_leave_events"], "test.maya_models.not_null_gov__fact_validator_request_leave_events_TX_ID.44237f576e": ["model.maya_models.gov__fact_validator_request_leave_events"], "test.maya_models.not_null_gov__fact_validator_request_leave_events_FROM_ADDRESS.fc1459d259": ["model.maya_models.gov__fact_validator_request_leave_events"], "test.maya_models.not_null_gov__fact_validator_request_leave_events_NODE_ADDRESS.85babe010a": ["model.maya_models.gov__fact_validator_request_leave_events"], "test.maya_models.dbt_constraints_primary_key_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.0f41863c47": ["model.maya_models.gov__fact_validator_request_leave_events"], "test.maya_models.dbt_constraints_foreign_key_gov__fact_validator_request_leave_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7203fca5dd": ["model.maya_models.core__dim_block", "model.maya_models.gov__fact_validator_request_leave_events"], "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.ba1a7910fd": ["model.maya_models.gov__fact_set_ip_address_events"], "test.maya_models.unique_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.036066cad1": ["model.maya_models.gov__fact_set_ip_address_events"], "test.maya_models.not_null_gov__fact_set_ip_address_events_BLOCK_TIMESTAMP.462fe32242": ["model.maya_models.gov__fact_set_ip_address_events"], "test.maya_models.negative_one_gov__fact_set_ip_address_events_DIM_BLOCK_ID.f2d9a1d444": ["model.maya_models.gov__fact_set_ip_address_events"], "test.maya_models.dbt_constraints_primary_key_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.2eb1ce9651": ["model.maya_models.gov__fact_set_ip_address_events"], "test.maya_models.dbt_constraints_foreign_key_gov__fact_set_ip_address_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c760962472": ["model.maya_models.core__dim_block", "model.maya_models.gov__fact_set_ip_address_events"], "test.livequery_base.test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call.3395d64fdc": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_dict_true_1.fdf94a3552": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_dict_true_2.e6c560e798": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_dict_true_space.cf1ebd5f66": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_dict_true_special.2505297d48": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_dict_true_array.12987dd02c": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_dict_false_1.b361ab7392": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_dict_false_2.dea792bb27": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_dict_false_space.76c5107ff8": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_dict_false_special.03dea2520f": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_dict_false_array.4892af33ef": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_dict_1.4143f28231": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_dict_2.63c38fd132": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_dict_space.76152bfecc": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_dict_special.0500e3683b": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_dict_array.8619cd1854": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_array_true_1.4b277c2056": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_array_true_2.2a5d911cd5": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_array_true_space.86721ff4c6": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_array_true_special.6bc759dae6": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_array_true_array.d77b856f93": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_array_false_1.99efd6dd89": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_array_false_2.ee64ed1c8f": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_array_false_space.3b0c76787c": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_array_false_special.a99ce4744f": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_array_false_array.40ad1041f0": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_array_1.7986cadf5c": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_array_2.38e8c0c341": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_array_space.36db5e9d03": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_array_special.1e95f13cf6": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_urlencode_array_array.9cb7c99c99": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_int_to_binary.d833da9e2e": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_int_to_binary_large_number.5d7360105e": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_binary_to_int.ffcc7fc010": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_binary_to_int_large_number.493e3262c4": ["model.livequery_base.utils"], "test.livequery_base.test_utils__udf_evm_decode_log.84691b80d2": ["model.livequery_base.utils"], "test.livequery_base.test_secrets__udf_register_secret.85444b4425": [], "test.livequery_base.test_secrets__udf_get_secret.1762e1eb69": [], "test.livequery_base.test_secrets__udf_get_secrets.898812e6e2": [], "test.livequery_base.test_secrets__udf_create_secret.d42bc02506": [], "test.livequery_base.test_secrets__udf_delete_secret.9f28745276": [], "test.livequery_base.test__live_udf_api_post_data_object.208f9d5456": ["model.livequery_base.live"], "test.livequery_base.test__live_udf_api_post_data_array.f30e6de8c8": ["model.livequery_base.live"], "test.livequery_base.test__live_udf_api_post_data_string.e2159319bb": ["model.livequery_base.live"], "test.livequery_base.test___utils_udf_introspect.79bd27a18b": ["model.livequery_base._utils"], "source.maya_models.maya_midgard.midgard_active_vault_events": [], "source.maya_models.maya_midgard.midgard_add_events": [], "source.maya_models.maya_midgard.midgard_block_log": [], "source.maya_models.maya_midgard.midgard_block_pool_depths": [], "source.maya_models.maya_midgard.midgard_bond_events": [], "source.maya_models.maya_midgard.midgard_cacao_price": [], "source.maya_models.maya_midgard.midgard_constants": [], "source.maya_models.maya_midgard.midgard_failed_deposit_messages": [], "source.maya_models.maya_midgard.midgard_fee_events": [], "source.maya_models.maya_midgard.midgard_gas_events": [], "source.maya_models.maya_midgard.midgard_inactive_vault_events": [], "source.maya_models.maya_midgard.midgard_mayaname_change_events": [], "source.maya_models.maya_midgard.midgard_new_node_events": [], "source.maya_models.maya_midgard.midgard_outbound_events": [], "source.maya_models.maya_midgard.midgard_pending_liquidity_events": [], "source.maya_models.maya_midgard.midgard_pool_balance_change_events": [], "source.maya_models.maya_midgard.midgard_pool_events": [], "source.maya_models.maya_midgard.midgard_refund_events": [], "source.maya_models.maya_midgard.midgard_reserve_events": [], "source.maya_models.maya_midgard.midgard_rewards_events": [], "source.maya_models.maya_midgard.midgard_rewards_event_entries": [], "source.maya_models.maya_midgard.midgard_send_messages": [], "source.maya_models.maya_midgard.midgard_set_ip_address_events": [], "source.maya_models.maya_midgard.midgard_set_mimir_events": [], "source.maya_models.maya_midgard.midgard_set_node_keys_events": [], "source.maya_models.maya_midgard.midgard_set_node_mimir_events": [], "source.maya_models.maya_midgard.midgard_set_version_events": [], "source.maya_models.maya_midgard.midgard_slash_events": [], "source.maya_models.maya_midgard.midgard_slash_liquidity_events": [], "source.maya_models.maya_midgard.midgard_slash_points_events": [], "source.maya_models.maya_midgard.midgard_stake_events": [], "source.maya_models.maya_midgard.midgard_streaming_swap_details_events": [], "source.maya_models.maya_midgard.midgard_swap_events": [], "source.maya_models.maya_midgard.midgard_transfer_events": [], "source.maya_models.maya_midgard.midgard_update_node_account_status_events": [], "source.maya_models.maya_midgard.midgard_validator_request_leave_events": [], "source.maya_models.maya_midgard.midgard_withdraw_events": [], "source.maya_models.crosschain.address_tags": [], "source.maya_models.crosschain.dim_dates": [], "source.maya_models.crosschain_silver.number_sequence": [], "source.maya_models.crosschain_silver.complete_native_prices": [], "source.maya_models.crosschain_silver.labels_combined": [], "source.livequery_base.crosschain.dim_date_hours": [], "source.livequery_base.crosschain.dim_contracts": [], "source.livequery_base.crosschain.dim_evm_event_abis": [], "source.livequery_base.ethereum_core.fact_event_logs": [], "source.livequery_base.ethereum_core.ez_decoded_event_logs": []}, "child_map": {"model.maya_models.bronze__gas_events": ["model.maya_models.silver__gas_events"], "model.maya_models.bronze__set_node_mimir_events": ["model.maya_models.silver__set_node_mimir_events"], "model.maya_models.bronze__inactive_vault_events": ["model.maya_models.silver__inactive_vault_events"], "model.maya_models.bronze__failed_deposit_messages": ["model.maya_models.silver__failed_deposit_messages"], "model.maya_models.bronze__new_node_events": ["model.maya_models.silver__new_node_events"], "model.maya_models.bronze__send_messages": ["model.maya_models.silver__send_messages"], "model.maya_models.bronze__rewards_events": ["model.maya_models.silver__rewards_events"], "model.maya_models.bronze__bond_events": ["model.maya_models.silver__bond_events"], "model.maya_models.bronze__pending_liquidity_events": ["model.maya_models.silver__pending_liquidity_events"], "model.maya_models.bronze__slash_liquidity_events": ["model.maya_models.silver__slash_liquidity_events"], "model.maya_models.bronze__swap_events": ["model.maya_models.silver__swap_events"], "model.maya_models.bronze__streamling_swap_details_events": ["model.maya_models.silver__streamling_swap_details_events"], "model.maya_models.bronze__stake_events": ["model.maya_models.silver__stake_events"], "model.maya_models.bronze__block_pool_depths": ["model.maya_models.silver__block_pool_depths"], "model.maya_models.bronze__set_version_events": ["model.maya_models.silver__set_version_events"], "model.maya_models.bronze__cacao_price": ["model.maya_models.silver__cacao_price"], "model.maya_models.bronze__add_events": ["model.maya_models.silver__add_events"], "model.maya_models.bronze__pool_balance_change_events": ["model.maya_models.silver__pool_balance_change_events"], "model.maya_models.bronze__block_log": ["model.maya_models.silver__block_log"], "model.maya_models.bronze__transfer_events": ["model.maya_models.silver__transfer_events"], "model.maya_models.bronze__set_mimir_events": ["model.maya_models.silver__set_mimir_events"], "model.maya_models.bronze__fee_events": ["model.maya_models.silver__fee_events"], "model.maya_models.bronze__reserve_events": ["model.maya_models.silver__reserve_events"], "model.maya_models.bronze__refund_events": ["model.maya_models.silver__refund_events"], "model.maya_models.bronze__active_vault_events": ["model.maya_models.silver__active_vault_events"], "model.maya_models.bronze__validator_request_leave_events": ["model.maya_models.silver__validator_request_leave_events"], "model.maya_models.bronze__rewards_event_entries": ["model.maya_models.silver__rewards_event_entries"], "model.maya_models.bronze__update_node_account_status_events": ["model.maya_models.silver__update_node_account_status_events"], "model.maya_models.bronze__mayaname_change_events": ["model.maya_models.silver__mayaname_change_events"], "model.maya_models.bronze__slash_points_events": ["model.maya_models.silver__slash_points_events"], "model.maya_models.bronze__set_ip_address_events": ["model.maya_models.silver__set_ip_address_events"], "model.maya_models.bronze__outbound_events": ["model.maya_models.silver__outbound_events"], "model.maya_models.bronze__slash_events": ["model.maya_models.silver__slash_events"], "model.maya_models.bronze__constants": ["model.maya_models.silver__constants"], "model.maya_models.bronze__withdraw_events": ["model.maya_models.silver__withdraw_events"], "model.maya_models.bronze__pool_events": ["model.maya_models.silver__pool_events"], "model.maya_models.bronze__set_node_keys_events": ["model.maya_models.silver__set_node_keys_events"], "model.maya_models.silver__daily_tvl": ["model.maya_models.defi__fact_daily_tvl", "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_tvl_DAY__day__2.852820090f", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY.dc405aa093", "test.maya_models.not_null_silver__daily_tvl_DAY.b4b5f55703", "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED.0fa0211531", "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD.6132803dfb", "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED.8b27efa4f5", "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD.14a3029246", "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED.681d912d91", "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD.87301e85c3"], "model.maya_models.silver__outbound_events": ["model.maya_models.defi__fact_outbound_events", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__outbound_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__IN_TX__BLOCK_TIMESTAMP__EVENT_ID.4205fd70e7", "test.maya_models.not_null_silver__outbound_events_ASSET.0d7a3cb9ee", "test.maya_models.not_null_silver__outbound_events_ASSET_E8.e28187620c", "test.maya_models.not_null_silver__outbound_events_BLOCKCHAIN.65ee27c62d", "test.maya_models.not_null_silver__outbound_events_BLOCK_TIMESTAMP.95d579ffd3", "test.maya_models.not_null_silver__outbound_events_FROM_ADDRESS.50d56a9b55", "test.maya_models.not_null_silver__outbound_events_IN_TX.6b2f2fb6dc", "test.maya_models.not_null_silver__outbound_events_MEMO.88f8ed52e8", "test.maya_models.not_null_silver__outbound_events_TO_ADDRESS.48297fe87a"], "model.maya_models.silver__failed_deposit_messages": ["model.maya_models.defi__fact_failed_deposit_messages", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__failed_deposit_messages_EVENT_ID.f82d89db78", "test.maya_models.not_null_silver__failed_deposit_messages_AMOUNT_E8.9331d6135c", "test.maya_models.not_null_silver__failed_deposit_messages_ASSET.1b88575223", "test.maya_models.not_null_silver__failed_deposit_messages_BLOCK_TIMESTAMP.68750ec9c1", "test.maya_models.not_null_silver__failed_deposit_messages_EVENT_ID.8c685c70e8", "test.maya_models.not_null_silver__failed_deposit_messages_FROM_ADDRESS.f300bfa3ee", "test.maya_models.not_null_silver__failed_deposit_messages_TX_ID.96bf8221ba"], "model.maya_models.silver__daily_pool_stats": ["model.maya_models.defi__fact_daily_pool_stats", "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_pool_stats_DAY__day__2.57bf32999f", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__daily_pool_stats_DAY__POOL_NAME.66912a355d", "test.maya_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY.6894fa8392", "test.maya_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD.2667955ead", "test.maya_models.not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT.8ad59930c0", "test.maya_models.not_null_silver__daily_pool_stats_ADD_cacao_LIQUIDITY_USD.4061945e18", "test.maya_models.not_null_silver__daily_pool_stats_ASSET_LIQUIDITY.c39639a01a", "test.maya_models.not_null_silver__daily_pool_stats_ASSET_PRICE.1404d1ca43", "test.maya_models.not_null_silver__daily_pool_stats_ASSET_PRICE_USD.43269ee26c", "test.maya_models.not_null_silver__daily_pool_stats_AVERAGE_SLIP.8d606cbfae", "test.maya_models.not_null_silver__daily_pool_stats_DAY.1fc2ebda22", "test.maya_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID.b751810329", "test.maya_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD.bd460521d5", "test.maya_models.not_null_silver__daily_pool_stats_LIQUIDITY_UNITS.71283b6ef9", "test.maya_models.not_null_silver__daily_pool_stats_POOL_NAME.65d2c5c182", "test.maya_models.not_null_silver__daily_pool_stats_SWAP_COUNT.ed3ad68953", "test.maya_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_cacao.5ebb701e40", "test.maya_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_cacao_USD.95397f1143", "test.maya_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS.e8287959c7", "test.maya_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD.03e77f1a19", "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES.e8298a5287", "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_cacao_FEES.635f330f09", "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD.ef71577e45", "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_cacao.af0178ad49", "test.maya_models.not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP.cf8b4755a7", "test.maya_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT.366a142cfd", "test.maya_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME.475255ccb5", "test.maya_models.not_null_silver__daily_pool_stats_TO_cacao_AVERAGE_SLIP.70fc8fc61f", "test.maya_models.not_null_silver__daily_pool_stats_TO_cacao_SWAP_COUNT.3ff1620fff", "test.maya_models.not_null_silver__daily_pool_stats_TO_cacao_SWAP_VOLUME.edee77e991", "test.maya_models.not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT.c70ad54d24", "test.maya_models.not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT.38ba7212c2", "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY.87edc02d31", "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD.fd07f09d47", "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_COUNT.44ef41bdfd", "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_cacao_LIQUIDITY.71885f6e08", "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_cacao_LIQUIDITY_USD.9816b8ad37", "test.maya_models.not_null_silver__daily_pool_stats_cacao_LIQUIDITY.09de9215b3", "test.maya_models.not_null_silver__daily_pool_stats_cacao_PRICE.dbd669288c", "test.maya_models.not_null_silver__daily_pool_stats_cacao_PRICE_USD.e340e04f34"], "model.maya_models.silver__daily_earnings": ["model.maya_models.defi__fact_daily_earnings", "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_earnings_DAY__day__2.439dcce651", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__daily_earnings_DAY.5ba256d244", "test.maya_models.not_null_silver__daily_earnings_BLOCK_REWARDS.425ab37b25", "test.maya_models.not_null_silver__daily_earnings_BLOCK_REWARDS_USD.ea664e5f41", "test.maya_models.not_null_silver__daily_earnings_DAY.507c4965f2", "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES.32ed3a19df", "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD.4cb99a589c", "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS.6073eca3d0", "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD.7172cf23ad", "test.maya_models.not_null_silver__daily_earnings_LIQUIDITY_FEES.f7387c05a8", "test.maya_models.not_null_silver__daily_earnings_LIQUIDITY_FEES_USD.cab6f63899", "test.maya_models.not_null_silver__daily_earnings_TOTAL_EARNINGS.ccc7cfc3fb", "test.maya_models.not_null_silver__daily_earnings_TOTAL_EARNINGS_USD.3fd52ad085"], "model.maya_models.silver__set_node_mimir_events": [], "model.maya_models.silver__inactive_vault_events": ["model.maya_models.defi__fact_inactive_vault_events"], "model.maya_models.silver__withdraw_events": ["model.maya_models.defi__fact_withdraw_events", "model.maya_models.silver__liquidity_actions", "model.maya_models.silver__pool_block_statistics", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__withdraw_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__POOL_NAME__BLOCK_TIMESTAMP__EVENT_ID.0ddc8ceed7", "test.maya_models.not_null_silver__withdraw_events_ASSET.ea07249536", "test.maya_models.not_null_silver__withdraw_events_ASSET_E8.faae5c4b97", "test.maya_models.not_null_silver__withdraw_events_ASYMMETRY.5e0af14a3f", "test.maya_models.not_null_silver__withdraw_events_BASIS_POINTS.a18baacaeb", "test.maya_models.not_null_silver__withdraw_events_BLOCKCHAIN.2a184325c3", "test.maya_models.not_null_silver__withdraw_events_BLOCK_TIMESTAMP.7a02200069", "test.maya_models.not_null_silver__withdraw_events_EMIT_ASSET_E8.dc3f62c561", "test.maya_models.not_null_silver__withdraw_events_EMIT_cacao_E8.7f717e247c", "test.maya_models.not_null_silver__withdraw_events_FROM_ADDRESS.221980d7cb", "test.maya_models.not_null_silver__withdraw_events_IMP_LOSS_PROTECTION_E8.3f9dd7135b", "test.maya_models.not_null_silver__withdraw_events_MEMO.0237304635", "test.maya_models.not_null_silver__withdraw_events_POOL_NAME.f200904b8c", "test.maya_models.not_null_silver__withdraw_events_STAKE_UNITS.602d35eb7a", "test.maya_models.not_null_silver__withdraw_events_TO_ADDRESS.7500c7f147", "test.maya_models.not_null_silver__withdraw_events_TX_ID.b23e83e2df", "test.maya_models.not_null_silver__withdraw_events__EMIT_ASSET_IN_cacao_E8.02d525bd2d"], "model.maya_models.silver__slash_events": ["model.maya_models.gov__fact_slash_amounts"], "model.maya_models.silver__transfers": ["model.maya_models.core__fact_transfers", "test.maya_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c", "test.maya_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "test.maya_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c", "test.maya_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c", "test.maya_models.not_null_silver__transfers_cacao_AMOUNT.fc29e27e26", "test.maya_models.not_null_silver__transfers_cacao_AMOUNT_USD.518cddefe8"], "model.maya_models.silver__block_pool_depths": ["model.maya_models.defi__fact_block_pool_depths", "model.maya_models.silver__block_rewards", "model.maya_models.silver__pool_block_balances", "model.maya_models.silver__pool_block_fees", "model.maya_models.silver__pool_block_statistics", "model.maya_models.silver__prices", "model.maya_models.silver__total_value_locked", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__block_pool_depths_BLOCK_TIMESTAMP__POOL_NAME.b5ab31baa3", "test.maya_models.not_null_silver__block_pool_depths_ASSET_E8.aacfa8eedf", "test.maya_models.not_null_silver__block_pool_depths_BLOCK_TIMESTAMP.d45c965914", "test.maya_models.not_null_silver__block_pool_depths_CACAO_E8.6ea6c27fb2", "test.maya_models.not_null_silver__block_pool_depths_POOL_NAME.6b5899c602", "test.maya_models.not_null_silver__block_pool_depths_SYNTH_E8.4ac67d8c72"], "model.maya_models.silver__set_mimir_events": ["model.maya_models.core__fact_set_mimir_events"], "model.maya_models.silver__pool_block_statistics": ["model.maya_models.defi__fact_pool_block_statistics", "model.maya_models.silver__daily_pool_stats", "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_statistics_DAY__day__2.56faaa8dbf", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pool_block_statistics_DAY__ASSET.aa179a7a3e", "test.maya_models.not_null_silver__pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME.d13b4e223c", "test.maya_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT.a6468ef5dd", "test.maya_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME.8c96da03e7", "test.maya_models.not_null_silver__pool_block_statistics_ADD_cacao_LIQUIDITY_VOLUME.d205951804", "test.maya_models.not_null_silver__pool_block_statistics_ASSET.e2a9d555b4", "test.maya_models.not_null_silver__pool_block_statistics_ASSET_DEPTH.afecafb5a1", "test.maya_models.not_null_silver__pool_block_statistics_ASSET_PRICE.13060f5529", "test.maya_models.not_null_silver__pool_block_statistics_ASSET_PRICE_USD.d58add8c57", "test.maya_models.not_null_silver__pool_block_statistics_AVERAGE_SLIP.0dd0338788", "test.maya_models.not_null_silver__pool_block_statistics_DAY.e1d1716d58", "test.maya_models.not_null_silver__pool_block_statistics_DEPTH_PRODUCT.10ec4d6762", "test.maya_models.not_null_silver__pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID.de64fea0f1", "test.maya_models.not_null_silver__pool_block_statistics_LIQUIDITY_UNIT_VALUE_INDEX.2961093934", "test.maya_models.not_null_silver__pool_block_statistics_POOL_UNITS.a9fd8a4a48", "test.maya_models.not_null_silver__pool_block_statistics_PREV_LIQUIDITY_UNIT_VALUE_INDEX.a33c024362", "test.maya_models.not_null_silver__pool_block_statistics_STATUS.12571911dc", "test.maya_models.not_null_silver__pool_block_statistics_SWAP_COUNT.d16cc64040", "test.maya_models.not_null_silver__pool_block_statistics_SWAP_VOLUME.4d59da2017", "test.maya_models.not_null_silver__pool_block_statistics_SYNTH_UNITS.d34b8ef943", "test.maya_models.not_null_silver__pool_block_statistics_TOTALFEES.cb447c44c8", "test.maya_models.not_null_silver__pool_block_statistics_TOTAL_STAKE.acfd31062e", "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP.616ea124ef", "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_COUNT.686e56b6a2", "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_FEES.4243fd1291", "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_VOLUME.a7619cb0c1", "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_AVERAGE_SLIP.3ec16dcf5b", "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_COUNT.b9826d563a", "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_FEES.b88c364faa", "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_VOLUME.eddc6586ac", "test.maya_models.not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT.e21371b8b6", "test.maya_models.not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT.f58c3b5939", "test.maya_models.not_null_silver__pool_block_statistics_UNITS.1c3ee9d2a0", "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME.8109e4b0cb", "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_COUNT.5fcea77d8b", "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_VOLUME.7c44597ab7", "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_cacao_VOLUME.e852869cf9", "test.maya_models.not_null_silver__pool_block_statistics_cacao_DEPTH.e194b1e7f1"], "model.maya_models.silver__liquidity_actions": ["model.maya_models.defi__fact_liquidity_actions", "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__liquidity_actions_BLOCK_TIMESTAMP__day__1.20722a4e9a", "test.maya_models.not_null_silver__liquidity_actions_ASSET_AMOUNT.9620d465a9", "test.maya_models.not_null_silver__liquidity_actions_BLOCK_ID.39dcd6abaa", "test.maya_models.not_null_silver__liquidity_actions_BLOCK_TIMESTAMP.ff2d2892a0", "test.maya_models.not_null_silver__liquidity_actions_LP_ACTION.c249d79d62", "test.maya_models.not_null_silver__liquidity_actions_POOL_NAME.3ad71b8145", "test.maya_models.not_null_silver__liquidity_actions_STAKE_UNITS.689ec0ada5", "test.maya_models.not_null_silver__liquidity_actions_cacao_AMOUNT.fad92cc503", "test.maya_models.not_null_silver__liquidity_actions_cacao_AMOUNT_USD.4f2702f843"], "model.maya_models.silver__refund_events": ["model.maya_models.defi__fact_refund_events", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__refund_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__ASSET_2ND__MEMO__CODE__REASON__BLOCK_TIMESTAMP__EVENT_ID.bfb7525b50", "test.maya_models.not_null_silver__refund_events_ASSET.8d91917f0d", "test.maya_models.not_null_silver__refund_events_ASSET_2ND_E8.f8450d1bd5", "test.maya_models.not_null_silver__refund_events_ASSET_E8.2e099ee072", "test.maya_models.not_null_silver__refund_events_BLOCKCHAIN.377143648d", "test.maya_models.not_null_silver__refund_events_BLOCK_TIMESTAMP.60c1f10234", "test.maya_models.not_null_silver__refund_events_CODE.fee514c705", "test.maya_models.not_null_silver__refund_events_FROM_ADDRESS.95dd9f9c95", "test.maya_models.not_null_silver__refund_events_REASON.080b9527d1", "test.maya_models.not_null_silver__refund_events_TO_ADDRESS.2fda85c5dd", "test.maya_models.not_null_silver__refund_events_TX_ID.d818e4a9c0"], "model.maya_models.silver__validator_request_leave_events": ["model.maya_models.gov__fact_validator_request_leave_events", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__validator_request_leave_events_EVENT_ID__TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__NODE_ADDRESS.90d08ddaee", "test.maya_models.not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP.290714d793", "test.maya_models.not_null_silver__validator_request_leave_events_EVENT_ID.b55c332547", "test.maya_models.not_null_silver__validator_request_leave_events_FROM_ADDRESS.209d28d48f", "test.maya_models.not_null_silver__validator_request_leave_events_NODE_ADDRESS.c91207bb4e", "test.maya_models.not_null_silver__validator_request_leave_events_TX_ID.e98479bb26"], "model.maya_models.silver__transfer_events": ["model.maya_models.core__fact_transfer_events", "model.maya_models.silver__transfers", "test.maya_models.not_null_silver__transfer_events_AMOUNT_E8.4a22457c1d", "test.maya_models.not_null_silver__transfer_events_ASSET.4d061223da", "test.maya_models.not_null_silver__transfer_events_BLOCK_TIMESTAMP.1ff60425a6", "test.maya_models.not_null_silver__transfer_events_FROM_ADDRESS.199be5d0bb", "test.maya_models.not_null_silver__transfer_events_TO_ADDRESS.3db72ea291"], "model.maya_models.silver__total_value_locked": ["model.maya_models.defi__fact_total_value_locked", "model.maya_models.silver__daily_tvl", "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_value_locked_DAY__day__2.40cc6ac950", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__total_value_locked_DAY.156a4d804a", "test.maya_models.not_null_silver__total_value_locked_DAY.5d7ba86e85", "test.maya_models.not_null_silver__total_value_locked_TOTAL_VALUE_BONDED.6df7fe839f", "test.maya_models.not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED.32714bbc40", "test.maya_models.not_null_silver__total_value_locked_TOTAL_VALUE_POOLED.ca339c528a"], "model.maya_models.silver__bond_events": ["model.maya_models.defi__fact_bond_actions", "model.maya_models.defi__fact_bond_events", "model.maya_models.silver__total_value_locked", "test.maya_models.not_null_silver__bond_events_ASSET_E8.2bc5c2e174", "test.maya_models.not_null_silver__bond_events_BLOCK_TIMESTAMP.b9485030e0", "test.maya_models.not_null_silver__bond_events_BOND_TYPE.598bb69e8e", "test.maya_models.not_null_silver__bond_events_E8.c19384976b", "test.maya_models.not_null_silver__bond_events_TX_ID.d18467b918"], "model.maya_models.silver__update_node_account_status_events": ["model.maya_models.defi__fact_update_node_account_status_events", "model.maya_models.silver__block_rewards", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__update_node_account_status_events_NODE_ADDRESS__CURRENT_STATUS__FORMER_STATUS__BLOCK_TIMESTAMP__EVENT_ID.a1b6af9de0", "test.maya_models.not_null_silver__update_node_account_status_events_BLOCK_TIMESTAMP.f7cd76f13b", "test.maya_models.not_null_silver__update_node_account_status_events_CURRENT_STATUS.e8417a26f7", "test.maya_models.not_null_silver__update_node_account_status_events_FORMER_STATUS.a863f18a99", "test.maya_models.not_null_silver__update_node_account_status_events_NODE_ADDRESS.2462678a83"], "model.maya_models.silver__swaps": ["model.maya_models.defi__fact_swaps", "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_BLOCK_TIMESTAMP_DATE__day__2.d8a8588da7", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__swaps_BLOCK_ID__TX_ID__POOL_NAME__FROM_ADDRESS__TO_POOL_ADDRESS__FROM_ASSET__TO_ASSET__NATIVE_TO_ADDRESS__FROM_AMOUNT__TO_AMOUNT.aa735861a8", "test.maya_models.not_null_silver__swaps_BLOCKCHAIN.704d8b1b68", "test.maya_models.not_null_silver__swaps_BLOCK_ID.85d35d8cd4", "test.maya_models.not_null_silver__swaps_BLOCK_TIMESTAMP_DATE.57ccf41e0a", "test.maya_models.not_null_silver__swaps_FROM_ADDRESS.247c2a81d9", "test.maya_models.not_null_silver__swaps_FROM_AMOUNT.a2d756c197", "test.maya_models.not_null_silver__swaps_FROM_AMOUNT_USD.78ab9ab5ae", "test.maya_models.not_null_silver__swaps_FROM_ASSET.2503f2d93d", "test.maya_models.not_null_silver__swaps_LIQ_FEE_ASSET.3ab6185469", "test.maya_models.not_null_silver__swaps_LIQ_FEE_ASSET_USD.542bee191c", "test.maya_models.not_null_silver__swaps_LIQ_FEE_cacao.545480628b", "test.maya_models.not_null_silver__swaps_LIQ_FEE_cacao_USD.1a59fb77e9", "test.maya_models.not_null_silver__swaps_MIN_TO_AMOUNT.75770dfa8f", "test.maya_models.not_null_silver__swaps_POOL_NAME.8d3cfe0652", "test.maya_models.not_null_silver__swaps_SWAP_SLIP_BP.049ffdaa3d", "test.maya_models.not_null_silver__swaps_TO_AMOUNT.db49c788b2", "test.maya_models.not_null_silver__swaps_TO_AMOUNT_MIN_USD.cc63ea20d5", "test.maya_models.not_null_silver__swaps_TO_AMOUNT_USD.f7a4de00a3", "test.maya_models.not_null_silver__swaps_TO_ASSET.d9705bc2c4", "test.maya_models.not_null_silver__swaps_TO_POOL_ADDRESS.eec1cbbccd", "test.maya_models.not_null_silver__swaps_TX_ID.429c1bdd9e"], "model.maya_models.silver__swap_events": ["model.maya_models.defi__fact_swaps_events", "model.maya_models.silver__block_rewards", "model.maya_models.silver__pool_block_fees", "model.maya_models.silver__pool_block_statistics", "model.maya_models.silver__swaps", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__swap_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__FROM_ASSET__FROM_E8__TO_ASSET__TO_E8__MEMO__POOL_NAME__TO_E8_MIN__SWAP_SLIP_BP__LIQ_FEE_E8__LIQ_FEE_IN_CACAO_E8___DIRECTION__BLOCK_TIMESTAMP__EVENT_ID.6b4a3b623f", "test.maya_models.not_null_silver__swap_events_BLOCKCHAIN.46d45dd5fc", "test.maya_models.not_null_silver__swap_events_BLOCK_TIMESTAMP.a57ee76fa3", "test.maya_models.not_null_silver__swap_events_FROM_ADDRESS.06e1df5a46", "test.maya_models.not_null_silver__swap_events_FROM_ASSET.cfbedd6f2a", "test.maya_models.not_null_silver__swap_events_FROM_E8.74389cdde1", "test.maya_models.not_null_silver__swap_events_LIQ_FEE_E8.3403a5a47e", "test.maya_models.not_null_silver__swap_events_LIQ_FEE_IN_CACAO_E8.8d242c34b0", "test.maya_models.not_null_silver__swap_events_MEMO.29e2c5dd27", "test.maya_models.not_null_silver__swap_events_POOL_NAME.e529db3476", "test.maya_models.not_null_silver__swap_events_SWAP_SLIP_BP.61c1b2db2f", "test.maya_models.not_null_silver__swap_events_TO_ADDRESS.3c473194d8", "test.maya_models.not_null_silver__swap_events_TO_ASSET.2a903da825", "test.maya_models.not_null_silver__swap_events_TO_E8.5ad719c657", "test.maya_models.not_null_silver__swap_events_TO_E8_MIN.d4667fb218", "test.maya_models.not_null_silver__swap_events_TX_ID.ba927b5821", "test.maya_models.not_null_silver__swap_events__DIRECTION.910c1bf98a"], "model.maya_models.silver__mayaname_change_events": ["model.maya_models.core__fact_mayaname_change_events"], "model.maya_models.silver__rewards_events": ["model.maya_models.defi__fact_rewards_events", "model.maya_models.silver__block_rewards", "model.maya_models.silver__total_block_rewards", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__rewards_events_BLOCK_TIMESTAMP.b923b50047", "test.maya_models.not_null_silver__rewards_events_BLOCK_TIMESTAMP.9c9ab7fca9", "test.maya_models.not_null_silver__rewards_events_BOND_E8.7e5ede5d73"], "model.maya_models.silver__pool_block_fees": ["model.maya_models.defi__fact_pool_block_fees", "model.maya_models.silver__daily_pool_stats", "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_fees_DAY__day__2.ece5c1920a", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pool_block_fees_DAY__POOL_NAME.bd55b36cef", "test.maya_models.not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES.b890f32362", "test.maya_models.not_null_silver__pool_block_fees_DAY.ecfb240ac6", "test.maya_models.not_null_silver__pool_block_fees_EARNINGS.78b1e80755", "test.maya_models.not_null_silver__pool_block_fees_POOL_NAME.f126e2294d", "test.maya_models.not_null_silver__pool_block_fees_REWARDS.5b1d8b2e19", "test.maya_models.not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_cacao.f8aaa086a0", "test.maya_models.not_null_silver__pool_block_fees_cacao_LIQUIDITY_FEES.d6bd4f1894"], "model.maya_models.silver__fee_events": ["model.maya_models.defi__fact_fee_events", "test.maya_models.not_null_silver__fee_events_ASSET.3832e5408e", "test.maya_models.not_null_silver__fee_events_ASSET_E8.0ae7bb759e", "test.maya_models.not_null_silver__fee_events_BLOCK_TIMESTAMP.c40fd33f4a", "test.maya_models.not_null_silver__fee_events_POOL_DEDUCT.3a131f1475", "test.maya_models.not_null_silver__fee_events_TX_ID.bfb2bd0eb8"], "model.maya_models.silver__add_events": ["model.maya_models.defi__fact_add_events", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__add_events_EVENT_ID__TX_ID__BLOCKCHAIN__POOL_NAME__FROM_ADDRESS__TO_ADDRESS__MEMO.ba16b70ba9", "test.maya_models.not_null_silver__add_events_ASSET_E8.49cc46d9aa", "test.maya_models.not_null_silver__add_events_BLOCK_TIMESTAMP.00d2f77a19", "test.maya_models.not_null_silver__add_events_FROM_ADDRESS.c11c449394", "test.maya_models.not_null_silver__add_events_MEMO.111566b9b2", "test.maya_models.not_null_silver__add_events_POOL_NAME.66d963165a", "test.maya_models.not_null_silver__add_events_TO_ADDRESS.ee57bfcd57", "test.maya_models.not_null_silver__add_events_TX_ID.3e7dfb5274", "test.maya_models.not_null_silver__add_events_cacao_E8.9839039ade"], "model.maya_models.silver__pool_balance_change_events": ["model.maya_models.defi__fact_pool_balance_change_events", "test.maya_models.not_null_silver__pool_balance_change_events_ASSET.fe12efdf7a", "test.maya_models.not_null_silver__pool_balance_change_events_ASSET_ADD.ca42123793", "test.maya_models.not_null_silver__pool_balance_change_events_ASSET_AMOUNT.c610565710", "test.maya_models.not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP.17e9062fd9", "test.maya_models.not_null_silver__pool_balance_change_events_CACAO_ADD.5b7cd349b8", "test.maya_models.not_null_silver__pool_balance_change_events_CACAO_AMOUNT.612b63c529", "test.maya_models.not_null_silver__pool_balance_change_events_REASON.cc5900d926"], "model.maya_models.silver__block_rewards": ["model.maya_models.defi__fact_block_rewards", "model.maya_models.silver__daily_earnings", "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_rewards_DAY__day__2.c5edb01bcd", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__block_rewards_DAY.62cb5ef71d", "test.maya_models.not_null_silver__block_rewards_BLOCK_REWARDS.1424b5c928", "test.maya_models.not_null_silver__block_rewards_BONDING_EARNINGS.46eaa4df77", "test.maya_models.not_null_silver__block_rewards_DAY.202d1b684a", "test.maya_models.not_null_silver__block_rewards_EARNINGS.cc83b753f9", "test.maya_models.not_null_silver__block_rewards_LIQUIDITY_EARNINGS.61a45ddd0e", "test.maya_models.not_null_silver__block_rewards_LIQUIDITY_FEE.0d49408c2f"], "model.maya_models.silver__cacao_price": ["model.maya_models.price__fact_cacao_price", "model.maya_models.silver__prices", "test.maya_models.not_null_silver__cacao_price_BLOCK_TIMESTAMP.70949f9fc4", "test.maya_models.not_null_silver__cacao_price_CACAO_PRICE_E8.9e3d0f25c9"], "model.maya_models.silver__reserve_events": ["model.maya_models.defi__fact_reserve_events"], "model.maya_models.silver__streamling_swap_details_events": ["model.maya_models.defi__fact_streamling_swap_details_events", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__streamling_swap_details_events_EVENT_ID.9d2418d597", "test.maya_models.not_null_silver__streamling_swap_details_events_COUNT.12c52bff4c", "test.maya_models.not_null_silver__streamling_swap_details_events_INTERVAL.1071875126", "test.maya_models.not_null_silver__streamling_swap_details_events_TX_ID.8949f66cf6", "test.maya_models.not_null_silver__streamling_swap_details_events_block_timestamp.2889dd87d2", "test.maya_models.not_null_silver__streamling_swap_details_events_deposit_asset.910fc757bd", "test.maya_models.not_null_silver__streamling_swap_details_events_deposit_e8.be8b643427", "test.maya_models.not_null_silver__streamling_swap_details_events_event_id.84d056a572", "test.maya_models.not_null_silver__streamling_swap_details_events_in_asset.a79e30ae3f", "test.maya_models.not_null_silver__streamling_swap_details_events_in_e8.a0acf84a1f", "test.maya_models.not_null_silver__streamling_swap_details_events_last_height.e19319cce2", "test.maya_models.not_null_silver__streamling_swap_details_events_out_asset.4e10bc70d0", "test.maya_models.not_null_silver__streamling_swap_details_events_out_e8.3869542c15", "test.maya_models.not_null_silver__streamling_swap_details_events_quantity.fd5461e50b"], "model.maya_models.silver__set_node_keys_events": ["model.maya_models.gov__fact_set_node_keys_events"], "model.maya_models.silver__block_log": ["model.maya_models.core__dim_block", "model.maya_models.silver__block_rewards", "model.maya_models.silver__liquidity_actions", "model.maya_models.silver__pool_block_balances", "model.maya_models.silver__pool_block_fees", "model.maya_models.silver__pool_block_statistics", "model.maya_models.silver__prices", "model.maya_models.silver__swaps", "model.maya_models.silver__total_block_rewards", "model.maya_models.silver__total_value_locked", "model.maya_models.silver__transfers", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__block_log_HEIGHT__TIMESTAMP__HASH__AGG_STATE.ba5ad4e27e", "test.maya_models.not_null_silver__block_log_HASH.832559848d", "test.maya_models.not_null_silver__block_log_HEIGHT.e9a4d0156c", "test.maya_models.not_null_silver__block_log_TIMESTAMP.211bc1ece9"], "model.maya_models.silver__stake_events": ["model.maya_models.defi__fact_stake_events", "model.maya_models.silver__liquidity_actions", "model.maya_models.silver__pool_block_statistics", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__stake_events_POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__STAKE_UNITS__CACAO_TX_ID__CACAO_ADDRESS__BLOCK_TIMESTAMP__EVENT_ID.e0af54f8ef", "test.maya_models.not_null_silver__stake_events_ASSET_E8.23fed0c3e9", "test.maya_models.not_null_silver__stake_events_BLOCK_TIMESTAMP.99273b28bf", "test.maya_models.not_null_silver__stake_events_CACAO_E8.3fb99bec11", "test.maya_models.not_null_silver__stake_events_POOL_NAME.341d5d5927", "test.maya_models.not_null_silver__stake_events_STAKE_UNITS.71ce8d8f55", "test.maya_models.not_null_silver__stake_events__ASSET_IN_CACAO_E8.93d05d9743"], "model.maya_models.silver__send_messages": ["model.maya_models.defi__fact_send_messages", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__send_messages_EVENT_ID.cf7796cd5e", "test.maya_models.not_null_silver__send_messages_AMOUNT_E8.104c5a7c7e", "test.maya_models.not_null_silver__send_messages_ASSET.94814200c0", "test.maya_models.not_null_silver__send_messages_BLOCK_TIMESTAMP.e97a44bf3a", "test.maya_models.not_null_silver__send_messages_EVENT_ID.32349d2e99", "test.maya_models.not_null_silver__send_messages_FROM_ADDRESS.cd61a44284", "test.maya_models.not_null_silver__send_messages_TO_ADDRESS.21baa8f940", "test.maya_models.not_null_silver__send_messages_TX_ID.4845b0765f"], "model.maya_models.silver__rewards_event_entries": ["model.maya_models.defi__fact_rewards_event_entries", "model.maya_models.silver__block_rewards", "model.maya_models.silver__pool_block_fees", "model.maya_models.silver__total_block_rewards", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__rewards_event_entries_BLOCK_TIMESTAMP__POOL_NAME__EVENT_ID.08efcdc427", "test.maya_models.not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP.b2bee0a774", "test.maya_models.not_null_silver__rewards_event_entries_CACAO_E8.cb93b74b1a", "test.maya_models.not_null_silver__rewards_event_entries_POOL_NAME.714768eae5"], "model.maya_models.silver__slash_liquidity_events": ["model.maya_models.defi__fact_slash_liquidity_events"], "model.maya_models.silver__set_ip_address_events": ["model.maya_models.gov__fact_set_ip_address_events"], "model.maya_models.silver__prices": ["model.maya_models.defi__fact_bond_actions", "model.maya_models.silver__daily_earnings", "model.maya_models.silver__daily_pool_stats", "model.maya_models.silver__daily_tvl", "model.maya_models.silver__liquidity_actions", "model.maya_models.silver__pool_block_balances", "model.maya_models.silver__pool_block_statistics", "model.maya_models.silver__swaps", "model.maya_models.silver__total_block_rewards", "model.maya_models.silver__transfers", "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_BLOCK_TIMESTAMP__day__1.00281f997e", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__prices_BLOCK_ID__POOL_NAME.7a2931d6eb", "test.maya_models.not_null_silver__prices_ASSET_USD.a900d8c697", "test.maya_models.not_null_silver__prices_BLOCK_ID.b3347041fc", "test.maya_models.not_null_silver__prices_BLOCK_TIMESTAMP.d245b83d4f", "test.maya_models.not_null_silver__prices_POOL_NAME.7eacc16a03", "test.maya_models.not_null_silver__prices_PRICE_ASSET_cacao.8241728751", "test.maya_models.not_null_silver__prices_PRICE_cacao_ASSET.2443bbba18", "test.maya_models.not_null_silver__prices_cacao_USD.fb9aeff69a"], "model.maya_models.silver__total_block_rewards": ["model.maya_models.defi__fact_total_block_rewards", "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_block_rewards_BLOCK_TIMESTAMP__day__1.8b65eead55", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__total_block_rewards_BLOCK_ID__REWARD_ENTITY.23ceb96a43", "test.maya_models.not_null_silver__total_block_rewards_BLOCK_ID.8619b81300", "test.maya_models.not_null_silver__total_block_rewards_BLOCK_TIMESTAMP.7d7b639434", "test.maya_models.not_null_silver__total_block_rewards_REWARD_ENTITY.06013c60c2", "test.maya_models.not_null_silver__total_block_rewards_cacao_AMOUNT.991c1821ee"], "model.maya_models.silver__pending_liquidity_events": ["model.maya_models.defi__fact_pending_liquidity_events", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pending_liquidity_events_EVENT_ID__ASSET_ADDRESS__CACAO_ADDRESS.188b780819", "test.maya_models.not_null_silver__pending_liquidity_events_ASSET_E8.c201915269", "test.maya_models.not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP.ab766ea5ff", "test.maya_models.not_null_silver__pending_liquidity_events_CACAO_ADDRESS.871aaa4926", "test.maya_models.not_null_silver__pending_liquidity_events_CACAO_E8.857d5c83f2", "test.maya_models.not_null_silver__pending_liquidity_events_PENDING_TYPE.98039831a1", "test.maya_models.not_null_silver__pending_liquidity_events_POOL_NAME.5e22402fb9"], "model.maya_models.silver__gas_events": ["model.maya_models.defi__fact_gas_events", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__gas_events_EVENT_ID__ASSET__BLOCK_TIMESTAMP.b0baea926f", "test.maya_models.not_null_silver__gas_events_ASSET.59ad7ccacd", "test.maya_models.not_null_silver__gas_events_ASSET_E8.2072d4ce77", "test.maya_models.not_null_silver__gas_events_BLOCK_TIMESTAMP.88c6e43d24", "test.maya_models.not_null_silver__gas_events_CACAO_E8.4dad242a6b", "test.maya_models.not_null_silver__gas_events_TX_COUNT.a45fc07260"], "model.maya_models.silver__pool_events": ["model.maya_models.defi__fact_pool_events", "model.maya_models.silver__pool_block_statistics"], "model.maya_models.silver__set_version_events": ["model.maya_models.gov__fact_set_version_events"], "model.maya_models.silver__active_vault_events": ["model.maya_models.defi__fact_active_vault_events", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__active_vault_events_EVENT_ID__BLOCK_TIMESTAMP__ADD_ASGARD_ADDR.f7fa9e1978", "test.maya_models.not_null_silver__active_vault_events_ADD_ASGARD_ADDR.cd001c3c13", "test.maya_models.not_null_silver__active_vault_events_BLOCK_TIMESTAMP.bfcca60868"], "model.maya_models.silver__pool_block_balances": ["model.maya_models.defi__fact_pool_block_balances", "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_balances_BLOCK_TIMESTAMP__day__1.06ec2e6c79", "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pool_block_balances_BLOCK_ID__POOL_NAME.db3d915190", "test.maya_models.not_null_silver__pool_block_balances_ASSET_AMOUNT.69087d909b", "test.maya_models.not_null_silver__pool_block_balances_ASSET_AMOUNT_USD.eedbf84e66", "test.maya_models.not_null_silver__pool_block_balances_BLOCK_ID.6a3b314f7c", "test.maya_models.not_null_silver__pool_block_balances_BLOCK_TIMESTAMP.9d9432e579", "test.maya_models.not_null_silver__pool_block_balances_POOL_NAME.95fecffc4b", "test.maya_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT.6394f07310", "test.maya_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD.e507c3e553", "test.maya_models.not_null_silver__pool_block_balances_cacao_AMOUNT.a4ce75ab63", "test.maya_models.not_null_silver__pool_block_balances_cacao_AMOUNT_USD.d6dbe01d1f"], "model.maya_models.silver__slash_points_events": ["model.maya_models.gov__fact_slash_points"], "model.maya_models.silver__constants": [], "model.maya_models.silver__new_node_events": ["model.maya_models.gov__fact_new_node_events"], "model.maya_models.core__fact_mayaname_change_events": ["test.maya_models.dbt_constraints_foreign_key_core__fact_mayaname_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cc1edff2ff", "test.maya_models.dbt_constraints_primary_key_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID.67404a158e", "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID.f1690ca9f9", "test.maya_models.negative_one_core__fact_mayaname_change_events_DIM_BLOCK_ID.b8b82e83de", "test.maya_models.not_null_core__fact_mayaname_change_events_BLOCK_TIMESTAMP.9ce56f203c", "test.maya_models.unique_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID.9f4f6034c6"], "model.maya_models.core__dim_block": ["model.maya_models.core__fact_mayaname_change_events", "model.maya_models.core__fact_set_mimir_events", "model.maya_models.core__fact_transfer_events", "model.maya_models.core__fact_transfers", "model.maya_models.defi__fact_active_vault_events", "model.maya_models.defi__fact_add_events", "model.maya_models.defi__fact_block_pool_depths", "model.maya_models.defi__fact_bond_actions", "model.maya_models.defi__fact_bond_events", "model.maya_models.defi__fact_failed_deposit_messages", "model.maya_models.defi__fact_fee_events", "model.maya_models.defi__fact_gas_events", "model.maya_models.defi__fact_inactive_vault_events", "model.maya_models.defi__fact_liquidity_actions", "model.maya_models.defi__fact_outbound_events", "model.maya_models.defi__fact_pending_liquidity_events", "model.maya_models.defi__fact_pool_balance_change_events", "model.maya_models.defi__fact_pool_block_balances", "model.maya_models.defi__fact_pool_events", "model.maya_models.defi__fact_refund_events", "model.maya_models.defi__fact_reserve_events", "model.maya_models.defi__fact_rewards_event_entries", "model.maya_models.defi__fact_rewards_events", "model.maya_models.defi__fact_send_messages", "model.maya_models.defi__fact_slash_liquidity_events", "model.maya_models.defi__fact_stake_events", "model.maya_models.defi__fact_streamling_swap_details_events", "model.maya_models.defi__fact_swaps", "model.maya_models.defi__fact_swaps_events", "model.maya_models.defi__fact_total_block_rewards", "model.maya_models.defi__fact_update_node_account_status_events", "model.maya_models.defi__fact_withdraw_events", "model.maya_models.gov__fact_new_node_events", "model.maya_models.gov__fact_set_ip_address_events", "model.maya_models.gov__fact_set_node_keys_events", "model.maya_models.gov__fact_set_version_events", "model.maya_models.gov__fact_slash_amounts", "model.maya_models.gov__fact_slash_points", "model.maya_models.gov__fact_validator_request_leave_events", "model.maya_models.price__fact_cacao_price", "test.maya_models.dbt_constraints_foreign_key_core__fact_mayaname_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cc1edff2ff", "test.maya_models.dbt_constraints_foreign_key_core__fact_set_mimir_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f0eb017ef2", "test.maya_models.dbt_constraints_foreign_key_core__fact_transfer_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.3478d94d61", "test.maya_models.dbt_constraints_foreign_key_core__fact_transfers_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e0e628ae42", "test.maya_models.dbt_constraints_foreign_key_defi__fact_active_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.dc9110e090", "test.maya_models.dbt_constraints_foreign_key_defi__fact_add_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.927064ee9c", "test.maya_models.dbt_constraints_foreign_key_defi__fact_block_pool_depths_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b693e5d66c", "test.maya_models.dbt_constraints_foreign_key_defi__fact_bond_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f00f5c0230", "test.maya_models.dbt_constraints_foreign_key_defi__fact_bond_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.54ca49d7f9", "test.maya_models.dbt_constraints_foreign_key_defi__fact_failed_deposit_messages_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ae79fc665a", "test.maya_models.dbt_constraints_foreign_key_defi__fact_fee_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7028a1c586", "test.maya_models.dbt_constraints_foreign_key_defi__fact_gas_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.d2b43cd8e7", "test.maya_models.dbt_constraints_foreign_key_defi__fact_inactive_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.52206550a8", "test.maya_models.dbt_constraints_foreign_key_defi__fact_liquidity_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.608597a4f4", "test.maya_models.dbt_constraints_foreign_key_defi__fact_outbound_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2aa6dc45d7", "test.maya_models.dbt_constraints_foreign_key_defi__fact_pending_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ca2e4eee90", "test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_balance_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1c20c73d64", "test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_block_balances_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.66031e6ec7", "test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.111d8db3ee", "test.maya_models.dbt_constraints_foreign_key_defi__fact_refund_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.46380231ed", "test.maya_models.dbt_constraints_foreign_key_defi__fact_reserve_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.02187e1ac9", "test.maya_models.dbt_constraints_foreign_key_defi__fact_rewards_event_entries_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f384372f38", "test.maya_models.dbt_constraints_foreign_key_defi__fact_rewards_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e2e57eb147", "test.maya_models.dbt_constraints_foreign_key_defi__fact_send_messages_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1adb347953", "test.maya_models.dbt_constraints_foreign_key_defi__fact_slash_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0acbf7ba85", "test.maya_models.dbt_constraints_foreign_key_defi__fact_stake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.59228e8edb", "test.maya_models.dbt_constraints_foreign_key_defi__fact_streamling_swap_details_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1d5bc115b2", "test.maya_models.dbt_constraints_foreign_key_defi__fact_swaps_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.6b212551fd", "test.maya_models.dbt_constraints_foreign_key_defi__fact_swaps_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.6efb37c54a", "test.maya_models.dbt_constraints_foreign_key_defi__fact_total_block_rewards_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.10797bc02d", "test.maya_models.dbt_constraints_foreign_key_defi__fact_update_node_account_status_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ff3ca4dfef", "test.maya_models.dbt_constraints_foreign_key_defi__fact_withdraw_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c30b39b2dd", "test.maya_models.dbt_constraints_foreign_key_gov__fact_new_node_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.db84a142ae", "test.maya_models.dbt_constraints_foreign_key_gov__fact_set_ip_address_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c760962472", "test.maya_models.dbt_constraints_foreign_key_gov__fact_set_node_keys_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b1e2dcf0f1", "test.maya_models.dbt_constraints_foreign_key_gov__fact_set_version_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f9e30bbb44", "test.maya_models.dbt_constraints_foreign_key_gov__fact_slash_amounts_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8100e32bac", "test.maya_models.dbt_constraints_foreign_key_gov__fact_slash_points_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ee65c78e29", "test.maya_models.dbt_constraints_foreign_key_gov__fact_validator_request_leave_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7203fca5dd", "test.maya_models.dbt_constraints_foreign_key_price__fact_cacao_price_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.86ae6c3419", "test.maya_models.dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.6c2c5b98b3", "test.maya_models.dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID.3b69086dc7", "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1.412ac293c7", "test.maya_models.not_null_core__dim_block_BLOCK_DATE.fcae0dfd62", "test.maya_models.not_null_core__dim_block_BLOCK_HOUR.4bdf258b00", "test.maya_models.not_null_core__dim_block_BLOCK_ID.4093a445bc", "test.maya_models.not_null_core__dim_block_BLOCK_TIMESTAMP.0e822266b8", "test.maya_models.not_null_core__dim_block_BLOCK_WEEK.bd31abb003", "test.maya_models.not_null_core__dim_block_HASH.b08299a937", "test.maya_models.not_null_core__dim_block_TIMESTAMP.2e8fff01ed"], "model.maya_models.core__fact_set_mimir_events": ["test.maya_models.dbt_constraints_foreign_key_core__fact_set_mimir_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f0eb017ef2", "test.maya_models.dbt_constraints_primary_key_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.9f1768474c", "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.ae85001246", "test.maya_models.negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID.f97f1b5336", "test.maya_models.not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP.5ba3385f5b", "test.maya_models.unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.449f05e794"], "model.maya_models.core__fact_transfers": ["test.maya_models.dbt_constraints_foreign_key_core__fact_transfers_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e0e628ae42", "test.maya_models.dbt_constraints_primary_key_core__fact_transfers_FACT_TRANSFERS_ID.0e37c8cbc3", "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID.7e9e26b3be", "test.maya_models.negative_one_core__fact_transfers_DIM_BLOCK_ID.09484decc3", "test.maya_models.not_null_core__fact_transfers_ASSET.77d44cdd84", "test.maya_models.not_null_core__fact_transfers_BLOCK_TIMESTAMP.bdf9b015dd", "test.maya_models.not_null_core__fact_transfers_FROM_ADDRESS.b75e3a345a", "test.maya_models.not_null_core__fact_transfers_TO_ADDRESS.b8db4a5a70", "test.maya_models.not_null_core__fact_transfers_cacao_AMOUNT.37b422cd3d", "test.maya_models.not_null_core__fact_transfers_cacao_AMOUNT_USD.ebd0803995", "test.maya_models.unique_core__fact_transfers_FACT_TRANSFERS_ID.385cd38e6c"], "model.maya_models.core__dim_midgard": [], "model.maya_models.core__fact_transfer_events": ["test.maya_models.dbt_constraints_foreign_key_core__fact_transfer_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.3478d94d61", "test.maya_models.dbt_constraints_primary_key_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.2d391ee070", "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b834b16336", "test.maya_models.negative_one_core__fact_transfer_events_DIM_BLOCK_ID.2e128858c5", "test.maya_models.not_null_core__fact_transfer_events_AMOUNT_E8.4fe1565b1c", "test.maya_models.not_null_core__fact_transfer_events_ASSET.bacb47e2e3", "test.maya_models.not_null_core__fact_transfer_events_BLOCK_TIMESTAMP.307906b318", "test.maya_models.not_null_core__fact_transfer_events_FROM_ADDRESS.2e1a952935", "test.maya_models.not_null_core__fact_transfer_events_TO_ADDRESS.14f29de988", "test.maya_models.unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b97c8780e8"], "model.maya_models.price__fact_cacao_price": ["test.maya_models.dbt_constraints_foreign_key_price__fact_cacao_price_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.86ae6c3419", "test.maya_models.dbt_constraints_primary_key_price__fact_cacao_price_FACT_cacao_PRICE_ID.c5f3967993", "test.maya_models.dbt_expectations_expect_column_to_exist_price__fact_cacao_price_FACT_cacao_PRICE_ID.f9b7879357", "test.maya_models.negative_one_price__fact_cacao_price_DIM_BLOCK_ID.76c72bb6e6", "test.maya_models.not_null_price__fact_cacao_price_BLOCK_TIMESTAMP.bb1afdc573", "test.maya_models.unique_price__fact_cacao_price_FACT_cacao_PRICE_ID.0e01ec76f4"], "model.maya_models.defi__fact_daily_earnings": ["test.maya_models.dbt_constraints_primary_key_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.405108b886", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.4e969deb63", "test.maya_models.not_null_defi__fact_daily_earnings_BLOCK_REWARDS.b126b4b314", "test.maya_models.not_null_defi__fact_daily_earnings_BLOCK_REWARDS_USD.107e54d6bb", "test.maya_models.not_null_defi__fact_daily_earnings_DAY.3ecfd9b0ee", "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_NODES.147efdb208", "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_NODES_USD.05d14a2dcd", "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_POOLS.fbeff5d134", "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_POOLS_USD.39dea1c2bb", "test.maya_models.not_null_defi__fact_daily_earnings_LIQUIDITY_FEES.d5cf335416", "test.maya_models.not_null_defi__fact_daily_earnings_LIQUIDITY_FEES_USD.82b7149fd9", "test.maya_models.not_null_defi__fact_daily_earnings_TOTAL_EARNINGS.66fbf6afc0", "test.maya_models.not_null_defi__fact_daily_earnings_TOTAL_EARNINGS_USD.efaf0622ac", "test.maya_models.unique_defi__fact_daily_earnings_DAY.35299fa0f2", "test.maya_models.unique_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.1b0a6fbdd6"], "model.maya_models.defi__fact_swaps_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_swaps_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.6efb37c54a", "test.maya_models.dbt_constraints_primary_key_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID.bd110e1762", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID.e8a3be544e", "test.maya_models.negative_one_defi__fact_swaps_events_DIM_BLOCK_ID.32d0060a7d", "test.maya_models.not_null_defi__fact_swaps_events_BLOCKCHAIN.a7bfef9416", "test.maya_models.not_null_defi__fact_swaps_events_BLOCK_TIMESTAMP.152a60ae05", "test.maya_models.not_null_defi__fact_swaps_events_FROM_ADDRESS.f438dceaed", "test.maya_models.not_null_defi__fact_swaps_events_FROM_ASSET.d1bd099314", "test.maya_models.not_null_defi__fact_swaps_events_FROM_E8.e5316aeab9", "test.maya_models.not_null_defi__fact_swaps_events_LIQ_FEE_E8.8ab774160b", "test.maya_models.not_null_defi__fact_swaps_events_LIQ_FEE_IN_cacao_E8.c9dad22e6c", "test.maya_models.not_null_defi__fact_swaps_events_MEMO.e737d61e21", "test.maya_models.not_null_defi__fact_swaps_events_POOL_NAME.47817b05e7", "test.maya_models.not_null_defi__fact_swaps_events_SWAP_SLIP_BP.83363ed081", "test.maya_models.not_null_defi__fact_swaps_events_TO_ADDRESS.0fab10cf01", "test.maya_models.not_null_defi__fact_swaps_events_TO_ASSET.d10e7cab75", "test.maya_models.not_null_defi__fact_swaps_events_TO_E8.ba0a8505a0", "test.maya_models.not_null_defi__fact_swaps_events_TO_E8_MIN.f257749398", "test.maya_models.not_null_defi__fact_swaps_events_TX_ID.769f694135", "test.maya_models.not_null_defi__fact_swaps_events__DIRECTION.6ab3030ca2", "test.maya_models.unique_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID.275b663f75"], "model.maya_models.defi__fact_withdraw_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_withdraw_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c30b39b2dd", "test.maya_models.dbt_constraints_primary_key_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID.2abb09d2d0", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID.1f26ff2cfb", "test.maya_models.negative_one_defi__fact_withdraw_events_DIM_BLOCK_ID.5b55c401d8", "test.maya_models.not_null_defi__fact_withdraw_events_ASSET_E8.d0be5ed1a4", "test.maya_models.not_null_defi__fact_withdraw_events_ASYMMETRY.27f7ecb3e2", "test.maya_models.not_null_defi__fact_withdraw_events_BASIS_POINTS.a01b4d3168", "test.maya_models.not_null_defi__fact_withdraw_events_BLOCKCHAIN.5f12fcea5a", "test.maya_models.not_null_defi__fact_withdraw_events_BLOCK_TIMESTAMP.e2e54ceae9", "test.maya_models.not_null_defi__fact_withdraw_events_EMIT_ASSET_E8.5c62cbff98", "test.maya_models.not_null_defi__fact_withdraw_events_EMIT_cacao_E8.4ce153e62c", "test.maya_models.not_null_defi__fact_withdraw_events_FROM_ADDRESS.fb0510a262", "test.maya_models.not_null_defi__fact_withdraw_events_IMP_LOSS_PROTECTION_E8.b061882c2b", "test.maya_models.not_null_defi__fact_withdraw_events_MEMO.670b33bd28", "test.maya_models.not_null_defi__fact_withdraw_events_POOL_NAME.7816baa3be", "test.maya_models.not_null_defi__fact_withdraw_events_STAKE_UNITS.4940151023", "test.maya_models.not_null_defi__fact_withdraw_events_TO_ADDRESS.f4aadfb9bb", "test.maya_models.not_null_defi__fact_withdraw_events_TX_ID.e7d3e3beef", "test.maya_models.not_null_defi__fact_withdraw_events__EMIT_ASSET_IN_cacao_E8.75c9544a1e", "test.maya_models.unique_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID.651eb6dfe4"], "model.maya_models.defi__fact_block_rewards": ["test.maya_models.dbt_constraints_primary_key_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID.6fb653e543", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID.f26dd135e0", "test.maya_models.not_null_defi__fact_block_rewards_BLOCK_REWARDS.a92137996e", "test.maya_models.not_null_defi__fact_block_rewards_BONDING_EARNINGS.21f4a2d782", "test.maya_models.not_null_defi__fact_block_rewards_DAY.7fa63155fc", "test.maya_models.not_null_defi__fact_block_rewards_EARNINGS.6734c56332", "test.maya_models.not_null_defi__fact_block_rewards_LIQUIDITY_EARNINGS.6e711b1025", "test.maya_models.not_null_defi__fact_block_rewards_LIQUIDITY_FEE.dbbf334ba1", "test.maya_models.unique_defi__fact_block_rewards_DAY.6963e728a5", "test.maya_models.unique_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID.d5d72bba07"], "model.maya_models.defi__fact_outbound_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_outbound_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2aa6dc45d7", "test.maya_models.dbt_constraints_primary_key_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.56a7c40cd9", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.c429e7e114", "test.maya_models.negative_one_defi__fact_outbound_events_DIM_BLOCK_ID.c4dc4c2e5b", "test.maya_models.not_null_defi__fact_outbound_events_BLOCK_TIMESTAMP.ba5c7a7372", "test.maya_models.unique_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.7ce8b4da38"], "model.maya_models.defi__fact_pending_liquidity_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_pending_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ca2e4eee90", "test.maya_models.dbt_constraints_primary_key_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.6a659e8b12", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.baab1e87b2", "test.maya_models.negative_one_defi__fact_pending_liquidity_events_DIM_BLOCK_ID.ab0617b986", "test.maya_models.not_null_defi__fact_pending_liquidity_events_BLOCK_TIMESTAMP.c703e15c52", "test.maya_models.unique_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.6793a43b6b"], "model.maya_models.defi__fact_refund_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_refund_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.46380231ed", "test.maya_models.dbt_constraints_primary_key_defi__fact_refund_events_FACT_REFUND_EVENTS_ID.c03b0b240a", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_refund_events_FACT_REFUND_EVENTS_ID.e60a9cc49f", "test.maya_models.negative_one_defi__fact_refund_events_DIM_BLOCK_ID.3c1c234ab9", "test.maya_models.not_null_defi__fact_refund_events_BLOCK_TIMESTAMP.34d8aabf5a", "test.maya_models.unique_defi__fact_refund_events_FACT_REFUND_EVENTS_ID.a016111425"], "model.maya_models.defi__fact_gas_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_gas_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.d2b43cd8e7", "test.maya_models.dbt_constraints_primary_key_defi__fact_gas_events_FACT_GAS_EVENTS_ID.c0ced5df45", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_gas_events_FACT_GAS_EVENTS_ID.bb047375bf", "test.maya_models.negative_one_defi__fact_gas_events_DIM_BLOCK_ID.2593523927", "test.maya_models.not_null_defi__fact_gas_events_ASSET.29cdba3bea", "test.maya_models.not_null_defi__fact_gas_events_ASSET_E8.07160f6bba", "test.maya_models.not_null_defi__fact_gas_events_BLOCK_TIMESTAMP.18a33f6f4d", "test.maya_models.not_null_defi__fact_gas_events_TX_COUNT.b58d3dfec7", "test.maya_models.not_null_defi__fact_gas_events_cacao_E8.fcef1e99c1", "test.maya_models.unique_defi__fact_gas_events_FACT_GAS_EVENTS_ID.7c04247747"], "model.maya_models.defi__fact_bond_actions": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_bond_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f00f5c0230", "test.maya_models.dbt_constraints_primary_key_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID.b04f02a38c", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID.f75bda8238", "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__fact_bond_actions_BLOCK_TIMESTAMP__day__4.fe7e158561", "test.maya_models.negative_one_defi__fact_bond_actions_DIM_BLOCK_ID.615245fbb3", "test.maya_models.not_null_defi__fact_bond_actions_ASSET_AMOUNT.8de4adaec4", "test.maya_models.not_null_defi__fact_bond_actions_ASSET_USD.4eb112cfa0", "test.maya_models.not_null_defi__fact_bond_actions_BLOCKCHAIN.96b4414efb", "test.maya_models.not_null_defi__fact_bond_actions_BLOCK_TIMESTAMP.7a24d4f258", "test.maya_models.not_null_defi__fact_bond_actions_FROM_ADDRESS.d62d81333f", "test.maya_models.not_null_defi__fact_bond_actions_TO_ADDRESS.03e2a4ee17", "test.maya_models.not_null_defi__fact_bond_actions_TX_ID.5e9f18d02d", "test.maya_models.not_null_defi__fact_bond_actions_bond_type.22b01f3b86", "test.maya_models.unique_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID.750a1a0be6"], "model.maya_models.defi__fact_streamling_swap_details_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_streamling_swap_details_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1d5bc115b2", "test.maya_models.dbt_constraints_primary_key_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID.731c12e564", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID.50d38af79b", "test.maya_models.negative_one_defi__fact_streamling_swap_details_events_DIM_BLOCK_ID.51fbe7f43e", "test.maya_models.not_null_defi__fact_streamling_swap_details_events_BLOCK_TIMESTAMP.5598932a8c", "test.maya_models.unique_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID.d77d5d9d53"], "model.maya_models.defi__fact_inactive_vault_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_inactive_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.52206550a8", "test.maya_models.dbt_constraints_primary_key_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.0d615f85a1", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.16f98389c1", "test.maya_models.negative_one_defi__fact_inactive_vault_events_DIM_BLOCK_ID.5429b32093", "test.maya_models.not_null_defi__fact_inactive_vault_events_ADD_ASGARD_ADDRESS.76e93119e7", "test.maya_models.not_null_defi__fact_inactive_vault_events_BLOCK_TIMESTAMP.f697396e3b", "test.maya_models.unique_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.d1b9a47336"], "model.maya_models.defi__fact_rewards_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_rewards_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e2e57eb147", "test.maya_models.dbt_constraints_primary_key_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID.a30d4540ea", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID.72b7656211", "test.maya_models.negative_one_defi__fact_rewards_events_DIM_BLOCK_ID.8645c1eaa1", "test.maya_models.not_null_defi__fact_rewards_events_BLOCK_TIMESTAMP.60668786c2", "test.maya_models.unique_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID.1194862d02"], "model.maya_models.defi__fact_bond_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_bond_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.54ca49d7f9", "test.maya_models.dbt_constraints_primary_key_defi__fact_bond_events_FACT_BOND_EVENTS_ID.54da2fbbeb", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_bond_events_FACT_BOND_EVENTS_ID.a5f50df30f", "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__fact_bond_events_BLOCK_TIMESTAMP__day__4.a72035b010", "test.maya_models.negative_one_defi__fact_bond_events_DIM_BLOCK_ID.b035c08edd", "test.maya_models.not_null_defi__fact_bond_events_ASSET_E8.2a4a2e8c40", "test.maya_models.not_null_defi__fact_bond_events_BLOCKCHAIN.cf9fb111ab", "test.maya_models.not_null_defi__fact_bond_events_BLOCK_TIMESTAMP.ca66b0639c", "test.maya_models.not_null_defi__fact_bond_events_E8.7f6d200479", "test.maya_models.not_null_defi__fact_bond_events_FROM_ADDRESS.d44d5b061a", "test.maya_models.not_null_defi__fact_bond_events_MEMO.bd8692f383", "test.maya_models.not_null_defi__fact_bond_events_TO_ADDRESS.fcaf91ad33", "test.maya_models.not_null_defi__fact_bond_events_TX_ID.2f9aabd8d8", "test.maya_models.not_null_defi__fact_bond_events_bond_type.544f931184", "test.maya_models.unique_defi__fact_bond_events_FACT_BOND_EVENTS_ID.8280804d98"], "model.maya_models.defi__fact_update_node_account_status_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_update_node_account_status_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ff3ca4dfef", "test.maya_models.dbt_constraints_primary_key_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.e4286d8c42", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.774a6e2a92", "test.maya_models.negative_one_defi__fact_update_node_account_status_events_DIM_BLOCK_ID.2668c31a3f", "test.maya_models.not_null_defi__fact_update_node_account_status_events_BLOCK_TIMESTAMP.2e391b047b", "test.maya_models.not_null_defi__fact_update_node_account_status_events_CURRENT_STATUS.d76b33c0c7", "test.maya_models.not_null_defi__fact_update_node_account_status_events_FORMER_STATUS.b4bb08ccb0", "test.maya_models.not_null_defi__fact_update_node_account_status_events_NODE_ADDRESS.13852b9c2e", "test.maya_models.unique_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.955bf5f1be"], "model.maya_models.defi__fact_pool_block_statistics": ["test.maya_models.dbt_constraints_primary_key_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.a0f8192d8b", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.ea9e1f3b9b", "test.maya_models.unique_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.59e4ff0377"], "model.maya_models.defi__fact_failed_deposit_messages": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_failed_deposit_messages_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ae79fc665a", "test.maya_models.dbt_constraints_primary_key_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID.5222579419", "test.maya_models.negative_one_defi__fact_failed_deposit_messages_DIM_BLOCK_ID.1a15b7f7ea", "test.maya_models.not_null_defi__fact_failed_deposit_messages_AMOUNT_E8.b99a38df0a", "test.maya_models.not_null_defi__fact_failed_deposit_messages_ASSET.9698d44bd6", "test.maya_models.not_null_defi__fact_failed_deposit_messages_BLOCK_TIMESTAMP.df465b93f7", "test.maya_models.not_null_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID.98d9a7a40e", "test.maya_models.unique_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID.0695d1704a"], "model.maya_models.defi__fact_pool_block_fees": ["test.maya_models.dbt_constraints_primary_key_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.356350731a", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.de667c6ed6", "test.maya_models.not_null_defi__fact_pool_block_fees_DAY.5196d903a4", "test.maya_models.unique_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.ee55d40c08"], "model.maya_models.defi__fact_pool_balance_change_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_balance_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1c20c73d64", "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.797e263c54", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.d2ddaebdfc", "test.maya_models.negative_one_defi__fact_pool_balance_change_events_DIM_BLOCK_ID.8cc70ad2c3", "test.maya_models.not_null_defi__fact_pool_balance_change_events_BLOCK_TIMESTAMP.fd61518b64", "test.maya_models.unique_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.a9f6a259b3"], "model.maya_models.defi__fact_reserve_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_reserve_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.02187e1ac9", "test.maya_models.dbt_constraints_primary_key_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID.bc7c918b28", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID.8a326356fc", "test.maya_models.negative_one_defi__fact_reserve_events_DIM_BLOCK_ID.f394603e35", "test.maya_models.not_null_defi__fact_reserve_events_BLOCK_TIMESTAMP.2034989c09", "test.maya_models.unique_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID.276156f1e1"], "model.maya_models.defi__fact_stake_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_stake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.59228e8edb", "test.maya_models.dbt_constraints_primary_key_defi__fact_stake_events_FACT_STAKE_EVENTS_ID.aa005ffc15", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_stake_events_FACT_STAKE_EVENTS_ID.9b7786f345", "test.maya_models.negative_one_defi__fact_stake_events_DIM_BLOCK_ID.7c0bfe48d7", "test.maya_models.not_null_defi__fact_stake_events_ASSET_E8.3ef47d7e7f", "test.maya_models.not_null_defi__fact_stake_events_BLOCK_TIMESTAMP.efe6e00a44", "test.maya_models.not_null_defi__fact_stake_events_POOL_NAME.efc87f2e2f", "test.maya_models.not_null_defi__fact_stake_events_STAKE_UNITS.7dd72be974", "test.maya_models.not_null_defi__fact_stake_events__ASSET_IN_cacao_E8.4b8f2965f9", "test.maya_models.not_null_defi__fact_stake_events_cacao_E8.1c41c93867", "test.maya_models.unique_defi__fact_stake_events_FACT_STAKE_EVENTS_ID.235ec51a23"], "model.maya_models.defi__fact_slash_liquidity_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_slash_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0acbf7ba85", "test.maya_models.dbt_constraints_primary_key_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID.2b04027532", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID.a45d16f999", "test.maya_models.negative_one_defi__fact_slash_liquidity_events_DIM_BLOCK_ID.0f21ab898d", "test.maya_models.not_null_defi__fact_slash_liquidity_events_BLOCK_TIMESTAMP.5b14c39cd8", "test.maya_models.unique_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID.a983479ef3"], "model.maya_models.defi__fact_swaps": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_swaps_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.6b212551fd", "test.maya_models.dbt_constraints_primary_key_defi__fact_swaps_FACT_SWAPS_ID.9c12307bcb", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FACT_SWAPS_ID.65b78c9b2b", "test.maya_models.negative_one_defi__fact_swaps_DIM_BLOCK_ID.a0b8b6777c", "test.maya_models.not_null_defi__fact_swaps_BLOCK_TIMESTAMP.075d054d65", "test.maya_models.unique_defi__fact_swaps_FACT_SWAPS_ID.ef29d48647"], "model.maya_models.defi__fact_fee_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_fee_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7028a1c586", "test.maya_models.dbt_constraints_primary_key_defi__fact_fee_events_FACT_FEE_EVENTS_ID.4f9bb0aae9", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_fee_events_FACT_FEE_EVENTS_ID.b1c98cbf26", "test.maya_models.negative_one_defi__fact_fee_events_DIM_BLOCK_ID.48e400d73b", "test.maya_models.not_null_defi__fact_fee_events_ASSET.58dfc939f5", "test.maya_models.not_null_defi__fact_fee_events_ASSET_E8.ec1824433c", "test.maya_models.not_null_defi__fact_fee_events_BLOCK_TIMESTAMP.70a94fec54", "test.maya_models.not_null_defi__fact_fee_events_POOL_DEDUCT.75679a84a7", "test.maya_models.not_null_defi__fact_fee_events_TX_ID.e74d21d77e", "test.maya_models.unique_defi__fact_fee_events_FACT_FEE_EVENTS_ID.cbb6dfce5c"], "model.maya_models.defi__fact_block_pool_depths": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_block_pool_depths_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b693e5d66c", "test.maya_models.dbt_constraints_primary_key_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.516d84511a", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.b5bb9290e5", "test.maya_models.negative_one_defi__fact_block_pool_depths_DIM_BLOCK_ID.5c18572103", "test.maya_models.not_null_defi__fact_block_pool_depths_ASSET_E8.18864edf3b", "test.maya_models.not_null_defi__fact_block_pool_depths_BLOCK_TIMESTAMP.289de889f0", "test.maya_models.not_null_defi__fact_block_pool_depths_POOL_NAME.c9b3847f9a", "test.maya_models.not_null_defi__fact_block_pool_depths_SYNTH_E8.a148b6fdac", "test.maya_models.not_null_defi__fact_block_pool_depths_cacao_E8.940c4df3e3", "test.maya_models.unique_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.d893b0b8a0"], "model.maya_models.defi__fact_add_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_add_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.927064ee9c", "test.maya_models.dbt_constraints_primary_key_defi__fact_add_events_FACT_ADD_EVENTS_ID.e2c050e363", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_add_events_FACT_ADD_EVENTS_ID.dcfa45dc5c", "test.maya_models.negative_one_defi__fact_add_events_DIM_BLOCK_ID.b6ac5d06b5", "test.maya_models.not_null_defi__fact_add_events_ASSET_E8.366017cb0d", "test.maya_models.not_null_defi__fact_add_events_BLOCKCHAIN.00aaf6b4cf", "test.maya_models.not_null_defi__fact_add_events_BLOCK_TIMESTAMP.06d09f2202", "test.maya_models.not_null_defi__fact_add_events_FROM_ADDRESS.c69fd5096c", "test.maya_models.not_null_defi__fact_add_events_MEMO.10fc5a9c70", "test.maya_models.not_null_defi__fact_add_events_POOL_NAME.e418ec498a", "test.maya_models.not_null_defi__fact_add_events_TO_ADDRESS.5249804a36", "test.maya_models.not_null_defi__fact_add_events_cacao_E8.980c31d51a", "test.maya_models.unique_defi__fact_add_events_FACT_ADD_EVENTS_ID.f9bab79293"], "model.maya_models.defi__fact_send_messages": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_send_messages_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1adb347953", "test.maya_models.dbt_constraints_primary_key_defi__fact_send_messages_FACT_SEND_MESSAGES_ID.8741e5d595", "test.maya_models.negative_one_defi__fact_send_messages_DIM_BLOCK_ID.c58daf7759", "test.maya_models.not_null_defi__fact_send_messages_BLOCK_TIMESTAMP.aa6c02bd54", "test.maya_models.not_null_defi__fact_send_messages_FACT_SEND_MESSAGES_ID.da36ef8cad"], "model.maya_models.defi__fact_liquidity_actions": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_liquidity_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.608597a4f4", "test.maya_models.dbt_constraints_primary_key_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.127d2c721c", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.1e8f9391c2", "test.maya_models.negative_one_defi__fact_liquidity_actions_DIM_BLOCK_ID.64fdcec13b", "test.maya_models.not_null_defi__fact_liquidity_actions_ASSET_AMOUNT.bcd1c6e65b", "test.maya_models.not_null_defi__fact_liquidity_actions_BLOCK_TIMESTAMP.9a65b82adc", "test.maya_models.not_null_defi__fact_liquidity_actions_LP_ACTION.888ababa2b", "test.maya_models.not_null_defi__fact_liquidity_actions_POOL_NAME.798a435875", "test.maya_models.not_null_defi__fact_liquidity_actions_STAKE_UNITS.407cd789d6", "test.maya_models.not_null_defi__fact_liquidity_actions_cacao_AMOUNT.69b767546b", "test.maya_models.not_null_defi__fact_liquidity_actions_cacao_AMOUNT_USD.5b994381e1", "test.maya_models.unique_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.3c4c48acd9"], "model.maya_models.defi__fact_pool_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.111d8db3ee", "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_events_FACT_POOL_EVENTS_ID.d9300b6771", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_events_FACT_POOL_EVENTS_ID.9ebc09a3db", "test.maya_models.negative_one_defi__fact_pool_events_DIM_BLOCK_ID.5c5bf65270", "test.maya_models.not_null_defi__fact_pool_events_BLOCK_TIMESTAMP.22275a664b", "test.maya_models.unique_defi__fact_pool_events_FACT_POOL_EVENTS_ID.a88bad6268"], "model.maya_models.defi__fact_active_vault_events": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_active_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.dc9110e090", "test.maya_models.dbt_constraints_primary_key_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.8da304f0fc", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.880e905612", "test.maya_models.negative_one_defi__fact_active_vault_events_DIM_BLOCK_ID.4a790deb55", "test.maya_models.not_null_defi__fact_active_vault_events_ADD_ASGARD_ADDR.2b058b6553", "test.maya_models.not_null_defi__fact_active_vault_events_BLOCK_TIMESTAMP.4cc71715c7", "test.maya_models.unique_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.3aaa103dd9"], "model.maya_models.defi__fact_pool_block_balances": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_block_balances_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.66031e6ec7", "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.24a399277f", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.407d4f6cb6", "test.maya_models.negative_one_defi__fact_pool_block_balances_DIM_BLOCK_ID.2418ce23a3", "test.maya_models.not_null_defi__fact_pool_block_balances_ASSET_AMOUNT.4c11b2c4dc", "test.maya_models.not_null_defi__fact_pool_block_balances_BLOCK_TIMESTAMP.57a565d05f", "test.maya_models.not_null_defi__fact_pool_block_balances_POOL_NAME.05a1892218", "test.maya_models.not_null_defi__fact_pool_block_balances_SYNTH_AMOUNT.dd1d486159", "test.maya_models.not_null_defi__fact_pool_block_balances_cacao_AMOUNT.cb25b0b071", "test.maya_models.not_null_defi__fact_pool_block_balances_cacao_AMOUNT_USD.5db52684f2", "test.maya_models.unique_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.c9074e5b2a"], "model.maya_models.defi__fact_total_value_locked": ["test.maya_models.dbt_constraints_primary_key_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.ac35fbd215", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.23e51de8c7", "test.maya_models.not_null_defi__fact_total_value_locked_DAY.fe0da8741a", "test.maya_models.unique_defi__fact_total_value_locked_DAY.54d8e130aa", "test.maya_models.unique_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.7c08aabdf6"], "model.maya_models.defi__fact_daily_tvl": ["test.maya_models.dbt_constraints_primary_key_defi__fact_daily_tvl_FACT_DAILY_TVL_ID.f657fdd70c", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_daily_tvl_FACT_DAILY_TVL_ID.1ae493b505", "test.maya_models.not_null_defi__fact_daily_tvl_DAY.6793a4c86b", "test.maya_models.unique_defi__fact_daily_tvl_FACT_DAILY_TVL_ID.4720396096"], "model.maya_models.defi__fact_daily_pool_stats": ["test.maya_models.dbt_constraints_primary_key_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.bd74e047c0", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.df35fa9fd3", "test.maya_models.not_null_defi__fact_daily_pool_stats_DAY.134c4023bc", "test.maya_models.unique_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.0e5e688f58"], "model.maya_models.defi__fact_total_block_rewards": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_total_block_rewards_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.10797bc02d", "test.maya_models.dbt_constraints_primary_key_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.1279348063", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.908c6385f1", "test.maya_models.negative_one_defi__fact_total_block_rewards_DIM_BLOCK_ID.875d3d7233", "test.maya_models.not_null_defi__fact_total_block_rewards_BLOCK_TIMESTAMP.b82d9032fc", "test.maya_models.not_null_defi__fact_total_block_rewards_REWARD_ENTITY.3ee825413f", "test.maya_models.not_null_defi__fact_total_block_rewards_cacao_AMOUNT.b50618c8d2", "test.maya_models.unique_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.97eb93b600"], "model.maya_models.defi__fact_rewards_event_entries": ["test.maya_models.dbt_constraints_foreign_key_defi__fact_rewards_event_entries_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f384372f38", "test.maya_models.dbt_constraints_primary_key_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.797b705be0", "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.60587db32e", "test.maya_models.negative_one_defi__fact_rewards_event_entries_DIM_BLOCK_ID.ae74184dc0", "test.maya_models.not_null_defi__fact_rewards_event_entries_BLOCK_TIMESTAMP.390c2d3861", "test.maya_models.unique_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.c1c1880829"], "model.maya_models.gov__fact_set_node_keys_events": ["test.maya_models.dbt_constraints_foreign_key_gov__fact_set_node_keys_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b1e2dcf0f1", "test.maya_models.dbt_constraints_primary_key_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.8a3255067b", "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.5cc3f7cdc4", "test.maya_models.negative_one_gov__fact_set_node_keys_events_DIM_BLOCK_ID.e78644b2d2", "test.maya_models.not_null_gov__fact_set_node_keys_events_BLOCK_TIMESTAMP.ebec22d08a", "test.maya_models.unique_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.8880e9c1e4"], "model.maya_models.gov__fact_new_node_events": ["test.maya_models.dbt_constraints_foreign_key_gov__fact_new_node_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.db84a142ae", "test.maya_models.dbt_constraints_primary_key_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.f1563548b6", "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.74e7f39f87", "test.maya_models.negative_one_gov__fact_new_node_events_DIM_BLOCK_ID.7e9a4f4df8", "test.maya_models.not_null_gov__fact_new_node_events_BLOCK_TIMESTAMP.00db5f265e", "test.maya_models.not_null_gov__fact_new_node_events_NODE_ADDRESS.acfc5e9153", "test.maya_models.unique_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.5818fff587"], "model.maya_models.gov__fact_slash_points": ["test.maya_models.dbt_constraints_foreign_key_gov__fact_slash_points_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ee65c78e29", "test.maya_models.dbt_constraints_primary_key_gov__fact_slash_points_FACT_SLASH_POINTS_ID.dd103daf92", "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_slash_points_FACT_SLASH_POINTS_ID.8d109c0e13", "test.maya_models.negative_one_gov__fact_slash_points_DIM_BLOCK_ID.3e57f036d1", "test.maya_models.not_null_gov__fact_slash_points_BLOCK_TIMESTAMP.2399b1a318", "test.maya_models.unique_gov__fact_slash_points_FACT_SLASH_POINTS_ID.209781dbb5"], "model.maya_models.gov__fact_validator_request_leave_events": ["test.maya_models.dbt_constraints_foreign_key_gov__fact_validator_request_leave_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7203fca5dd", "test.maya_models.dbt_constraints_primary_key_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.0f41863c47", "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.ea06e8b3eb", "test.maya_models.negative_one_gov__fact_validator_request_leave_events_DIM_BLOCK_ID.68c2b3f504", "test.maya_models.not_null_gov__fact_validator_request_leave_events_BLOCK_TIMESTAMP.28cd20e919", "test.maya_models.not_null_gov__fact_validator_request_leave_events_FROM_ADDRESS.fc1459d259", "test.maya_models.not_null_gov__fact_validator_request_leave_events_NODE_ADDRESS.85babe010a", "test.maya_models.not_null_gov__fact_validator_request_leave_events_TX_ID.44237f576e", "test.maya_models.unique_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.37fdb42c72"], "model.maya_models.gov__fact_set_version_events": ["test.maya_models.dbt_constraints_foreign_key_gov__fact_set_version_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f9e30bbb44", "test.maya_models.dbt_constraints_primary_key_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.cd19861ffb", "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.a23f25ab20", "test.maya_models.negative_one_gov__fact_set_version_events_DIM_BLOCK_ID.219f154265", "test.maya_models.not_null_gov__fact_set_version_events_BLOCK_TIMESTAMP.98b94bb2b0", "test.maya_models.unique_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.b00d92c74c"], "model.maya_models.gov__fact_slash_amounts": ["test.maya_models.dbt_constraints_foreign_key_gov__fact_slash_amounts_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8100e32bac", "test.maya_models.dbt_constraints_primary_key_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.11ef3a37b6", "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.d6b2eb9e82", "test.maya_models.negative_one_gov__fact_slash_amounts_DIM_BLOCK_ID.24c3e556a0", "test.maya_models.not_null_gov__fact_slash_amounts_BLOCK_TIMESTAMP.df74c36c69", "test.maya_models.unique_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.cf41247be9"], "model.maya_models.gov__fact_set_ip_address_events": ["test.maya_models.dbt_constraints_foreign_key_gov__fact_set_ip_address_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c760962472", "test.maya_models.dbt_constraints_primary_key_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.2eb1ce9651", "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.ba1a7910fd", "test.maya_models.negative_one_gov__fact_set_ip_address_events_DIM_BLOCK_ID.f2d9a1d444", "test.maya_models.not_null_gov__fact_set_ip_address_events_BLOCK_TIMESTAMP.462fe32242", "test.maya_models.unique_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.036066cad1"], "operation.maya_models.maya_models-on-run-start-0": [], "operation.maya_models.maya_models-on-run-start-1": [], "model.fsc_utils._datashare___create_udfs": [], "model.fsc_utils._datashare___create_gold": [], "model.livequery_base.live__allow_list": [], "model.livequery_base._live": ["model.livequery_base.live"], "model.livequery_base.utils": ["model.livequery_base.live", "test.livequery_base.test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call.3395d64fdc", "test.livequery_base.test_utils__udf_binary_to_int.ffcc7fc010", "test.livequery_base.test_utils__udf_binary_to_int_large_number.493e3262c4", "test.livequery_base.test_utils__udf_evm_decode_log.84691b80d2", "test.livequery_base.test_utils__udf_int_to_binary.d833da9e2e", "test.livequery_base.test_utils__udf_int_to_binary_large_number.5d7360105e", "test.livequery_base.test_utils__udf_urlencode_array_1.7986cadf5c", "test.livequery_base.test_utils__udf_urlencode_array_2.38e8c0c341", "test.livequery_base.test_utils__udf_urlencode_array_array.9cb7c99c99", "test.livequery_base.test_utils__udf_urlencode_array_false_1.99efd6dd89", "test.livequery_base.test_utils__udf_urlencode_array_false_2.ee64ed1c8f", "test.livequery_base.test_utils__udf_urlencode_array_false_array.40ad1041f0", "test.livequery_base.test_utils__udf_urlencode_array_false_space.3b0c76787c", "test.livequery_base.test_utils__udf_urlencode_array_false_special.a99ce4744f", "test.livequery_base.test_utils__udf_urlencode_array_space.36db5e9d03", "test.livequery_base.test_utils__udf_urlencode_array_special.1e95f13cf6", "test.livequery_base.test_utils__udf_urlencode_array_true_1.4b277c2056", "test.livequery_base.test_utils__udf_urlencode_array_true_2.2a5d911cd5", "test.livequery_base.test_utils__udf_urlencode_array_true_array.d77b856f93", "test.livequery_base.test_utils__udf_urlencode_array_true_space.86721ff4c6", "test.livequery_base.test_utils__udf_urlencode_array_true_special.6bc759dae6", "test.livequery_base.test_utils__udf_urlencode_dict_1.4143f28231", "test.livequery_base.test_utils__udf_urlencode_dict_2.63c38fd132", "test.livequery_base.test_utils__udf_urlencode_dict_array.8619cd1854", "test.livequery_base.test_utils__udf_urlencode_dict_false_1.b361ab7392", "test.livequery_base.test_utils__udf_urlencode_dict_false_2.dea792bb27", "test.livequery_base.test_utils__udf_urlencode_dict_false_array.4892af33ef", "test.livequery_base.test_utils__udf_urlencode_dict_false_space.76c5107ff8", "test.livequery_base.test_utils__udf_urlencode_dict_false_special.03dea2520f", "test.livequery_base.test_utils__udf_urlencode_dict_space.76152bfecc", "test.livequery_base.test_utils__udf_urlencode_dict_special.0500e3683b", "test.livequery_base.test_utils__udf_urlencode_dict_true_1.fdf94a3552", "test.livequery_base.test_utils__udf_urlencode_dict_true_2.e6c560e798", "test.livequery_base.test_utils__udf_urlencode_dict_true_array.12987dd02c", "test.livequery_base.test_utils__udf_urlencode_dict_true_space.cf1ebd5f66", "test.livequery_base.test_utils__udf_urlencode_dict_true_special.2505297d48"], "model.livequery_base.live": ["model.livequery_base.live__allow_list", "test.livequery_base.test__live_udf_api_post_data_array.f30e6de8c8", "test.livequery_base.test__live_udf_api_post_data_object.208f9d5456", "test.livequery_base.test__live_udf_api_post_data_string.e2159319bb"], "model.livequery_base._utils": ["model.livequery_base.live", "model.livequery_base.utils", "test.livequery_base.test___utils_udf_introspect.79bd27a18b"], "analysis.livequery_base.test_functions_py": [], "analysis.livequery_base.test_functions": [], "analysis.livequery_base.test_create_or_drop_function_from_config": [], "seed.livequery_base.live__verified_api_endpoints": [], "operation.livequery_base.livequery_base-on-run-start-0": [], "operation.livequery_base.livequery_base-on-run-end-0": [], "operation.dbt_constraints.dbt_constraints-on-run-end-0": [], "test.maya_models.not_null_silver__transfer_events_BLOCK_TIMESTAMP.1ff60425a6": [], "test.maya_models.not_null_silver__transfer_events_ASSET.4d061223da": [], "test.maya_models.not_null_silver__transfer_events_AMOUNT_E8.4a22457c1d": [], "test.maya_models.not_null_silver__transfer_events_FROM_ADDRESS.199be5d0bb": [], "test.maya_models.not_null_silver__transfer_events_TO_ADDRESS.3db72ea291": [], "test.maya_models.not_null_silver__validator_request_leave_events_EVENT_ID.b55c332547": [], "test.maya_models.not_null_silver__validator_request_leave_events_TX_ID.e98479bb26": [], "test.maya_models.not_null_silver__validator_request_leave_events_FROM_ADDRESS.209d28d48f": [], "test.maya_models.not_null_silver__validator_request_leave_events_NODE_ADDRESS.c91207bb4e": [], "test.maya_models.not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP.290714d793": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__validator_request_leave_events_EVENT_ID__TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__NODE_ADDRESS.90d08ddaee": [], "test.maya_models.not_null_silver__refund_events_TX_ID.d818e4a9c0": [], "test.maya_models.not_null_silver__refund_events_BLOCKCHAIN.377143648d": [], "test.maya_models.not_null_silver__refund_events_FROM_ADDRESS.95dd9f9c95": [], "test.maya_models.not_null_silver__refund_events_TO_ADDRESS.2fda85c5dd": [], "test.maya_models.not_null_silver__refund_events_ASSET.8d91917f0d": [], "test.maya_models.not_null_silver__refund_events_ASSET_E8.2e099ee072": [], "test.maya_models.not_null_silver__refund_events_ASSET_2ND_E8.f8450d1bd5": [], "test.maya_models.not_null_silver__refund_events_CODE.fee514c705": [], "test.maya_models.not_null_silver__refund_events_REASON.080b9527d1": [], "test.maya_models.not_null_silver__refund_events_BLOCK_TIMESTAMP.60c1f10234": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__refund_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__ASSET_2ND__MEMO__CODE__REASON__BLOCK_TIMESTAMP__EVENT_ID.bfb7525b50": [], "test.maya_models.not_null_silver__liquidity_actions_BLOCK_TIMESTAMP.ff2d2892a0": [], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__liquidity_actions_BLOCK_TIMESTAMP__day__1.20722a4e9a": [], "test.maya_models.not_null_silver__liquidity_actions_BLOCK_ID.39dcd6abaa": [], "test.maya_models.not_null_silver__liquidity_actions_LP_ACTION.c249d79d62": [], "test.maya_models.not_null_silver__liquidity_actions_POOL_NAME.3ad71b8145": [], "test.maya_models.not_null_silver__liquidity_actions_cacao_AMOUNT.fad92cc503": [], "test.maya_models.not_null_silver__liquidity_actions_cacao_AMOUNT_USD.4f2702f843": [], "test.maya_models.not_null_silver__liquidity_actions_ASSET_AMOUNT.9620d465a9": [], "test.maya_models.not_null_silver__liquidity_actions_STAKE_UNITS.689ec0ada5": [], "test.maya_models.not_null_silver__total_value_locked_DAY.5d7ba86e85": [], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_value_locked_DAY__day__2.40cc6ac950": [], "test.maya_models.not_null_silver__total_value_locked_TOTAL_VALUE_POOLED.ca339c528a": [], "test.maya_models.not_null_silver__total_value_locked_TOTAL_VALUE_BONDED.6df7fe839f": [], "test.maya_models.not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED.32714bbc40": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__total_value_locked_DAY.156a4d804a": [], "test.maya_models.not_null_silver__update_node_account_status_events_NODE_ADDRESS.2462678a83": [], "test.maya_models.not_null_silver__update_node_account_status_events_CURRENT_STATUS.e8417a26f7": [], "test.maya_models.not_null_silver__update_node_account_status_events_FORMER_STATUS.a863f18a99": [], "test.maya_models.not_null_silver__update_node_account_status_events_BLOCK_TIMESTAMP.f7cd76f13b": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__update_node_account_status_events_NODE_ADDRESS__CURRENT_STATUS__FORMER_STATUS__BLOCK_TIMESTAMP__EVENT_ID.a1b6af9de0": [], "test.maya_models.not_null_silver__bond_events_BLOCK_TIMESTAMP.b9485030e0": [], "test.maya_models.not_null_silver__bond_events_TX_ID.d18467b918": [], "test.maya_models.not_null_silver__bond_events_ASSET_E8.2bc5c2e174": [], "test.maya_models.not_null_silver__bond_events_BOND_TYPE.598bb69e8e": [], "test.maya_models.not_null_silver__bond_events_E8.c19384976b": [], "test.maya_models.not_null_silver__pool_block_fees_DAY.ecfb240ac6": [], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_fees_DAY__day__2.ece5c1920a": [], "test.maya_models.not_null_silver__pool_block_fees_POOL_NAME.f126e2294d": [], "test.maya_models.not_null_silver__pool_block_fees_REWARDS.5b1d8b2e19": [], "test.maya_models.not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_cacao.f8aaa086a0": [], "test.maya_models.not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES.b890f32362": [], "test.maya_models.not_null_silver__pool_block_fees_cacao_LIQUIDITY_FEES.d6bd4f1894": [], "test.maya_models.not_null_silver__pool_block_fees_EARNINGS.78b1e80755": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pool_block_fees_DAY__POOL_NAME.bd55b36cef": [], "test.maya_models.not_null_silver__rewards_events_BLOCK_TIMESTAMP.9c9ab7fca9": [], "test.maya_models.not_null_silver__rewards_events_BOND_E8.7e5ede5d73": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__rewards_events_BLOCK_TIMESTAMP.b923b50047": [], "test.maya_models.not_null_silver__swap_events_TX_ID.ba927b5821": [], "test.maya_models.not_null_silver__swap_events_BLOCKCHAIN.46d45dd5fc": [], "test.maya_models.not_null_silver__swap_events_FROM_ADDRESS.06e1df5a46": [], "test.maya_models.not_null_silver__swap_events_TO_ADDRESS.3c473194d8": [], "test.maya_models.not_null_silver__swap_events_FROM_ASSET.cfbedd6f2a": [], "test.maya_models.not_null_silver__swap_events_FROM_E8.74389cdde1": [], "test.maya_models.not_null_silver__swap_events_TO_ASSET.2a903da825": [], "test.maya_models.not_null_silver__swap_events_TO_E8.5ad719c657": [], "test.maya_models.not_null_silver__swap_events_MEMO.29e2c5dd27": [], "test.maya_models.not_null_silver__swap_events_POOL_NAME.e529db3476": [], "test.maya_models.not_null_silver__swap_events_TO_E8_MIN.d4667fb218": [], "test.maya_models.not_null_silver__swap_events_SWAP_SLIP_BP.61c1b2db2f": [], "test.maya_models.not_null_silver__swap_events_LIQ_FEE_E8.3403a5a47e": [], "test.maya_models.not_null_silver__swap_events_LIQ_FEE_IN_CACAO_E8.8d242c34b0": [], "test.maya_models.not_null_silver__swap_events__DIRECTION.910c1bf98a": [], "test.maya_models.not_null_silver__swap_events_BLOCK_TIMESTAMP.a57ee76fa3": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__swap_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__FROM_ASSET__FROM_E8__TO_ASSET__TO_E8__MEMO__POOL_NAME__TO_E8_MIN__SWAP_SLIP_BP__LIQ_FEE_E8__LIQ_FEE_IN_CACAO_E8___DIRECTION__BLOCK_TIMESTAMP__EVENT_ID.6b4a3b623f": [], "test.maya_models.not_null_silver__swaps_BLOCK_ID.85d35d8cd4": [], "test.maya_models.not_null_silver__swaps_BLOCK_TIMESTAMP_DATE.57ccf41e0a": [], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_BLOCK_TIMESTAMP_DATE__day__2.d8a8588da7": [], "test.maya_models.not_null_silver__swaps_TX_ID.429c1bdd9e": [], "test.maya_models.not_null_silver__swaps_BLOCKCHAIN.704d8b1b68": [], "test.maya_models.not_null_silver__swaps_POOL_NAME.8d3cfe0652": [], "test.maya_models.not_null_silver__swaps_FROM_ADDRESS.247c2a81d9": [], "test.maya_models.not_null_silver__swaps_TO_POOL_ADDRESS.eec1cbbccd": [], "test.maya_models.not_null_silver__swaps_FROM_ASSET.2503f2d93d": [], "test.maya_models.not_null_silver__swaps_TO_ASSET.d9705bc2c4": [], "test.maya_models.not_null_silver__swaps_FROM_AMOUNT.a2d756c197": [], "test.maya_models.not_null_silver__swaps_TO_AMOUNT.db49c788b2": [], "test.maya_models.not_null_silver__swaps_MIN_TO_AMOUNT.75770dfa8f": [], "test.maya_models.not_null_silver__swaps_FROM_AMOUNT_USD.78ab9ab5ae": [], "test.maya_models.not_null_silver__swaps_TO_AMOUNT_USD.f7a4de00a3": [], "test.maya_models.not_null_silver__swaps_TO_AMOUNT_MIN_USD.cc63ea20d5": [], "test.maya_models.not_null_silver__swaps_SWAP_SLIP_BP.049ffdaa3d": [], "test.maya_models.not_null_silver__swaps_LIQ_FEE_cacao.545480628b": [], "test.maya_models.not_null_silver__swaps_LIQ_FEE_cacao_USD.1a59fb77e9": [], "test.maya_models.not_null_silver__swaps_LIQ_FEE_ASSET.3ab6185469": [], "test.maya_models.not_null_silver__swaps_LIQ_FEE_ASSET_USD.542bee191c": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__swaps_BLOCK_ID__TX_ID__POOL_NAME__FROM_ADDRESS__TO_POOL_ADDRESS__FROM_ASSET__TO_ASSET__NATIVE_TO_ADDRESS__FROM_AMOUNT__TO_AMOUNT.aa735861a8": [], "test.maya_models.not_null_silver__fee_events_BLOCK_TIMESTAMP.c40fd33f4a": [], "test.maya_models.not_null_silver__fee_events_TX_ID.bfb2bd0eb8": [], "test.maya_models.not_null_silver__fee_events_ASSET.3832e5408e": [], "test.maya_models.not_null_silver__fee_events_POOL_DEDUCT.3a131f1475": [], "test.maya_models.not_null_silver__fee_events_ASSET_E8.0ae7bb759e": [], "test.maya_models.not_null_silver__add_events_TX_ID.3e7dfb5274": [], "test.maya_models.not_null_silver__add_events_FROM_ADDRESS.c11c449394": [], "test.maya_models.not_null_silver__add_events_TO_ADDRESS.ee57bfcd57": [], "test.maya_models.not_null_silver__add_events_ASSET_E8.49cc46d9aa": [], "test.maya_models.not_null_silver__add_events_MEMO.111566b9b2": [], "test.maya_models.not_null_silver__add_events_cacao_E8.9839039ade": [], "test.maya_models.not_null_silver__add_events_POOL_NAME.66d963165a": [], "test.maya_models.not_null_silver__add_events_BLOCK_TIMESTAMP.00d2f77a19": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__add_events_EVENT_ID__TX_ID__BLOCKCHAIN__POOL_NAME__FROM_ADDRESS__TO_ADDRESS__MEMO.ba16b70ba9": [], "test.maya_models.not_null_silver__block_rewards_DAY.202d1b684a": [], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_rewards_DAY__day__2.c5edb01bcd": [], "test.maya_models.not_null_silver__block_rewards_LIQUIDITY_FEE.0d49408c2f": [], "test.maya_models.not_null_silver__block_rewards_BLOCK_REWARDS.1424b5c928": [], "test.maya_models.not_null_silver__block_rewards_EARNINGS.cc83b753f9": [], "test.maya_models.not_null_silver__block_rewards_BONDING_EARNINGS.46eaa4df77": [], "test.maya_models.not_null_silver__block_rewards_LIQUIDITY_EARNINGS.61a45ddd0e": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__block_rewards_DAY.62cb5ef71d": [], "test.maya_models.not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP.17e9062fd9": [], "test.maya_models.not_null_silver__pool_balance_change_events_ASSET.fe12efdf7a": [], "test.maya_models.not_null_silver__pool_balance_change_events_CACAO_AMOUNT.612b63c529": [], "test.maya_models.not_null_silver__pool_balance_change_events_CACAO_ADD.5b7cd349b8": [], "test.maya_models.not_null_silver__pool_balance_change_events_ASSET_AMOUNT.c610565710": [], "test.maya_models.not_null_silver__pool_balance_change_events_ASSET_ADD.ca42123793": [], "test.maya_models.not_null_silver__pool_balance_change_events_REASON.cc5900d926": [], "test.maya_models.not_null_silver__outbound_events_BLOCKCHAIN.65ee27c62d": [], "test.maya_models.not_null_silver__outbound_events_FROM_ADDRESS.50d56a9b55": [], "test.maya_models.not_null_silver__outbound_events_TO_ADDRESS.48297fe87a": [], "test.maya_models.not_null_silver__outbound_events_ASSET.0d7a3cb9ee": [], "test.maya_models.not_null_silver__outbound_events_ASSET_E8.e28187620c": [], "test.maya_models.not_null_silver__outbound_events_MEMO.88f8ed52e8": [], "test.maya_models.not_null_silver__outbound_events_IN_TX.6b2f2fb6dc": [], "test.maya_models.not_null_silver__outbound_events_BLOCK_TIMESTAMP.95d579ffd3": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__outbound_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__IN_TX__BLOCK_TIMESTAMP__EVENT_ID.4205fd70e7": [], "test.maya_models.not_null_silver__daily_tvl_DAY.b4b5f55703": [], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_tvl_DAY__day__2.852820090f": [], "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED.681d912d91": [], "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD.87301e85c3": [], "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED.0fa0211531": [], "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD.6132803dfb": [], "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED.8b27efa4f5": [], "test.maya_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD.14a3029246": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY.dc405aa093": [], "test.maya_models.not_null_silver__daily_earnings_DAY.507c4965f2": [], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_earnings_DAY__day__2.439dcce651": [], "test.maya_models.not_null_silver__daily_earnings_LIQUIDITY_FEES.f7387c05a8": [], "test.maya_models.not_null_silver__daily_earnings_LIQUIDITY_FEES_USD.cab6f63899": [], "test.maya_models.not_null_silver__daily_earnings_BLOCK_REWARDS.425ab37b25": [], "test.maya_models.not_null_silver__daily_earnings_BLOCK_REWARDS_USD.ea664e5f41": [], "test.maya_models.not_null_silver__daily_earnings_TOTAL_EARNINGS.ccc7cfc3fb": [], "test.maya_models.not_null_silver__daily_earnings_TOTAL_EARNINGS_USD.3fd52ad085": [], "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES.32ed3a19df": [], "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD.4cb99a589c": [], "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS.6073eca3d0": [], "test.maya_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD.7172cf23ad": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__daily_earnings_DAY.5ba256d244": [], "test.maya_models.not_null_silver__daily_pool_stats_DAY.1fc2ebda22": [], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_pool_stats_DAY__day__2.57bf32999f": [], "test.maya_models.not_null_silver__daily_pool_stats_POOL_NAME.65d2c5c182": [], "test.maya_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS.e8287959c7": [], "test.maya_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD.03e77f1a19": [], "test.maya_models.not_null_silver__daily_pool_stats_ASSET_LIQUIDITY.c39639a01a": [], "test.maya_models.not_null_silver__daily_pool_stats_ASSET_PRICE.1404d1ca43": [], "test.maya_models.not_null_silver__daily_pool_stats_ASSET_PRICE_USD.43269ee26c": [], "test.maya_models.not_null_silver__daily_pool_stats_cacao_LIQUIDITY.09de9215b3": [], "test.maya_models.not_null_silver__daily_pool_stats_cacao_PRICE.dbd669288c": [], "test.maya_models.not_null_silver__daily_pool_stats_cacao_PRICE_USD.e340e04f34": [], "test.maya_models.not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT.8ad59930c0": [], "test.maya_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY.6894fa8392": [], "test.maya_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD.2667955ead": [], "test.maya_models.not_null_silver__daily_pool_stats_ADD_cacao_LIQUIDITY_USD.4061945e18": [], "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_COUNT.44ef41bdfd": [], "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY.87edc02d31": [], "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD.fd07f09d47": [], "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_cacao_LIQUIDITY.71885f6e08": [], "test.maya_models.not_null_silver__daily_pool_stats_WITHDRAW_cacao_LIQUIDITY_USD.9816b8ad37": [], "test.maya_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID.b751810329": [], "test.maya_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD.bd460521d5": [], "test.maya_models.not_null_silver__daily_pool_stats_AVERAGE_SLIP.8d606cbfae": [], "test.maya_models.not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP.cf8b4755a7": [], "test.maya_models.not_null_silver__daily_pool_stats_TO_cacao_AVERAGE_SLIP.70fc8fc61f": [], "test.maya_models.not_null_silver__daily_pool_stats_SWAP_COUNT.ed3ad68953": [], "test.maya_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT.366a142cfd": [], "test.maya_models.not_null_silver__daily_pool_stats_TO_cacao_SWAP_COUNT.3ff1620fff": [], "test.maya_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_cacao.5ebb701e40": [], "test.maya_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_cacao_USD.95397f1143": [], "test.maya_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME.475255ccb5": [], "test.maya_models.not_null_silver__daily_pool_stats_TO_cacao_SWAP_VOLUME.edee77e991": [], "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_cacao.af0178ad49": [], "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD.ef71577e45": [], "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES.e8298a5287": [], "test.maya_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_cacao_FEES.635f330f09": [], "test.maya_models.not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT.c70ad54d24": [], "test.maya_models.not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT.38ba7212c2": [], "test.maya_models.not_null_silver__daily_pool_stats_LIQUIDITY_UNITS.71283b6ef9": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__daily_pool_stats_DAY__POOL_NAME.66912a355d": [], "test.maya_models.not_null_silver__failed_deposit_messages_AMOUNT_E8.9331d6135c": [], "test.maya_models.not_null_silver__failed_deposit_messages_ASSET.1b88575223": [], "test.maya_models.not_null_silver__failed_deposit_messages_FROM_ADDRESS.f300bfa3ee": [], "test.maya_models.not_null_silver__failed_deposit_messages_TX_ID.96bf8221ba": [], "test.maya_models.not_null_silver__failed_deposit_messages_EVENT_ID.8c685c70e8": [], "test.maya_models.not_null_silver__failed_deposit_messages_BLOCK_TIMESTAMP.68750ec9c1": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__failed_deposit_messages_EVENT_ID.f82d89db78": [], "test.maya_models.not_null_silver__withdraw_events_TX_ID.b23e83e2df": [], "test.maya_models.not_null_silver__withdraw_events_BLOCKCHAIN.2a184325c3": [], "test.maya_models.not_null_silver__withdraw_events_FROM_ADDRESS.221980d7cb": [], "test.maya_models.not_null_silver__withdraw_events_TO_ADDRESS.7500c7f147": [], "test.maya_models.not_null_silver__withdraw_events_ASSET.ea07249536": [], "test.maya_models.not_null_silver__withdraw_events_ASSET_E8.faae5c4b97": [], "test.maya_models.not_null_silver__withdraw_events_EMIT_ASSET_E8.dc3f62c561": [], "test.maya_models.not_null_silver__withdraw_events_EMIT_cacao_E8.7f717e247c": [], "test.maya_models.not_null_silver__withdraw_events_MEMO.0237304635": [], "test.maya_models.not_null_silver__withdraw_events_POOL_NAME.f200904b8c": [], "test.maya_models.not_null_silver__withdraw_events_STAKE_UNITS.602d35eb7a": [], "test.maya_models.not_null_silver__withdraw_events_BASIS_POINTS.a18baacaeb": [], "test.maya_models.not_null_silver__withdraw_events_ASYMMETRY.5e0af14a3f": [], "test.maya_models.not_null_silver__withdraw_events_IMP_LOSS_PROTECTION_E8.3f9dd7135b": [], "test.maya_models.not_null_silver__withdraw_events__EMIT_ASSET_IN_cacao_E8.02d525bd2d": [], "test.maya_models.not_null_silver__withdraw_events_BLOCK_TIMESTAMP.7a02200069": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__withdraw_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__POOL_NAME__BLOCK_TIMESTAMP__EVENT_ID.0ddc8ceed7": [], "test.maya_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": [], "test.maya_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c": [], "test.maya_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c": [], "test.maya_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c": [], "test.maya_models.not_null_silver__transfers_cacao_AMOUNT.fc29e27e26": [], "test.maya_models.not_null_silver__transfers_cacao_AMOUNT_USD.518cddefe8": [], "test.maya_models.not_null_silver__block_pool_depths_BLOCK_TIMESTAMP.d45c965914": [], "test.maya_models.not_null_silver__block_pool_depths_POOL_NAME.6b5899c602": [], "test.maya_models.not_null_silver__block_pool_depths_ASSET_E8.aacfa8eedf": [], "test.maya_models.not_null_silver__block_pool_depths_CACAO_E8.6ea6c27fb2": [], "test.maya_models.not_null_silver__block_pool_depths_SYNTH_E8.4ac67d8c72": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__block_pool_depths_BLOCK_TIMESTAMP__POOL_NAME.b5ab31baa3": [], "test.maya_models.not_null_silver__pool_block_statistics_DAY.e1d1716d58": [], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_statistics_DAY__day__2.56faaa8dbf": [], "test.maya_models.not_null_silver__pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME.d13b4e223c": [], "test.maya_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT.a6468ef5dd": [], "test.maya_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME.8c96da03e7": [], "test.maya_models.not_null_silver__pool_block_statistics_ADD_cacao_LIQUIDITY_VOLUME.d205951804": [], "test.maya_models.not_null_silver__pool_block_statistics_ASSET.e2a9d555b4": [], "test.maya_models.not_null_silver__pool_block_statistics_ASSET_DEPTH.afecafb5a1": [], "test.maya_models.not_null_silver__pool_block_statistics_ASSET_PRICE.13060f5529": [], "test.maya_models.not_null_silver__pool_block_statistics_ASSET_PRICE_USD.d58add8c57": [], "test.maya_models.not_null_silver__pool_block_statistics_AVERAGE_SLIP.0dd0338788": [], "test.maya_models.not_null_silver__pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID.de64fea0f1": [], "test.maya_models.not_null_silver__pool_block_statistics_cacao_DEPTH.e194b1e7f1": [], "test.maya_models.not_null_silver__pool_block_statistics_STATUS.12571911dc": [], "test.maya_models.not_null_silver__pool_block_statistics_SWAP_COUNT.d16cc64040": [], "test.maya_models.not_null_silver__pool_block_statistics_SWAP_VOLUME.4d59da2017": [], "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP.616ea124ef": [], "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_COUNT.686e56b6a2": [], "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_FEES.4243fd1291": [], "test.maya_models.not_null_silver__pool_block_statistics_TO_ASSET_VOLUME.a7619cb0c1": [], "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_AVERAGE_SLIP.3ec16dcf5b": [], "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_COUNT.b9826d563a": [], "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_FEES.b88c364faa": [], "test.maya_models.not_null_silver__pool_block_statistics_TO_cacao_VOLUME.eddc6586ac": [], "test.maya_models.not_null_silver__pool_block_statistics_TOTALFEES.cb447c44c8": [], "test.maya_models.not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT.e21371b8b6": [], "test.maya_models.not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT.f58c3b5939": [], "test.maya_models.not_null_silver__pool_block_statistics_UNITS.1c3ee9d2a0": [], "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME.8109e4b0cb": [], "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_COUNT.5fcea77d8b": [], "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_cacao_VOLUME.e852869cf9": [], "test.maya_models.not_null_silver__pool_block_statistics_WITHDRAW_VOLUME.7c44597ab7": [], "test.maya_models.not_null_silver__pool_block_statistics_TOTAL_STAKE.acfd31062e": [], "test.maya_models.not_null_silver__pool_block_statistics_DEPTH_PRODUCT.10ec4d6762": [], "test.maya_models.not_null_silver__pool_block_statistics_SYNTH_UNITS.d34b8ef943": [], "test.maya_models.not_null_silver__pool_block_statistics_POOL_UNITS.a9fd8a4a48": [], "test.maya_models.not_null_silver__pool_block_statistics_LIQUIDITY_UNIT_VALUE_INDEX.2961093934": [], "test.maya_models.not_null_silver__pool_block_statistics_PREV_LIQUIDITY_UNIT_VALUE_INDEX.a33c024362": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pool_block_statistics_DAY__ASSET.aa179a7a3e": [], "test.maya_models.not_null_silver__prices_BLOCK_ID.b3347041fc": [], "test.maya_models.not_null_silver__prices_BLOCK_TIMESTAMP.d245b83d4f": [], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_BLOCK_TIMESTAMP__day__1.00281f997e": [], "test.maya_models.not_null_silver__prices_PRICE_cacao_ASSET.2443bbba18": [], "test.maya_models.not_null_silver__prices_PRICE_ASSET_cacao.8241728751": [], "test.maya_models.not_null_silver__prices_ASSET_USD.a900d8c697": [], "test.maya_models.not_null_silver__prices_cacao_USD.fb9aeff69a": [], "test.maya_models.not_null_silver__prices_POOL_NAME.7eacc16a03": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__prices_BLOCK_ID__POOL_NAME.7a2931d6eb": [], "test.maya_models.not_null_silver__pending_liquidity_events_POOL_NAME.5e22402fb9": [], "test.maya_models.not_null_silver__pending_liquidity_events_ASSET_E8.c201915269": [], "test.maya_models.not_null_silver__pending_liquidity_events_CACAO_ADDRESS.871aaa4926": [], "test.maya_models.not_null_silver__pending_liquidity_events_CACAO_E8.857d5c83f2": [], "test.maya_models.not_null_silver__pending_liquidity_events_PENDING_TYPE.98039831a1": [], "test.maya_models.not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP.ab766ea5ff": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pending_liquidity_events_EVENT_ID__ASSET_ADDRESS__CACAO_ADDRESS.188b780819": [], "test.maya_models.not_null_silver__total_block_rewards_BLOCK_TIMESTAMP.7d7b639434": [], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_block_rewards_BLOCK_TIMESTAMP__day__1.8b65eead55": [], "test.maya_models.not_null_silver__total_block_rewards_BLOCK_ID.8619b81300": [], "test.maya_models.not_null_silver__total_block_rewards_REWARD_ENTITY.06013c60c2": [], "test.maya_models.not_null_silver__total_block_rewards_cacao_AMOUNT.991c1821ee": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__total_block_rewards_BLOCK_ID__REWARD_ENTITY.23ceb96a43": [], "test.maya_models.not_null_silver__gas_events_BLOCK_TIMESTAMP.88c6e43d24": [], "test.maya_models.not_null_silver__gas_events_ASSET.59ad7ccacd": [], "test.maya_models.not_null_silver__gas_events_CACAO_E8.4dad242a6b": [], "test.maya_models.not_null_silver__gas_events_TX_COUNT.a45fc07260": [], "test.maya_models.not_null_silver__gas_events_ASSET_E8.2072d4ce77": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__gas_events_EVENT_ID__ASSET__BLOCK_TIMESTAMP.b0baea926f": [], "test.maya_models.not_null_silver__pool_block_balances_BLOCK_TIMESTAMP.9d9432e579": [], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_balances_BLOCK_TIMESTAMP__day__1.06ec2e6c79": [], "test.maya_models.not_null_silver__pool_block_balances_BLOCK_ID.6a3b314f7c": [], "test.maya_models.not_null_silver__pool_block_balances_POOL_NAME.95fecffc4b": [], "test.maya_models.not_null_silver__pool_block_balances_cacao_AMOUNT.a4ce75ab63": [], "test.maya_models.not_null_silver__pool_block_balances_cacao_AMOUNT_USD.d6dbe01d1f": [], "test.maya_models.not_null_silver__pool_block_balances_ASSET_AMOUNT.69087d909b": [], "test.maya_models.not_null_silver__pool_block_balances_ASSET_AMOUNT_USD.eedbf84e66": [], "test.maya_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT.6394f07310": [], "test.maya_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD.e507c3e553": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__pool_block_balances_BLOCK_ID__POOL_NAME.db3d915190": [], "test.maya_models.not_null_silver__active_vault_events_BLOCK_TIMESTAMP.bfcca60868": [], "test.maya_models.not_null_silver__active_vault_events_ADD_ASGARD_ADDR.cd001c3c13": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__active_vault_events_EVENT_ID__BLOCK_TIMESTAMP__ADD_ASGARD_ADDR.f7fa9e1978": [], "test.maya_models.not_null_silver__cacao_price_CACAO_PRICE_E8.9e3d0f25c9": [], "test.maya_models.not_null_silver__cacao_price_BLOCK_TIMESTAMP.70949f9fc4": [], "test.maya_models.not_null_silver__streamling_swap_details_events_TX_ID.8949f66cf6": [], "test.maya_models.not_null_silver__streamling_swap_details_events_INTERVAL.1071875126": [], "test.maya_models.not_null_silver__streamling_swap_details_events_quantity.fd5461e50b": [], "test.maya_models.not_null_silver__streamling_swap_details_events_COUNT.12c52bff4c": [], "test.maya_models.not_null_silver__streamling_swap_details_events_last_height.e19319cce2": [], "test.maya_models.not_null_silver__streamling_swap_details_events_deposit_asset.910fc757bd": [], "test.maya_models.not_null_silver__streamling_swap_details_events_deposit_e8.be8b643427": [], "test.maya_models.not_null_silver__streamling_swap_details_events_in_asset.a79e30ae3f": [], "test.maya_models.not_null_silver__streamling_swap_details_events_in_e8.a0acf84a1f": [], "test.maya_models.not_null_silver__streamling_swap_details_events_out_asset.4e10bc70d0": [], "test.maya_models.not_null_silver__streamling_swap_details_events_out_e8.3869542c15": [], "test.maya_models.not_null_silver__streamling_swap_details_events_event_id.84d056a572": [], "test.maya_models.not_null_silver__streamling_swap_details_events_block_timestamp.2889dd87d2": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__streamling_swap_details_events_EVENT_ID.9d2418d597": [], "test.maya_models.not_null_silver__block_log_TIMESTAMP.211bc1ece9": [], "test.maya_models.not_null_silver__block_log_HEIGHT.e9a4d0156c": [], "test.maya_models.not_null_silver__block_log_HASH.832559848d": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__block_log_HEIGHT__TIMESTAMP__HASH__AGG_STATE.ba5ad4e27e": [], "test.maya_models.not_null_silver__send_messages_AMOUNT_E8.104c5a7c7e": [], "test.maya_models.not_null_silver__send_messages_ASSET.94814200c0": [], "test.maya_models.not_null_silver__send_messages_FROM_ADDRESS.cd61a44284": [], "test.maya_models.not_null_silver__send_messages_TO_ADDRESS.21baa8f940": [], "test.maya_models.not_null_silver__send_messages_TX_ID.4845b0765f": [], "test.maya_models.not_null_silver__send_messages_EVENT_ID.32349d2e99": [], "test.maya_models.not_null_silver__send_messages_BLOCK_TIMESTAMP.e97a44bf3a": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__send_messages_EVENT_ID.cf7796cd5e": [], "test.maya_models.not_null_silver__stake_events_POOL_NAME.341d5d5927": [], "test.maya_models.not_null_silver__stake_events_ASSET_E8.23fed0c3e9": [], "test.maya_models.not_null_silver__stake_events_STAKE_UNITS.71ce8d8f55": [], "test.maya_models.not_null_silver__stake_events_CACAO_E8.3fb99bec11": [], "test.maya_models.not_null_silver__stake_events__ASSET_IN_CACAO_E8.93d05d9743": [], "test.maya_models.not_null_silver__stake_events_BLOCK_TIMESTAMP.99273b28bf": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__stake_events_POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__STAKE_UNITS__CACAO_TX_ID__CACAO_ADDRESS__BLOCK_TIMESTAMP__EVENT_ID.e0af54f8ef": [], "test.maya_models.not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP.b2bee0a774": [], "test.maya_models.not_null_silver__rewards_event_entries_CACAO_E8.cb93b74b1a": [], "test.maya_models.not_null_silver__rewards_event_entries_POOL_NAME.714768eae5": [], "test.maya_models.dbt_utils_unique_combination_of_columns_silver__rewards_event_entries_BLOCK_TIMESTAMP__POOL_NAME__EVENT_ID.08efcdc427": [], "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID.f1690ca9f9": [], "test.maya_models.unique_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID.9f4f6034c6": [], "test.maya_models.not_null_core__fact_mayaname_change_events_BLOCK_TIMESTAMP.9ce56f203c": [], "test.maya_models.negative_one_core__fact_mayaname_change_events_DIM_BLOCK_ID.b8b82e83de": [], "test.maya_models.dbt_constraints_primary_key_core__fact_mayaname_change_events_FACT_MAYANAME_CHANGE_EVENTS_ID.67404a158e": [], "test.maya_models.dbt_constraints_foreign_key_core__fact_mayaname_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cc1edff2ff": [], "test.maya_models.dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID.3b69086dc7": [], "test.maya_models.not_null_core__dim_block_BLOCK_ID.4093a445bc": [], "test.maya_models.not_null_core__dim_block_BLOCK_TIMESTAMP.0e822266b8": [], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1.412ac293c7": [], "test.maya_models.not_null_core__dim_block_BLOCK_DATE.fcae0dfd62": [], "test.maya_models.not_null_core__dim_block_BLOCK_HOUR.4bdf258b00": [], "test.maya_models.not_null_core__dim_block_BLOCK_WEEK.bd31abb003": [], "test.maya_models.not_null_core__dim_block_TIMESTAMP.2e8fff01ed": [], "test.maya_models.not_null_core__dim_block_HASH.b08299a937": [], "test.maya_models.dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.6c2c5b98b3": [], "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b834b16336": [], "test.maya_models.unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b97c8780e8": [], "test.maya_models.not_null_core__fact_transfer_events_BLOCK_TIMESTAMP.307906b318": [], "test.maya_models.negative_one_core__fact_transfer_events_DIM_BLOCK_ID.2e128858c5": [], "test.maya_models.not_null_core__fact_transfer_events_FROM_ADDRESS.2e1a952935": [], "test.maya_models.not_null_core__fact_transfer_events_TO_ADDRESS.14f29de988": [], "test.maya_models.not_null_core__fact_transfer_events_ASSET.bacb47e2e3": [], "test.maya_models.not_null_core__fact_transfer_events_AMOUNT_E8.4fe1565b1c": [], "test.maya_models.dbt_constraints_primary_key_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.2d391ee070": [], "test.maya_models.dbt_constraints_foreign_key_core__fact_transfer_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.3478d94d61": [], "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.ae85001246": [], "test.maya_models.unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.449f05e794": [], "test.maya_models.not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP.5ba3385f5b": [], "test.maya_models.negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID.f97f1b5336": [], "test.maya_models.dbt_constraints_primary_key_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.9f1768474c": [], "test.maya_models.dbt_constraints_foreign_key_core__fact_set_mimir_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f0eb017ef2": [], "test.maya_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID.7e9e26b3be": [], "test.maya_models.unique_core__fact_transfers_FACT_TRANSFERS_ID.385cd38e6c": [], "test.maya_models.not_null_core__fact_transfers_BLOCK_TIMESTAMP.bdf9b015dd": [], "test.maya_models.negative_one_core__fact_transfers_DIM_BLOCK_ID.09484decc3": [], "test.maya_models.not_null_core__fact_transfers_FROM_ADDRESS.b75e3a345a": [], "test.maya_models.not_null_core__fact_transfers_TO_ADDRESS.b8db4a5a70": [], "test.maya_models.not_null_core__fact_transfers_ASSET.77d44cdd84": [], "test.maya_models.not_null_core__fact_transfers_cacao_AMOUNT.37b422cd3d": [], "test.maya_models.not_null_core__fact_transfers_cacao_AMOUNT_USD.ebd0803995": [], "test.maya_models.dbt_constraints_primary_key_core__fact_transfers_FACT_TRANSFERS_ID.0e37c8cbc3": [], "test.maya_models.dbt_constraints_foreign_key_core__fact_transfers_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e0e628ae42": [], "test.maya_models.dbt_expectations_expect_column_to_exist_price__fact_cacao_price_FACT_cacao_PRICE_ID.f9b7879357": [], "test.maya_models.unique_price__fact_cacao_price_FACT_cacao_PRICE_ID.0e01ec76f4": [], "test.maya_models.not_null_price__fact_cacao_price_BLOCK_TIMESTAMP.bb1afdc573": [], "test.maya_models.negative_one_price__fact_cacao_price_DIM_BLOCK_ID.76c72bb6e6": [], "test.maya_models.dbt_constraints_primary_key_price__fact_cacao_price_FACT_cacao_PRICE_ID.c5f3967993": [], "test.maya_models.dbt_constraints_foreign_key_price__fact_cacao_price_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.86ae6c3419": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID.50d38af79b": [], "test.maya_models.unique_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID.d77d5d9d53": [], "test.maya_models.not_null_defi__fact_streamling_swap_details_events_BLOCK_TIMESTAMP.5598932a8c": [], "test.maya_models.negative_one_defi__fact_streamling_swap_details_events_DIM_BLOCK_ID.51fbe7f43e": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_streamling_swap_details_events_FACT_STREAMLING_SWAP_DETAILS_EVENTS_ID.731c12e564": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_streamling_swap_details_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1d5bc115b2": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.16f98389c1": [], "test.maya_models.unique_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.d1b9a47336": [], "test.maya_models.not_null_defi__fact_inactive_vault_events_BLOCK_TIMESTAMP.f697396e3b": [], "test.maya_models.negative_one_defi__fact_inactive_vault_events_DIM_BLOCK_ID.5429b32093": [], "test.maya_models.not_null_defi__fact_inactive_vault_events_ADD_ASGARD_ADDRESS.76e93119e7": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.0d615f85a1": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_inactive_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.52206550a8": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_bond_events_FACT_BOND_EVENTS_ID.a5f50df30f": [], "test.maya_models.unique_defi__fact_bond_events_FACT_BOND_EVENTS_ID.8280804d98": [], "test.maya_models.not_null_defi__fact_bond_events_BLOCK_TIMESTAMP.ca66b0639c": [], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__fact_bond_events_BLOCK_TIMESTAMP__day__4.a72035b010": [], "test.maya_models.negative_one_defi__fact_bond_events_DIM_BLOCK_ID.b035c08edd": [], "test.maya_models.not_null_defi__fact_bond_events_TX_ID.2f9aabd8d8": [], "test.maya_models.not_null_defi__fact_bond_events_BLOCKCHAIN.cf9fb111ab": [], "test.maya_models.not_null_defi__fact_bond_events_FROM_ADDRESS.d44d5b061a": [], "test.maya_models.not_null_defi__fact_bond_events_TO_ADDRESS.fcaf91ad33": [], "test.maya_models.not_null_defi__fact_bond_events_ASSET_E8.2a4a2e8c40": [], "test.maya_models.not_null_defi__fact_bond_events_MEMO.bd8692f383": [], "test.maya_models.not_null_defi__fact_bond_events_bond_type.544f931184": [], "test.maya_models.not_null_defi__fact_bond_events_E8.7f6d200479": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_bond_events_FACT_BOND_EVENTS_ID.54da2fbbeb": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_bond_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.54ca49d7f9": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID.72b7656211": [], "test.maya_models.unique_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID.1194862d02": [], "test.maya_models.not_null_defi__fact_rewards_events_BLOCK_TIMESTAMP.60668786c2": [], "test.maya_models.negative_one_defi__fact_rewards_events_DIM_BLOCK_ID.8645c1eaa1": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_rewards_events_FACT_REWARDS_EVENTS_ID.a30d4540ea": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_rewards_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e2e57eb147": [], "test.maya_models.not_null_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID.98d9a7a40e": [], "test.maya_models.unique_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID.0695d1704a": [], "test.maya_models.not_null_defi__fact_failed_deposit_messages_BLOCK_TIMESTAMP.df465b93f7": [], "test.maya_models.negative_one_defi__fact_failed_deposit_messages_DIM_BLOCK_ID.1a15b7f7ea": [], "test.maya_models.not_null_defi__fact_failed_deposit_messages_AMOUNT_E8.b99a38df0a": [], "test.maya_models.not_null_defi__fact_failed_deposit_messages_ASSET.9698d44bd6": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_failed_deposit_messages_FACT_FAILED_DEPOSIT_MESSAGES_ID.5222579419": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_failed_deposit_messages_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ae79fc665a": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.ea9e1f3b9b": [], "test.maya_models.unique_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.59e4ff0377": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.a0f8192d8b": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.774a6e2a92": [], "test.maya_models.unique_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.955bf5f1be": [], "test.maya_models.not_null_defi__fact_update_node_account_status_events_BLOCK_TIMESTAMP.2e391b047b": [], "test.maya_models.negative_one_defi__fact_update_node_account_status_events_DIM_BLOCK_ID.2668c31a3f": [], "test.maya_models.not_null_defi__fact_update_node_account_status_events_FORMER_STATUS.b4bb08ccb0": [], "test.maya_models.not_null_defi__fact_update_node_account_status_events_CURRENT_STATUS.d76b33c0c7": [], "test.maya_models.not_null_defi__fact_update_node_account_status_events_NODE_ADDRESS.13852b9c2e": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.e4286d8c42": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_update_node_account_status_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ff3ca4dfef": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.d2ddaebdfc": [], "test.maya_models.unique_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.a9f6a259b3": [], "test.maya_models.not_null_defi__fact_pool_balance_change_events_BLOCK_TIMESTAMP.fd61518b64": [], "test.maya_models.negative_one_defi__fact_pool_balance_change_events_DIM_BLOCK_ID.8cc70ad2c3": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.797e263c54": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_balance_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1c20c73d64": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.de667c6ed6": [], "test.maya_models.unique_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.ee55d40c08": [], "test.maya_models.not_null_defi__fact_pool_block_fees_DAY.5196d903a4": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.356350731a": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.4e969deb63": [], "test.maya_models.unique_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.1b0a6fbdd6": [], "test.maya_models.not_null_defi__fact_daily_earnings_DAY.3ecfd9b0ee": [], "test.maya_models.unique_defi__fact_daily_earnings_DAY.35299fa0f2": [], "test.maya_models.not_null_defi__fact_daily_earnings_LIQUIDITY_FEES.d5cf335416": [], "test.maya_models.not_null_defi__fact_daily_earnings_LIQUIDITY_FEES_USD.82b7149fd9": [], "test.maya_models.not_null_defi__fact_daily_earnings_BLOCK_REWARDS.b126b4b314": [], "test.maya_models.not_null_defi__fact_daily_earnings_BLOCK_REWARDS_USD.107e54d6bb": [], "test.maya_models.not_null_defi__fact_daily_earnings_TOTAL_EARNINGS.66fbf6afc0": [], "test.maya_models.not_null_defi__fact_daily_earnings_TOTAL_EARNINGS_USD.efaf0622ac": [], "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_NODES.147efdb208": [], "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_NODES_USD.05d14a2dcd": [], "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_POOLS.fbeff5d134": [], "test.maya_models.not_null_defi__fact_daily_earnings_EARNINGS_TO_POOLS_USD.39dea1c2bb": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.405108b886": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID.1f26ff2cfb": [], "test.maya_models.unique_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID.651eb6dfe4": [], "test.maya_models.not_null_defi__fact_withdraw_events_BLOCK_TIMESTAMP.e2e54ceae9": [], "test.maya_models.negative_one_defi__fact_withdraw_events_DIM_BLOCK_ID.5b55c401d8": [], "test.maya_models.not_null_defi__fact_withdraw_events_TX_ID.e7d3e3beef": [], "test.maya_models.not_null_defi__fact_withdraw_events_BLOCKCHAIN.5f12fcea5a": [], "test.maya_models.not_null_defi__fact_withdraw_events_FROM_ADDRESS.fb0510a262": [], "test.maya_models.not_null_defi__fact_withdraw_events_TO_ADDRESS.f4aadfb9bb": [], "test.maya_models.not_null_defi__fact_withdraw_events_ASSET_E8.d0be5ed1a4": [], "test.maya_models.not_null_defi__fact_withdraw_events_EMIT_ASSET_E8.5c62cbff98": [], "test.maya_models.not_null_defi__fact_withdraw_events_EMIT_cacao_E8.4ce153e62c": [], "test.maya_models.not_null_defi__fact_withdraw_events_MEMO.670b33bd28": [], "test.maya_models.not_null_defi__fact_withdraw_events_POOL_NAME.7816baa3be": [], "test.maya_models.not_null_defi__fact_withdraw_events_STAKE_UNITS.4940151023": [], "test.maya_models.not_null_defi__fact_withdraw_events_BASIS_POINTS.a01b4d3168": [], "test.maya_models.not_null_defi__fact_withdraw_events_ASYMMETRY.27f7ecb3e2": [], "test.maya_models.not_null_defi__fact_withdraw_events_IMP_LOSS_PROTECTION_E8.b061882c2b": [], "test.maya_models.not_null_defi__fact_withdraw_events__EMIT_ASSET_IN_cacao_E8.75c9544a1e": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_withdraw_events_FACT_WITHDRAW_EVENTS_ID.2abb09d2d0": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_withdraw_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c30b39b2dd": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID.e8a3be544e": [], "test.maya_models.unique_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID.275b663f75": [], "test.maya_models.not_null_defi__fact_swaps_events_BLOCK_TIMESTAMP.152a60ae05": [], "test.maya_models.negative_one_defi__fact_swaps_events_DIM_BLOCK_ID.32d0060a7d": [], "test.maya_models.not_null_defi__fact_swaps_events_TX_ID.769f694135": [], "test.maya_models.not_null_defi__fact_swaps_events_BLOCKCHAIN.a7bfef9416": [], "test.maya_models.not_null_defi__fact_swaps_events_FROM_ADDRESS.f438dceaed": [], "test.maya_models.not_null_defi__fact_swaps_events_TO_ADDRESS.0fab10cf01": [], "test.maya_models.not_null_defi__fact_swaps_events_FROM_ASSET.d1bd099314": [], "test.maya_models.not_null_defi__fact_swaps_events_FROM_E8.e5316aeab9": [], "test.maya_models.not_null_defi__fact_swaps_events_TO_ASSET.d10e7cab75": [], "test.maya_models.not_null_defi__fact_swaps_events_TO_E8.ba0a8505a0": [], "test.maya_models.not_null_defi__fact_swaps_events_MEMO.e737d61e21": [], "test.maya_models.not_null_defi__fact_swaps_events_POOL_NAME.47817b05e7": [], "test.maya_models.not_null_defi__fact_swaps_events_TO_E8_MIN.f257749398": [], "test.maya_models.not_null_defi__fact_swaps_events_SWAP_SLIP_BP.83363ed081": [], "test.maya_models.not_null_defi__fact_swaps_events_LIQ_FEE_E8.8ab774160b": [], "test.maya_models.not_null_defi__fact_swaps_events_LIQ_FEE_IN_cacao_E8.c9dad22e6c": [], "test.maya_models.not_null_defi__fact_swaps_events__DIRECTION.6ab3030ca2": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_swaps_events_FACT_SWAP_EVENTS_ID.bd110e1762": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_swaps_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.6efb37c54a": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID.f26dd135e0": [], "test.maya_models.unique_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID.d5d72bba07": [], "test.maya_models.not_null_defi__fact_block_rewards_DAY.7fa63155fc": [], "test.maya_models.unique_defi__fact_block_rewards_DAY.6963e728a5": [], "test.maya_models.not_null_defi__fact_block_rewards_LIQUIDITY_FEE.dbbf334ba1": [], "test.maya_models.not_null_defi__fact_block_rewards_BLOCK_REWARDS.a92137996e": [], "test.maya_models.not_null_defi__fact_block_rewards_EARNINGS.6734c56332": [], "test.maya_models.not_null_defi__fact_block_rewards_BONDING_EARNINGS.21f4a2d782": [], "test.maya_models.not_null_defi__fact_block_rewards_LIQUIDITY_EARNINGS.6e711b1025": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_block_rewards_FACT_BLOCK_REWARDS_ID.6fb653e543": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.c429e7e114": [], "test.maya_models.unique_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.7ce8b4da38": [], "test.maya_models.not_null_defi__fact_outbound_events_BLOCK_TIMESTAMP.ba5c7a7372": [], "test.maya_models.negative_one_defi__fact_outbound_events_DIM_BLOCK_ID.c4dc4c2e5b": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.56a7c40cd9": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_outbound_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2aa6dc45d7": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.baab1e87b2": [], "test.maya_models.unique_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.6793a43b6b": [], "test.maya_models.not_null_defi__fact_pending_liquidity_events_BLOCK_TIMESTAMP.c703e15c52": [], "test.maya_models.negative_one_defi__fact_pending_liquidity_events_DIM_BLOCK_ID.ab0617b986": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.6a659e8b12": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_pending_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ca2e4eee90": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_gas_events_FACT_GAS_EVENTS_ID.bb047375bf": [], "test.maya_models.unique_defi__fact_gas_events_FACT_GAS_EVENTS_ID.7c04247747": [], "test.maya_models.not_null_defi__fact_gas_events_BLOCK_TIMESTAMP.18a33f6f4d": [], "test.maya_models.negative_one_defi__fact_gas_events_DIM_BLOCK_ID.2593523927": [], "test.maya_models.not_null_defi__fact_gas_events_ASSET.29cdba3bea": [], "test.maya_models.not_null_defi__fact_gas_events_ASSET_E8.07160f6bba": [], "test.maya_models.not_null_defi__fact_gas_events_cacao_E8.fcef1e99c1": [], "test.maya_models.not_null_defi__fact_gas_events_TX_COUNT.b58d3dfec7": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_gas_events_FACT_GAS_EVENTS_ID.c0ced5df45": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_gas_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.d2b43cd8e7": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_refund_events_FACT_REFUND_EVENTS_ID.e60a9cc49f": [], "test.maya_models.unique_defi__fact_refund_events_FACT_REFUND_EVENTS_ID.a016111425": [], "test.maya_models.not_null_defi__fact_refund_events_BLOCK_TIMESTAMP.34d8aabf5a": [], "test.maya_models.negative_one_defi__fact_refund_events_DIM_BLOCK_ID.3c1c234ab9": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_refund_events_FACT_REFUND_EVENTS_ID.c03b0b240a": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_refund_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.46380231ed": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID.f75bda8238": [], "test.maya_models.unique_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID.750a1a0be6": [], "test.maya_models.not_null_defi__fact_bond_actions_BLOCK_TIMESTAMP.7a24d4f258": [], "test.maya_models.dbt_expectations_expect_row_values_to_have_recent_data_defi__fact_bond_actions_BLOCK_TIMESTAMP__day__4.fe7e158561": [], "test.maya_models.negative_one_defi__fact_bond_actions_DIM_BLOCK_ID.615245fbb3": [], "test.maya_models.not_null_defi__fact_bond_actions_TX_ID.5e9f18d02d": [], "test.maya_models.not_null_defi__fact_bond_actions_BLOCKCHAIN.96b4414efb": [], "test.maya_models.not_null_defi__fact_bond_actions_FROM_ADDRESS.d62d81333f": [], "test.maya_models.not_null_defi__fact_bond_actions_TO_ADDRESS.03e2a4ee17": [], "test.maya_models.not_null_defi__fact_bond_actions_bond_type.22b01f3b86": [], "test.maya_models.not_null_defi__fact_bond_actions_ASSET_AMOUNT.8de4adaec4": [], "test.maya_models.not_null_defi__fact_bond_actions_ASSET_USD.4eb112cfa0": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_bond_actions_FACT_BOND_ACTIONS_ID.b04f02a38c": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_bond_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f00f5c0230": [], "test.maya_models.not_null_defi__fact_send_messages_FACT_SEND_MESSAGES_ID.da36ef8cad": [], "test.maya_models.not_null_defi__fact_send_messages_BLOCK_TIMESTAMP.aa6c02bd54": [], "test.maya_models.negative_one_defi__fact_send_messages_DIM_BLOCK_ID.c58daf7759": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_send_messages_FACT_SEND_MESSAGES_ID.8741e5d595": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_send_messages_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1adb347953": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.1e8f9391c2": [], "test.maya_models.unique_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.3c4c48acd9": [], "test.maya_models.not_null_defi__fact_liquidity_actions_BLOCK_TIMESTAMP.9a65b82adc": [], "test.maya_models.negative_one_defi__fact_liquidity_actions_DIM_BLOCK_ID.64fdcec13b": [], "test.maya_models.not_null_defi__fact_liquidity_actions_LP_ACTION.888ababa2b": [], "test.maya_models.not_null_defi__fact_liquidity_actions_POOL_NAME.798a435875": [], "test.maya_models.not_null_defi__fact_liquidity_actions_cacao_AMOUNT.69b767546b": [], "test.maya_models.not_null_defi__fact_liquidity_actions_cacao_AMOUNT_USD.5b994381e1": [], "test.maya_models.not_null_defi__fact_liquidity_actions_ASSET_AMOUNT.bcd1c6e65b": [], "test.maya_models.not_null_defi__fact_liquidity_actions_STAKE_UNITS.407cd789d6": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.127d2c721c": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_liquidity_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.608597a4f4": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.407d4f6cb6": [], "test.maya_models.unique_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.c9074e5b2a": [], "test.maya_models.not_null_defi__fact_pool_block_balances_BLOCK_TIMESTAMP.57a565d05f": [], "test.maya_models.negative_one_defi__fact_pool_block_balances_DIM_BLOCK_ID.2418ce23a3": [], "test.maya_models.not_null_defi__fact_pool_block_balances_POOL_NAME.05a1892218": [], "test.maya_models.not_null_defi__fact_pool_block_balances_cacao_AMOUNT.cb25b0b071": [], "test.maya_models.not_null_defi__fact_pool_block_balances_cacao_AMOUNT_USD.5db52684f2": [], "test.maya_models.not_null_defi__fact_pool_block_balances_ASSET_AMOUNT.4c11b2c4dc": [], "test.maya_models.not_null_defi__fact_pool_block_balances_SYNTH_AMOUNT.dd1d486159": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.24a399277f": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_block_balances_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.66031e6ec7": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.880e905612": [], "test.maya_models.unique_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.3aaa103dd9": [], "test.maya_models.not_null_defi__fact_active_vault_events_BLOCK_TIMESTAMP.4cc71715c7": [], "test.maya_models.negative_one_defi__fact_active_vault_events_DIM_BLOCK_ID.4a790deb55": [], "test.maya_models.not_null_defi__fact_active_vault_events_ADD_ASGARD_ADDR.2b058b6553": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.8da304f0fc": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_active_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.dc9110e090": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_pool_events_FACT_POOL_EVENTS_ID.9ebc09a3db": [], "test.maya_models.unique_defi__fact_pool_events_FACT_POOL_EVENTS_ID.a88bad6268": [], "test.maya_models.not_null_defi__fact_pool_events_BLOCK_TIMESTAMP.22275a664b": [], "test.maya_models.negative_one_defi__fact_pool_events_DIM_BLOCK_ID.5c5bf65270": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_pool_events_FACT_POOL_EVENTS_ID.d9300b6771": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_pool_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.111d8db3ee": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.23e51de8c7": [], "test.maya_models.unique_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.7c08aabdf6": [], "test.maya_models.not_null_defi__fact_total_value_locked_DAY.fe0da8741a": [], "test.maya_models.unique_defi__fact_total_value_locked_DAY.54d8e130aa": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.ac35fbd215": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.df35fa9fd3": [], "test.maya_models.unique_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.0e5e688f58": [], "test.maya_models.not_null_defi__fact_daily_pool_stats_DAY.134c4023bc": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.bd74e047c0": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_daily_tvl_FACT_DAILY_TVL_ID.1ae493b505": [], "test.maya_models.unique_defi__fact_daily_tvl_FACT_DAILY_TVL_ID.4720396096": [], "test.maya_models.not_null_defi__fact_daily_tvl_DAY.6793a4c86b": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_daily_tvl_FACT_DAILY_TVL_ID.f657fdd70c": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.60587db32e": [], "test.maya_models.unique_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.c1c1880829": [], "test.maya_models.not_null_defi__fact_rewards_event_entries_BLOCK_TIMESTAMP.390c2d3861": [], "test.maya_models.negative_one_defi__fact_rewards_event_entries_DIM_BLOCK_ID.ae74184dc0": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.797b705be0": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_rewards_event_entries_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f384372f38": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.908c6385f1": [], "test.maya_models.unique_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.97eb93b600": [], "test.maya_models.not_null_defi__fact_total_block_rewards_BLOCK_TIMESTAMP.b82d9032fc": [], "test.maya_models.negative_one_defi__fact_total_block_rewards_DIM_BLOCK_ID.875d3d7233": [], "test.maya_models.not_null_defi__fact_total_block_rewards_REWARD_ENTITY.3ee825413f": [], "test.maya_models.not_null_defi__fact_total_block_rewards_cacao_AMOUNT.b50618c8d2": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.1279348063": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_total_block_rewards_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.10797bc02d": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID.8a326356fc": [], "test.maya_models.unique_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID.276156f1e1": [], "test.maya_models.not_null_defi__fact_reserve_events_BLOCK_TIMESTAMP.2034989c09": [], "test.maya_models.negative_one_defi__fact_reserve_events_DIM_BLOCK_ID.f394603e35": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_reserve_events_FACT_RESERVE_EVENTS_ID.bc7c918b28": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_reserve_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.02187e1ac9": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID.a45d16f999": [], "test.maya_models.unique_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID.a983479ef3": [], "test.maya_models.not_null_defi__fact_slash_liquidity_events_BLOCK_TIMESTAMP.5b14c39cd8": [], "test.maya_models.negative_one_defi__fact_slash_liquidity_events_DIM_BLOCK_ID.0f21ab898d": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_slash_liquidity_events_FACT_SLASH_LIQUIDITY_EVENTS_ID.2b04027532": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_slash_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0acbf7ba85": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_stake_events_FACT_STAKE_EVENTS_ID.9b7786f345": [], "test.maya_models.unique_defi__fact_stake_events_FACT_STAKE_EVENTS_ID.235ec51a23": [], "test.maya_models.not_null_defi__fact_stake_events_BLOCK_TIMESTAMP.efe6e00a44": [], "test.maya_models.negative_one_defi__fact_stake_events_DIM_BLOCK_ID.7c0bfe48d7": [], "test.maya_models.not_null_defi__fact_stake_events_POOL_NAME.efc87f2e2f": [], "test.maya_models.not_null_defi__fact_stake_events_ASSET_E8.3ef47d7e7f": [], "test.maya_models.not_null_defi__fact_stake_events_STAKE_UNITS.7dd72be974": [], "test.maya_models.not_null_defi__fact_stake_events_cacao_E8.1c41c93867": [], "test.maya_models.not_null_defi__fact_stake_events__ASSET_IN_cacao_E8.4b8f2965f9": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_stake_events_FACT_STAKE_EVENTS_ID.aa005ffc15": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_stake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.59228e8edb": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FACT_SWAPS_ID.65b78c9b2b": [], "test.maya_models.unique_defi__fact_swaps_FACT_SWAPS_ID.ef29d48647": [], "test.maya_models.not_null_defi__fact_swaps_BLOCK_TIMESTAMP.075d054d65": [], "test.maya_models.negative_one_defi__fact_swaps_DIM_BLOCK_ID.a0b8b6777c": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_swaps_FACT_SWAPS_ID.9c12307bcb": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_swaps_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.6b212551fd": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_fee_events_FACT_FEE_EVENTS_ID.b1c98cbf26": [], "test.maya_models.unique_defi__fact_fee_events_FACT_FEE_EVENTS_ID.cbb6dfce5c": [], "test.maya_models.not_null_defi__fact_fee_events_BLOCK_TIMESTAMP.70a94fec54": [], "test.maya_models.negative_one_defi__fact_fee_events_DIM_BLOCK_ID.48e400d73b": [], "test.maya_models.not_null_defi__fact_fee_events_TX_ID.e74d21d77e": [], "test.maya_models.not_null_defi__fact_fee_events_ASSET.58dfc939f5": [], "test.maya_models.not_null_defi__fact_fee_events_POOL_DEDUCT.75679a84a7": [], "test.maya_models.not_null_defi__fact_fee_events_ASSET_E8.ec1824433c": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_fee_events_FACT_FEE_EVENTS_ID.4f9bb0aae9": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_fee_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7028a1c586": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_add_events_FACT_ADD_EVENTS_ID.dcfa45dc5c": [], "test.maya_models.unique_defi__fact_add_events_FACT_ADD_EVENTS_ID.f9bab79293": [], "test.maya_models.not_null_defi__fact_add_events_BLOCK_TIMESTAMP.06d09f2202": [], "test.maya_models.negative_one_defi__fact_add_events_DIM_BLOCK_ID.b6ac5d06b5": [], "test.maya_models.not_null_defi__fact_add_events_cacao_E8.980c31d51a": [], "test.maya_models.not_null_defi__fact_add_events_BLOCKCHAIN.00aaf6b4cf": [], "test.maya_models.not_null_defi__fact_add_events_ASSET_E8.366017cb0d": [], "test.maya_models.not_null_defi__fact_add_events_POOL_NAME.e418ec498a": [], "test.maya_models.not_null_defi__fact_add_events_MEMO.10fc5a9c70": [], "test.maya_models.not_null_defi__fact_add_events_TO_ADDRESS.5249804a36": [], "test.maya_models.not_null_defi__fact_add_events_FROM_ADDRESS.c69fd5096c": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_add_events_FACT_ADD_EVENTS_ID.e2c050e363": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_add_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.927064ee9c": [], "test.maya_models.dbt_expectations_expect_column_to_exist_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.b5bb9290e5": [], "test.maya_models.unique_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.d893b0b8a0": [], "test.maya_models.not_null_defi__fact_block_pool_depths_BLOCK_TIMESTAMP.289de889f0": [], "test.maya_models.negative_one_defi__fact_block_pool_depths_DIM_BLOCK_ID.5c18572103": [], "test.maya_models.not_null_defi__fact_block_pool_depths_cacao_E8.940c4df3e3": [], "test.maya_models.not_null_defi__fact_block_pool_depths_ASSET_E8.18864edf3b": [], "test.maya_models.not_null_defi__fact_block_pool_depths_SYNTH_E8.a148b6fdac": [], "test.maya_models.not_null_defi__fact_block_pool_depths_POOL_NAME.c9b3847f9a": [], "test.maya_models.dbt_constraints_primary_key_defi__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.516d84511a": [], "test.maya_models.dbt_constraints_foreign_key_defi__fact_block_pool_depths_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b693e5d66c": [], "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.5cc3f7cdc4": [], "test.maya_models.unique_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.8880e9c1e4": [], "test.maya_models.not_null_gov__fact_set_node_keys_events_BLOCK_TIMESTAMP.ebec22d08a": [], "test.maya_models.negative_one_gov__fact_set_node_keys_events_DIM_BLOCK_ID.e78644b2d2": [], "test.maya_models.dbt_constraints_primary_key_gov__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.8a3255067b": [], "test.maya_models.dbt_constraints_foreign_key_gov__fact_set_node_keys_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b1e2dcf0f1": [], "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_slash_points_FACT_SLASH_POINTS_ID.8d109c0e13": [], "test.maya_models.unique_gov__fact_slash_points_FACT_SLASH_POINTS_ID.209781dbb5": [], "test.maya_models.not_null_gov__fact_slash_points_BLOCK_TIMESTAMP.2399b1a318": [], "test.maya_models.negative_one_gov__fact_slash_points_DIM_BLOCK_ID.3e57f036d1": [], "test.maya_models.dbt_constraints_primary_key_gov__fact_slash_points_FACT_SLASH_POINTS_ID.dd103daf92": [], "test.maya_models.dbt_constraints_foreign_key_gov__fact_slash_points_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.ee65c78e29": [], "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.74e7f39f87": [], "test.maya_models.unique_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.5818fff587": [], "test.maya_models.not_null_gov__fact_new_node_events_BLOCK_TIMESTAMP.00db5f265e": [], "test.maya_models.negative_one_gov__fact_new_node_events_DIM_BLOCK_ID.7e9a4f4df8": [], "test.maya_models.not_null_gov__fact_new_node_events_NODE_ADDRESS.acfc5e9153": [], "test.maya_models.dbt_constraints_primary_key_gov__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.f1563548b6": [], "test.maya_models.dbt_constraints_foreign_key_gov__fact_new_node_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.db84a142ae": [], "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.d6b2eb9e82": [], "test.maya_models.unique_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.cf41247be9": [], "test.maya_models.not_null_gov__fact_slash_amounts_BLOCK_TIMESTAMP.df74c36c69": [], "test.maya_models.negative_one_gov__fact_slash_amounts_DIM_BLOCK_ID.24c3e556a0": [], "test.maya_models.dbt_constraints_primary_key_gov__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.11ef3a37b6": [], "test.maya_models.dbt_constraints_foreign_key_gov__fact_slash_amounts_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8100e32bac": [], "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.a23f25ab20": [], "test.maya_models.unique_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.b00d92c74c": [], "test.maya_models.not_null_gov__fact_set_version_events_BLOCK_TIMESTAMP.98b94bb2b0": [], "test.maya_models.negative_one_gov__fact_set_version_events_DIM_BLOCK_ID.219f154265": [], "test.maya_models.dbt_constraints_primary_key_gov__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.cd19861ffb": [], "test.maya_models.dbt_constraints_foreign_key_gov__fact_set_version_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f9e30bbb44": [], "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.ea06e8b3eb": [], "test.maya_models.unique_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.37fdb42c72": [], "test.maya_models.not_null_gov__fact_validator_request_leave_events_BLOCK_TIMESTAMP.28cd20e919": [], "test.maya_models.negative_one_gov__fact_validator_request_leave_events_DIM_BLOCK_ID.68c2b3f504": [], "test.maya_models.not_null_gov__fact_validator_request_leave_events_TX_ID.44237f576e": [], "test.maya_models.not_null_gov__fact_validator_request_leave_events_FROM_ADDRESS.fc1459d259": [], "test.maya_models.not_null_gov__fact_validator_request_leave_events_NODE_ADDRESS.85babe010a": [], "test.maya_models.dbt_constraints_primary_key_gov__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.0f41863c47": [], "test.maya_models.dbt_constraints_foreign_key_gov__fact_validator_request_leave_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7203fca5dd": [], "test.maya_models.dbt_expectations_expect_column_to_exist_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.ba1a7910fd": [], "test.maya_models.unique_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.036066cad1": [], "test.maya_models.not_null_gov__fact_set_ip_address_events_BLOCK_TIMESTAMP.462fe32242": [], "test.maya_models.negative_one_gov__fact_set_ip_address_events_DIM_BLOCK_ID.f2d9a1d444": [], "test.maya_models.dbt_constraints_primary_key_gov__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.2eb1ce9651": [], "test.maya_models.dbt_constraints_foreign_key_gov__fact_set_ip_address_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c760962472": [], "test.livequery_base.test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call.3395d64fdc": [], "test.livequery_base.test_utils__udf_urlencode_dict_true_1.fdf94a3552": [], "test.livequery_base.test_utils__udf_urlencode_dict_true_2.e6c560e798": [], "test.livequery_base.test_utils__udf_urlencode_dict_true_space.cf1ebd5f66": [], "test.livequery_base.test_utils__udf_urlencode_dict_true_special.2505297d48": [], "test.livequery_base.test_utils__udf_urlencode_dict_true_array.12987dd02c": [], "test.livequery_base.test_utils__udf_urlencode_dict_false_1.b361ab7392": [], "test.livequery_base.test_utils__udf_urlencode_dict_false_2.dea792bb27": [], "test.livequery_base.test_utils__udf_urlencode_dict_false_space.76c5107ff8": [], "test.livequery_base.test_utils__udf_urlencode_dict_false_special.03dea2520f": [], "test.livequery_base.test_utils__udf_urlencode_dict_false_array.4892af33ef": [], "test.livequery_base.test_utils__udf_urlencode_dict_1.4143f28231": [], "test.livequery_base.test_utils__udf_urlencode_dict_2.63c38fd132": [], "test.livequery_base.test_utils__udf_urlencode_dict_space.76152bfecc": [], "test.livequery_base.test_utils__udf_urlencode_dict_special.0500e3683b": [], "test.livequery_base.test_utils__udf_urlencode_dict_array.8619cd1854": [], "test.livequery_base.test_utils__udf_urlencode_array_true_1.4b277c2056": [], "test.livequery_base.test_utils__udf_urlencode_array_true_2.2a5d911cd5": [], "test.livequery_base.test_utils__udf_urlencode_array_true_space.86721ff4c6": [], "test.livequery_base.test_utils__udf_urlencode_array_true_special.6bc759dae6": [], "test.livequery_base.test_utils__udf_urlencode_array_true_array.d77b856f93": [], "test.livequery_base.test_utils__udf_urlencode_array_false_1.99efd6dd89": [], "test.livequery_base.test_utils__udf_urlencode_array_false_2.ee64ed1c8f": [], "test.livequery_base.test_utils__udf_urlencode_array_false_space.3b0c76787c": [], "test.livequery_base.test_utils__udf_urlencode_array_false_special.a99ce4744f": [], "test.livequery_base.test_utils__udf_urlencode_array_false_array.40ad1041f0": [], "test.livequery_base.test_utils__udf_urlencode_array_1.7986cadf5c": [], "test.livequery_base.test_utils__udf_urlencode_array_2.38e8c0c341": [], "test.livequery_base.test_utils__udf_urlencode_array_space.36db5e9d03": [], "test.livequery_base.test_utils__udf_urlencode_array_special.1e95f13cf6": [], "test.livequery_base.test_utils__udf_urlencode_array_array.9cb7c99c99": [], "test.livequery_base.test_utils__udf_int_to_binary.d833da9e2e": [], "test.livequery_base.test_utils__udf_int_to_binary_large_number.5d7360105e": [], "test.livequery_base.test_utils__udf_binary_to_int.ffcc7fc010": [], "test.livequery_base.test_utils__udf_binary_to_int_large_number.493e3262c4": [], "test.livequery_base.test_utils__udf_evm_decode_log.84691b80d2": [], "test.livequery_base.test_secrets__udf_register_secret.85444b4425": [], "test.livequery_base.test_secrets__udf_get_secret.1762e1eb69": [], "test.livequery_base.test_secrets__udf_get_secrets.898812e6e2": [], "test.livequery_base.test_secrets__udf_create_secret.d42bc02506": [], "test.livequery_base.test_secrets__udf_delete_secret.9f28745276": [], "test.livequery_base.test__live_udf_api_post_data_object.208f9d5456": [], "test.livequery_base.test__live_udf_api_post_data_array.f30e6de8c8": [], "test.livequery_base.test__live_udf_api_post_data_string.e2159319bb": [], "test.livequery_base.test___utils_udf_introspect.79bd27a18b": [], "source.maya_models.maya_midgard.midgard_active_vault_events": ["model.maya_models.bronze__active_vault_events"], "source.maya_models.maya_midgard.midgard_add_events": ["model.maya_models.bronze__add_events"], "source.maya_models.maya_midgard.midgard_block_log": ["model.maya_models.bronze__block_log"], "source.maya_models.maya_midgard.midgard_block_pool_depths": ["model.maya_models.bronze__block_pool_depths"], "source.maya_models.maya_midgard.midgard_bond_events": ["model.maya_models.bronze__bond_events"], "source.maya_models.maya_midgard.midgard_cacao_price": ["model.maya_models.bronze__cacao_price"], "source.maya_models.maya_midgard.midgard_constants": ["model.maya_models.bronze__constants"], "source.maya_models.maya_midgard.midgard_failed_deposit_messages": ["model.maya_models.bronze__failed_deposit_messages"], "source.maya_models.maya_midgard.midgard_fee_events": ["model.maya_models.bronze__fee_events"], "source.maya_models.maya_midgard.midgard_gas_events": ["model.maya_models.bronze__gas_events"], "source.maya_models.maya_midgard.midgard_inactive_vault_events": ["model.maya_models.bronze__inactive_vault_events"], "source.maya_models.maya_midgard.midgard_mayaname_change_events": ["model.maya_models.bronze__mayaname_change_events"], "source.maya_models.maya_midgard.midgard_new_node_events": ["model.maya_models.bronze__new_node_events"], "source.maya_models.maya_midgard.midgard_outbound_events": ["model.maya_models.bronze__outbound_events"], "source.maya_models.maya_midgard.midgard_pending_liquidity_events": ["model.maya_models.bronze__pending_liquidity_events"], "source.maya_models.maya_midgard.midgard_pool_balance_change_events": ["model.maya_models.bronze__pool_balance_change_events"], "source.maya_models.maya_midgard.midgard_pool_events": ["model.maya_models.bronze__pool_events"], "source.maya_models.maya_midgard.midgard_refund_events": ["model.maya_models.bronze__refund_events"], "source.maya_models.maya_midgard.midgard_reserve_events": ["model.maya_models.bronze__reserve_events"], "source.maya_models.maya_midgard.midgard_rewards_events": ["model.maya_models.bronze__rewards_events"], "source.maya_models.maya_midgard.midgard_rewards_event_entries": ["model.maya_models.bronze__rewards_event_entries"], "source.maya_models.maya_midgard.midgard_send_messages": ["model.maya_models.bronze__send_messages"], "source.maya_models.maya_midgard.midgard_set_ip_address_events": ["model.maya_models.bronze__set_ip_address_events"], "source.maya_models.maya_midgard.midgard_set_mimir_events": ["model.maya_models.bronze__set_mimir_events"], "source.maya_models.maya_midgard.midgard_set_node_keys_events": ["model.maya_models.bronze__set_node_keys_events"], "source.maya_models.maya_midgard.midgard_set_node_mimir_events": ["model.maya_models.bronze__set_node_mimir_events"], "source.maya_models.maya_midgard.midgard_set_version_events": ["model.maya_models.bronze__set_version_events"], "source.maya_models.maya_midgard.midgard_slash_events": ["model.maya_models.bronze__slash_events"], "source.maya_models.maya_midgard.midgard_slash_liquidity_events": ["model.maya_models.bronze__slash_liquidity_events"], "source.maya_models.maya_midgard.midgard_slash_points_events": ["model.maya_models.bronze__slash_points_events"], "source.maya_models.maya_midgard.midgard_stake_events": ["model.maya_models.bronze__stake_events"], "source.maya_models.maya_midgard.midgard_streaming_swap_details_events": ["model.maya_models.bronze__streamling_swap_details_events"], "source.maya_models.maya_midgard.midgard_swap_events": ["model.maya_models.bronze__swap_events"], "source.maya_models.maya_midgard.midgard_transfer_events": ["model.maya_models.bronze__transfer_events"], "source.maya_models.maya_midgard.midgard_update_node_account_status_events": ["model.maya_models.bronze__update_node_account_status_events"], "source.maya_models.maya_midgard.midgard_validator_request_leave_events": ["model.maya_models.bronze__validator_request_leave_events"], "source.maya_models.maya_midgard.midgard_withdraw_events": ["model.maya_models.bronze__withdraw_events"], "source.maya_models.crosschain.address_tags": [], "source.maya_models.crosschain.dim_dates": [], "source.maya_models.crosschain_silver.number_sequence": [], "source.maya_models.crosschain_silver.complete_native_prices": [], "source.maya_models.crosschain_silver.labels_combined": [], "source.livequery_base.crosschain.dim_date_hours": [], "source.livequery_base.crosschain.dim_contracts": [], "source.livequery_base.crosschain.dim_evm_event_abis": [], "source.livequery_base.ethereum_core.fact_event_logs": [], "source.livequery_base.ethereum_core.ez_decoded_event_logs": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}